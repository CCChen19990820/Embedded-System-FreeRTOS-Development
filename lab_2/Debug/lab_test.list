
lab_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08005964  08005964  00015964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ab0  08005ab0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005ab0  08005ab0  00015ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ab8  08005ab8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ab8  08005ab8  00015ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005abc  08005abc  00015abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005ac0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00012f34  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012fa8  20012fa8  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017cb1  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f08  00000000  00000000  00037d55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010c8  00000000  00000000  0003ac60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fc0  00000000  00000000  0003bd28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002305a  00000000  00000000  0003cce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013d69  00000000  00000000  0005fd42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3061  00000000  00000000  00073aab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00146b0c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000049d4  00000000  00000000  00146b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800594c 	.word	0x0800594c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800594c 	.word	0x0800594c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fc01 	bl	8000d84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f89b 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f92d 	bl	80007e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058a:	f000 f901 	bl	8000790 <MX_USART2_UART_Init>
//  BaseType_t xReturned;
  TaskHandle_t xHandle = NULL;
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN 2 */
  MsgQueue = xQueueCreate(1,sizeof(unsigned int));
 8000592:	2200      	movs	r2, #0
 8000594:	2104      	movs	r1, #4
 8000596:	2001      	movs	r0, #1
 8000598:	f002 fa6e 	bl	8002a78 <xQueueGenericCreate>
 800059c:	4603      	mov	r3, r0
 800059e:	4a17      	ldr	r2, [pc, #92]	; (80005fc <main+0x84>)
 80005a0:	6013      	str	r3, [r2, #0]

//  xTaskCreate(LEDTask_App,"LEDTask_App",128,NULL,1,&xHandle);
//  xTaskCreate(ButtonTask_App,"ButtonTask_App",128,NULL,1,&xHandle);

  xTaskCreate(TaskMonitor_App,"TaskMonitor_App",512,NULL,3,&xHandle);
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	2303      	movs	r3, #3
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	2300      	movs	r3, #0
 80005ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005b0:	4913      	ldr	r1, [pc, #76]	; (8000600 <main+0x88>)
 80005b2:	4814      	ldr	r0, [pc, #80]	; (8000604 <main+0x8c>)
 80005b4:	f002 fea4 	bl	8003300 <xTaskCreate>
  xTaskCreate(Red_LED_App,"Red_LED_App",128,NULL,1,&xHandle);
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	9301      	str	r3, [sp, #4]
 80005bc:	2301      	movs	r3, #1
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	2300      	movs	r3, #0
 80005c2:	2280      	movs	r2, #128	; 0x80
 80005c4:	4910      	ldr	r1, [pc, #64]	; (8000608 <main+0x90>)
 80005c6:	4811      	ldr	r0, [pc, #68]	; (800060c <main+0x94>)
 80005c8:	f002 fe9a 	bl	8003300 <xTaskCreate>
  xTaskCreate(Green_LED_App,"Green_LED_App",128,NULL,1,&xHandle);
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	9301      	str	r3, [sp, #4]
 80005d0:	2301      	movs	r3, #1
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	2300      	movs	r3, #0
 80005d6:	2280      	movs	r2, #128	; 0x80
 80005d8:	490d      	ldr	r1, [pc, #52]	; (8000610 <main+0x98>)
 80005da:	480e      	ldr	r0, [pc, #56]	; (8000614 <main+0x9c>)
 80005dc:	f002 fe90 	bl	8003300 <xTaskCreate>
  xTaskCreate(Delay_App,"Delay_App",128,NULL,14,&xHandle);
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	9301      	str	r3, [sp, #4]
 80005e4:	230e      	movs	r3, #14
 80005e6:	9300      	str	r3, [sp, #0]
 80005e8:	2300      	movs	r3, #0
 80005ea:	2280      	movs	r2, #128	; 0x80
 80005ec:	490a      	ldr	r1, [pc, #40]	; (8000618 <main+0xa0>)
 80005ee:	480b      	ldr	r0, [pc, #44]	; (800061c <main+0xa4>)
 80005f0:	f002 fe86 	bl	8003300 <xTaskCreate>
  vTaskStartScheduler();
 80005f4:	f002 fff6 	bl	80035e4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <main+0x80>
 80005fa:	bf00      	nop
 80005fc:	20000090 	.word	0x20000090
 8000600:	08005964 	.word	0x08005964
 8000604:	08000621 	.word	0x08000621
 8000608:	08005974 	.word	0x08005974
 800060c:	08000639 	.word	0x08000639
 8000610:	08005980 	.word	0x08005980
 8000614:	08000665 	.word	0x08000665
 8000618:	08005990 	.word	0x08005990
 800061c:	08000691 	.word	0x08000691

08000620 <TaskMonitor_App>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void TaskMonitor_App(void *pvParameters){
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	for(;;){
		Taskmonitor();
 8000628:	f003 fd34 	bl	8004094 <Taskmonitor>
		vTaskDelay(1000);
 800062c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000630:	f002 ffa4 	bl	800357c <vTaskDelay>
		Taskmonitor();
 8000634:	e7f8      	b.n	8000628 <TaskMonitor_App+0x8>
	...

08000638 <Red_LED_App>:
	}
}

void Red_LED_App(void *pvParameters){
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	uint32_t Redtimer = 800;
 8000640:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000644:	60fb      	str	r3, [r7, #12]
	for(;;){
		HAL_GPIO_TogglePin(led_red_GPIO_Port,GPIO_PIN_14);
 8000646:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800064a:	4805      	ldr	r0, [pc, #20]	; (8000660 <Red_LED_App+0x28>)
 800064c:	f000 fe73 	bl	8001336 <HAL_GPIO_TogglePin>
		vTaskDelay(Redtimer);
 8000650:	68f8      	ldr	r0, [r7, #12]
 8000652:	f002 ff93 	bl	800357c <vTaskDelay>
		Redtimer+=1;
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	3301      	adds	r3, #1
 800065a:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_TogglePin(led_red_GPIO_Port,GPIO_PIN_14);
 800065c:	e7f3      	b.n	8000646 <Red_LED_App+0xe>
 800065e:	bf00      	nop
 8000660:	40020c00 	.word	0x40020c00

08000664 <Green_LED_App>:
	}
}

void Green_LED_App(void *pvParameters){
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	uint32_t Greentimer = 1000;
 800066c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000670:	60fb      	str	r3, [r7, #12]
	for(;;){
		HAL_GPIO_TogglePin(led_green_GPIO_Port,GPIO_PIN_12);
 8000672:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000676:	4805      	ldr	r0, [pc, #20]	; (800068c <Green_LED_App+0x28>)
 8000678:	f000 fe5d 	bl	8001336 <HAL_GPIO_TogglePin>
		vTaskDelay(Greentimer);
 800067c:	68f8      	ldr	r0, [r7, #12]
 800067e:	f002 ff7d 	bl	800357c <vTaskDelay>
		Greentimer+=2;
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	3302      	adds	r3, #2
 8000686:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_TogglePin(led_green_GPIO_Port,GPIO_PIN_12);
 8000688:	e7f3      	b.n	8000672 <Green_LED_App+0xe>
 800068a:	bf00      	nop
 800068c:	40020c00 	.word	0x40020c00

08000690 <Delay_App>:
	}
}

void Delay_App(void *pvParameters){
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	int delayflag=0;
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
	uint32_t delaytime;
	while(1){
		if(delayflag==0){
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d105      	bne.n	80006ae <Delay_App+0x1e>
			delaytime = 1000;
 80006a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a6:	60bb      	str	r3, [r7, #8]
			delayflag=1;
 80006a8:	2301      	movs	r3, #1
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	e002      	b.n	80006b4 <Delay_App+0x24>
		}else{
			delaytime=0xFFFFFFFF;
 80006ae:	f04f 33ff 	mov.w	r3, #4294967295
 80006b2:	60bb      	str	r3, [r7, #8]
		}
		vTaskDelay(delaytime);
 80006b4:	68b8      	ldr	r0, [r7, #8]
 80006b6:	f002 ff61 	bl	800357c <vTaskDelay>
		if(delayflag==0){
 80006ba:	e7ef      	b.n	800069c <Delay_App+0xc>

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b094      	sub	sp, #80	; 0x50
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 0320 	add.w	r3, r7, #32
 80006c6:	2230      	movs	r2, #48	; 0x30
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f004 fd16 	bl	80050fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e0:	2300      	movs	r3, #0
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	4b28      	ldr	r3, [pc, #160]	; (8000788 <SystemClock_Config+0xcc>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	4a27      	ldr	r2, [pc, #156]	; (8000788 <SystemClock_Config+0xcc>)
 80006ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ee:	6413      	str	r3, [r2, #64]	; 0x40
 80006f0:	4b25      	ldr	r3, [pc, #148]	; (8000788 <SystemClock_Config+0xcc>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006fc:	2300      	movs	r3, #0
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	4b22      	ldr	r3, [pc, #136]	; (800078c <SystemClock_Config+0xd0>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a21      	ldr	r2, [pc, #132]	; (800078c <SystemClock_Config+0xd0>)
 8000706:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	4b1f      	ldr	r3, [pc, #124]	; (800078c <SystemClock_Config+0xd0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000718:	2302      	movs	r3, #2
 800071a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071c:	2301      	movs	r3, #1
 800071e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000720:	2310      	movs	r3, #16
 8000722:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000724:	2302      	movs	r3, #2
 8000726:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000728:	2300      	movs	r3, #0
 800072a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800072c:	2308      	movs	r3, #8
 800072e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000730:	2332      	movs	r3, #50	; 0x32
 8000732:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000734:	2304      	movs	r3, #4
 8000736:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000738:	2307      	movs	r3, #7
 800073a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073c:	f107 0320 	add.w	r3, r7, #32
 8000740:	4618      	mov	r0, r3
 8000742:	f000 fe13 	bl	800136c <HAL_RCC_OscConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800074c:	f000 f9b8 	bl	8000ac0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000750:	230f      	movs	r3, #15
 8000752:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000754:	2302      	movs	r3, #2
 8000756:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800075c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000760:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000766:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f001 f874 	bl	800185c <HAL_RCC_ClockConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800077a:	f000 f9a1 	bl	8000ac0 <Error_Handler>
  }
}
 800077e:	bf00      	nop
 8000780:	3750      	adds	r7, #80	; 0x50
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40023800 	.word	0x40023800
 800078c:	40007000 	.word	0x40007000

08000790 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 8000796:	4a12      	ldr	r2, [pc, #72]	; (80007e0 <MX_USART2_UART_Init+0x50>)
 8000798:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 800079c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 80007b6:	220c      	movs	r2, #12
 80007b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 80007c8:	f001 fd24 	bl	8002214 <HAL_UART_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007d2:	f000 f975 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20012ec8 	.word	0x20012ec8
 80007e0:	40004400 	.word	0x40004400

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08c      	sub	sp, #48	; 0x30
 80007e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	61bb      	str	r3, [r7, #24]
 80007fe:	4ba1      	ldr	r3, [pc, #644]	; (8000a84 <MX_GPIO_Init+0x2a0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4aa0      	ldr	r2, [pc, #640]	; (8000a84 <MX_GPIO_Init+0x2a0>)
 8000804:	f043 0310 	orr.w	r3, r3, #16
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b9e      	ldr	r3, [pc, #632]	; (8000a84 <MX_GPIO_Init+0x2a0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0310 	and.w	r3, r3, #16
 8000812:	61bb      	str	r3, [r7, #24]
 8000814:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]
 800081a:	4b9a      	ldr	r3, [pc, #616]	; (8000a84 <MX_GPIO_Init+0x2a0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a99      	ldr	r2, [pc, #612]	; (8000a84 <MX_GPIO_Init+0x2a0>)
 8000820:	f043 0304 	orr.w	r3, r3, #4
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b97      	ldr	r3, [pc, #604]	; (8000a84 <MX_GPIO_Init+0x2a0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0304 	and.w	r3, r3, #4
 800082e:	617b      	str	r3, [r7, #20]
 8000830:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
 8000836:	4b93      	ldr	r3, [pc, #588]	; (8000a84 <MX_GPIO_Init+0x2a0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a92      	ldr	r2, [pc, #584]	; (8000a84 <MX_GPIO_Init+0x2a0>)
 800083c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b90      	ldr	r3, [pc, #576]	; (8000a84 <MX_GPIO_Init+0x2a0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	4b8c      	ldr	r3, [pc, #560]	; (8000a84 <MX_GPIO_Init+0x2a0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a8b      	ldr	r2, [pc, #556]	; (8000a84 <MX_GPIO_Init+0x2a0>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b89      	ldr	r3, [pc, #548]	; (8000a84 <MX_GPIO_Init+0x2a0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	4b85      	ldr	r3, [pc, #532]	; (8000a84 <MX_GPIO_Init+0x2a0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a84      	ldr	r2, [pc, #528]	; (8000a84 <MX_GPIO_Init+0x2a0>)
 8000874:	f043 0302 	orr.w	r3, r3, #2
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b82      	ldr	r3, [pc, #520]	; (8000a84 <MX_GPIO_Init+0x2a0>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0302 	and.w	r3, r3, #2
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	4b7e      	ldr	r3, [pc, #504]	; (8000a84 <MX_GPIO_Init+0x2a0>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a7d      	ldr	r2, [pc, #500]	; (8000a84 <MX_GPIO_Init+0x2a0>)
 8000890:	f043 0308 	orr.w	r3, r3, #8
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b7b      	ldr	r3, [pc, #492]	; (8000a84 <MX_GPIO_Init+0x2a0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0308 	and.w	r3, r3, #8
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2108      	movs	r1, #8
 80008a6:	4878      	ldr	r0, [pc, #480]	; (8000a88 <MX_GPIO_Init+0x2a4>)
 80008a8:	f000 fd2c 	bl	8001304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008ac:	2201      	movs	r2, #1
 80008ae:	2101      	movs	r1, #1
 80008b0:	4876      	ldr	r0, [pc, #472]	; (8000a8c <MX_GPIO_Init+0x2a8>)
 80008b2:	f000 fd27 	bl	8001304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, led_green_Pin|led_orange_Pin|led_red_Pin|led_blue_Pin
 80008b6:	2200      	movs	r2, #0
 80008b8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008bc:	4874      	ldr	r0, [pc, #464]	; (8000a90 <MX_GPIO_Init+0x2ac>)
 80008be:	f000 fd21 	bl	8001304 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008c2:	2308      	movs	r3, #8
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	486b      	ldr	r0, [pc, #428]	; (8000a88 <MX_GPIO_Init+0x2a4>)
 80008da:	f000 fb77 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008de:	2301      	movs	r3, #1
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e2:	2301      	movs	r3, #1
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	4865      	ldr	r0, [pc, #404]	; (8000a8c <MX_GPIO_Init+0x2a8>)
 80008f6:	f000 fb69 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008fa:	2308      	movs	r3, #8
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	2302      	movs	r3, #2
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800090a:	2305      	movs	r3, #5
 800090c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	485d      	ldr	r0, [pc, #372]	; (8000a8c <MX_GPIO_Init+0x2a8>)
 8000916:	f000 fb59 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_blue_Pin */
  GPIO_InitStruct.Pin = btn_blue_Pin;
 800091a:	2301      	movs	r3, #1
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091e:	2300      	movs	r3, #0
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(btn_blue_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	4859      	ldr	r0, [pc, #356]	; (8000a94 <MX_GPIO_Init+0x2b0>)
 800092e:	f000 fb4d 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000932:	2310      	movs	r3, #16
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000942:	2306      	movs	r3, #6
 8000944:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	4851      	ldr	r0, [pc, #324]	; (8000a94 <MX_GPIO_Init+0x2b0>)
 800094e:	f000 fb3d 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000952:	23e0      	movs	r3, #224	; 0xe0
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000962:	2305      	movs	r3, #5
 8000964:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	4849      	ldr	r0, [pc, #292]	; (8000a94 <MX_GPIO_Init+0x2b0>)
 800096e:	f000 fb2d 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000972:	2304      	movs	r3, #4
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000976:	2300      	movs	r3, #0
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	4844      	ldr	r0, [pc, #272]	; (8000a98 <MX_GPIO_Init+0x2b4>)
 8000986:	f000 fb21 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800098a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800098e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	2302      	movs	r3, #2
 8000992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800099c:	2305      	movs	r3, #5
 800099e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	483c      	ldr	r0, [pc, #240]	; (8000a98 <MX_GPIO_Init+0x2b4>)
 80009a8:	f000 fb10 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : led_green_Pin led_orange_Pin led_red_Pin led_blue_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = led_green_Pin|led_orange_Pin|led_red_Pin|led_blue_Pin
 80009ac:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009b0:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4832      	ldr	r0, [pc, #200]	; (8000a90 <MX_GPIO_Init+0x2ac>)
 80009c6:	f000 fb01 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009ca:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80009ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	2302      	movs	r3, #2
 80009d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009dc:	2306      	movs	r3, #6
 80009de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	4619      	mov	r1, r3
 80009e6:	4829      	ldr	r0, [pc, #164]	; (8000a8c <MX_GPIO_Init+0x2a8>)
 80009e8:	f000 faf0 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f2:	2300      	movs	r3, #0
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	4824      	ldr	r0, [pc, #144]	; (8000a94 <MX_GPIO_Init+0x2b0>)
 8000a02:	f000 fae3 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a06:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a18:	230a      	movs	r3, #10
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	4619      	mov	r1, r3
 8000a22:	481c      	ldr	r0, [pc, #112]	; (8000a94 <MX_GPIO_Init+0x2b0>)
 8000a24:	f000 fad2 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a28:	2320      	movs	r3, #32
 8000a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4815      	ldr	r0, [pc, #84]	; (8000a90 <MX_GPIO_Init+0x2ac>)
 8000a3c:	f000 fac6 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a40:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a46:	2312      	movs	r3, #18
 8000a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a52:	2304      	movs	r3, #4
 8000a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480e      	ldr	r0, [pc, #56]	; (8000a98 <MX_GPIO_Init+0x2b4>)
 8000a5e:	f000 fab5 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a62:	2302      	movs	r3, #2
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a66:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	4619      	mov	r1, r3
 8000a76:	4804      	ldr	r0, [pc, #16]	; (8000a88 <MX_GPIO_Init+0x2a4>)
 8000a78:	f000 faa8 	bl	8000fcc <HAL_GPIO_Init>

}
 8000a7c:	bf00      	nop
 8000a7e:	3730      	adds	r7, #48	; 0x30
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	40020800 	.word	0x40020800
 8000a90:	40020c00 	.word	0x40020c00
 8000a94:	40020000 	.word	0x40020000
 8000a98:	40020400 	.word	0x40020400

08000a9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a04      	ldr	r2, [pc, #16]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d101      	bne.n	8000ab2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aae:	f000 f98b 	bl	8000dc8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40001400 	.word	0x40001400

08000ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac4:	b672      	cpsid	i
}
 8000ac6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <Error_Handler+0x8>
	...

08000acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <HAL_MspInit+0x4c>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ada:	4a0f      	ldr	r2, [pc, #60]	; (8000b18 <HAL_MspInit+0x4c>)
 8000adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <HAL_MspInit+0x4c>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <HAL_MspInit+0x4c>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	4a08      	ldr	r2, [pc, #32]	; (8000b18 <HAL_MspInit+0x4c>)
 8000af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000afc:	6413      	str	r3, [r2, #64]	; 0x40
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_MspInit+0x4c>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800

08000b1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08a      	sub	sp, #40	; 0x28
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a19      	ldr	r2, [pc, #100]	; (8000ba0 <HAL_UART_MspInit+0x84>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d12b      	bne.n	8000b96 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]
 8000b42:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <HAL_UART_MspInit+0x88>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	4a17      	ldr	r2, [pc, #92]	; (8000ba4 <HAL_UART_MspInit+0x88>)
 8000b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4e:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <HAL_UART_MspInit+0x88>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <HAL_UART_MspInit+0x88>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a10      	ldr	r2, [pc, #64]	; (8000ba4 <HAL_UART_MspInit+0x88>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <HAL_UART_MspInit+0x88>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b76:	230c      	movs	r3, #12
 8000b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b82:	2303      	movs	r3, #3
 8000b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b86:	2307      	movs	r3, #7
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <HAL_UART_MspInit+0x8c>)
 8000b92:	f000 fa1b 	bl	8000fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b96:	bf00      	nop
 8000b98:	3728      	adds	r7, #40	; 0x28
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40004400 	.word	0x40004400
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40020000 	.word	0x40020000

08000bac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08c      	sub	sp, #48	; 0x30
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	2037      	movs	r0, #55	; 0x37
 8000bc2:	f000 f9d9 	bl	8000f78 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000bc6:	2037      	movs	r0, #55	; 0x37
 8000bc8:	f000 f9f2 	bl	8000fb0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <HAL_InitTick+0xa4>)
 8000bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd4:	4a1e      	ldr	r2, [pc, #120]	; (8000c50 <HAL_InitTick+0xa4>)
 8000bd6:	f043 0320 	orr.w	r3, r3, #32
 8000bda:	6413      	str	r3, [r2, #64]	; 0x40
 8000bdc:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <HAL_InitTick+0xa4>)
 8000bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be0:	f003 0320 	and.w	r3, r3, #32
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000be8:	f107 0210 	add.w	r2, r7, #16
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4611      	mov	r1, r2
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f001 f82e 	bl	8001c54 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000bf8:	f001 f804 	bl	8001c04 <HAL_RCC_GetPCLK1Freq>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c04:	4a13      	ldr	r2, [pc, #76]	; (8000c54 <HAL_InitTick+0xa8>)
 8000c06:	fba2 2303 	umull	r2, r3, r2, r3
 8000c0a:	0c9b      	lsrs	r3, r3, #18
 8000c0c:	3b01      	subs	r3, #1
 8000c0e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000c10:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <HAL_InitTick+0xac>)
 8000c12:	4a12      	ldr	r2, [pc, #72]	; (8000c5c <HAL_InitTick+0xb0>)
 8000c14:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <HAL_InitTick+0xac>)
 8000c18:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c1c:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000c1e:	4a0e      	ldr	r2, [pc, #56]	; (8000c58 <HAL_InitTick+0xac>)
 8000c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c22:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <HAL_InitTick+0xac>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <HAL_InitTick+0xac>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000c30:	4809      	ldr	r0, [pc, #36]	; (8000c58 <HAL_InitTick+0xac>)
 8000c32:	f001 f841 	bl	8001cb8 <HAL_TIM_Base_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d104      	bne.n	8000c46 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000c3c:	4806      	ldr	r0, [pc, #24]	; (8000c58 <HAL_InitTick+0xac>)
 8000c3e:	f001 f895 	bl	8001d6c <HAL_TIM_Base_Start_IT>
 8000c42:	4603      	mov	r3, r0
 8000c44:	e000      	b.n	8000c48 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3730      	adds	r7, #48	; 0x30
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40023800 	.word	0x40023800
 8000c54:	431bde83 	.word	0x431bde83
 8000c58:	20012f0c 	.word	0x20012f0c
 8000c5c:	40001400 	.word	0x40001400

08000c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <NMI_Handler+0x4>

08000c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <HardFault_Handler+0x4>

08000c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <MemManage_Handler+0x4>

08000c72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <BusFault_Handler+0x4>

08000c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <UsageFault_Handler+0x4>

08000c7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000c90:	4802      	ldr	r0, [pc, #8]	; (8000c9c <TIM7_IRQHandler+0x10>)
 8000c92:	f001 f8db 	bl	8001e4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20012f0c 	.word	0x20012f0c

08000ca0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca8:	4a14      	ldr	r2, [pc, #80]	; (8000cfc <_sbrk+0x5c>)
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <_sbrk+0x60>)
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb4:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <_sbrk+0x64>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d102      	bne.n	8000cc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cbc:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <_sbrk+0x64>)
 8000cbe:	4a12      	ldr	r2, [pc, #72]	; (8000d08 <_sbrk+0x68>)
 8000cc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cc2:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <_sbrk+0x64>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4413      	add	r3, r2
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d207      	bcs.n	8000ce0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cd0:	f004 f9dc 	bl	800508c <__errno>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	220c      	movs	r2, #12
 8000cd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cda:	f04f 33ff 	mov.w	r3, #4294967295
 8000cde:	e009      	b.n	8000cf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <_sbrk+0x64>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ce6:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <_sbrk+0x64>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	4a05      	ldr	r2, [pc, #20]	; (8000d04 <_sbrk+0x64>)
 8000cf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20020000 	.word	0x20020000
 8000d00:	00000400 	.word	0x00000400
 8000d04:	20000094 	.word	0x20000094
 8000d08:	20012fa8 	.word	0x20012fa8

08000d0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <SystemInit+0x20>)
 8000d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d16:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <SystemInit+0x20>)
 8000d18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d34:	480d      	ldr	r0, [pc, #52]	; (8000d6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d36:	490e      	ldr	r1, [pc, #56]	; (8000d70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d38:	4a0e      	ldr	r2, [pc, #56]	; (8000d74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d3c:	e002      	b.n	8000d44 <LoopCopyDataInit>

08000d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d42:	3304      	adds	r3, #4

08000d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d48:	d3f9      	bcc.n	8000d3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4a:	4a0b      	ldr	r2, [pc, #44]	; (8000d78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d4c:	4c0b      	ldr	r4, [pc, #44]	; (8000d7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d50:	e001      	b.n	8000d56 <LoopFillZerobss>

08000d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d54:	3204      	adds	r2, #4

08000d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d58:	d3fb      	bcc.n	8000d52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d5a:	f7ff ffd7 	bl	8000d0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d5e:	f004 f99b 	bl	8005098 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d62:	f7ff fc09 	bl	8000578 <main>
  bx  lr    
 8000d66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d70:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d74:	08005ac0 	.word	0x08005ac0
  ldr r2, =_sbss
 8000d78:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d7c:	20012fa8 	.word	0x20012fa8

08000d80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d80:	e7fe      	b.n	8000d80 <ADC_IRQHandler>
	...

08000d84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d88:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <HAL_Init+0x40>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	; (8000dc4 <HAL_Init+0x40>)
 8000d8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d94:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <HAL_Init+0x40>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <HAL_Init+0x40>)
 8000d9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <HAL_Init+0x40>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a07      	ldr	r2, [pc, #28]	; (8000dc4 <HAL_Init+0x40>)
 8000da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000daa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dac:	2003      	movs	r0, #3
 8000dae:	f000 f8d8 	bl	8000f62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000db2:	2000      	movs	r0, #0
 8000db4:	f7ff fefa 	bl	8000bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db8:	f7ff fe88 	bl	8000acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40023c00 	.word	0x40023c00

08000dc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <HAL_IncTick+0x20>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_IncTick+0x24>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	4a04      	ldr	r2, [pc, #16]	; (8000dec <HAL_IncTick+0x24>)
 8000dda:	6013      	str	r3, [r2, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20000008 	.word	0x20000008
 8000dec:	20012f54 	.word	0x20012f54

08000df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return uwTick;
 8000df4:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <HAL_GetTick+0x14>)
 8000df6:	681b      	ldr	r3, [r3, #0]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	20012f54 	.word	0x20012f54

08000e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <__NVIC_SetPriorityGrouping+0x44>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e24:	4013      	ands	r3, r2
 8000e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e3a:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <__NVIC_SetPriorityGrouping+0x44>)
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	60d3      	str	r3, [r2, #12]
}
 8000e40:	bf00      	nop
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e54:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <__NVIC_GetPriorityGrouping+0x18>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	0a1b      	lsrs	r3, r3, #8
 8000e5a:	f003 0307 	and.w	r3, r3, #7
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	db0b      	blt.n	8000e96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	f003 021f 	and.w	r2, r3, #31
 8000e84:	4907      	ldr	r1, [pc, #28]	; (8000ea4 <__NVIC_EnableIRQ+0x38>)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	095b      	lsrs	r3, r3, #5
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000e100 	.word	0xe000e100

08000ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	6039      	str	r1, [r7, #0]
 8000eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	db0a      	blt.n	8000ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	490c      	ldr	r1, [pc, #48]	; (8000ef4 <__NVIC_SetPriority+0x4c>)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	0112      	lsls	r2, r2, #4
 8000ec8:	b2d2      	uxtb	r2, r2
 8000eca:	440b      	add	r3, r1
 8000ecc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed0:	e00a      	b.n	8000ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4908      	ldr	r1, [pc, #32]	; (8000ef8 <__NVIC_SetPriority+0x50>)
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	f003 030f 	and.w	r3, r3, #15
 8000ede:	3b04      	subs	r3, #4
 8000ee0:	0112      	lsls	r2, r2, #4
 8000ee2:	b2d2      	uxtb	r2, r2
 8000ee4:	440b      	add	r3, r1
 8000ee6:	761a      	strb	r2, [r3, #24]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000e100 	.word	0xe000e100
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b089      	sub	sp, #36	; 0x24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	f1c3 0307 	rsb	r3, r3, #7
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	bf28      	it	cs
 8000f1a:	2304      	movcs	r3, #4
 8000f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3304      	adds	r3, #4
 8000f22:	2b06      	cmp	r3, #6
 8000f24:	d902      	bls.n	8000f2c <NVIC_EncodePriority+0x30>
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3b03      	subs	r3, #3
 8000f2a:	e000      	b.n	8000f2e <NVIC_EncodePriority+0x32>
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f30:	f04f 32ff 	mov.w	r2, #4294967295
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43da      	mvns	r2, r3
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	401a      	ands	r2, r3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f44:	f04f 31ff 	mov.w	r1, #4294967295
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4e:	43d9      	mvns	r1, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f54:	4313      	orrs	r3, r2
         );
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3724      	adds	r7, #36	; 0x24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff ff4c 	bl	8000e08 <__NVIC_SetPriorityGrouping>
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
 8000f84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f8a:	f7ff ff61 	bl	8000e50 <__NVIC_GetPriorityGrouping>
 8000f8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	68b9      	ldr	r1, [r7, #8]
 8000f94:	6978      	ldr	r0, [r7, #20]
 8000f96:	f7ff ffb1 	bl	8000efc <NVIC_EncodePriority>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa0:	4611      	mov	r1, r2
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff ff80 	bl	8000ea8 <__NVIC_SetPriority>
}
 8000fa8:	bf00      	nop
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff ff54 	bl	8000e6c <__NVIC_EnableIRQ>
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	; 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
 8000fe6:	e16b      	b.n	80012c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fe8:	2201      	movs	r2, #1
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	697a      	ldr	r2, [r7, #20]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	429a      	cmp	r2, r3
 8001002:	f040 815a 	bne.w	80012ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	2b01      	cmp	r3, #1
 8001010:	d005      	beq.n	800101e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800101a:	2b02      	cmp	r3, #2
 800101c:	d130      	bne.n	8001080 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	2203      	movs	r2, #3
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	68da      	ldr	r2, [r3, #12]
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001054:	2201      	movs	r2, #1
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	091b      	lsrs	r3, r3, #4
 800106a:	f003 0201 	and.w	r2, r3, #1
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	2b03      	cmp	r3, #3
 800108a:	d017      	beq.n	80010bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	2203      	movs	r2, #3
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0303 	and.w	r3, r3, #3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d123      	bne.n	8001110 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	08da      	lsrs	r2, r3, #3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3208      	adds	r2, #8
 80010d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	f003 0307 	and.w	r3, r3, #7
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	220f      	movs	r2, #15
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	691a      	ldr	r2, [r3, #16]
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	08da      	lsrs	r2, r3, #3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3208      	adds	r2, #8
 800110a:	69b9      	ldr	r1, [r7, #24]
 800110c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	2203      	movs	r2, #3
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 0203 	and.w	r2, r3, #3
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800114c:	2b00      	cmp	r3, #0
 800114e:	f000 80b4 	beq.w	80012ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b60      	ldr	r3, [pc, #384]	; (80012d8 <HAL_GPIO_Init+0x30c>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	4a5f      	ldr	r2, [pc, #380]	; (80012d8 <HAL_GPIO_Init+0x30c>)
 800115c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001160:	6453      	str	r3, [r2, #68]	; 0x44
 8001162:	4b5d      	ldr	r3, [pc, #372]	; (80012d8 <HAL_GPIO_Init+0x30c>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800116e:	4a5b      	ldr	r2, [pc, #364]	; (80012dc <HAL_GPIO_Init+0x310>)
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	089b      	lsrs	r3, r3, #2
 8001174:	3302      	adds	r3, #2
 8001176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	220f      	movs	r2, #15
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4013      	ands	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a52      	ldr	r2, [pc, #328]	; (80012e0 <HAL_GPIO_Init+0x314>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d02b      	beq.n	80011f2 <HAL_GPIO_Init+0x226>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a51      	ldr	r2, [pc, #324]	; (80012e4 <HAL_GPIO_Init+0x318>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d025      	beq.n	80011ee <HAL_GPIO_Init+0x222>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a50      	ldr	r2, [pc, #320]	; (80012e8 <HAL_GPIO_Init+0x31c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d01f      	beq.n	80011ea <HAL_GPIO_Init+0x21e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4f      	ldr	r2, [pc, #316]	; (80012ec <HAL_GPIO_Init+0x320>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d019      	beq.n	80011e6 <HAL_GPIO_Init+0x21a>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4e      	ldr	r2, [pc, #312]	; (80012f0 <HAL_GPIO_Init+0x324>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d013      	beq.n	80011e2 <HAL_GPIO_Init+0x216>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4d      	ldr	r2, [pc, #308]	; (80012f4 <HAL_GPIO_Init+0x328>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d00d      	beq.n	80011de <HAL_GPIO_Init+0x212>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4c      	ldr	r2, [pc, #304]	; (80012f8 <HAL_GPIO_Init+0x32c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d007      	beq.n	80011da <HAL_GPIO_Init+0x20e>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4b      	ldr	r2, [pc, #300]	; (80012fc <HAL_GPIO_Init+0x330>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d101      	bne.n	80011d6 <HAL_GPIO_Init+0x20a>
 80011d2:	2307      	movs	r3, #7
 80011d4:	e00e      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011d6:	2308      	movs	r3, #8
 80011d8:	e00c      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011da:	2306      	movs	r3, #6
 80011dc:	e00a      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011de:	2305      	movs	r3, #5
 80011e0:	e008      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011e2:	2304      	movs	r3, #4
 80011e4:	e006      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011e6:	2303      	movs	r3, #3
 80011e8:	e004      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011ea:	2302      	movs	r3, #2
 80011ec:	e002      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011ee:	2301      	movs	r3, #1
 80011f0:	e000      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011f2:	2300      	movs	r3, #0
 80011f4:	69fa      	ldr	r2, [r7, #28]
 80011f6:	f002 0203 	and.w	r2, r2, #3
 80011fa:	0092      	lsls	r2, r2, #2
 80011fc:	4093      	lsls	r3, r2
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001204:	4935      	ldr	r1, [pc, #212]	; (80012dc <HAL_GPIO_Init+0x310>)
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	089b      	lsrs	r3, r3, #2
 800120a:	3302      	adds	r3, #2
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001212:	4b3b      	ldr	r3, [pc, #236]	; (8001300 <HAL_GPIO_Init+0x334>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001236:	4a32      	ldr	r2, [pc, #200]	; (8001300 <HAL_GPIO_Init+0x334>)
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800123c:	4b30      	ldr	r3, [pc, #192]	; (8001300 <HAL_GPIO_Init+0x334>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001260:	4a27      	ldr	r2, [pc, #156]	; (8001300 <HAL_GPIO_Init+0x334>)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001266:	4b26      	ldr	r3, [pc, #152]	; (8001300 <HAL_GPIO_Init+0x334>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800128a:	4a1d      	ldr	r2, [pc, #116]	; (8001300 <HAL_GPIO_Init+0x334>)
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001290:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <HAL_GPIO_Init+0x334>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012b4:	4a12      	ldr	r2, [pc, #72]	; (8001300 <HAL_GPIO_Init+0x334>)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3301      	adds	r3, #1
 80012be:	61fb      	str	r3, [r7, #28]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	2b0f      	cmp	r3, #15
 80012c4:	f67f ae90 	bls.w	8000fe8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3724      	adds	r7, #36	; 0x24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40013800 	.word	0x40013800
 80012e0:	40020000 	.word	0x40020000
 80012e4:	40020400 	.word	0x40020400
 80012e8:	40020800 	.word	0x40020800
 80012ec:	40020c00 	.word	0x40020c00
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40021400 	.word	0x40021400
 80012f8:	40021800 	.word	0x40021800
 80012fc:	40021c00 	.word	0x40021c00
 8001300:	40013c00 	.word	0x40013c00

08001304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	807b      	strh	r3, [r7, #2]
 8001310:	4613      	mov	r3, r2
 8001312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001314:	787b      	ldrb	r3, [r7, #1]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800131a:	887a      	ldrh	r2, [r7, #2]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001320:	e003      	b.n	800132a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001322:	887b      	ldrh	r3, [r7, #2]
 8001324:	041a      	lsls	r2, r3, #16
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	619a      	str	r2, [r3, #24]
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001336:	b480      	push	{r7}
 8001338:	b085      	sub	sp, #20
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
 800133e:	460b      	mov	r3, r1
 8001340:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001348:	887a      	ldrh	r2, [r7, #2]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	4013      	ands	r3, r2
 800134e:	041a      	lsls	r2, r3, #16
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	43d9      	mvns	r1, r3
 8001354:	887b      	ldrh	r3, [r7, #2]
 8001356:	400b      	ands	r3, r1
 8001358:	431a      	orrs	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	619a      	str	r2, [r3, #24]
}
 800135e:	bf00      	nop
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
	...

0800136c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e264      	b.n	8001848 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	2b00      	cmp	r3, #0
 8001388:	d075      	beq.n	8001476 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800138a:	4ba3      	ldr	r3, [pc, #652]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	2b04      	cmp	r3, #4
 8001394:	d00c      	beq.n	80013b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001396:	4ba0      	ldr	r3, [pc, #640]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800139e:	2b08      	cmp	r3, #8
 80013a0:	d112      	bne.n	80013c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013a2:	4b9d      	ldr	r3, [pc, #628]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013ae:	d10b      	bne.n	80013c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b0:	4b99      	ldr	r3, [pc, #612]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d05b      	beq.n	8001474 <HAL_RCC_OscConfig+0x108>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d157      	bne.n	8001474 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e23f      	b.n	8001848 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013d0:	d106      	bne.n	80013e0 <HAL_RCC_OscConfig+0x74>
 80013d2:	4b91      	ldr	r3, [pc, #580]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a90      	ldr	r2, [pc, #576]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 80013d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	e01d      	b.n	800141c <HAL_RCC_OscConfig+0xb0>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013e8:	d10c      	bne.n	8001404 <HAL_RCC_OscConfig+0x98>
 80013ea:	4b8b      	ldr	r3, [pc, #556]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a8a      	ldr	r2, [pc, #552]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 80013f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	4b88      	ldr	r3, [pc, #544]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a87      	ldr	r2, [pc, #540]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 80013fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	e00b      	b.n	800141c <HAL_RCC_OscConfig+0xb0>
 8001404:	4b84      	ldr	r3, [pc, #528]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a83      	ldr	r2, [pc, #524]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 800140a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	4b81      	ldr	r3, [pc, #516]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a80      	ldr	r2, [pc, #512]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 8001416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800141a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d013      	beq.n	800144c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001424:	f7ff fce4 	bl	8000df0 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800142c:	f7ff fce0 	bl	8000df0 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b64      	cmp	r3, #100	; 0x64
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e204      	b.n	8001848 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143e:	4b76      	ldr	r3, [pc, #472]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0f0      	beq.n	800142c <HAL_RCC_OscConfig+0xc0>
 800144a:	e014      	b.n	8001476 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144c:	f7ff fcd0 	bl	8000df0 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001454:	f7ff fccc 	bl	8000df0 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b64      	cmp	r3, #100	; 0x64
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e1f0      	b.n	8001848 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001466:	4b6c      	ldr	r3, [pc, #432]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1f0      	bne.n	8001454 <HAL_RCC_OscConfig+0xe8>
 8001472:	e000      	b.n	8001476 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001474:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d063      	beq.n	800154a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001482:	4b65      	ldr	r3, [pc, #404]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f003 030c 	and.w	r3, r3, #12
 800148a:	2b00      	cmp	r3, #0
 800148c:	d00b      	beq.n	80014a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800148e:	4b62      	ldr	r3, [pc, #392]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001496:	2b08      	cmp	r3, #8
 8001498:	d11c      	bne.n	80014d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800149a:	4b5f      	ldr	r3, [pc, #380]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d116      	bne.n	80014d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014a6:	4b5c      	ldr	r3, [pc, #368]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d005      	beq.n	80014be <HAL_RCC_OscConfig+0x152>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d001      	beq.n	80014be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e1c4      	b.n	8001848 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014be:	4b56      	ldr	r3, [pc, #344]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	4952      	ldr	r1, [pc, #328]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 80014ce:	4313      	orrs	r3, r2
 80014d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014d2:	e03a      	b.n	800154a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d020      	beq.n	800151e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014dc:	4b4f      	ldr	r3, [pc, #316]	; (800161c <HAL_RCC_OscConfig+0x2b0>)
 80014de:	2201      	movs	r2, #1
 80014e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e2:	f7ff fc85 	bl	8000df0 <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ea:	f7ff fc81 	bl	8000df0 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e1a5      	b.n	8001848 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014fc:	4b46      	ldr	r3, [pc, #280]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0f0      	beq.n	80014ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001508:	4b43      	ldr	r3, [pc, #268]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	4940      	ldr	r1, [pc, #256]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 8001518:	4313      	orrs	r3, r2
 800151a:	600b      	str	r3, [r1, #0]
 800151c:	e015      	b.n	800154a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800151e:	4b3f      	ldr	r3, [pc, #252]	; (800161c <HAL_RCC_OscConfig+0x2b0>)
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001524:	f7ff fc64 	bl	8000df0 <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800152c:	f7ff fc60 	bl	8000df0 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e184      	b.n	8001848 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800153e:	4b36      	ldr	r3, [pc, #216]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1f0      	bne.n	800152c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0308 	and.w	r3, r3, #8
 8001552:	2b00      	cmp	r3, #0
 8001554:	d030      	beq.n	80015b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d016      	beq.n	800158c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800155e:	4b30      	ldr	r3, [pc, #192]	; (8001620 <HAL_RCC_OscConfig+0x2b4>)
 8001560:	2201      	movs	r2, #1
 8001562:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001564:	f7ff fc44 	bl	8000df0 <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800156c:	f7ff fc40 	bl	8000df0 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e164      	b.n	8001848 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800157e:	4b26      	ldr	r3, [pc, #152]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 8001580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d0f0      	beq.n	800156c <HAL_RCC_OscConfig+0x200>
 800158a:	e015      	b.n	80015b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800158c:	4b24      	ldr	r3, [pc, #144]	; (8001620 <HAL_RCC_OscConfig+0x2b4>)
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001592:	f7ff fc2d 	bl	8000df0 <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800159a:	f7ff fc29 	bl	8000df0 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e14d      	b.n	8001848 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ac:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 80015ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1f0      	bne.n	800159a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f000 80a0 	beq.w	8001706 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015c6:	2300      	movs	r3, #0
 80015c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ca:	4b13      	ldr	r3, [pc, #76]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10f      	bne.n	80015f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	4a0e      	ldr	r2, [pc, #56]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 80015e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e4:	6413      	str	r3, [r2, #64]	; 0x40
 80015e6:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015f2:	2301      	movs	r3, #1
 80015f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f6:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <HAL_RCC_OscConfig+0x2b8>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d121      	bne.n	8001646 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001602:	4b08      	ldr	r3, [pc, #32]	; (8001624 <HAL_RCC_OscConfig+0x2b8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a07      	ldr	r2, [pc, #28]	; (8001624 <HAL_RCC_OscConfig+0x2b8>)
 8001608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800160c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800160e:	f7ff fbef 	bl	8000df0 <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001614:	e011      	b.n	800163a <HAL_RCC_OscConfig+0x2ce>
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800
 800161c:	42470000 	.word	0x42470000
 8001620:	42470e80 	.word	0x42470e80
 8001624:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001628:	f7ff fbe2 	bl	8000df0 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e106      	b.n	8001848 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800163a:	4b85      	ldr	r3, [pc, #532]	; (8001850 <HAL_RCC_OscConfig+0x4e4>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0f0      	beq.n	8001628 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d106      	bne.n	800165c <HAL_RCC_OscConfig+0x2f0>
 800164e:	4b81      	ldr	r3, [pc, #516]	; (8001854 <HAL_RCC_OscConfig+0x4e8>)
 8001650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001652:	4a80      	ldr	r2, [pc, #512]	; (8001854 <HAL_RCC_OscConfig+0x4e8>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	6713      	str	r3, [r2, #112]	; 0x70
 800165a:	e01c      	b.n	8001696 <HAL_RCC_OscConfig+0x32a>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	2b05      	cmp	r3, #5
 8001662:	d10c      	bne.n	800167e <HAL_RCC_OscConfig+0x312>
 8001664:	4b7b      	ldr	r3, [pc, #492]	; (8001854 <HAL_RCC_OscConfig+0x4e8>)
 8001666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001668:	4a7a      	ldr	r2, [pc, #488]	; (8001854 <HAL_RCC_OscConfig+0x4e8>)
 800166a:	f043 0304 	orr.w	r3, r3, #4
 800166e:	6713      	str	r3, [r2, #112]	; 0x70
 8001670:	4b78      	ldr	r3, [pc, #480]	; (8001854 <HAL_RCC_OscConfig+0x4e8>)
 8001672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001674:	4a77      	ldr	r2, [pc, #476]	; (8001854 <HAL_RCC_OscConfig+0x4e8>)
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	6713      	str	r3, [r2, #112]	; 0x70
 800167c:	e00b      	b.n	8001696 <HAL_RCC_OscConfig+0x32a>
 800167e:	4b75      	ldr	r3, [pc, #468]	; (8001854 <HAL_RCC_OscConfig+0x4e8>)
 8001680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001682:	4a74      	ldr	r2, [pc, #464]	; (8001854 <HAL_RCC_OscConfig+0x4e8>)
 8001684:	f023 0301 	bic.w	r3, r3, #1
 8001688:	6713      	str	r3, [r2, #112]	; 0x70
 800168a:	4b72      	ldr	r3, [pc, #456]	; (8001854 <HAL_RCC_OscConfig+0x4e8>)
 800168c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800168e:	4a71      	ldr	r2, [pc, #452]	; (8001854 <HAL_RCC_OscConfig+0x4e8>)
 8001690:	f023 0304 	bic.w	r3, r3, #4
 8001694:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d015      	beq.n	80016ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800169e:	f7ff fba7 	bl	8000df0 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a4:	e00a      	b.n	80016bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016a6:	f7ff fba3 	bl	8000df0 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e0c5      	b.n	8001848 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016bc:	4b65      	ldr	r3, [pc, #404]	; (8001854 <HAL_RCC_OscConfig+0x4e8>)
 80016be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0ee      	beq.n	80016a6 <HAL_RCC_OscConfig+0x33a>
 80016c8:	e014      	b.n	80016f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ca:	f7ff fb91 	bl	8000df0 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016d0:	e00a      	b.n	80016e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016d2:	f7ff fb8d 	bl	8000df0 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e0af      	b.n	8001848 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e8:	4b5a      	ldr	r3, [pc, #360]	; (8001854 <HAL_RCC_OscConfig+0x4e8>)
 80016ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1ee      	bne.n	80016d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016f4:	7dfb      	ldrb	r3, [r7, #23]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d105      	bne.n	8001706 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016fa:	4b56      	ldr	r3, [pc, #344]	; (8001854 <HAL_RCC_OscConfig+0x4e8>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	4a55      	ldr	r2, [pc, #340]	; (8001854 <HAL_RCC_OscConfig+0x4e8>)
 8001700:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001704:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 809b 	beq.w	8001846 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001710:	4b50      	ldr	r3, [pc, #320]	; (8001854 <HAL_RCC_OscConfig+0x4e8>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 030c 	and.w	r3, r3, #12
 8001718:	2b08      	cmp	r3, #8
 800171a:	d05c      	beq.n	80017d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	2b02      	cmp	r3, #2
 8001722:	d141      	bne.n	80017a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001724:	4b4c      	ldr	r3, [pc, #304]	; (8001858 <HAL_RCC_OscConfig+0x4ec>)
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172a:	f7ff fb61 	bl	8000df0 <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001732:	f7ff fb5d 	bl	8000df0 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e081      	b.n	8001848 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001744:	4b43      	ldr	r3, [pc, #268]	; (8001854 <HAL_RCC_OscConfig+0x4e8>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1f0      	bne.n	8001732 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69da      	ldr	r2, [r3, #28]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a1b      	ldr	r3, [r3, #32]
 8001758:	431a      	orrs	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175e:	019b      	lsls	r3, r3, #6
 8001760:	431a      	orrs	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001766:	085b      	lsrs	r3, r3, #1
 8001768:	3b01      	subs	r3, #1
 800176a:	041b      	lsls	r3, r3, #16
 800176c:	431a      	orrs	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001772:	061b      	lsls	r3, r3, #24
 8001774:	4937      	ldr	r1, [pc, #220]	; (8001854 <HAL_RCC_OscConfig+0x4e8>)
 8001776:	4313      	orrs	r3, r2
 8001778:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800177a:	4b37      	ldr	r3, [pc, #220]	; (8001858 <HAL_RCC_OscConfig+0x4ec>)
 800177c:	2201      	movs	r2, #1
 800177e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001780:	f7ff fb36 	bl	8000df0 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001788:	f7ff fb32 	bl	8000df0 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e056      	b.n	8001848 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800179a:	4b2e      	ldr	r3, [pc, #184]	; (8001854 <HAL_RCC_OscConfig+0x4e8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0f0      	beq.n	8001788 <HAL_RCC_OscConfig+0x41c>
 80017a6:	e04e      	b.n	8001846 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017a8:	4b2b      	ldr	r3, [pc, #172]	; (8001858 <HAL_RCC_OscConfig+0x4ec>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ae:	f7ff fb1f 	bl	8000df0 <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b6:	f7ff fb1b 	bl	8000df0 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e03f      	b.n	8001848 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017c8:	4b22      	ldr	r3, [pc, #136]	; (8001854 <HAL_RCC_OscConfig+0x4e8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1f0      	bne.n	80017b6 <HAL_RCC_OscConfig+0x44a>
 80017d4:	e037      	b.n	8001846 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d101      	bne.n	80017e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e032      	b.n	8001848 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017e2:	4b1c      	ldr	r3, [pc, #112]	; (8001854 <HAL_RCC_OscConfig+0x4e8>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d028      	beq.n	8001842 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d121      	bne.n	8001842 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001808:	429a      	cmp	r2, r3
 800180a:	d11a      	bne.n	8001842 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001812:	4013      	ands	r3, r2
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001818:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800181a:	4293      	cmp	r3, r2
 800181c:	d111      	bne.n	8001842 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001828:	085b      	lsrs	r3, r3, #1
 800182a:	3b01      	subs	r3, #1
 800182c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800182e:	429a      	cmp	r2, r3
 8001830:	d107      	bne.n	8001842 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800183e:	429a      	cmp	r2, r3
 8001840:	d001      	beq.n	8001846 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e000      	b.n	8001848 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40007000 	.word	0x40007000
 8001854:	40023800 	.word	0x40023800
 8001858:	42470060 	.word	0x42470060

0800185c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e0cc      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001870:	4b68      	ldr	r3, [pc, #416]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	d90c      	bls.n	8001898 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187e:	4b65      	ldr	r3, [pc, #404]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001886:	4b63      	ldr	r3, [pc, #396]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d001      	beq.n	8001898 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e0b8      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d020      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d005      	beq.n	80018bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018b0:	4b59      	ldr	r3, [pc, #356]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	4a58      	ldr	r2, [pc, #352]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0308 	and.w	r3, r3, #8
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d005      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018c8:	4b53      	ldr	r3, [pc, #332]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	4a52      	ldr	r2, [pc, #328]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d4:	4b50      	ldr	r3, [pc, #320]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	494d      	ldr	r1, [pc, #308]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d044      	beq.n	800197c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d107      	bne.n	800190a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fa:	4b47      	ldr	r3, [pc, #284]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d119      	bne.n	800193a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e07f      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b02      	cmp	r3, #2
 8001910:	d003      	beq.n	800191a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001916:	2b03      	cmp	r3, #3
 8001918:	d107      	bne.n	800192a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800191a:	4b3f      	ldr	r3, [pc, #252]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d109      	bne.n	800193a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e06f      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800192a:	4b3b      	ldr	r3, [pc, #236]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e067      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800193a:	4b37      	ldr	r3, [pc, #220]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f023 0203 	bic.w	r2, r3, #3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	4934      	ldr	r1, [pc, #208]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 8001948:	4313      	orrs	r3, r2
 800194a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800194c:	f7ff fa50 	bl	8000df0 <HAL_GetTick>
 8001950:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001952:	e00a      	b.n	800196a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001954:	f7ff fa4c 	bl	8000df0 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001962:	4293      	cmp	r3, r2
 8001964:	d901      	bls.n	800196a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e04f      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800196a:	4b2b      	ldr	r3, [pc, #172]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 020c 	and.w	r2, r3, #12
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	429a      	cmp	r2, r3
 800197a:	d1eb      	bne.n	8001954 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800197c:	4b25      	ldr	r3, [pc, #148]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	429a      	cmp	r2, r3
 8001988:	d20c      	bcs.n	80019a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198a:	4b22      	ldr	r3, [pc, #136]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001992:	4b20      	ldr	r3, [pc, #128]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d001      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e032      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d008      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019b0:	4b19      	ldr	r3, [pc, #100]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	4916      	ldr	r1, [pc, #88]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d009      	beq.n	80019e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019ce:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	490e      	ldr	r1, [pc, #56]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019e2:	f000 f821 	bl	8001a28 <HAL_RCC_GetSysClockFreq>
 80019e6:	4602      	mov	r2, r0
 80019e8:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	091b      	lsrs	r3, r3, #4
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	490a      	ldr	r1, [pc, #40]	; (8001a1c <HAL_RCC_ClockConfig+0x1c0>)
 80019f4:	5ccb      	ldrb	r3, [r1, r3]
 80019f6:	fa22 f303 	lsr.w	r3, r2, r3
 80019fa:	4a09      	ldr	r2, [pc, #36]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 80019fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff f8d2 	bl	8000bac <HAL_InitTick>

  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40023c00 	.word	0x40023c00
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	08005a64 	.word	0x08005a64
 8001a20:	20000000 	.word	0x20000000
 8001a24:	20000004 	.word	0x20000004

08001a28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a2c:	b084      	sub	sp, #16
 8001a2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	607b      	str	r3, [r7, #4]
 8001a34:	2300      	movs	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	2300      	movs	r3, #0
 8001a3a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a40:	4b67      	ldr	r3, [pc, #412]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f003 030c 	and.w	r3, r3, #12
 8001a48:	2b08      	cmp	r3, #8
 8001a4a:	d00d      	beq.n	8001a68 <HAL_RCC_GetSysClockFreq+0x40>
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	f200 80bd 	bhi.w	8001bcc <HAL_RCC_GetSysClockFreq+0x1a4>
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d002      	beq.n	8001a5c <HAL_RCC_GetSysClockFreq+0x34>
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	d003      	beq.n	8001a62 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a5a:	e0b7      	b.n	8001bcc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a5c:	4b61      	ldr	r3, [pc, #388]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a5e:	60bb      	str	r3, [r7, #8]
       break;
 8001a60:	e0b7      	b.n	8001bd2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a62:	4b61      	ldr	r3, [pc, #388]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001a64:	60bb      	str	r3, [r7, #8]
      break;
 8001a66:	e0b4      	b.n	8001bd2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a68:	4b5d      	ldr	r3, [pc, #372]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a70:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a72:	4b5b      	ldr	r3, [pc, #364]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d04d      	beq.n	8001b1a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a7e:	4b58      	ldr	r3, [pc, #352]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	099b      	lsrs	r3, r3, #6
 8001a84:	461a      	mov	r2, r3
 8001a86:	f04f 0300 	mov.w	r3, #0
 8001a8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a8e:	f04f 0100 	mov.w	r1, #0
 8001a92:	ea02 0800 	and.w	r8, r2, r0
 8001a96:	ea03 0901 	and.w	r9, r3, r1
 8001a9a:	4640      	mov	r0, r8
 8001a9c:	4649      	mov	r1, r9
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	f04f 0300 	mov.w	r3, #0
 8001aa6:	014b      	lsls	r3, r1, #5
 8001aa8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001aac:	0142      	lsls	r2, r0, #5
 8001aae:	4610      	mov	r0, r2
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	ebb0 0008 	subs.w	r0, r0, r8
 8001ab6:	eb61 0109 	sbc.w	r1, r1, r9
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	f04f 0300 	mov.w	r3, #0
 8001ac2:	018b      	lsls	r3, r1, #6
 8001ac4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ac8:	0182      	lsls	r2, r0, #6
 8001aca:	1a12      	subs	r2, r2, r0
 8001acc:	eb63 0301 	sbc.w	r3, r3, r1
 8001ad0:	f04f 0000 	mov.w	r0, #0
 8001ad4:	f04f 0100 	mov.w	r1, #0
 8001ad8:	00d9      	lsls	r1, r3, #3
 8001ada:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ade:	00d0      	lsls	r0, r2, #3
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	eb12 0208 	adds.w	r2, r2, r8
 8001ae8:	eb43 0309 	adc.w	r3, r3, r9
 8001aec:	f04f 0000 	mov.w	r0, #0
 8001af0:	f04f 0100 	mov.w	r1, #0
 8001af4:	0259      	lsls	r1, r3, #9
 8001af6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001afa:	0250      	lsls	r0, r2, #9
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4610      	mov	r0, r2
 8001b02:	4619      	mov	r1, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	461a      	mov	r2, r3
 8001b08:	f04f 0300 	mov.w	r3, #0
 8001b0c:	f7fe fbb8 	bl	8000280 <__aeabi_uldivmod>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4613      	mov	r3, r2
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	e04a      	b.n	8001bb0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b1a:	4b31      	ldr	r3, [pc, #196]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	099b      	lsrs	r3, r3, #6
 8001b20:	461a      	mov	r2, r3
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b2a:	f04f 0100 	mov.w	r1, #0
 8001b2e:	ea02 0400 	and.w	r4, r2, r0
 8001b32:	ea03 0501 	and.w	r5, r3, r1
 8001b36:	4620      	mov	r0, r4
 8001b38:	4629      	mov	r1, r5
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	f04f 0300 	mov.w	r3, #0
 8001b42:	014b      	lsls	r3, r1, #5
 8001b44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b48:	0142      	lsls	r2, r0, #5
 8001b4a:	4610      	mov	r0, r2
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	1b00      	subs	r0, r0, r4
 8001b50:	eb61 0105 	sbc.w	r1, r1, r5
 8001b54:	f04f 0200 	mov.w	r2, #0
 8001b58:	f04f 0300 	mov.w	r3, #0
 8001b5c:	018b      	lsls	r3, r1, #6
 8001b5e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b62:	0182      	lsls	r2, r0, #6
 8001b64:	1a12      	subs	r2, r2, r0
 8001b66:	eb63 0301 	sbc.w	r3, r3, r1
 8001b6a:	f04f 0000 	mov.w	r0, #0
 8001b6e:	f04f 0100 	mov.w	r1, #0
 8001b72:	00d9      	lsls	r1, r3, #3
 8001b74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b78:	00d0      	lsls	r0, r2, #3
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	1912      	adds	r2, r2, r4
 8001b80:	eb45 0303 	adc.w	r3, r5, r3
 8001b84:	f04f 0000 	mov.w	r0, #0
 8001b88:	f04f 0100 	mov.w	r1, #0
 8001b8c:	0299      	lsls	r1, r3, #10
 8001b8e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001b92:	0290      	lsls	r0, r2, #10
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4610      	mov	r0, r2
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	f7fe fb6c 	bl	8000280 <__aeabi_uldivmod>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4613      	mov	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	0c1b      	lsrs	r3, r3, #16
 8001bb6:	f003 0303 	and.w	r3, r3, #3
 8001bba:	3301      	adds	r3, #1
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc8:	60bb      	str	r3, [r7, #8]
      break;
 8001bca:	e002      	b.n	8001bd2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bcc:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001bce:	60bb      	str	r3, [r7, #8]
      break;
 8001bd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bd2:	68bb      	ldr	r3, [r7, #8]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001bde:	bf00      	nop
 8001be0:	40023800 	.word	0x40023800
 8001be4:	00f42400 	.word	0x00f42400
 8001be8:	007a1200 	.word	0x007a1200

08001bec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bf0:	4b03      	ldr	r3, [pc, #12]	; (8001c00 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	20000000 	.word	0x20000000

08001c04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c08:	f7ff fff0 	bl	8001bec <HAL_RCC_GetHCLKFreq>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	0a9b      	lsrs	r3, r3, #10
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	4903      	ldr	r1, [pc, #12]	; (8001c28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c1a:	5ccb      	ldrb	r3, [r1, r3]
 8001c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40023800 	.word	0x40023800
 8001c28:	08005a74 	.word	0x08005a74

08001c2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c30:	f7ff ffdc 	bl	8001bec <HAL_RCC_GetHCLKFreq>
 8001c34:	4602      	mov	r2, r0
 8001c36:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	0b5b      	lsrs	r3, r3, #13
 8001c3c:	f003 0307 	and.w	r3, r3, #7
 8001c40:	4903      	ldr	r1, [pc, #12]	; (8001c50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c42:	5ccb      	ldrb	r3, [r1, r3]
 8001c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	08005a74 	.word	0x08005a74

08001c54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	220f      	movs	r2, #15
 8001c62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c64:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 0203 	and.w	r2, r3, #3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c70:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c88:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	08db      	lsrs	r3, r3, #3
 8001c8e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c96:	4b07      	ldr	r3, [pc, #28]	; (8001cb4 <HAL_RCC_GetClockConfig+0x60>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0207 	and.w	r2, r3, #7
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	601a      	str	r2, [r3, #0]
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40023c00 	.word	0x40023c00

08001cb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e041      	b.n	8001d4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d106      	bne.n	8001ce4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f839 	bl	8001d56 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3304      	adds	r3, #4
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4610      	mov	r0, r2
 8001cf8:	f000 f9d8 	bl	80020ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
	...

08001d6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d001      	beq.n	8001d84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e04e      	b.n	8001e22 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2202      	movs	r2, #2
 8001d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68da      	ldr	r2, [r3, #12]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f042 0201 	orr.w	r2, r2, #1
 8001d9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a23      	ldr	r2, [pc, #140]	; (8001e30 <HAL_TIM_Base_Start_IT+0xc4>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d022      	beq.n	8001dec <HAL_TIM_Base_Start_IT+0x80>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dae:	d01d      	beq.n	8001dec <HAL_TIM_Base_Start_IT+0x80>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a1f      	ldr	r2, [pc, #124]	; (8001e34 <HAL_TIM_Base_Start_IT+0xc8>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d018      	beq.n	8001dec <HAL_TIM_Base_Start_IT+0x80>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a1e      	ldr	r2, [pc, #120]	; (8001e38 <HAL_TIM_Base_Start_IT+0xcc>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d013      	beq.n	8001dec <HAL_TIM_Base_Start_IT+0x80>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a1c      	ldr	r2, [pc, #112]	; (8001e3c <HAL_TIM_Base_Start_IT+0xd0>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d00e      	beq.n	8001dec <HAL_TIM_Base_Start_IT+0x80>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a1b      	ldr	r2, [pc, #108]	; (8001e40 <HAL_TIM_Base_Start_IT+0xd4>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d009      	beq.n	8001dec <HAL_TIM_Base_Start_IT+0x80>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a19      	ldr	r2, [pc, #100]	; (8001e44 <HAL_TIM_Base_Start_IT+0xd8>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d004      	beq.n	8001dec <HAL_TIM_Base_Start_IT+0x80>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a18      	ldr	r2, [pc, #96]	; (8001e48 <HAL_TIM_Base_Start_IT+0xdc>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d111      	bne.n	8001e10 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2b06      	cmp	r3, #6
 8001dfc:	d010      	beq.n	8001e20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f042 0201 	orr.w	r2, r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e0e:	e007      	b.n	8001e20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0201 	orr.w	r2, r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3714      	adds	r7, #20
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40010000 	.word	0x40010000
 8001e34:	40000400 	.word	0x40000400
 8001e38:	40000800 	.word	0x40000800
 8001e3c:	40000c00 	.word	0x40000c00
 8001e40:	40010400 	.word	0x40010400
 8001e44:	40014000 	.word	0x40014000
 8001e48:	40001800 	.word	0x40001800

08001e4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d122      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d11b      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f06f 0202 	mvn.w	r2, #2
 8001e78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f8ee 	bl	8002070 <HAL_TIM_IC_CaptureCallback>
 8001e94:	e005      	b.n	8001ea2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f8e0 	bl	800205c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 f8f1 	bl	8002084 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	d122      	bne.n	8001efc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b04      	cmp	r3, #4
 8001ec2:	d11b      	bne.n	8001efc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f06f 0204 	mvn.w	r2, #4
 8001ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f8c4 	bl	8002070 <HAL_TIM_IC_CaptureCallback>
 8001ee8:	e005      	b.n	8001ef6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f8b6 	bl	800205c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f8c7 	bl	8002084 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d122      	bne.n	8001f50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f003 0308 	and.w	r3, r3, #8
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	d11b      	bne.n	8001f50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f06f 0208 	mvn.w	r2, #8
 8001f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2204      	movs	r2, #4
 8001f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f89a 	bl	8002070 <HAL_TIM_IC_CaptureCallback>
 8001f3c:	e005      	b.n	8001f4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f88c 	bl	800205c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f89d 	bl	8002084 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	f003 0310 	and.w	r3, r3, #16
 8001f5a:	2b10      	cmp	r3, #16
 8001f5c:	d122      	bne.n	8001fa4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	f003 0310 	and.w	r3, r3, #16
 8001f68:	2b10      	cmp	r3, #16
 8001f6a:	d11b      	bne.n	8001fa4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f06f 0210 	mvn.w	r2, #16
 8001f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2208      	movs	r2, #8
 8001f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f870 	bl	8002070 <HAL_TIM_IC_CaptureCallback>
 8001f90:	e005      	b.n	8001f9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f862 	bl	800205c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 f873 	bl	8002084 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d10e      	bne.n	8001fd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d107      	bne.n	8001fd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f06f 0201 	mvn.w	r2, #1
 8001fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7fe fd66 	bl	8000a9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fda:	2b80      	cmp	r3, #128	; 0x80
 8001fdc:	d10e      	bne.n	8001ffc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe8:	2b80      	cmp	r3, #128	; 0x80
 8001fea:	d107      	bne.n	8001ffc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f902 	bl	8002200 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002006:	2b40      	cmp	r3, #64	; 0x40
 8002008:	d10e      	bne.n	8002028 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002014:	2b40      	cmp	r3, #64	; 0x40
 8002016:	d107      	bne.n	8002028 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f838 	bl	8002098 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	f003 0320 	and.w	r3, r3, #32
 8002032:	2b20      	cmp	r3, #32
 8002034:	d10e      	bne.n	8002054 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	f003 0320 	and.w	r3, r3, #32
 8002040:	2b20      	cmp	r3, #32
 8002042:	d107      	bne.n	8002054 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f06f 0220 	mvn.w	r2, #32
 800204c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f8cc 	bl	80021ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002054:	bf00      	nop
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a40      	ldr	r2, [pc, #256]	; (80021c0 <TIM_Base_SetConfig+0x114>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d013      	beq.n	80020ec <TIM_Base_SetConfig+0x40>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ca:	d00f      	beq.n	80020ec <TIM_Base_SetConfig+0x40>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a3d      	ldr	r2, [pc, #244]	; (80021c4 <TIM_Base_SetConfig+0x118>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d00b      	beq.n	80020ec <TIM_Base_SetConfig+0x40>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a3c      	ldr	r2, [pc, #240]	; (80021c8 <TIM_Base_SetConfig+0x11c>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d007      	beq.n	80020ec <TIM_Base_SetConfig+0x40>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a3b      	ldr	r2, [pc, #236]	; (80021cc <TIM_Base_SetConfig+0x120>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d003      	beq.n	80020ec <TIM_Base_SetConfig+0x40>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a3a      	ldr	r2, [pc, #232]	; (80021d0 <TIM_Base_SetConfig+0x124>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d108      	bne.n	80020fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a2f      	ldr	r2, [pc, #188]	; (80021c0 <TIM_Base_SetConfig+0x114>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d02b      	beq.n	800215e <TIM_Base_SetConfig+0xb2>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800210c:	d027      	beq.n	800215e <TIM_Base_SetConfig+0xb2>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a2c      	ldr	r2, [pc, #176]	; (80021c4 <TIM_Base_SetConfig+0x118>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d023      	beq.n	800215e <TIM_Base_SetConfig+0xb2>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a2b      	ldr	r2, [pc, #172]	; (80021c8 <TIM_Base_SetConfig+0x11c>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d01f      	beq.n	800215e <TIM_Base_SetConfig+0xb2>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a2a      	ldr	r2, [pc, #168]	; (80021cc <TIM_Base_SetConfig+0x120>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d01b      	beq.n	800215e <TIM_Base_SetConfig+0xb2>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a29      	ldr	r2, [pc, #164]	; (80021d0 <TIM_Base_SetConfig+0x124>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d017      	beq.n	800215e <TIM_Base_SetConfig+0xb2>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a28      	ldr	r2, [pc, #160]	; (80021d4 <TIM_Base_SetConfig+0x128>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d013      	beq.n	800215e <TIM_Base_SetConfig+0xb2>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a27      	ldr	r2, [pc, #156]	; (80021d8 <TIM_Base_SetConfig+0x12c>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d00f      	beq.n	800215e <TIM_Base_SetConfig+0xb2>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a26      	ldr	r2, [pc, #152]	; (80021dc <TIM_Base_SetConfig+0x130>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d00b      	beq.n	800215e <TIM_Base_SetConfig+0xb2>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a25      	ldr	r2, [pc, #148]	; (80021e0 <TIM_Base_SetConfig+0x134>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d007      	beq.n	800215e <TIM_Base_SetConfig+0xb2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a24      	ldr	r2, [pc, #144]	; (80021e4 <TIM_Base_SetConfig+0x138>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d003      	beq.n	800215e <TIM_Base_SetConfig+0xb2>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a23      	ldr	r2, [pc, #140]	; (80021e8 <TIM_Base_SetConfig+0x13c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d108      	bne.n	8002170 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002164:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	4313      	orrs	r3, r2
 800216e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	4313      	orrs	r3, r2
 800217c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a0a      	ldr	r2, [pc, #40]	; (80021c0 <TIM_Base_SetConfig+0x114>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d003      	beq.n	80021a4 <TIM_Base_SetConfig+0xf8>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a0c      	ldr	r2, [pc, #48]	; (80021d0 <TIM_Base_SetConfig+0x124>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d103      	bne.n	80021ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	691a      	ldr	r2, [r3, #16]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	615a      	str	r2, [r3, #20]
}
 80021b2:	bf00      	nop
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	40010000 	.word	0x40010000
 80021c4:	40000400 	.word	0x40000400
 80021c8:	40000800 	.word	0x40000800
 80021cc:	40000c00 	.word	0x40000c00
 80021d0:	40010400 	.word	0x40010400
 80021d4:	40014000 	.word	0x40014000
 80021d8:	40014400 	.word	0x40014400
 80021dc:	40014800 	.word	0x40014800
 80021e0:	40001800 	.word	0x40001800
 80021e4:	40001c00 	.word	0x40001c00
 80021e8:	40002000 	.word	0x40002000

080021ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e03f      	b.n	80022a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d106      	bne.n	8002240 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7fe fc6e 	bl	8000b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2224      	movs	r2, #36	; 0x24
 8002244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002256:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 f929 	bl	80024b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	691a      	ldr	r2, [r3, #16]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800226c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	695a      	ldr	r2, [r3, #20]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800227c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68da      	ldr	r2, [r3, #12]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800228c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2220      	movs	r2, #32
 8002298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2220      	movs	r2, #32
 80022a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b08a      	sub	sp, #40	; 0x28
 80022b2:	af02      	add	r7, sp, #8
 80022b4:	60f8      	str	r0, [r7, #12]
 80022b6:	60b9      	str	r1, [r7, #8]
 80022b8:	603b      	str	r3, [r7, #0]
 80022ba:	4613      	mov	r3, r2
 80022bc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b20      	cmp	r3, #32
 80022cc:	d17c      	bne.n	80023c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d002      	beq.n	80022da <HAL_UART_Transmit+0x2c>
 80022d4:	88fb      	ldrh	r3, [r7, #6]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e075      	b.n	80023ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d101      	bne.n	80022ec <HAL_UART_Transmit+0x3e>
 80022e8:	2302      	movs	r3, #2
 80022ea:	e06e      	b.n	80023ca <HAL_UART_Transmit+0x11c>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2221      	movs	r2, #33	; 0x21
 80022fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002302:	f7fe fd75 	bl	8000df0 <HAL_GetTick>
 8002306:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	88fa      	ldrh	r2, [r7, #6]
 800230c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	88fa      	ldrh	r2, [r7, #6]
 8002312:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800231c:	d108      	bne.n	8002330 <HAL_UART_Transmit+0x82>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d104      	bne.n	8002330 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	61bb      	str	r3, [r7, #24]
 800232e:	e003      	b.n	8002338 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002334:	2300      	movs	r3, #0
 8002336:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002340:	e02a      	b.n	8002398 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	2200      	movs	r2, #0
 800234a:	2180      	movs	r1, #128	; 0x80
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f000 f840 	bl	80023d2 <UART_WaitOnFlagUntilTimeout>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e036      	b.n	80023ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10b      	bne.n	800237a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	461a      	mov	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002370:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	3302      	adds	r3, #2
 8002376:	61bb      	str	r3, [r7, #24]
 8002378:	e007      	b.n	800238a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	781a      	ldrb	r2, [r3, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	3301      	adds	r3, #1
 8002388:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800238e:	b29b      	uxth	r3, r3
 8002390:	3b01      	subs	r3, #1
 8002392:	b29a      	uxth	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800239c:	b29b      	uxth	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1cf      	bne.n	8002342 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	2200      	movs	r2, #0
 80023aa:	2140      	movs	r1, #64	; 0x40
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f000 f810 	bl	80023d2 <UART_WaitOnFlagUntilTimeout>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e006      	b.n	80023ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2220      	movs	r2, #32
 80023c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80023c4:	2300      	movs	r3, #0
 80023c6:	e000      	b.n	80023ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80023c8:	2302      	movs	r3, #2
  }
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3720      	adds	r7, #32
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b090      	sub	sp, #64	; 0x40
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	60f8      	str	r0, [r7, #12]
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	603b      	str	r3, [r7, #0]
 80023de:	4613      	mov	r3, r2
 80023e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023e2:	e050      	b.n	8002486 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ea:	d04c      	beq.n	8002486 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80023ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d007      	beq.n	8002402 <UART_WaitOnFlagUntilTimeout+0x30>
 80023f2:	f7fe fcfd 	bl	8000df0 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023fe:	429a      	cmp	r2, r3
 8002400:	d241      	bcs.n	8002486 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	330c      	adds	r3, #12
 8002408:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800240a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240c:	e853 3f00 	ldrex	r3, [r3]
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002418:	63fb      	str	r3, [r7, #60]	; 0x3c
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	330c      	adds	r3, #12
 8002420:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002422:	637a      	str	r2, [r7, #52]	; 0x34
 8002424:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002426:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002428:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800242a:	e841 2300 	strex	r3, r2, [r1]
 800242e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1e5      	bne.n	8002402 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	3314      	adds	r3, #20
 800243c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	e853 3f00 	ldrex	r3, [r3]
 8002444:	613b      	str	r3, [r7, #16]
   return(result);
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	f023 0301 	bic.w	r3, r3, #1
 800244c:	63bb      	str	r3, [r7, #56]	; 0x38
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	3314      	adds	r3, #20
 8002454:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002456:	623a      	str	r2, [r7, #32]
 8002458:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800245a:	69f9      	ldr	r1, [r7, #28]
 800245c:	6a3a      	ldr	r2, [r7, #32]
 800245e:	e841 2300 	strex	r3, r2, [r1]
 8002462:	61bb      	str	r3, [r7, #24]
   return(result);
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1e5      	bne.n	8002436 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2220      	movs	r2, #32
 800246e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2220      	movs	r2, #32
 8002476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e00f      	b.n	80024a6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	4013      	ands	r3, r2
 8002490:	68ba      	ldr	r2, [r7, #8]
 8002492:	429a      	cmp	r2, r3
 8002494:	bf0c      	ite	eq
 8002496:	2301      	moveq	r3, #1
 8002498:	2300      	movne	r3, #0
 800249a:	b2db      	uxtb	r3, r3
 800249c:	461a      	mov	r2, r3
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d09f      	beq.n	80023e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3740      	adds	r7, #64	; 0x40
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024b4:	b09f      	sub	sp, #124	; 0x7c
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80024c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024c6:	68d9      	ldr	r1, [r3, #12]
 80024c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	ea40 0301 	orr.w	r3, r0, r1
 80024d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024d4:	689a      	ldr	r2, [r3, #8]
 80024d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	431a      	orrs	r2, r3
 80024dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	431a      	orrs	r2, r3
 80024e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80024ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80024f4:	f021 010c 	bic.w	r1, r1, #12
 80024f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024fe:	430b      	orrs	r3, r1
 8002500:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800250c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800250e:	6999      	ldr	r1, [r3, #24]
 8002510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	ea40 0301 	orr.w	r3, r0, r1
 8002518:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800251a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	4bc5      	ldr	r3, [pc, #788]	; (8002834 <UART_SetConfig+0x384>)
 8002520:	429a      	cmp	r2, r3
 8002522:	d004      	beq.n	800252e <UART_SetConfig+0x7e>
 8002524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	4bc3      	ldr	r3, [pc, #780]	; (8002838 <UART_SetConfig+0x388>)
 800252a:	429a      	cmp	r2, r3
 800252c:	d103      	bne.n	8002536 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800252e:	f7ff fb7d 	bl	8001c2c <HAL_RCC_GetPCLK2Freq>
 8002532:	6778      	str	r0, [r7, #116]	; 0x74
 8002534:	e002      	b.n	800253c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002536:	f7ff fb65 	bl	8001c04 <HAL_RCC_GetPCLK1Freq>
 800253a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800253c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002544:	f040 80b6 	bne.w	80026b4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002548:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800254a:	461c      	mov	r4, r3
 800254c:	f04f 0500 	mov.w	r5, #0
 8002550:	4622      	mov	r2, r4
 8002552:	462b      	mov	r3, r5
 8002554:	1891      	adds	r1, r2, r2
 8002556:	6439      	str	r1, [r7, #64]	; 0x40
 8002558:	415b      	adcs	r3, r3
 800255a:	647b      	str	r3, [r7, #68]	; 0x44
 800255c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002560:	1912      	adds	r2, r2, r4
 8002562:	eb45 0303 	adc.w	r3, r5, r3
 8002566:	f04f 0000 	mov.w	r0, #0
 800256a:	f04f 0100 	mov.w	r1, #0
 800256e:	00d9      	lsls	r1, r3, #3
 8002570:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002574:	00d0      	lsls	r0, r2, #3
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	1911      	adds	r1, r2, r4
 800257c:	6639      	str	r1, [r7, #96]	; 0x60
 800257e:	416b      	adcs	r3, r5
 8002580:	667b      	str	r3, [r7, #100]	; 0x64
 8002582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	461a      	mov	r2, r3
 8002588:	f04f 0300 	mov.w	r3, #0
 800258c:	1891      	adds	r1, r2, r2
 800258e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002590:	415b      	adcs	r3, r3
 8002592:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002594:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002598:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800259c:	f7fd fe70 	bl	8000280 <__aeabi_uldivmod>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	4ba5      	ldr	r3, [pc, #660]	; (800283c <UART_SetConfig+0x38c>)
 80025a6:	fba3 2302 	umull	r2, r3, r3, r2
 80025aa:	095b      	lsrs	r3, r3, #5
 80025ac:	011e      	lsls	r6, r3, #4
 80025ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025b0:	461c      	mov	r4, r3
 80025b2:	f04f 0500 	mov.w	r5, #0
 80025b6:	4622      	mov	r2, r4
 80025b8:	462b      	mov	r3, r5
 80025ba:	1891      	adds	r1, r2, r2
 80025bc:	6339      	str	r1, [r7, #48]	; 0x30
 80025be:	415b      	adcs	r3, r3
 80025c0:	637b      	str	r3, [r7, #52]	; 0x34
 80025c2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80025c6:	1912      	adds	r2, r2, r4
 80025c8:	eb45 0303 	adc.w	r3, r5, r3
 80025cc:	f04f 0000 	mov.w	r0, #0
 80025d0:	f04f 0100 	mov.w	r1, #0
 80025d4:	00d9      	lsls	r1, r3, #3
 80025d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025da:	00d0      	lsls	r0, r2, #3
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	1911      	adds	r1, r2, r4
 80025e2:	65b9      	str	r1, [r7, #88]	; 0x58
 80025e4:	416b      	adcs	r3, r5
 80025e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	461a      	mov	r2, r3
 80025ee:	f04f 0300 	mov.w	r3, #0
 80025f2:	1891      	adds	r1, r2, r2
 80025f4:	62b9      	str	r1, [r7, #40]	; 0x28
 80025f6:	415b      	adcs	r3, r3
 80025f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025fe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002602:	f7fd fe3d 	bl	8000280 <__aeabi_uldivmod>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	4b8c      	ldr	r3, [pc, #560]	; (800283c <UART_SetConfig+0x38c>)
 800260c:	fba3 1302 	umull	r1, r3, r3, r2
 8002610:	095b      	lsrs	r3, r3, #5
 8002612:	2164      	movs	r1, #100	; 0x64
 8002614:	fb01 f303 	mul.w	r3, r1, r3
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	3332      	adds	r3, #50	; 0x32
 800261e:	4a87      	ldr	r2, [pc, #540]	; (800283c <UART_SetConfig+0x38c>)
 8002620:	fba2 2303 	umull	r2, r3, r2, r3
 8002624:	095b      	lsrs	r3, r3, #5
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800262c:	441e      	add	r6, r3
 800262e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002630:	4618      	mov	r0, r3
 8002632:	f04f 0100 	mov.w	r1, #0
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	1894      	adds	r4, r2, r2
 800263c:	623c      	str	r4, [r7, #32]
 800263e:	415b      	adcs	r3, r3
 8002640:	627b      	str	r3, [r7, #36]	; 0x24
 8002642:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002646:	1812      	adds	r2, r2, r0
 8002648:	eb41 0303 	adc.w	r3, r1, r3
 800264c:	f04f 0400 	mov.w	r4, #0
 8002650:	f04f 0500 	mov.w	r5, #0
 8002654:	00dd      	lsls	r5, r3, #3
 8002656:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800265a:	00d4      	lsls	r4, r2, #3
 800265c:	4622      	mov	r2, r4
 800265e:	462b      	mov	r3, r5
 8002660:	1814      	adds	r4, r2, r0
 8002662:	653c      	str	r4, [r7, #80]	; 0x50
 8002664:	414b      	adcs	r3, r1
 8002666:	657b      	str	r3, [r7, #84]	; 0x54
 8002668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	461a      	mov	r2, r3
 800266e:	f04f 0300 	mov.w	r3, #0
 8002672:	1891      	adds	r1, r2, r2
 8002674:	61b9      	str	r1, [r7, #24]
 8002676:	415b      	adcs	r3, r3
 8002678:	61fb      	str	r3, [r7, #28]
 800267a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800267e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002682:	f7fd fdfd 	bl	8000280 <__aeabi_uldivmod>
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	4b6c      	ldr	r3, [pc, #432]	; (800283c <UART_SetConfig+0x38c>)
 800268c:	fba3 1302 	umull	r1, r3, r3, r2
 8002690:	095b      	lsrs	r3, r3, #5
 8002692:	2164      	movs	r1, #100	; 0x64
 8002694:	fb01 f303 	mul.w	r3, r1, r3
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	3332      	adds	r3, #50	; 0x32
 800269e:	4a67      	ldr	r2, [pc, #412]	; (800283c <UART_SetConfig+0x38c>)
 80026a0:	fba2 2303 	umull	r2, r3, r2, r3
 80026a4:	095b      	lsrs	r3, r3, #5
 80026a6:	f003 0207 	and.w	r2, r3, #7
 80026aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4432      	add	r2, r6
 80026b0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80026b2:	e0b9      	b.n	8002828 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026b6:	461c      	mov	r4, r3
 80026b8:	f04f 0500 	mov.w	r5, #0
 80026bc:	4622      	mov	r2, r4
 80026be:	462b      	mov	r3, r5
 80026c0:	1891      	adds	r1, r2, r2
 80026c2:	6139      	str	r1, [r7, #16]
 80026c4:	415b      	adcs	r3, r3
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80026cc:	1912      	adds	r2, r2, r4
 80026ce:	eb45 0303 	adc.w	r3, r5, r3
 80026d2:	f04f 0000 	mov.w	r0, #0
 80026d6:	f04f 0100 	mov.w	r1, #0
 80026da:	00d9      	lsls	r1, r3, #3
 80026dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026e0:	00d0      	lsls	r0, r2, #3
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	eb12 0804 	adds.w	r8, r2, r4
 80026ea:	eb43 0905 	adc.w	r9, r3, r5
 80026ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f04f 0100 	mov.w	r1, #0
 80026f8:	f04f 0200 	mov.w	r2, #0
 80026fc:	f04f 0300 	mov.w	r3, #0
 8002700:	008b      	lsls	r3, r1, #2
 8002702:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002706:	0082      	lsls	r2, r0, #2
 8002708:	4640      	mov	r0, r8
 800270a:	4649      	mov	r1, r9
 800270c:	f7fd fdb8 	bl	8000280 <__aeabi_uldivmod>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	4b49      	ldr	r3, [pc, #292]	; (800283c <UART_SetConfig+0x38c>)
 8002716:	fba3 2302 	umull	r2, r3, r3, r2
 800271a:	095b      	lsrs	r3, r3, #5
 800271c:	011e      	lsls	r6, r3, #4
 800271e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002720:	4618      	mov	r0, r3
 8002722:	f04f 0100 	mov.w	r1, #0
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	1894      	adds	r4, r2, r2
 800272c:	60bc      	str	r4, [r7, #8]
 800272e:	415b      	adcs	r3, r3
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002736:	1812      	adds	r2, r2, r0
 8002738:	eb41 0303 	adc.w	r3, r1, r3
 800273c:	f04f 0400 	mov.w	r4, #0
 8002740:	f04f 0500 	mov.w	r5, #0
 8002744:	00dd      	lsls	r5, r3, #3
 8002746:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800274a:	00d4      	lsls	r4, r2, #3
 800274c:	4622      	mov	r2, r4
 800274e:	462b      	mov	r3, r5
 8002750:	1814      	adds	r4, r2, r0
 8002752:	64bc      	str	r4, [r7, #72]	; 0x48
 8002754:	414b      	adcs	r3, r1
 8002756:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002758:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	4618      	mov	r0, r3
 800275e:	f04f 0100 	mov.w	r1, #0
 8002762:	f04f 0200 	mov.w	r2, #0
 8002766:	f04f 0300 	mov.w	r3, #0
 800276a:	008b      	lsls	r3, r1, #2
 800276c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002770:	0082      	lsls	r2, r0, #2
 8002772:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002776:	f7fd fd83 	bl	8000280 <__aeabi_uldivmod>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	4b2f      	ldr	r3, [pc, #188]	; (800283c <UART_SetConfig+0x38c>)
 8002780:	fba3 1302 	umull	r1, r3, r3, r2
 8002784:	095b      	lsrs	r3, r3, #5
 8002786:	2164      	movs	r1, #100	; 0x64
 8002788:	fb01 f303 	mul.w	r3, r1, r3
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	3332      	adds	r3, #50	; 0x32
 8002792:	4a2a      	ldr	r2, [pc, #168]	; (800283c <UART_SetConfig+0x38c>)
 8002794:	fba2 2303 	umull	r2, r3, r2, r3
 8002798:	095b      	lsrs	r3, r3, #5
 800279a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800279e:	441e      	add	r6, r3
 80027a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027a2:	4618      	mov	r0, r3
 80027a4:	f04f 0100 	mov.w	r1, #0
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	1894      	adds	r4, r2, r2
 80027ae:	603c      	str	r4, [r7, #0]
 80027b0:	415b      	adcs	r3, r3
 80027b2:	607b      	str	r3, [r7, #4]
 80027b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027b8:	1812      	adds	r2, r2, r0
 80027ba:	eb41 0303 	adc.w	r3, r1, r3
 80027be:	f04f 0400 	mov.w	r4, #0
 80027c2:	f04f 0500 	mov.w	r5, #0
 80027c6:	00dd      	lsls	r5, r3, #3
 80027c8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80027cc:	00d4      	lsls	r4, r2, #3
 80027ce:	4622      	mov	r2, r4
 80027d0:	462b      	mov	r3, r5
 80027d2:	eb12 0a00 	adds.w	sl, r2, r0
 80027d6:	eb43 0b01 	adc.w	fp, r3, r1
 80027da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	4618      	mov	r0, r3
 80027e0:	f04f 0100 	mov.w	r1, #0
 80027e4:	f04f 0200 	mov.w	r2, #0
 80027e8:	f04f 0300 	mov.w	r3, #0
 80027ec:	008b      	lsls	r3, r1, #2
 80027ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80027f2:	0082      	lsls	r2, r0, #2
 80027f4:	4650      	mov	r0, sl
 80027f6:	4659      	mov	r1, fp
 80027f8:	f7fd fd42 	bl	8000280 <__aeabi_uldivmod>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4b0e      	ldr	r3, [pc, #56]	; (800283c <UART_SetConfig+0x38c>)
 8002802:	fba3 1302 	umull	r1, r3, r3, r2
 8002806:	095b      	lsrs	r3, r3, #5
 8002808:	2164      	movs	r1, #100	; 0x64
 800280a:	fb01 f303 	mul.w	r3, r1, r3
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	011b      	lsls	r3, r3, #4
 8002812:	3332      	adds	r3, #50	; 0x32
 8002814:	4a09      	ldr	r2, [pc, #36]	; (800283c <UART_SetConfig+0x38c>)
 8002816:	fba2 2303 	umull	r2, r3, r2, r3
 800281a:	095b      	lsrs	r3, r3, #5
 800281c:	f003 020f 	and.w	r2, r3, #15
 8002820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4432      	add	r2, r6
 8002826:	609a      	str	r2, [r3, #8]
}
 8002828:	bf00      	nop
 800282a:	377c      	adds	r7, #124	; 0x7c
 800282c:	46bd      	mov	sp, r7
 800282e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002832:	bf00      	nop
 8002834:	40011000 	.word	0x40011000
 8002838:	40011400 	.word	0x40011400
 800283c:	51eb851f 	.word	0x51eb851f

08002840 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f103 0208 	add.w	r2, r3, #8
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f04f 32ff 	mov.w	r2, #4294967295
 8002858:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f103 0208 	add.w	r2, r3, #8
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f103 0208 	add.w	r2, r3, #8
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800289a:	b480      	push	{r7}
 800289c:	b085      	sub	sp, #20
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
 80028a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	1c5a      	adds	r2, r3, #1
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	601a      	str	r2, [r3, #0]
}
 80028d6:	bf00      	nop
 80028d8:	3714      	adds	r7, #20
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028e2:	b480      	push	{r7}
 80028e4:	b085      	sub	sp, #20
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f8:	d103      	bne.n	8002902 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	e00c      	b.n	800291c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3308      	adds	r3, #8
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	e002      	b.n	8002910 <vListInsert+0x2e>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	429a      	cmp	r2, r3
 800291a:	d2f6      	bcs.n	800290a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	1c5a      	adds	r2, r3, #1
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	601a      	str	r2, [r3, #0]
}
 8002948:	bf00      	nop
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6892      	ldr	r2, [r2, #8]
 800296a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6852      	ldr	r2, [r2, #4]
 8002974:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	429a      	cmp	r2, r3
 800297e:	d103      	bne.n	8002988 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	1e5a      	subs	r2, r3, #1
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
}
 800299c:	4618      	mov	r0, r3
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10a      	bne.n	80029d2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80029bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c0:	f383 8811 	msr	BASEPRI, r3
 80029c4:	f3bf 8f6f 	isb	sy
 80029c8:	f3bf 8f4f 	dsb	sy
 80029cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80029ce:	bf00      	nop
 80029d0:	e7fe      	b.n	80029d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80029d2:	f002 f85f 	bl	8004a94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029de:	68f9      	ldr	r1, [r7, #12]
 80029e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029e2:	fb01 f303 	mul.w	r3, r1, r3
 80029e6:	441a      	add	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a02:	3b01      	subs	r3, #1
 8002a04:	68f9      	ldr	r1, [r7, #12]
 8002a06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a08:	fb01 f303 	mul.w	r3, r1, r3
 8002a0c:	441a      	add	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	22ff      	movs	r2, #255	; 0xff
 8002a16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	22ff      	movs	r2, #255	; 0xff
 8002a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d114      	bne.n	8002a52 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d01a      	beq.n	8002a66 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	3310      	adds	r3, #16
 8002a34:	4618      	mov	r0, r3
 8002a36:	f001 f841 	bl	8003abc <xTaskRemoveFromEventList>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d012      	beq.n	8002a66 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002a40:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <xQueueGenericReset+0xcc>)
 8002a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	f3bf 8f4f 	dsb	sy
 8002a4c:	f3bf 8f6f 	isb	sy
 8002a50:	e009      	b.n	8002a66 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	3310      	adds	r3, #16
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff fef2 	bl	8002840 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	3324      	adds	r3, #36	; 0x24
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff feed 	bl	8002840 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002a66:	f002 f845 	bl	8004af4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002a6a:	2301      	movs	r3, #1
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	e000ed04 	.word	0xe000ed04

08002a78 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b08a      	sub	sp, #40	; 0x28
 8002a7c:	af02      	add	r7, sp, #8
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	4613      	mov	r3, r2
 8002a84:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10a      	bne.n	8002aa2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a90:	f383 8811 	msr	BASEPRI, r3
 8002a94:	f3bf 8f6f 	isb	sy
 8002a98:	f3bf 8f4f 	dsb	sy
 8002a9c:	613b      	str	r3, [r7, #16]
}
 8002a9e:	bf00      	nop
 8002aa0:	e7fe      	b.n	8002aa0 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d102      	bne.n	8002aae <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	61fb      	str	r3, [r7, #28]
 8002aac:	e004      	b.n	8002ab8 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	fb02 f303 	mul.w	r3, r2, r3
 8002ab6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	3350      	adds	r3, #80	; 0x50
 8002abc:	4618      	mov	r0, r3
 8002abe:	f002 f90b 	bl	8004cd8 <pvPortMalloc>
 8002ac2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00d      	beq.n	8002ae6 <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	3350      	adds	r3, #80	; 0x50
 8002ad2:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ad4:	79fa      	ldrb	r2, [r7, #7]
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	4613      	mov	r3, r2
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	68b9      	ldr	r1, [r7, #8]
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 f805 	bl	8002af0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ae6:	69bb      	ldr	r3, [r7, #24]
	}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3720      	adds	r7, #32
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
 8002afc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d103      	bne.n	8002b0c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	e002      	b.n	8002b12 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b1e:	2101      	movs	r1, #1
 8002b20:	69b8      	ldr	r0, [r7, #24]
 8002b22:	f7ff ff41 	bl	80029a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	78fa      	ldrb	r2, [r7, #3]
 8002b2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002b2e:	bf00      	nop
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b08e      	sub	sp, #56	; 0x38
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
 8002b44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b46:	2300      	movs	r3, #0
 8002b48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10a      	bne.n	8002b6a <xQueueGenericSend+0x32>
	__asm volatile
 8002b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b58:	f383 8811 	msr	BASEPRI, r3
 8002b5c:	f3bf 8f6f 	isb	sy
 8002b60:	f3bf 8f4f 	dsb	sy
 8002b64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b66:	bf00      	nop
 8002b68:	e7fe      	b.n	8002b68 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d103      	bne.n	8002b78 <xQueueGenericSend+0x40>
 8002b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <xQueueGenericSend+0x44>
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e000      	b.n	8002b7e <xQueueGenericSend+0x46>
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10a      	bne.n	8002b98 <xQueueGenericSend+0x60>
	__asm volatile
 8002b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b86:	f383 8811 	msr	BASEPRI, r3
 8002b8a:	f3bf 8f6f 	isb	sy
 8002b8e:	f3bf 8f4f 	dsb	sy
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b94:	bf00      	nop
 8002b96:	e7fe      	b.n	8002b96 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d103      	bne.n	8002ba6 <xQueueGenericSend+0x6e>
 8002b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d101      	bne.n	8002baa <xQueueGenericSend+0x72>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <xQueueGenericSend+0x74>
 8002baa:	2300      	movs	r3, #0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10a      	bne.n	8002bc6 <xQueueGenericSend+0x8e>
	__asm volatile
 8002bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb4:	f383 8811 	msr	BASEPRI, r3
 8002bb8:	f3bf 8f6f 	isb	sy
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	623b      	str	r3, [r7, #32]
}
 8002bc2:	bf00      	nop
 8002bc4:	e7fe      	b.n	8002bc4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002bc6:	f001 f915 	bl	8003df4 <xTaskGetSchedulerState>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d102      	bne.n	8002bd6 <xQueueGenericSend+0x9e>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <xQueueGenericSend+0xa2>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <xQueueGenericSend+0xa4>
 8002bda:	2300      	movs	r3, #0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10a      	bne.n	8002bf6 <xQueueGenericSend+0xbe>
	__asm volatile
 8002be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be4:	f383 8811 	msr	BASEPRI, r3
 8002be8:	f3bf 8f6f 	isb	sy
 8002bec:	f3bf 8f4f 	dsb	sy
 8002bf0:	61fb      	str	r3, [r7, #28]
}
 8002bf2:	bf00      	nop
 8002bf4:	e7fe      	b.n	8002bf4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002bf6:	f001 ff4d 	bl	8004a94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d302      	bcc.n	8002c0c <xQueueGenericSend+0xd4>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d129      	bne.n	8002c60 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	68b9      	ldr	r1, [r7, #8]
 8002c10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c12:	f000 fa07 	bl	8003024 <prvCopyDataToQueue>
 8002c16:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d010      	beq.n	8002c42 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c22:	3324      	adds	r3, #36	; 0x24
 8002c24:	4618      	mov	r0, r3
 8002c26:	f000 ff49 	bl	8003abc <xTaskRemoveFromEventList>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d013      	beq.n	8002c58 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002c30:	4b3f      	ldr	r3, [pc, #252]	; (8002d30 <xQueueGenericSend+0x1f8>)
 8002c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	f3bf 8f4f 	dsb	sy
 8002c3c:	f3bf 8f6f 	isb	sy
 8002c40:	e00a      	b.n	8002c58 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d007      	beq.n	8002c58 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002c48:	4b39      	ldr	r3, [pc, #228]	; (8002d30 <xQueueGenericSend+0x1f8>)
 8002c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	f3bf 8f4f 	dsb	sy
 8002c54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002c58:	f001 ff4c 	bl	8004af4 <vPortExitCritical>
				return pdPASS;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e063      	b.n	8002d28 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d103      	bne.n	8002c6e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c66:	f001 ff45 	bl	8004af4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	e05c      	b.n	8002d28 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d106      	bne.n	8002c82 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c74:	f107 0314 	add.w	r3, r7, #20
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f000 ff81 	bl	8003b80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c82:	f001 ff37 	bl	8004af4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c86:	f000 fcfb 	bl	8003680 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c8a:	f001 ff03 	bl	8004a94 <vPortEnterCritical>
 8002c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c94:	b25b      	sxtb	r3, r3
 8002c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9a:	d103      	bne.n	8002ca4 <xQueueGenericSend+0x16c>
 8002c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002caa:	b25b      	sxtb	r3, r3
 8002cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb0:	d103      	bne.n	8002cba <xQueueGenericSend+0x182>
 8002cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cba:	f001 ff1b 	bl	8004af4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002cbe:	1d3a      	adds	r2, r7, #4
 8002cc0:	f107 0314 	add.w	r3, r7, #20
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 ff70 	bl	8003bac <xTaskCheckForTimeOut>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d124      	bne.n	8002d1c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002cd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cd4:	f000 fa9e 	bl	8003214 <prvIsQueueFull>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d018      	beq.n	8002d10 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce0:	3310      	adds	r3, #16
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	4611      	mov	r1, r2
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 fe98 	bl	8003a1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002cec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cee:	f000 fa29 	bl	8003144 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002cf2:	f000 fcd3 	bl	800369c <xTaskResumeAll>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f47f af7c 	bne.w	8002bf6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002cfe:	4b0c      	ldr	r3, [pc, #48]	; (8002d30 <xQueueGenericSend+0x1f8>)
 8002d00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	f3bf 8f4f 	dsb	sy
 8002d0a:	f3bf 8f6f 	isb	sy
 8002d0e:	e772      	b.n	8002bf6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002d10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d12:	f000 fa17 	bl	8003144 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d16:	f000 fcc1 	bl	800369c <xTaskResumeAll>
 8002d1a:	e76c      	b.n	8002bf6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002d1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d1e:	f000 fa11 	bl	8003144 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d22:	f000 fcbb 	bl	800369c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002d26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3738      	adds	r7, #56	; 0x38
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	e000ed04 	.word	0xe000ed04

08002d34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b08e      	sub	sp, #56	; 0x38
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
 8002d40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10a      	bne.n	8002d62 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d50:	f383 8811 	msr	BASEPRI, r3
 8002d54:	f3bf 8f6f 	isb	sy
 8002d58:	f3bf 8f4f 	dsb	sy
 8002d5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d5e:	bf00      	nop
 8002d60:	e7fe      	b.n	8002d60 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d103      	bne.n	8002d70 <xQueueGenericSendFromISR+0x3c>
 8002d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <xQueueGenericSendFromISR+0x40>
 8002d70:	2301      	movs	r3, #1
 8002d72:	e000      	b.n	8002d76 <xQueueGenericSendFromISR+0x42>
 8002d74:	2300      	movs	r3, #0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10a      	bne.n	8002d90 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7e:	f383 8811 	msr	BASEPRI, r3
 8002d82:	f3bf 8f6f 	isb	sy
 8002d86:	f3bf 8f4f 	dsb	sy
 8002d8a:	623b      	str	r3, [r7, #32]
}
 8002d8c:	bf00      	nop
 8002d8e:	e7fe      	b.n	8002d8e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d103      	bne.n	8002d9e <xQueueGenericSendFromISR+0x6a>
 8002d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d101      	bne.n	8002da2 <xQueueGenericSendFromISR+0x6e>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <xQueueGenericSendFromISR+0x70>
 8002da2:	2300      	movs	r3, #0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10a      	bne.n	8002dbe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dac:	f383 8811 	msr	BASEPRI, r3
 8002db0:	f3bf 8f6f 	isb	sy
 8002db4:	f3bf 8f4f 	dsb	sy
 8002db8:	61fb      	str	r3, [r7, #28]
}
 8002dba:	bf00      	nop
 8002dbc:	e7fe      	b.n	8002dbc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002dbe:	f001 ff4b 	bl	8004c58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002dc2:	f3ef 8211 	mrs	r2, BASEPRI
 8002dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dca:	f383 8811 	msr	BASEPRI, r3
 8002dce:	f3bf 8f6f 	isb	sy
 8002dd2:	f3bf 8f4f 	dsb	sy
 8002dd6:	61ba      	str	r2, [r7, #24]
 8002dd8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002dda:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d302      	bcc.n	8002df0 <xQueueGenericSendFromISR+0xbc>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d12c      	bne.n	8002e4a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	68b9      	ldr	r1, [r7, #8]
 8002dfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e00:	f000 f910 	bl	8003024 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002e04:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e0c:	d112      	bne.n	8002e34 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d016      	beq.n	8002e44 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e18:	3324      	adds	r3, #36	; 0x24
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f000 fe4e 	bl	8003abc <xTaskRemoveFromEventList>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00e      	beq.n	8002e44 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00b      	beq.n	8002e44 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	e007      	b.n	8002e44 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002e34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002e38:	3301      	adds	r3, #1
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	b25a      	sxtb	r2, r3
 8002e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002e44:	2301      	movs	r3, #1
 8002e46:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002e48:	e001      	b.n	8002e4e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e50:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002e58:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3738      	adds	r7, #56	; 0x38
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08c      	sub	sp, #48	; 0x30
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e70:	2300      	movs	r3, #0
 8002e72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10a      	bne.n	8002e94 <xQueueReceive+0x30>
	__asm volatile
 8002e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e82:	f383 8811 	msr	BASEPRI, r3
 8002e86:	f3bf 8f6f 	isb	sy
 8002e8a:	f3bf 8f4f 	dsb	sy
 8002e8e:	623b      	str	r3, [r7, #32]
}
 8002e90:	bf00      	nop
 8002e92:	e7fe      	b.n	8002e92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d103      	bne.n	8002ea2 <xQueueReceive+0x3e>
 8002e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <xQueueReceive+0x42>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <xQueueReceive+0x44>
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10a      	bne.n	8002ec2 <xQueueReceive+0x5e>
	__asm volatile
 8002eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb0:	f383 8811 	msr	BASEPRI, r3
 8002eb4:	f3bf 8f6f 	isb	sy
 8002eb8:	f3bf 8f4f 	dsb	sy
 8002ebc:	61fb      	str	r3, [r7, #28]
}
 8002ebe:	bf00      	nop
 8002ec0:	e7fe      	b.n	8002ec0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ec2:	f000 ff97 	bl	8003df4 <xTaskGetSchedulerState>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d102      	bne.n	8002ed2 <xQueueReceive+0x6e>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <xQueueReceive+0x72>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e000      	b.n	8002ed8 <xQueueReceive+0x74>
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10a      	bne.n	8002ef2 <xQueueReceive+0x8e>
	__asm volatile
 8002edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee0:	f383 8811 	msr	BASEPRI, r3
 8002ee4:	f3bf 8f6f 	isb	sy
 8002ee8:	f3bf 8f4f 	dsb	sy
 8002eec:	61bb      	str	r3, [r7, #24]
}
 8002eee:	bf00      	nop
 8002ef0:	e7fe      	b.n	8002ef0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ef2:	f001 fdcf 	bl	8004a94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d01f      	beq.n	8002f42 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002f02:	68b9      	ldr	r1, [r7, #8]
 8002f04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f06:	f000 f8f7 	bl	80030f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	1e5a      	subs	r2, r3, #1
 8002f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00f      	beq.n	8002f3a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1c:	3310      	adds	r3, #16
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 fdcc 	bl	8003abc <xTaskRemoveFromEventList>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d007      	beq.n	8002f3a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002f2a:	4b3d      	ldr	r3, [pc, #244]	; (8003020 <xQueueReceive+0x1bc>)
 8002f2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	f3bf 8f4f 	dsb	sy
 8002f36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002f3a:	f001 fddb 	bl	8004af4 <vPortExitCritical>
				return pdPASS;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e069      	b.n	8003016 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d103      	bne.n	8002f50 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f48:	f001 fdd4 	bl	8004af4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	e062      	b.n	8003016 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d106      	bne.n	8002f64 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f56:	f107 0310 	add.w	r3, r7, #16
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 fe10 	bl	8003b80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f60:	2301      	movs	r3, #1
 8002f62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f64:	f001 fdc6 	bl	8004af4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f68:	f000 fb8a 	bl	8003680 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f6c:	f001 fd92 	bl	8004a94 <vPortEnterCritical>
 8002f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f76:	b25b      	sxtb	r3, r3
 8002f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7c:	d103      	bne.n	8002f86 <xQueueReceive+0x122>
 8002f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f8c:	b25b      	sxtb	r3, r3
 8002f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f92:	d103      	bne.n	8002f9c <xQueueReceive+0x138>
 8002f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f9c:	f001 fdaa 	bl	8004af4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002fa0:	1d3a      	adds	r2, r7, #4
 8002fa2:	f107 0310 	add.w	r3, r7, #16
 8002fa6:	4611      	mov	r1, r2
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 fdff 	bl	8003bac <xTaskCheckForTimeOut>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d123      	bne.n	8002ffc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fb6:	f000 f917 	bl	80031e8 <prvIsQueueEmpty>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d017      	beq.n	8002ff0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc2:	3324      	adds	r3, #36	; 0x24
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f000 fd27 	bl	8003a1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002fce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fd0:	f000 f8b8 	bl	8003144 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002fd4:	f000 fb62 	bl	800369c <xTaskResumeAll>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d189      	bne.n	8002ef2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002fde:	4b10      	ldr	r3, [pc, #64]	; (8003020 <xQueueReceive+0x1bc>)
 8002fe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	f3bf 8f4f 	dsb	sy
 8002fea:	f3bf 8f6f 	isb	sy
 8002fee:	e780      	b.n	8002ef2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002ff0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ff2:	f000 f8a7 	bl	8003144 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ff6:	f000 fb51 	bl	800369c <xTaskResumeAll>
 8002ffa:	e77a      	b.n	8002ef2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ffe:	f000 f8a1 	bl	8003144 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003002:	f000 fb4b 	bl	800369c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003006:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003008:	f000 f8ee 	bl	80031e8 <prvIsQueueEmpty>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	f43f af6f 	beq.w	8002ef2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003014:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003016:	4618      	mov	r0, r3
 8003018:	3730      	adds	r7, #48	; 0x30
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	e000ed04 	.word	0xe000ed04

08003024 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003030:	2300      	movs	r3, #0
 8003032:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003038:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10d      	bne.n	800305e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d14d      	bne.n	80030e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	4618      	mov	r0, r3
 8003050:	f000 feee 	bl	8003e30 <xTaskPriorityDisinherit>
 8003054:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	609a      	str	r2, [r3, #8]
 800305c:	e043      	b.n	80030e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d119      	bne.n	8003098 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6858      	ldr	r0, [r3, #4]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306c:	461a      	mov	r2, r3
 800306e:	68b9      	ldr	r1, [r7, #8]
 8003070:	f002 f836 	bl	80050e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	441a      	add	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	429a      	cmp	r2, r3
 800308c:	d32b      	bcc.n	80030e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	605a      	str	r2, [r3, #4]
 8003096:	e026      	b.n	80030e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	68d8      	ldr	r0, [r3, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	461a      	mov	r2, r3
 80030a2:	68b9      	ldr	r1, [r7, #8]
 80030a4:	f002 f81c 	bl	80050e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	68da      	ldr	r2, [r3, #12]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	425b      	negs	r3, r3
 80030b2:	441a      	add	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	68da      	ldr	r2, [r3, #12]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d207      	bcs.n	80030d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	425b      	negs	r3, r3
 80030ce:	441a      	add	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d105      	bne.n	80030e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d002      	beq.n	80030e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	3b01      	subs	r3, #1
 80030e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80030ee:	697b      	ldr	r3, [r7, #20]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	2b00      	cmp	r3, #0
 8003108:	d018      	beq.n	800313c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68da      	ldr	r2, [r3, #12]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	441a      	add	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68da      	ldr	r2, [r3, #12]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	429a      	cmp	r2, r3
 8003122:	d303      	bcc.n	800312c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68d9      	ldr	r1, [r3, #12]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	461a      	mov	r2, r3
 8003136:	6838      	ldr	r0, [r7, #0]
 8003138:	f001 ffd2 	bl	80050e0 <memcpy>
	}
}
 800313c:	bf00      	nop
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800314c:	f001 fca2 	bl	8004a94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003156:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003158:	e011      	b.n	800317e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	2b00      	cmp	r3, #0
 8003160:	d012      	beq.n	8003188 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	3324      	adds	r3, #36	; 0x24
 8003166:	4618      	mov	r0, r3
 8003168:	f000 fca8 	bl	8003abc <xTaskRemoveFromEventList>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003172:	f000 fd7d 	bl	8003c70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003176:	7bfb      	ldrb	r3, [r7, #15]
 8003178:	3b01      	subs	r3, #1
 800317a:	b2db      	uxtb	r3, r3
 800317c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800317e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003182:	2b00      	cmp	r3, #0
 8003184:	dce9      	bgt.n	800315a <prvUnlockQueue+0x16>
 8003186:	e000      	b.n	800318a <prvUnlockQueue+0x46>
					break;
 8003188:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	22ff      	movs	r2, #255	; 0xff
 800318e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003192:	f001 fcaf 	bl	8004af4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003196:	f001 fc7d 	bl	8004a94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80031a2:	e011      	b.n	80031c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d012      	beq.n	80031d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3310      	adds	r3, #16
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 fc83 	bl	8003abc <xTaskRemoveFromEventList>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80031bc:	f000 fd58 	bl	8003c70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80031c0:	7bbb      	ldrb	r3, [r7, #14]
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80031c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	dce9      	bgt.n	80031a4 <prvUnlockQueue+0x60>
 80031d0:	e000      	b.n	80031d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80031d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	22ff      	movs	r2, #255	; 0xff
 80031d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80031dc:	f001 fc8a 	bl	8004af4 <vPortExitCritical>
}
 80031e0:	bf00      	nop
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80031f0:	f001 fc50 	bl	8004a94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d102      	bne.n	8003202 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80031fc:	2301      	movs	r3, #1
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	e001      	b.n	8003206 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003202:	2300      	movs	r3, #0
 8003204:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003206:	f001 fc75 	bl	8004af4 <vPortExitCritical>

	return xReturn;
 800320a:	68fb      	ldr	r3, [r7, #12]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800321c:	f001 fc3a 	bl	8004a94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003228:	429a      	cmp	r2, r3
 800322a:	d102      	bne.n	8003232 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800322c:	2301      	movs	r3, #1
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	e001      	b.n	8003236 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003232:	2300      	movs	r3, #0
 8003234:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003236:	f001 fc5d 	bl	8004af4 <vPortExitCritical>

	return xReturn;
 800323a:	68fb      	ldr	r3, [r7, #12]
}
 800323c:	4618      	mov	r0, r3
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800324e:	2300      	movs	r3, #0
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	e014      	b.n	800327e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003254:	4a0f      	ldr	r2, [pc, #60]	; (8003294 <vQueueAddToRegistry+0x50>)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10b      	bne.n	8003278 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003260:	490c      	ldr	r1, [pc, #48]	; (8003294 <vQueueAddToRegistry+0x50>)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800326a:	4a0a      	ldr	r2, [pc, #40]	; (8003294 <vQueueAddToRegistry+0x50>)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	4413      	add	r3, r2
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003276:	e006      	b.n	8003286 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	3301      	adds	r3, #1
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2b07      	cmp	r3, #7
 8003282:	d9e7      	bls.n	8003254 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003284:	bf00      	nop
 8003286:	bf00      	nop
 8003288:	3714      	adds	r7, #20
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	20012f58 	.word	0x20012f58

08003298 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80032a8:	f001 fbf4 	bl	8004a94 <vPortEnterCritical>
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032b2:	b25b      	sxtb	r3, r3
 80032b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b8:	d103      	bne.n	80032c2 <vQueueWaitForMessageRestricted+0x2a>
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032c8:	b25b      	sxtb	r3, r3
 80032ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ce:	d103      	bne.n	80032d8 <vQueueWaitForMessageRestricted+0x40>
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032d8:	f001 fc0c 	bl	8004af4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d106      	bne.n	80032f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	3324      	adds	r3, #36	; 0x24
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	68b9      	ldr	r1, [r7, #8]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f000 fbb9 	bl	8003a64 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80032f2:	6978      	ldr	r0, [r7, #20]
 80032f4:	f7ff ff26 	bl	8003144 <prvUnlockQueue>
	}
 80032f8:	bf00      	nop
 80032fa:	3718      	adds	r7, #24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003300:	b580      	push	{r7, lr}
 8003302:	b08c      	sub	sp, #48	; 0x30
 8003304:	af04      	add	r7, sp, #16
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	603b      	str	r3, [r7, #0]
 800330c:	4613      	mov	r3, r2
 800330e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003310:	88fb      	ldrh	r3, [r7, #6]
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4618      	mov	r0, r3
 8003316:	f001 fcdf 	bl	8004cd8 <pvPortMalloc>
 800331a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00e      	beq.n	8003340 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003322:	2058      	movs	r0, #88	; 0x58
 8003324:	f001 fcd8 	bl	8004cd8 <pvPortMalloc>
 8003328:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d003      	beq.n	8003338 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	631a      	str	r2, [r3, #48]	; 0x30
 8003336:	e005      	b.n	8003344 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003338:	6978      	ldr	r0, [r7, #20]
 800333a:	f001 fd91 	bl	8004e60 <vPortFree>
 800333e:	e001      	b.n	8003344 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003340:	2300      	movs	r3, #0
 8003342:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d013      	beq.n	8003372 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800334a:	88fa      	ldrh	r2, [r7, #6]
 800334c:	2300      	movs	r3, #0
 800334e:	9303      	str	r3, [sp, #12]
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	9302      	str	r3, [sp, #8]
 8003354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003356:	9301      	str	r3, [sp, #4]
 8003358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	68b9      	ldr	r1, [r7, #8]
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 f80e 	bl	8003382 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003366:	69f8      	ldr	r0, [r7, #28]
 8003368:	f000 f89a 	bl	80034a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800336c:	2301      	movs	r3, #1
 800336e:	61bb      	str	r3, [r7, #24]
 8003370:	e002      	b.n	8003378 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003372:	f04f 33ff 	mov.w	r3, #4294967295
 8003376:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003378:	69bb      	ldr	r3, [r7, #24]
	}
 800337a:	4618      	mov	r0, r3
 800337c:	3720      	adds	r7, #32
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b088      	sub	sp, #32
 8003386:	af00      	add	r7, sp, #0
 8003388:	60f8      	str	r0, [r7, #12]
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	607a      	str	r2, [r7, #4]
 800338e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003392:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	461a      	mov	r2, r3
 800339a:	21a5      	movs	r1, #165	; 0xa5
 800339c:	f001 feae 	bl	80050fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80033a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80033aa:	3b01      	subs	r3, #1
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	f023 0307 	bic.w	r3, r3, #7
 80033b8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <prvInitialiseNewTask+0x58>
	__asm volatile
 80033c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c8:	f383 8811 	msr	BASEPRI, r3
 80033cc:	f3bf 8f6f 	isb	sy
 80033d0:	f3bf 8f4f 	dsb	sy
 80033d4:	617b      	str	r3, [r7, #20]
}
 80033d6:	bf00      	nop
 80033d8:	e7fe      	b.n	80033d8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d01f      	beq.n	8003420 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033e0:	2300      	movs	r3, #0
 80033e2:	61fb      	str	r3, [r7, #28]
 80033e4:	e012      	b.n	800340c <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	4413      	add	r3, r2
 80033ec:	7819      	ldrb	r1, [r3, #0]
 80033ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	4413      	add	r3, r2
 80033f4:	3334      	adds	r3, #52	; 0x34
 80033f6:	460a      	mov	r2, r1
 80033f8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	4413      	add	r3, r2
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d006      	beq.n	8003414 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	3301      	adds	r3, #1
 800340a:	61fb      	str	r3, [r7, #28]
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	2b09      	cmp	r3, #9
 8003410:	d9e9      	bls.n	80033e6 <prvInitialiseNewTask+0x64>
 8003412:	e000      	b.n	8003416 <prvInitialiseNewTask+0x94>
			{
				break;
 8003414:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003418:	2200      	movs	r2, #0
 800341a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800341e:	e003      	b.n	8003428 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342a:	2b0e      	cmp	r3, #14
 800342c:	d901      	bls.n	8003432 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800342e:	230e      	movs	r3, #14
 8003430:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003434:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003436:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800343c:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 800343e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003440:	2200      	movs	r2, #0
 8003442:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003446:	3304      	adds	r3, #4
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff fa19 	bl	8002880 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800344e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003450:	3318      	adds	r3, #24
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff fa14 	bl	8002880 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800345c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800345e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003460:	f1c3 020f 	rsb	r2, r3, #15
 8003464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003466:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800346c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800346e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003470:	2200      	movs	r2, #0
 8003472:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	68f9      	ldr	r1, [r7, #12]
 8003480:	69b8      	ldr	r0, [r7, #24]
 8003482:	f001 f9c9 	bl	8004818 <pxPortInitialiseStack>
 8003486:	4602      	mov	r2, r0
 8003488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800348c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003496:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003498:	bf00      	nop
 800349a:	3720      	adds	r7, #32
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80034a8:	f001 faf4 	bl	8004a94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80034ac:	4b2c      	ldr	r3, [pc, #176]	; (8003560 <prvAddNewTaskToReadyList+0xc0>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	3301      	adds	r3, #1
 80034b2:	4a2b      	ldr	r2, [pc, #172]	; (8003560 <prvAddNewTaskToReadyList+0xc0>)
 80034b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80034b6:	4b2b      	ldr	r3, [pc, #172]	; (8003564 <prvAddNewTaskToReadyList+0xc4>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d109      	bne.n	80034d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80034be:	4a29      	ldr	r2, [pc, #164]	; (8003564 <prvAddNewTaskToReadyList+0xc4>)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80034c4:	4b26      	ldr	r3, [pc, #152]	; (8003560 <prvAddNewTaskToReadyList+0xc0>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d110      	bne.n	80034ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80034cc:	f000 fbf4 	bl	8003cb8 <prvInitialiseTaskLists>
 80034d0:	e00d      	b.n	80034ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80034d2:	4b25      	ldr	r3, [pc, #148]	; (8003568 <prvAddNewTaskToReadyList+0xc8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d109      	bne.n	80034ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80034da:	4b22      	ldr	r3, [pc, #136]	; (8003564 <prvAddNewTaskToReadyList+0xc4>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d802      	bhi.n	80034ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80034e8:	4a1e      	ldr	r2, [pc, #120]	; (8003564 <prvAddNewTaskToReadyList+0xc4>)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80034ee:	4b1f      	ldr	r3, [pc, #124]	; (800356c <prvAddNewTaskToReadyList+0xcc>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	3301      	adds	r3, #1
 80034f4:	4a1d      	ldr	r2, [pc, #116]	; (800356c <prvAddNewTaskToReadyList+0xcc>)
 80034f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80034f8:	4b1c      	ldr	r3, [pc, #112]	; (800356c <prvAddNewTaskToReadyList+0xcc>)
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003504:	2201      	movs	r2, #1
 8003506:	409a      	lsls	r2, r3
 8003508:	4b19      	ldr	r3, [pc, #100]	; (8003570 <prvAddNewTaskToReadyList+0xd0>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4313      	orrs	r3, r2
 800350e:	4a18      	ldr	r2, [pc, #96]	; (8003570 <prvAddNewTaskToReadyList+0xd0>)
 8003510:	6013      	str	r3, [r2, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003516:	4613      	mov	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4413      	add	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4a15      	ldr	r2, [pc, #84]	; (8003574 <prvAddNewTaskToReadyList+0xd4>)
 8003520:	441a      	add	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3304      	adds	r3, #4
 8003526:	4619      	mov	r1, r3
 8003528:	4610      	mov	r0, r2
 800352a:	f7ff f9b6 	bl	800289a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800352e:	f001 fae1 	bl	8004af4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003532:	4b0d      	ldr	r3, [pc, #52]	; (8003568 <prvAddNewTaskToReadyList+0xc8>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00e      	beq.n	8003558 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800353a:	4b0a      	ldr	r3, [pc, #40]	; (8003564 <prvAddNewTaskToReadyList+0xc4>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003544:	429a      	cmp	r2, r3
 8003546:	d207      	bcs.n	8003558 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003548:	4b0b      	ldr	r3, [pc, #44]	; (8003578 <prvAddNewTaskToReadyList+0xd8>)
 800354a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	f3bf 8f4f 	dsb	sy
 8003554:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003558:	bf00      	nop
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	20000238 	.word	0x20000238
 8003564:	20000098 	.word	0x20000098
 8003568:	20000244 	.word	0x20000244
 800356c:	20000254 	.word	0x20000254
 8003570:	20000240 	.word	0x20000240
 8003574:	2000009c 	.word	0x2000009c
 8003578:	e000ed04 	.word	0xe000ed04

0800357c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003584:	2300      	movs	r3, #0
 8003586:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d017      	beq.n	80035be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800358e:	4b13      	ldr	r3, [pc, #76]	; (80035dc <vTaskDelay+0x60>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00a      	beq.n	80035ac <vTaskDelay+0x30>
	__asm volatile
 8003596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800359a:	f383 8811 	msr	BASEPRI, r3
 800359e:	f3bf 8f6f 	isb	sy
 80035a2:	f3bf 8f4f 	dsb	sy
 80035a6:	60bb      	str	r3, [r7, #8]
}
 80035a8:	bf00      	nop
 80035aa:	e7fe      	b.n	80035aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80035ac:	f000 f868 	bl	8003680 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80035b0:	2100      	movs	r1, #0
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 fcc2 	bl	8003f3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80035b8:	f000 f870 	bl	800369c <xTaskResumeAll>
 80035bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d107      	bne.n	80035d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80035c4:	4b06      	ldr	r3, [pc, #24]	; (80035e0 <vTaskDelay+0x64>)
 80035c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	f3bf 8f4f 	dsb	sy
 80035d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80035d4:	bf00      	nop
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	20000260 	.word	0x20000260
 80035e0:	e000ed04 	.word	0xe000ed04

080035e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80035ea:	4b1f      	ldr	r3, [pc, #124]	; (8003668 <vTaskStartScheduler+0x84>)
 80035ec:	9301      	str	r3, [sp, #4]
 80035ee:	2300      	movs	r3, #0
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	2300      	movs	r3, #0
 80035f4:	2282      	movs	r2, #130	; 0x82
 80035f6:	491d      	ldr	r1, [pc, #116]	; (800366c <vTaskStartScheduler+0x88>)
 80035f8:	481d      	ldr	r0, [pc, #116]	; (8003670 <vTaskStartScheduler+0x8c>)
 80035fa:	f7ff fe81 	bl	8003300 <xTaskCreate>
 80035fe:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d102      	bne.n	800360c <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8003606:	f000 fdf5 	bl	80041f4 <xTimerCreateTimerTask>
 800360a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d116      	bne.n	8003640 <vTaskStartScheduler+0x5c>
	__asm volatile
 8003612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003616:	f383 8811 	msr	BASEPRI, r3
 800361a:	f3bf 8f6f 	isb	sy
 800361e:	f3bf 8f4f 	dsb	sy
 8003622:	60bb      	str	r3, [r7, #8]
}
 8003624:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003626:	4b13      	ldr	r3, [pc, #76]	; (8003674 <vTaskStartScheduler+0x90>)
 8003628:	f04f 32ff 	mov.w	r2, #4294967295
 800362c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800362e:	4b12      	ldr	r3, [pc, #72]	; (8003678 <vTaskStartScheduler+0x94>)
 8003630:	2201      	movs	r2, #1
 8003632:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003634:	4b11      	ldr	r3, [pc, #68]	; (800367c <vTaskStartScheduler+0x98>)
 8003636:	2200      	movs	r2, #0
 8003638:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800363a:	f001 f979 	bl	8004930 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800363e:	e00e      	b.n	800365e <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003646:	d10a      	bne.n	800365e <vTaskStartScheduler+0x7a>
	__asm volatile
 8003648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364c:	f383 8811 	msr	BASEPRI, r3
 8003650:	f3bf 8f6f 	isb	sy
 8003654:	f3bf 8f4f 	dsb	sy
 8003658:	607b      	str	r3, [r7, #4]
}
 800365a:	bf00      	nop
 800365c:	e7fe      	b.n	800365c <vTaskStartScheduler+0x78>
}
 800365e:	bf00      	nop
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	2000025c 	.word	0x2000025c
 800366c:	080059b4 	.word	0x080059b4
 8003670:	08003c89 	.word	0x08003c89
 8003674:	20000258 	.word	0x20000258
 8003678:	20000244 	.word	0x20000244
 800367c:	2000023c 	.word	0x2000023c

08003680 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003684:	4b04      	ldr	r3, [pc, #16]	; (8003698 <vTaskSuspendAll+0x18>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	3301      	adds	r3, #1
 800368a:	4a03      	ldr	r2, [pc, #12]	; (8003698 <vTaskSuspendAll+0x18>)
 800368c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800368e:	bf00      	nop
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	20000260 	.word	0x20000260

0800369c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80036a2:	2300      	movs	r3, #0
 80036a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80036a6:	2300      	movs	r3, #0
 80036a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80036aa:	4b41      	ldr	r3, [pc, #260]	; (80037b0 <xTaskResumeAll+0x114>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10a      	bne.n	80036c8 <xTaskResumeAll+0x2c>
	__asm volatile
 80036b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b6:	f383 8811 	msr	BASEPRI, r3
 80036ba:	f3bf 8f6f 	isb	sy
 80036be:	f3bf 8f4f 	dsb	sy
 80036c2:	603b      	str	r3, [r7, #0]
}
 80036c4:	bf00      	nop
 80036c6:	e7fe      	b.n	80036c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80036c8:	f001 f9e4 	bl	8004a94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80036cc:	4b38      	ldr	r3, [pc, #224]	; (80037b0 <xTaskResumeAll+0x114>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	3b01      	subs	r3, #1
 80036d2:	4a37      	ldr	r2, [pc, #220]	; (80037b0 <xTaskResumeAll+0x114>)
 80036d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036d6:	4b36      	ldr	r3, [pc, #216]	; (80037b0 <xTaskResumeAll+0x114>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d161      	bne.n	80037a2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80036de:	4b35      	ldr	r3, [pc, #212]	; (80037b4 <xTaskResumeAll+0x118>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d05d      	beq.n	80037a2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036e6:	e02e      	b.n	8003746 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036e8:	4b33      	ldr	r3, [pc, #204]	; (80037b8 <xTaskResumeAll+0x11c>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	3318      	adds	r3, #24
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff f92d 	bl	8002954 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	3304      	adds	r3, #4
 80036fe:	4618      	mov	r0, r3
 8003700:	f7ff f928 	bl	8002954 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003708:	2201      	movs	r2, #1
 800370a:	409a      	lsls	r2, r3
 800370c:	4b2b      	ldr	r3, [pc, #172]	; (80037bc <xTaskResumeAll+0x120>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4313      	orrs	r3, r2
 8003712:	4a2a      	ldr	r2, [pc, #168]	; (80037bc <xTaskResumeAll+0x120>)
 8003714:	6013      	str	r3, [r2, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800371a:	4613      	mov	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4413      	add	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4a27      	ldr	r2, [pc, #156]	; (80037c0 <xTaskResumeAll+0x124>)
 8003724:	441a      	add	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	3304      	adds	r3, #4
 800372a:	4619      	mov	r1, r3
 800372c:	4610      	mov	r0, r2
 800372e:	f7ff f8b4 	bl	800289a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003736:	4b23      	ldr	r3, [pc, #140]	; (80037c4 <xTaskResumeAll+0x128>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373c:	429a      	cmp	r2, r3
 800373e:	d302      	bcc.n	8003746 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003740:	4b21      	ldr	r3, [pc, #132]	; (80037c8 <xTaskResumeAll+0x12c>)
 8003742:	2201      	movs	r2, #1
 8003744:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003746:	4b1c      	ldr	r3, [pc, #112]	; (80037b8 <xTaskResumeAll+0x11c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1cc      	bne.n	80036e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003754:	f000 fb2e 	bl	8003db4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003758:	4b1c      	ldr	r3, [pc, #112]	; (80037cc <xTaskResumeAll+0x130>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d010      	beq.n	8003786 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003764:	f000 f846 	bl	80037f4 <xTaskIncrementTick>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d002      	beq.n	8003774 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800376e:	4b16      	ldr	r3, [pc, #88]	; (80037c8 <xTaskResumeAll+0x12c>)
 8003770:	2201      	movs	r2, #1
 8003772:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	3b01      	subs	r3, #1
 8003778:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1f1      	bne.n	8003764 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003780:	4b12      	ldr	r3, [pc, #72]	; (80037cc <xTaskResumeAll+0x130>)
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003786:	4b10      	ldr	r3, [pc, #64]	; (80037c8 <xTaskResumeAll+0x12c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d009      	beq.n	80037a2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800378e:	2301      	movs	r3, #1
 8003790:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003792:	4b0f      	ldr	r3, [pc, #60]	; (80037d0 <xTaskResumeAll+0x134>)
 8003794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	f3bf 8f4f 	dsb	sy
 800379e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80037a2:	f001 f9a7 	bl	8004af4 <vPortExitCritical>

	return xAlreadyYielded;
 80037a6:	68bb      	ldr	r3, [r7, #8]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	20000260 	.word	0x20000260
 80037b4:	20000238 	.word	0x20000238
 80037b8:	200001f8 	.word	0x200001f8
 80037bc:	20000240 	.word	0x20000240
 80037c0:	2000009c 	.word	0x2000009c
 80037c4:	20000098 	.word	0x20000098
 80037c8:	2000024c 	.word	0x2000024c
 80037cc:	20000248 	.word	0x20000248
 80037d0:	e000ed04 	.word	0xe000ed04

080037d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80037da:	4b05      	ldr	r3, [pc, #20]	; (80037f0 <xTaskGetTickCount+0x1c>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80037e0:	687b      	ldr	r3, [r7, #4]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	2000023c 	.word	0x2000023c

080037f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80037fa:	2300      	movs	r3, #0
 80037fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037fe:	4b4e      	ldr	r3, [pc, #312]	; (8003938 <xTaskIncrementTick+0x144>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	f040 8088 	bne.w	8003918 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003808:	4b4c      	ldr	r3, [pc, #304]	; (800393c <xTaskIncrementTick+0x148>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	3301      	adds	r3, #1
 800380e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003810:	4a4a      	ldr	r2, [pc, #296]	; (800393c <xTaskIncrementTick+0x148>)
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d120      	bne.n	800385e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800381c:	4b48      	ldr	r3, [pc, #288]	; (8003940 <xTaskIncrementTick+0x14c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <xTaskIncrementTick+0x48>
	__asm volatile
 8003826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382a:	f383 8811 	msr	BASEPRI, r3
 800382e:	f3bf 8f6f 	isb	sy
 8003832:	f3bf 8f4f 	dsb	sy
 8003836:	603b      	str	r3, [r7, #0]
}
 8003838:	bf00      	nop
 800383a:	e7fe      	b.n	800383a <xTaskIncrementTick+0x46>
 800383c:	4b40      	ldr	r3, [pc, #256]	; (8003940 <xTaskIncrementTick+0x14c>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	4b40      	ldr	r3, [pc, #256]	; (8003944 <xTaskIncrementTick+0x150>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a3e      	ldr	r2, [pc, #248]	; (8003940 <xTaskIncrementTick+0x14c>)
 8003848:	6013      	str	r3, [r2, #0]
 800384a:	4a3e      	ldr	r2, [pc, #248]	; (8003944 <xTaskIncrementTick+0x150>)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6013      	str	r3, [r2, #0]
 8003850:	4b3d      	ldr	r3, [pc, #244]	; (8003948 <xTaskIncrementTick+0x154>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	3301      	adds	r3, #1
 8003856:	4a3c      	ldr	r2, [pc, #240]	; (8003948 <xTaskIncrementTick+0x154>)
 8003858:	6013      	str	r3, [r2, #0]
 800385a:	f000 faab 	bl	8003db4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800385e:	4b3b      	ldr	r3, [pc, #236]	; (800394c <xTaskIncrementTick+0x158>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	429a      	cmp	r2, r3
 8003866:	d348      	bcc.n	80038fa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003868:	4b35      	ldr	r3, [pc, #212]	; (8003940 <xTaskIncrementTick+0x14c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d104      	bne.n	800387c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003872:	4b36      	ldr	r3, [pc, #216]	; (800394c <xTaskIncrementTick+0x158>)
 8003874:	f04f 32ff 	mov.w	r2, #4294967295
 8003878:	601a      	str	r2, [r3, #0]
					break;
 800387a:	e03e      	b.n	80038fa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800387c:	4b30      	ldr	r3, [pc, #192]	; (8003940 <xTaskIncrementTick+0x14c>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	429a      	cmp	r2, r3
 8003892:	d203      	bcs.n	800389c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003894:	4a2d      	ldr	r2, [pc, #180]	; (800394c <xTaskIncrementTick+0x158>)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800389a:	e02e      	b.n	80038fa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	3304      	adds	r3, #4
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff f857 	bl	8002954 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d004      	beq.n	80038b8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	3318      	adds	r3, #24
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7ff f84e 	bl	8002954 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038bc:	2201      	movs	r2, #1
 80038be:	409a      	lsls	r2, r3
 80038c0:	4b23      	ldr	r3, [pc, #140]	; (8003950 <xTaskIncrementTick+0x15c>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	4a22      	ldr	r2, [pc, #136]	; (8003950 <xTaskIncrementTick+0x15c>)
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ce:	4613      	mov	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4413      	add	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4a1f      	ldr	r2, [pc, #124]	; (8003954 <xTaskIncrementTick+0x160>)
 80038d8:	441a      	add	r2, r3
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	3304      	adds	r3, #4
 80038de:	4619      	mov	r1, r3
 80038e0:	4610      	mov	r0, r2
 80038e2:	f7fe ffda 	bl	800289a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ea:	4b1b      	ldr	r3, [pc, #108]	; (8003958 <xTaskIncrementTick+0x164>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d3b9      	bcc.n	8003868 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80038f4:	2301      	movs	r3, #1
 80038f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038f8:	e7b6      	b.n	8003868 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80038fa:	4b17      	ldr	r3, [pc, #92]	; (8003958 <xTaskIncrementTick+0x164>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003900:	4914      	ldr	r1, [pc, #80]	; (8003954 <xTaskIncrementTick+0x160>)
 8003902:	4613      	mov	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	440b      	add	r3, r1
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d907      	bls.n	8003922 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8003912:	2301      	movs	r3, #1
 8003914:	617b      	str	r3, [r7, #20]
 8003916:	e004      	b.n	8003922 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003918:	4b10      	ldr	r3, [pc, #64]	; (800395c <xTaskIncrementTick+0x168>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	3301      	adds	r3, #1
 800391e:	4a0f      	ldr	r2, [pc, #60]	; (800395c <xTaskIncrementTick+0x168>)
 8003920:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003922:	4b0f      	ldr	r3, [pc, #60]	; (8003960 <xTaskIncrementTick+0x16c>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800392a:	2301      	movs	r3, #1
 800392c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800392e:	697b      	ldr	r3, [r7, #20]
}
 8003930:	4618      	mov	r0, r3
 8003932:	3718      	adds	r7, #24
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	20000260 	.word	0x20000260
 800393c:	2000023c 	.word	0x2000023c
 8003940:	200001f0 	.word	0x200001f0
 8003944:	200001f4 	.word	0x200001f4
 8003948:	20000250 	.word	0x20000250
 800394c:	20000258 	.word	0x20000258
 8003950:	20000240 	.word	0x20000240
 8003954:	2000009c 	.word	0x2000009c
 8003958:	20000098 	.word	0x20000098
 800395c:	20000248 	.word	0x20000248
 8003960:	2000024c 	.word	0x2000024c

08003964 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800396a:	4b27      	ldr	r3, [pc, #156]	; (8003a08 <vTaskSwitchContext+0xa4>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003972:	4b26      	ldr	r3, [pc, #152]	; (8003a0c <vTaskSwitchContext+0xa8>)
 8003974:	2201      	movs	r2, #1
 8003976:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003978:	e03f      	b.n	80039fa <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800397a:	4b24      	ldr	r3, [pc, #144]	; (8003a0c <vTaskSwitchContext+0xa8>)
 800397c:	2200      	movs	r2, #0
 800397e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003980:	4b23      	ldr	r3, [pc, #140]	; (8003a10 <vTaskSwitchContext+0xac>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	fab3 f383 	clz	r3, r3
 800398c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800398e:	7afb      	ldrb	r3, [r7, #11]
 8003990:	f1c3 031f 	rsb	r3, r3, #31
 8003994:	617b      	str	r3, [r7, #20]
 8003996:	491f      	ldr	r1, [pc, #124]	; (8003a14 <vTaskSwitchContext+0xb0>)
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	4613      	mov	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	440b      	add	r3, r1
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10a      	bne.n	80039c0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80039aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ae:	f383 8811 	msr	BASEPRI, r3
 80039b2:	f3bf 8f6f 	isb	sy
 80039b6:	f3bf 8f4f 	dsb	sy
 80039ba:	607b      	str	r3, [r7, #4]
}
 80039bc:	bf00      	nop
 80039be:	e7fe      	b.n	80039be <vTaskSwitchContext+0x5a>
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	4613      	mov	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4a12      	ldr	r2, [pc, #72]	; (8003a14 <vTaskSwitchContext+0xb0>)
 80039cc:	4413      	add	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	605a      	str	r2, [r3, #4]
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	3308      	adds	r3, #8
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d104      	bne.n	80039f0 <vTaskSwitchContext+0x8c>
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	605a      	str	r2, [r3, #4]
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	4a08      	ldr	r2, [pc, #32]	; (8003a18 <vTaskSwitchContext+0xb4>)
 80039f8:	6013      	str	r3, [r2, #0]
}
 80039fa:	bf00      	nop
 80039fc:	371c      	adds	r7, #28
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	20000260 	.word	0x20000260
 8003a0c:	2000024c 	.word	0x2000024c
 8003a10:	20000240 	.word	0x20000240
 8003a14:	2000009c 	.word	0x2000009c
 8003a18:	20000098 	.word	0x20000098

08003a1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10a      	bne.n	8003a42 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a30:	f383 8811 	msr	BASEPRI, r3
 8003a34:	f3bf 8f6f 	isb	sy
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	60fb      	str	r3, [r7, #12]
}
 8003a3e:	bf00      	nop
 8003a40:	e7fe      	b.n	8003a40 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a42:	4b07      	ldr	r3, [pc, #28]	; (8003a60 <vTaskPlaceOnEventList+0x44>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	3318      	adds	r3, #24
 8003a48:	4619      	mov	r1, r3
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7fe ff49 	bl	80028e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003a50:	2101      	movs	r1, #1
 8003a52:	6838      	ldr	r0, [r7, #0]
 8003a54:	f000 fa72 	bl	8003f3c <prvAddCurrentTaskToDelayedList>
}
 8003a58:	bf00      	nop
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	20000098 	.word	0x20000098

08003a64 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10a      	bne.n	8003a8c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7a:	f383 8811 	msr	BASEPRI, r3
 8003a7e:	f3bf 8f6f 	isb	sy
 8003a82:	f3bf 8f4f 	dsb	sy
 8003a86:	617b      	str	r3, [r7, #20]
}
 8003a88:	bf00      	nop
 8003a8a:	e7fe      	b.n	8003a8a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a8c:	4b0a      	ldr	r3, [pc, #40]	; (8003ab8 <vTaskPlaceOnEventListRestricted+0x54>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	3318      	adds	r3, #24
 8003a92:	4619      	mov	r1, r3
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f7fe ff00 	bl	800289a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d002      	beq.n	8003aa6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	68b8      	ldr	r0, [r7, #8]
 8003aaa:	f000 fa47 	bl	8003f3c <prvAddCurrentTaskToDelayedList>
	}
 8003aae:	bf00      	nop
 8003ab0:	3718      	adds	r7, #24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	20000098 	.word	0x20000098

08003abc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10a      	bne.n	8003ae8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad6:	f383 8811 	msr	BASEPRI, r3
 8003ada:	f3bf 8f6f 	isb	sy
 8003ade:	f3bf 8f4f 	dsb	sy
 8003ae2:	60fb      	str	r3, [r7, #12]
}
 8003ae4:	bf00      	nop
 8003ae6:	e7fe      	b.n	8003ae6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	3318      	adds	r3, #24
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7fe ff31 	bl	8002954 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003af2:	4b1d      	ldr	r3, [pc, #116]	; (8003b68 <xTaskRemoveFromEventList+0xac>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d11c      	bne.n	8003b34 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	3304      	adds	r3, #4
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fe ff28 	bl	8002954 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b08:	2201      	movs	r2, #1
 8003b0a:	409a      	lsls	r2, r3
 8003b0c:	4b17      	ldr	r3, [pc, #92]	; (8003b6c <xTaskRemoveFromEventList+0xb0>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	4a16      	ldr	r2, [pc, #88]	; (8003b6c <xTaskRemoveFromEventList+0xb0>)
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	4413      	add	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4a13      	ldr	r2, [pc, #76]	; (8003b70 <xTaskRemoveFromEventList+0xb4>)
 8003b24:	441a      	add	r2, r3
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	3304      	adds	r3, #4
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	4610      	mov	r0, r2
 8003b2e:	f7fe feb4 	bl	800289a <vListInsertEnd>
 8003b32:	e005      	b.n	8003b40 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	3318      	adds	r3, #24
 8003b38:	4619      	mov	r1, r3
 8003b3a:	480e      	ldr	r0, [pc, #56]	; (8003b74 <xTaskRemoveFromEventList+0xb8>)
 8003b3c:	f7fe fead 	bl	800289a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b44:	4b0c      	ldr	r3, [pc, #48]	; (8003b78 <xTaskRemoveFromEventList+0xbc>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d905      	bls.n	8003b5a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003b52:	4b0a      	ldr	r3, [pc, #40]	; (8003b7c <xTaskRemoveFromEventList+0xc0>)
 8003b54:	2201      	movs	r2, #1
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	e001      	b.n	8003b5e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003b5e:	697b      	ldr	r3, [r7, #20]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3718      	adds	r7, #24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	20000260 	.word	0x20000260
 8003b6c:	20000240 	.word	0x20000240
 8003b70:	2000009c 	.word	0x2000009c
 8003b74:	200001f8 	.word	0x200001f8
 8003b78:	20000098 	.word	0x20000098
 8003b7c:	2000024c 	.word	0x2000024c

08003b80 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b88:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <vTaskInternalSetTimeOutState+0x24>)
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003b90:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <vTaskInternalSetTimeOutState+0x28>)
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	605a      	str	r2, [r3, #4]
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	20000250 	.word	0x20000250
 8003ba8:	2000023c 	.word	0x2000023c

08003bac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b088      	sub	sp, #32
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10a      	bne.n	8003bd2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc0:	f383 8811 	msr	BASEPRI, r3
 8003bc4:	f3bf 8f6f 	isb	sy
 8003bc8:	f3bf 8f4f 	dsb	sy
 8003bcc:	613b      	str	r3, [r7, #16]
}
 8003bce:	bf00      	nop
 8003bd0:	e7fe      	b.n	8003bd0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10a      	bne.n	8003bee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bdc:	f383 8811 	msr	BASEPRI, r3
 8003be0:	f3bf 8f6f 	isb	sy
 8003be4:	f3bf 8f4f 	dsb	sy
 8003be8:	60fb      	str	r3, [r7, #12]
}
 8003bea:	bf00      	nop
 8003bec:	e7fe      	b.n	8003bec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003bee:	f000 ff51 	bl	8004a94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003bf2:	4b1d      	ldr	r3, [pc, #116]	; (8003c68 <xTaskCheckForTimeOut+0xbc>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0a:	d102      	bne.n	8003c12 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	61fb      	str	r3, [r7, #28]
 8003c10:	e023      	b.n	8003c5a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	4b15      	ldr	r3, [pc, #84]	; (8003c6c <xTaskCheckForTimeOut+0xc0>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d007      	beq.n	8003c2e <xTaskCheckForTimeOut+0x82>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d302      	bcc.n	8003c2e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	61fb      	str	r3, [r7, #28]
 8003c2c:	e015      	b.n	8003c5a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d20b      	bcs.n	8003c50 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	1ad2      	subs	r2, r2, r3
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7ff ff9b 	bl	8003b80 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	61fb      	str	r3, [r7, #28]
 8003c4e:	e004      	b.n	8003c5a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003c56:	2301      	movs	r3, #1
 8003c58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003c5a:	f000 ff4b 	bl	8004af4 <vPortExitCritical>

	return xReturn;
 8003c5e:	69fb      	ldr	r3, [r7, #28]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3720      	adds	r7, #32
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	2000023c 	.word	0x2000023c
 8003c6c:	20000250 	.word	0x20000250

08003c70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003c74:	4b03      	ldr	r3, [pc, #12]	; (8003c84 <vTaskMissedYield+0x14>)
 8003c76:	2201      	movs	r2, #1
 8003c78:	601a      	str	r2, [r3, #0]
}
 8003c7a:	bf00      	nop
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	2000024c 	.word	0x2000024c

08003c88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003c90:	f000 f852 	bl	8003d38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c94:	4b06      	ldr	r3, [pc, #24]	; (8003cb0 <prvIdleTask+0x28>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d9f9      	bls.n	8003c90 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003c9c:	4b05      	ldr	r3, [pc, #20]	; (8003cb4 <prvIdleTask+0x2c>)
 8003c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	f3bf 8f4f 	dsb	sy
 8003ca8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003cac:	e7f0      	b.n	8003c90 <prvIdleTask+0x8>
 8003cae:	bf00      	nop
 8003cb0:	2000009c 	.word	0x2000009c
 8003cb4:	e000ed04 	.word	0xe000ed04

08003cb8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	607b      	str	r3, [r7, #4]
 8003cc2:	e00c      	b.n	8003cde <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4413      	add	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4a12      	ldr	r2, [pc, #72]	; (8003d18 <prvInitialiseTaskLists+0x60>)
 8003cd0:	4413      	add	r3, r2
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fe fdb4 	bl	8002840 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	607b      	str	r3, [r7, #4]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b0e      	cmp	r3, #14
 8003ce2:	d9ef      	bls.n	8003cc4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ce4:	480d      	ldr	r0, [pc, #52]	; (8003d1c <prvInitialiseTaskLists+0x64>)
 8003ce6:	f7fe fdab 	bl	8002840 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003cea:	480d      	ldr	r0, [pc, #52]	; (8003d20 <prvInitialiseTaskLists+0x68>)
 8003cec:	f7fe fda8 	bl	8002840 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003cf0:	480c      	ldr	r0, [pc, #48]	; (8003d24 <prvInitialiseTaskLists+0x6c>)
 8003cf2:	f7fe fda5 	bl	8002840 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003cf6:	480c      	ldr	r0, [pc, #48]	; (8003d28 <prvInitialiseTaskLists+0x70>)
 8003cf8:	f7fe fda2 	bl	8002840 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003cfc:	480b      	ldr	r0, [pc, #44]	; (8003d2c <prvInitialiseTaskLists+0x74>)
 8003cfe:	f7fe fd9f 	bl	8002840 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d02:	4b0b      	ldr	r3, [pc, #44]	; (8003d30 <prvInitialiseTaskLists+0x78>)
 8003d04:	4a05      	ldr	r2, [pc, #20]	; (8003d1c <prvInitialiseTaskLists+0x64>)
 8003d06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d08:	4b0a      	ldr	r3, [pc, #40]	; (8003d34 <prvInitialiseTaskLists+0x7c>)
 8003d0a:	4a05      	ldr	r2, [pc, #20]	; (8003d20 <prvInitialiseTaskLists+0x68>)
 8003d0c:	601a      	str	r2, [r3, #0]
}
 8003d0e:	bf00      	nop
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	2000009c 	.word	0x2000009c
 8003d1c:	200001c8 	.word	0x200001c8
 8003d20:	200001dc 	.word	0x200001dc
 8003d24:	200001f8 	.word	0x200001f8
 8003d28:	2000020c 	.word	0x2000020c
 8003d2c:	20000224 	.word	0x20000224
 8003d30:	200001f0 	.word	0x200001f0
 8003d34:	200001f4 	.word	0x200001f4

08003d38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d3e:	e019      	b.n	8003d74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003d40:	f000 fea8 	bl	8004a94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d44:	4b10      	ldr	r3, [pc, #64]	; (8003d88 <prvCheckTasksWaitingTermination+0x50>)
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3304      	adds	r3, #4
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7fe fdff 	bl	8002954 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003d56:	4b0d      	ldr	r3, [pc, #52]	; (8003d8c <prvCheckTasksWaitingTermination+0x54>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	4a0b      	ldr	r2, [pc, #44]	; (8003d8c <prvCheckTasksWaitingTermination+0x54>)
 8003d5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003d60:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <prvCheckTasksWaitingTermination+0x58>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	3b01      	subs	r3, #1
 8003d66:	4a0a      	ldr	r2, [pc, #40]	; (8003d90 <prvCheckTasksWaitingTermination+0x58>)
 8003d68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003d6a:	f000 fec3 	bl	8004af4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f810 	bl	8003d94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d74:	4b06      	ldr	r3, [pc, #24]	; (8003d90 <prvCheckTasksWaitingTermination+0x58>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1e1      	bne.n	8003d40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003d7c:	bf00      	nop
 8003d7e:	bf00      	nop
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	2000020c 	.word	0x2000020c
 8003d8c:	20000238 	.word	0x20000238
 8003d90:	20000220 	.word	0x20000220

08003d94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da0:	4618      	mov	r0, r3
 8003da2:	f001 f85d 	bl	8004e60 <vPortFree>
			vPortFree( pxTCB );
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f001 f85a 	bl	8004e60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003dac:	bf00      	nop
 8003dae:	3708      	adds	r7, #8
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dba:	4b0c      	ldr	r3, [pc, #48]	; (8003dec <prvResetNextTaskUnblockTime+0x38>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d104      	bne.n	8003dce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003dc4:	4b0a      	ldr	r3, [pc, #40]	; (8003df0 <prvResetNextTaskUnblockTime+0x3c>)
 8003dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8003dca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003dcc:	e008      	b.n	8003de0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dce:	4b07      	ldr	r3, [pc, #28]	; (8003dec <prvResetNextTaskUnblockTime+0x38>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	4a04      	ldr	r2, [pc, #16]	; (8003df0 <prvResetNextTaskUnblockTime+0x3c>)
 8003dde:	6013      	str	r3, [r2, #0]
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	200001f0 	.word	0x200001f0
 8003df0:	20000258 	.word	0x20000258

08003df4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003dfa:	4b0b      	ldr	r3, [pc, #44]	; (8003e28 <xTaskGetSchedulerState+0x34>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d102      	bne.n	8003e08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003e02:	2301      	movs	r3, #1
 8003e04:	607b      	str	r3, [r7, #4]
 8003e06:	e008      	b.n	8003e1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e08:	4b08      	ldr	r3, [pc, #32]	; (8003e2c <xTaskGetSchedulerState+0x38>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d102      	bne.n	8003e16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003e10:	2302      	movs	r3, #2
 8003e12:	607b      	str	r3, [r7, #4]
 8003e14:	e001      	b.n	8003e1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003e16:	2300      	movs	r3, #0
 8003e18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003e1a:	687b      	ldr	r3, [r7, #4]
	}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	20000244 	.word	0x20000244
 8003e2c:	20000260 	.word	0x20000260

08003e30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d06e      	beq.n	8003f24 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003e46:	4b3a      	ldr	r3, [pc, #232]	; (8003f30 <xTaskPriorityDisinherit+0x100>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d00a      	beq.n	8003e66 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e54:	f383 8811 	msr	BASEPRI, r3
 8003e58:	f3bf 8f6f 	isb	sy
 8003e5c:	f3bf 8f4f 	dsb	sy
 8003e60:	60fb      	str	r3, [r7, #12]
}
 8003e62:	bf00      	nop
 8003e64:	e7fe      	b.n	8003e64 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10a      	bne.n	8003e84 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e72:	f383 8811 	msr	BASEPRI, r3
 8003e76:	f3bf 8f6f 	isb	sy
 8003e7a:	f3bf 8f4f 	dsb	sy
 8003e7e:	60bb      	str	r3, [r7, #8]
}
 8003e80:	bf00      	nop
 8003e82:	e7fe      	b.n	8003e82 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e88:	1e5a      	subs	r2, r3, #1
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d044      	beq.n	8003f24 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d140      	bne.n	8003f24 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fe fd54 	bl	8002954 <uxListRemove>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d115      	bne.n	8003ede <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb6:	491f      	ldr	r1, [pc, #124]	; (8003f34 <xTaskPriorityDisinherit+0x104>)
 8003eb8:	4613      	mov	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	440b      	add	r3, r1
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10a      	bne.n	8003ede <xTaskPriorityDisinherit+0xae>
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ecc:	2201      	movs	r2, #1
 8003ece:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed2:	43da      	mvns	r2, r3
 8003ed4:	4b18      	ldr	r3, [pc, #96]	; (8003f38 <xTaskPriorityDisinherit+0x108>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	4a17      	ldr	r2, [pc, #92]	; (8003f38 <xTaskPriorityDisinherit+0x108>)
 8003edc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eea:	f1c3 020f 	rsb	r2, r3, #15
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	409a      	lsls	r2, r3
 8003efa:	4b0f      	ldr	r3, [pc, #60]	; (8003f38 <xTaskPriorityDisinherit+0x108>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	4a0d      	ldr	r2, [pc, #52]	; (8003f38 <xTaskPriorityDisinherit+0x108>)
 8003f02:	6013      	str	r3, [r2, #0]
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f08:	4613      	mov	r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4a08      	ldr	r2, [pc, #32]	; (8003f34 <xTaskPriorityDisinherit+0x104>)
 8003f12:	441a      	add	r2, r3
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	3304      	adds	r3, #4
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4610      	mov	r0, r2
 8003f1c:	f7fe fcbd 	bl	800289a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003f20:	2301      	movs	r3, #1
 8003f22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003f24:	697b      	ldr	r3, [r7, #20]
	}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3718      	adds	r7, #24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	20000098 	.word	0x20000098
 8003f34:	2000009c 	.word	0x2000009c
 8003f38:	20000240 	.word	0x20000240

08003f3c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003f46:	4b29      	ldr	r3, [pc, #164]	; (8003fec <prvAddCurrentTaskToDelayedList+0xb0>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f4c:	4b28      	ldr	r3, [pc, #160]	; (8003ff0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	3304      	adds	r3, #4
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fe fcfe 	bl	8002954 <uxListRemove>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10b      	bne.n	8003f76 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003f5e:	4b24      	ldr	r3, [pc, #144]	; (8003ff0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f64:	2201      	movs	r2, #1
 8003f66:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6a:	43da      	mvns	r2, r3
 8003f6c:	4b21      	ldr	r3, [pc, #132]	; (8003ff4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4013      	ands	r3, r2
 8003f72:	4a20      	ldr	r2, [pc, #128]	; (8003ff4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003f74:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7c:	d10a      	bne.n	8003f94 <prvAddCurrentTaskToDelayedList+0x58>
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d007      	beq.n	8003f94 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f84:	4b1a      	ldr	r3, [pc, #104]	; (8003ff0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	3304      	adds	r3, #4
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	481a      	ldr	r0, [pc, #104]	; (8003ff8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003f8e:	f7fe fc84 	bl	800289a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f92:	e026      	b.n	8003fe2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4413      	add	r3, r2
 8003f9a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f9c:	4b14      	ldr	r3, [pc, #80]	; (8003ff0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d209      	bcs.n	8003fc0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fac:	4b13      	ldr	r3, [pc, #76]	; (8003ffc <prvAddCurrentTaskToDelayedList+0xc0>)
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	4b0f      	ldr	r3, [pc, #60]	; (8003ff0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	4610      	mov	r0, r2
 8003fba:	f7fe fc92 	bl	80028e2 <vListInsert>
}
 8003fbe:	e010      	b.n	8003fe2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fc0:	4b0f      	ldr	r3, [pc, #60]	; (8004000 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	4b0a      	ldr	r3, [pc, #40]	; (8003ff0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	3304      	adds	r3, #4
 8003fca:	4619      	mov	r1, r3
 8003fcc:	4610      	mov	r0, r2
 8003fce:	f7fe fc88 	bl	80028e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003fd2:	4b0c      	ldr	r3, [pc, #48]	; (8004004 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d202      	bcs.n	8003fe2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003fdc:	4a09      	ldr	r2, [pc, #36]	; (8004004 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	6013      	str	r3, [r2, #0]
}
 8003fe2:	bf00      	nop
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	2000023c 	.word	0x2000023c
 8003ff0:	20000098 	.word	0x20000098
 8003ff4:	20000240 	.word	0x20000240
 8003ff8:	20000224 	.word	0x20000224
 8003ffc:	200001f4 	.word	0x200001f4
 8004000:	200001f0 	.word	0x200001f0
 8004004:	20000258 	.word	0x20000258

08004008 <print_pcb>:
#endif

void Taskmonitor(void);
void print_pcb(TCB_t *t, char *state);

void print_pcb(TCB_t *t, char *state){
 8004008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800400a:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
 800400e:	af04      	add	r7, sp, #16
 8004010:	1d3b      	adds	r3, r7, #4
 8004012:	6018      	str	r0, [r3, #0]
 8004014:	463b      	mov	r3, r7
 8004016:	6019      	str	r1, [r3, #0]
	char Monitor_data[1000];
	memset(Monitor_data,'\0',sizeof(Monitor_data));
 8004018:	f107 0308 	add.w	r3, r7, #8
 800401c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004020:	2100      	movs	r1, #0
 8004022:	4618      	mov	r0, r3
 8004024:	f001 f86a 	bl	80050fc <memset>
	sprintf(Monitor_data,"%-19s %3lu/%-19lu 0x%-9lx 0x%-14lx %s\n\r", t->pcTaskName, t->uxPriority, t->uxBasePriority, t->pxStack, t->pxTopOfStack, state);
 8004028:	1d3b      	adds	r3, r7, #4
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f103 0534 	add.w	r5, r3, #52	; 0x34
 8004030:	1d3b      	adds	r3, r7, #4
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8004036:	1d3b      	adds	r3, r7, #4
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800403c:	1d3a      	adds	r2, r7, #4
 800403e:	6812      	ldr	r2, [r2, #0]
 8004040:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004042:	1d39      	adds	r1, r7, #4
 8004044:	6809      	ldr	r1, [r1, #0]
 8004046:	6809      	ldr	r1, [r1, #0]
 8004048:	f107 0408 	add.w	r4, r7, #8
 800404c:	4638      	mov	r0, r7
 800404e:	6800      	ldr	r0, [r0, #0]
 8004050:	9003      	str	r0, [sp, #12]
 8004052:	9102      	str	r1, [sp, #8]
 8004054:	9201      	str	r2, [sp, #4]
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	4633      	mov	r3, r6
 800405a:	462a      	mov	r2, r5
 800405c:	490b      	ldr	r1, [pc, #44]	; (800408c <print_pcb+0x84>)
 800405e:	4620      	mov	r0, r4
 8004060:	f001 f854 	bl	800510c <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)Monitor_data,strlen(Monitor_data),0xffff);
 8004064:	f107 0308 	add.w	r3, r7, #8
 8004068:	4618      	mov	r0, r3
 800406a:	f7fc f8b1 	bl	80001d0 <strlen>
 800406e:	4603      	mov	r3, r0
 8004070:	b29a      	uxth	r2, r3
 8004072:	f107 0108 	add.w	r1, r7, #8
 8004076:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800407a:	4805      	ldr	r0, [pc, #20]	; (8004090 <print_pcb+0x88>)
 800407c:	f7fe f917 	bl	80022ae <HAL_UART_Transmit>
}
 8004080:	bf00      	nop
 8004082:	f507 777d 	add.w	r7, r7, #1012	; 0x3f4
 8004086:	46bd      	mov	sp, r7
 8004088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800408a:	bf00      	nop
 800408c:	080059bc 	.word	0x080059bc
 8004090:	20012ec8 	.word	0x20012ec8

08004094 <Taskmonitor>:


void Taskmonitor(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b0b8      	sub	sp, #224	; 0xe0
 8004098:	af00      	add	r7, sp, #0


	/* Stop scheduler */
	/* Taskmonitor() will block when UART is transmitting data */
	/* Scheduler will change list data when Taskmonitor() is blocked */
	vTaskSuspendAll();
 800409a:	f7ff faf1 	bl	8003680 <vTaskSuspendAll>
	/* Print title */
	char Monitor_data[200];
	memset(Monitor_data,'\0',sizeof(Monitor_data));
 800409e:	1d3b      	adds	r3, r7, #4
 80040a0:	22c8      	movs	r2, #200	; 0xc8
 80040a2:	2100      	movs	r1, #0
 80040a4:	4618      	mov	r0, r3
 80040a6:	f001 f829 	bl	80050fc <memset>
	sprintf(Monitor_data,"|Name |Priority(Base/actual)                |pxStack |pxTopOfStack      |State |\n\r");
 80040aa:	1d3b      	adds	r3, r7, #4
 80040ac:	4949      	ldr	r1, [pc, #292]	; (80041d4 <Taskmonitor+0x140>)
 80040ae:	4618      	mov	r0, r3
 80040b0:	f001 f82c 	bl	800510c <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)Monitor_data,strlen(Monitor_data),0xffff);
 80040b4:	1d3b      	adds	r3, r7, #4
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fc f88a 	bl	80001d0 <strlen>
 80040bc:	4603      	mov	r3, r0
 80040be:	b29a      	uxth	r2, r3
 80040c0:	1d39      	adds	r1, r7, #4
 80040c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040c6:	4844      	ldr	r0, [pc, #272]	; (80041d8 <Taskmonitor+0x144>)
 80040c8:	f7fe f8f1 	bl	80022ae <HAL_UART_Transmit>

	ListItem_t *node;
	/* pxReadyTasksLists */
	for(int i=0;i<15;i++){
 80040cc:	2300      	movs	r3, #0
 80040ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80040d2:	e033      	b.n	800413c <Taskmonitor+0xa8>
		node = listGET_HEAD_ENTRY(pxReadyTasksLists + i);
 80040d4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80040d8:	4613      	mov	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	461a      	mov	r2, r3
 80040e2:	4b3e      	ldr	r3, [pc, #248]	; (80041dc <Taskmonitor+0x148>)
 80040e4:	4413      	add	r3, r2
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		for(uint32_t j=0;j<listCURRENT_LIST_LENGTH(pxReadyTasksLists + i);j++){
 80040ec:	2300      	movs	r3, #0
 80040ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80040f2:	e010      	b.n	8004116 <Taskmonitor+0x82>
			print_pcb(listGET_LIST_ITEM_OWNER(node), "Ready");
 80040f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	4939      	ldr	r1, [pc, #228]	; (80041e0 <Taskmonitor+0x14c>)
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7ff ff83 	bl	8004008 <print_pcb>
			node = listGET_NEXT(node);
 8004102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		for(uint32_t j=0;j<listCURRENT_LIST_LENGTH(pxReadyTasksLists + i);j++){
 800410c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004110:	3301      	adds	r3, #1
 8004112:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004116:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800411a:	4613      	mov	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4413      	add	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	461a      	mov	r2, r3
 8004124:	4b2d      	ldr	r3, [pc, #180]	; (80041dc <Taskmonitor+0x148>)
 8004126:	4413      	add	r3, r2
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800412e:	429a      	cmp	r2, r3
 8004130:	d3e0      	bcc.n	80040f4 <Taskmonitor+0x60>
	for(int i=0;i<15;i++){
 8004132:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004136:	3301      	adds	r3, #1
 8004138:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800413c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004140:	2b0e      	cmp	r3, #14
 8004142:	ddc7      	ble.n	80040d4 <Taskmonitor+0x40>
		}
	}
	/* pxDelayedTaskList*/
	node = listGET_HEAD_ENTRY(pxDelayedTaskList);
 8004144:	4b27      	ldr	r3, [pc, #156]	; (80041e4 <Taskmonitor+0x150>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	for(uint32_t j=0;j<listCURRENT_LIST_LENGTH(pxDelayedTaskList);j++){
 800414e:	2300      	movs	r3, #0
 8004150:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004154:	e010      	b.n	8004178 <Taskmonitor+0xe4>
		print_pcb(listGET_LIST_ITEM_OWNER(node), "Blocked");
 8004156:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	4922      	ldr	r1, [pc, #136]	; (80041e8 <Taskmonitor+0x154>)
 800415e:	4618      	mov	r0, r3
 8004160:	f7ff ff52 	bl	8004008 <print_pcb>
		node = listGET_NEXT(node);
 8004164:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	for(uint32_t j=0;j<listCURRENT_LIST_LENGTH(pxDelayedTaskList);j++){
 800416e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004172:	3301      	adds	r3, #1
 8004174:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004178:	4b1a      	ldr	r3, [pc, #104]	; (80041e4 <Taskmonitor+0x150>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004182:	429a      	cmp	r2, r3
 8004184:	d3e7      	bcc.n	8004156 <Taskmonitor+0xc2>
	}
	/* pxOverflowDelayedTaskList */
	node = listGET_HEAD_ENTRY(pxOverflowDelayedTaskList);
 8004186:	4b19      	ldr	r3, [pc, #100]	; (80041ec <Taskmonitor+0x158>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	for(uint32_t j=0;j<listCURRENT_LIST_LENGTH(pxOverflowDelayedTaskList);j++){
 8004190:	2300      	movs	r3, #0
 8004192:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004196:	e010      	b.n	80041ba <Taskmonitor+0x126>
		print_pcb(listGET_LIST_ITEM_OWNER(node), "Overflow");
 8004198:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	4914      	ldr	r1, [pc, #80]	; (80041f0 <Taskmonitor+0x15c>)
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7ff ff31 	bl	8004008 <print_pcb>
		node = listGET_NEXT(node);
 80041a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	for(uint32_t j=0;j<listCURRENT_LIST_LENGTH(pxOverflowDelayedTaskList);j++){
 80041b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80041b4:	3301      	adds	r3, #1
 80041b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80041ba:	4b0c      	ldr	r3, [pc, #48]	; (80041ec <Taskmonitor+0x158>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d3e7      	bcc.n	8004198 <Taskmonitor+0x104>
	}
	/* Resume scheduler */
	xTaskResumeAll();
 80041c8:	f7ff fa68 	bl	800369c <xTaskResumeAll>
}
 80041cc:	bf00      	nop
 80041ce:	37e0      	adds	r7, #224	; 0xe0
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	080059e4 	.word	0x080059e4
 80041d8:	20012ec8 	.word	0x20012ec8
 80041dc:	2000009c 	.word	0x2000009c
 80041e0:	08005a38 	.word	0x08005a38
 80041e4:	200001f0 	.word	0x200001f0
 80041e8:	08005a40 	.word	0x08005a40
 80041ec:	200001f4 	.word	0x200001f4
 80041f0:	08005a48 	.word	0x08005a48

080041f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80041fa:	2300      	movs	r3, #0
 80041fc:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80041fe:	f000 fad5 	bl	80047ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004202:	4b11      	ldr	r3, [pc, #68]	; (8004248 <xTimerCreateTimerTask+0x54>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00b      	beq.n	8004222 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800420a:	4b10      	ldr	r3, [pc, #64]	; (800424c <xTimerCreateTimerTask+0x58>)
 800420c:	9301      	str	r3, [sp, #4]
 800420e:	2302      	movs	r3, #2
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	2300      	movs	r3, #0
 8004214:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004218:	490d      	ldr	r1, [pc, #52]	; (8004250 <xTimerCreateTimerTask+0x5c>)
 800421a:	480e      	ldr	r0, [pc, #56]	; (8004254 <xTimerCreateTimerTask+0x60>)
 800421c:	f7ff f870 	bl	8003300 <xTaskCreate>
 8004220:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10a      	bne.n	800423e <xTimerCreateTimerTask+0x4a>
	__asm volatile
 8004228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422c:	f383 8811 	msr	BASEPRI, r3
 8004230:	f3bf 8f6f 	isb	sy
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	603b      	str	r3, [r7, #0]
}
 800423a:	bf00      	nop
 800423c:	e7fe      	b.n	800423c <xTimerCreateTimerTask+0x48>
	return xReturn;
 800423e:	687b      	ldr	r3, [r7, #4]
}
 8004240:	4618      	mov	r0, r3
 8004242:	3708      	adds	r7, #8
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	20000294 	.word	0x20000294
 800424c:	20000298 	.word	0x20000298
 8004250:	08005a54 	.word	0x08005a54
 8004254:	0800438d 	.word	0x0800438d

08004258 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b08a      	sub	sp, #40	; 0x28
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
 8004264:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004266:	2300      	movs	r3, #0
 8004268:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10a      	bne.n	8004286 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004274:	f383 8811 	msr	BASEPRI, r3
 8004278:	f3bf 8f6f 	isb	sy
 800427c:	f3bf 8f4f 	dsb	sy
 8004280:	623b      	str	r3, [r7, #32]
}
 8004282:	bf00      	nop
 8004284:	e7fe      	b.n	8004284 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004286:	4b1a      	ldr	r3, [pc, #104]	; (80042f0 <xTimerGenericCommand+0x98>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d02a      	beq.n	80042e4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	2b05      	cmp	r3, #5
 800429e:	dc18      	bgt.n	80042d2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80042a0:	f7ff fda8 	bl	8003df4 <xTaskGetSchedulerState>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d109      	bne.n	80042be <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80042aa:	4b11      	ldr	r3, [pc, #68]	; (80042f0 <xTimerGenericCommand+0x98>)
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	f107 0114 	add.w	r1, r7, #20
 80042b2:	2300      	movs	r3, #0
 80042b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042b6:	f7fe fc3f 	bl	8002b38 <xQueueGenericSend>
 80042ba:	6278      	str	r0, [r7, #36]	; 0x24
 80042bc:	e012      	b.n	80042e4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80042be:	4b0c      	ldr	r3, [pc, #48]	; (80042f0 <xTimerGenericCommand+0x98>)
 80042c0:	6818      	ldr	r0, [r3, #0]
 80042c2:	f107 0114 	add.w	r1, r7, #20
 80042c6:	2300      	movs	r3, #0
 80042c8:	2200      	movs	r2, #0
 80042ca:	f7fe fc35 	bl	8002b38 <xQueueGenericSend>
 80042ce:	6278      	str	r0, [r7, #36]	; 0x24
 80042d0:	e008      	b.n	80042e4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80042d2:	4b07      	ldr	r3, [pc, #28]	; (80042f0 <xTimerGenericCommand+0x98>)
 80042d4:	6818      	ldr	r0, [r3, #0]
 80042d6:	f107 0114 	add.w	r1, r7, #20
 80042da:	2300      	movs	r3, #0
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	f7fe fd29 	bl	8002d34 <xQueueGenericSendFromISR>
 80042e2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3728      	adds	r7, #40	; 0x28
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	20000294 	.word	0x20000294

080042f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b088      	sub	sp, #32
 80042f8:	af02      	add	r7, sp, #8
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042fe:	4b22      	ldr	r3, [pc, #136]	; (8004388 <prvProcessExpiredTimer+0x94>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	3304      	adds	r3, #4
 800430c:	4618      	mov	r0, r3
 800430e:	f7fe fb21 	bl	8002954 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	d022      	beq.n	8004366 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	699a      	ldr	r2, [r3, #24]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	18d1      	adds	r1, r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	6978      	ldr	r0, [r7, #20]
 800432e:	f000 f8d1 	bl	80044d4 <prvInsertTimerInActiveList>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d01f      	beq.n	8004378 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004338:	2300      	movs	r3, #0
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	2300      	movs	r3, #0
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	2100      	movs	r1, #0
 8004342:	6978      	ldr	r0, [r7, #20]
 8004344:	f7ff ff88 	bl	8004258 <xTimerGenericCommand>
 8004348:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d113      	bne.n	8004378 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004354:	f383 8811 	msr	BASEPRI, r3
 8004358:	f3bf 8f6f 	isb	sy
 800435c:	f3bf 8f4f 	dsb	sy
 8004360:	60fb      	str	r3, [r7, #12]
}
 8004362:	bf00      	nop
 8004364:	e7fe      	b.n	8004364 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800436c:	f023 0301 	bic.w	r3, r3, #1
 8004370:	b2da      	uxtb	r2, r3
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	6978      	ldr	r0, [r7, #20]
 800437e:	4798      	blx	r3
}
 8004380:	bf00      	nop
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	2000028c 	.word	0x2000028c

0800438c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004394:	f107 0308 	add.w	r3, r7, #8
 8004398:	4618      	mov	r0, r3
 800439a:	f000 f857 	bl	800444c <prvGetNextExpireTime>
 800439e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	4619      	mov	r1, r3
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 f803 	bl	80043b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80043aa:	f000 f8d5 	bl	8004558 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80043ae:	e7f1      	b.n	8004394 <prvTimerTask+0x8>

080043b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80043ba:	f7ff f961 	bl	8003680 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80043be:	f107 0308 	add.w	r3, r7, #8
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 f866 	bl	8004494 <prvSampleTimeNow>
 80043c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d130      	bne.n	8004432 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10a      	bne.n	80043ec <prvProcessTimerOrBlockTask+0x3c>
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d806      	bhi.n	80043ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80043de:	f7ff f95d 	bl	800369c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80043e2:	68f9      	ldr	r1, [r7, #12]
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f7ff ff85 	bl	80042f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80043ea:	e024      	b.n	8004436 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d008      	beq.n	8004404 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80043f2:	4b13      	ldr	r3, [pc, #76]	; (8004440 <prvProcessTimerOrBlockTask+0x90>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <prvProcessTimerOrBlockTask+0x50>
 80043fc:	2301      	movs	r3, #1
 80043fe:	e000      	b.n	8004402 <prvProcessTimerOrBlockTask+0x52>
 8004400:	2300      	movs	r3, #0
 8004402:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004404:	4b0f      	ldr	r3, [pc, #60]	; (8004444 <prvProcessTimerOrBlockTask+0x94>)
 8004406:	6818      	ldr	r0, [r3, #0]
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	4619      	mov	r1, r3
 8004412:	f7fe ff41 	bl	8003298 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004416:	f7ff f941 	bl	800369c <xTaskResumeAll>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10a      	bne.n	8004436 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004420:	4b09      	ldr	r3, [pc, #36]	; (8004448 <prvProcessTimerOrBlockTask+0x98>)
 8004422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004426:	601a      	str	r2, [r3, #0]
 8004428:	f3bf 8f4f 	dsb	sy
 800442c:	f3bf 8f6f 	isb	sy
}
 8004430:	e001      	b.n	8004436 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004432:	f7ff f933 	bl	800369c <xTaskResumeAll>
}
 8004436:	bf00      	nop
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	20000290 	.word	0x20000290
 8004444:	20000294 	.word	0x20000294
 8004448:	e000ed04 	.word	0xe000ed04

0800444c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004454:	4b0e      	ldr	r3, [pc, #56]	; (8004490 <prvGetNextExpireTime+0x44>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <prvGetNextExpireTime+0x16>
 800445e:	2201      	movs	r2, #1
 8004460:	e000      	b.n	8004464 <prvGetNextExpireTime+0x18>
 8004462:	2200      	movs	r2, #0
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d105      	bne.n	800447c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004470:	4b07      	ldr	r3, [pc, #28]	; (8004490 <prvGetNextExpireTime+0x44>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	60fb      	str	r3, [r7, #12]
 800447a:	e001      	b.n	8004480 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800447c:	2300      	movs	r3, #0
 800447e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004480:	68fb      	ldr	r3, [r7, #12]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3714      	adds	r7, #20
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	2000028c 	.word	0x2000028c

08004494 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800449c:	f7ff f99a 	bl	80037d4 <xTaskGetTickCount>
 80044a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80044a2:	4b0b      	ldr	r3, [pc, #44]	; (80044d0 <prvSampleTimeNow+0x3c>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d205      	bcs.n	80044b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80044ac:	f000 f91a 	bl	80046e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	601a      	str	r2, [r3, #0]
 80044b6:	e002      	b.n	80044be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80044be:	4a04      	ldr	r2, [pc, #16]	; (80044d0 <prvSampleTimeNow+0x3c>)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80044c4:	68fb      	ldr	r3, [r7, #12]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	2000029c 	.word	0x2000029c

080044d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
 80044e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80044e2:	2300      	movs	r3, #0
 80044e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d812      	bhi.n	8004520 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	1ad2      	subs	r2, r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	429a      	cmp	r2, r3
 8004506:	d302      	bcc.n	800450e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004508:	2301      	movs	r3, #1
 800450a:	617b      	str	r3, [r7, #20]
 800450c:	e01b      	b.n	8004546 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800450e:	4b10      	ldr	r3, [pc, #64]	; (8004550 <prvInsertTimerInActiveList+0x7c>)
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	3304      	adds	r3, #4
 8004516:	4619      	mov	r1, r3
 8004518:	4610      	mov	r0, r2
 800451a:	f7fe f9e2 	bl	80028e2 <vListInsert>
 800451e:	e012      	b.n	8004546 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	429a      	cmp	r2, r3
 8004526:	d206      	bcs.n	8004536 <prvInsertTimerInActiveList+0x62>
 8004528:	68ba      	ldr	r2, [r7, #8]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	429a      	cmp	r2, r3
 800452e:	d302      	bcc.n	8004536 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004530:	2301      	movs	r3, #1
 8004532:	617b      	str	r3, [r7, #20]
 8004534:	e007      	b.n	8004546 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004536:	4b07      	ldr	r3, [pc, #28]	; (8004554 <prvInsertTimerInActiveList+0x80>)
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	3304      	adds	r3, #4
 800453e:	4619      	mov	r1, r3
 8004540:	4610      	mov	r0, r2
 8004542:	f7fe f9ce 	bl	80028e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004546:	697b      	ldr	r3, [r7, #20]
}
 8004548:	4618      	mov	r0, r3
 800454a:	3718      	adds	r7, #24
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	20000290 	.word	0x20000290
 8004554:	2000028c 	.word	0x2000028c

08004558 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b08c      	sub	sp, #48	; 0x30
 800455c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800455e:	e0ae      	b.n	80046be <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	2b00      	cmp	r3, #0
 8004564:	f2c0 80aa 	blt.w	80046bc <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d004      	beq.n	800457e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	3304      	adds	r3, #4
 8004578:	4618      	mov	r0, r3
 800457a:	f7fe f9eb 	bl	8002954 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800457e:	1d3b      	adds	r3, r7, #4
 8004580:	4618      	mov	r0, r3
 8004582:	f7ff ff87 	bl	8004494 <prvSampleTimeNow>
 8004586:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	2b09      	cmp	r3, #9
 800458c:	f200 8097 	bhi.w	80046be <prvProcessReceivedCommands+0x166>
 8004590:	a201      	add	r2, pc, #4	; (adr r2, 8004598 <prvProcessReceivedCommands+0x40>)
 8004592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004596:	bf00      	nop
 8004598:	080045c1 	.word	0x080045c1
 800459c:	080045c1 	.word	0x080045c1
 80045a0:	080045c1 	.word	0x080045c1
 80045a4:	08004635 	.word	0x08004635
 80045a8:	08004649 	.word	0x08004649
 80045ac:	08004693 	.word	0x08004693
 80045b0:	080045c1 	.word	0x080045c1
 80045b4:	080045c1 	.word	0x080045c1
 80045b8:	08004635 	.word	0x08004635
 80045bc:	08004649 	.word	0x08004649
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045c6:	f043 0301 	orr.w	r3, r3, #1
 80045ca:	b2da      	uxtb	r2, r3
 80045cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	18d1      	adds	r1, r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6a3a      	ldr	r2, [r7, #32]
 80045de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80045e0:	f7ff ff78 	bl	80044d4 <prvInsertTimerInActiveList>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d069      	beq.n	80046be <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80045f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d05e      	beq.n	80046be <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	441a      	add	r2, r3
 8004608:	2300      	movs	r3, #0
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	2300      	movs	r3, #0
 800460e:	2100      	movs	r1, #0
 8004610:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004612:	f7ff fe21 	bl	8004258 <xTimerGenericCommand>
 8004616:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d14f      	bne.n	80046be <prvProcessReceivedCommands+0x166>
	__asm volatile
 800461e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004622:	f383 8811 	msr	BASEPRI, r3
 8004626:	f3bf 8f6f 	isb	sy
 800462a:	f3bf 8f4f 	dsb	sy
 800462e:	61bb      	str	r3, [r7, #24]
}
 8004630:	bf00      	nop
 8004632:	e7fe      	b.n	8004632 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800463a:	f023 0301 	bic.w	r3, r3, #1
 800463e:	b2da      	uxtb	r2, r3
 8004640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004642:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004646:	e03a      	b.n	80046be <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800464e:	f043 0301 	orr.w	r3, r3, #1
 8004652:	b2da      	uxtb	r2, r3
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10a      	bne.n	800467e <prvProcessReceivedCommands+0x126>
	__asm volatile
 8004668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466c:	f383 8811 	msr	BASEPRI, r3
 8004670:	f3bf 8f6f 	isb	sy
 8004674:	f3bf 8f4f 	dsb	sy
 8004678:	617b      	str	r3, [r7, #20]
}
 800467a:	bf00      	nop
 800467c:	e7fe      	b.n	800467c <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	699a      	ldr	r2, [r3, #24]
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	18d1      	adds	r1, r2, r3
 8004686:	6a3b      	ldr	r3, [r7, #32]
 8004688:	6a3a      	ldr	r2, [r7, #32]
 800468a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800468c:	f7ff ff22 	bl	80044d4 <prvInsertTimerInActiveList>
					break;
 8004690:	e015      	b.n	80046be <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004694:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d103      	bne.n	80046a8 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 80046a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046a2:	f000 fbdd 	bl	8004e60 <vPortFree>
 80046a6:	e00a      	b.n	80046be <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046ae:	f023 0301 	bic.w	r3, r3, #1
 80046b2:	b2da      	uxtb	r2, r3
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80046ba:	e000      	b.n	80046be <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80046bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80046be:	4b08      	ldr	r3, [pc, #32]	; (80046e0 <prvProcessReceivedCommands+0x188>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f107 0108 	add.w	r1, r7, #8
 80046c6:	2200      	movs	r2, #0
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7fe fbcb 	bl	8002e64 <xQueueReceive>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f47f af45 	bne.w	8004560 <prvProcessReceivedCommands+0x8>
	}
}
 80046d6:	bf00      	nop
 80046d8:	bf00      	nop
 80046da:	3728      	adds	r7, #40	; 0x28
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	20000294 	.word	0x20000294

080046e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b088      	sub	sp, #32
 80046e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80046ea:	e048      	b.n	800477e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046ec:	4b2d      	ldr	r3, [pc, #180]	; (80047a4 <prvSwitchTimerLists+0xc0>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046f6:	4b2b      	ldr	r3, [pc, #172]	; (80047a4 <prvSwitchTimerLists+0xc0>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	3304      	adds	r3, #4
 8004704:	4618      	mov	r0, r3
 8004706:	f7fe f925 	bl	8002954 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004718:	f003 0304 	and.w	r3, r3, #4
 800471c:	2b00      	cmp	r3, #0
 800471e:	d02e      	beq.n	800477e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	4413      	add	r3, r2
 8004728:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800472a:	68ba      	ldr	r2, [r7, #8]
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	429a      	cmp	r2, r3
 8004730:	d90e      	bls.n	8004750 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800473e:	4b19      	ldr	r3, [pc, #100]	; (80047a4 <prvSwitchTimerLists+0xc0>)
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	3304      	adds	r3, #4
 8004746:	4619      	mov	r1, r3
 8004748:	4610      	mov	r0, r2
 800474a:	f7fe f8ca 	bl	80028e2 <vListInsert>
 800474e:	e016      	b.n	800477e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004750:	2300      	movs	r3, #0
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	2300      	movs	r3, #0
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	2100      	movs	r1, #0
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f7ff fd7c 	bl	8004258 <xTimerGenericCommand>
 8004760:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10a      	bne.n	800477e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476c:	f383 8811 	msr	BASEPRI, r3
 8004770:	f3bf 8f6f 	isb	sy
 8004774:	f3bf 8f4f 	dsb	sy
 8004778:	603b      	str	r3, [r7, #0]
}
 800477a:	bf00      	nop
 800477c:	e7fe      	b.n	800477c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800477e:	4b09      	ldr	r3, [pc, #36]	; (80047a4 <prvSwitchTimerLists+0xc0>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1b1      	bne.n	80046ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004788:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <prvSwitchTimerLists+0xc0>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800478e:	4b06      	ldr	r3, [pc, #24]	; (80047a8 <prvSwitchTimerLists+0xc4>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a04      	ldr	r2, [pc, #16]	; (80047a4 <prvSwitchTimerLists+0xc0>)
 8004794:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004796:	4a04      	ldr	r2, [pc, #16]	; (80047a8 <prvSwitchTimerLists+0xc4>)
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	6013      	str	r3, [r2, #0]
}
 800479c:	bf00      	nop
 800479e:	3718      	adds	r7, #24
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	2000028c 	.word	0x2000028c
 80047a8:	20000290 	.word	0x20000290

080047ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80047b0:	f000 f970 	bl	8004a94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80047b4:	4b12      	ldr	r3, [pc, #72]	; (8004800 <prvCheckForValidListAndQueue+0x54>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d11d      	bne.n	80047f8 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 80047bc:	4811      	ldr	r0, [pc, #68]	; (8004804 <prvCheckForValidListAndQueue+0x58>)
 80047be:	f7fe f83f 	bl	8002840 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80047c2:	4811      	ldr	r0, [pc, #68]	; (8004808 <prvCheckForValidListAndQueue+0x5c>)
 80047c4:	f7fe f83c 	bl	8002840 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80047c8:	4b10      	ldr	r3, [pc, #64]	; (800480c <prvCheckForValidListAndQueue+0x60>)
 80047ca:	4a0e      	ldr	r2, [pc, #56]	; (8004804 <prvCheckForValidListAndQueue+0x58>)
 80047cc:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80047ce:	4b10      	ldr	r3, [pc, #64]	; (8004810 <prvCheckForValidListAndQueue+0x64>)
 80047d0:	4a0d      	ldr	r2, [pc, #52]	; (8004808 <prvCheckForValidListAndQueue+0x5c>)
 80047d2:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80047d4:	2200      	movs	r2, #0
 80047d6:	210c      	movs	r1, #12
 80047d8:	200a      	movs	r0, #10
 80047da:	f7fe f94d 	bl	8002a78 <xQueueGenericCreate>
 80047de:	4603      	mov	r3, r0
 80047e0:	4a07      	ldr	r2, [pc, #28]	; (8004800 <prvCheckForValidListAndQueue+0x54>)
 80047e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80047e4:	4b06      	ldr	r3, [pc, #24]	; (8004800 <prvCheckForValidListAndQueue+0x54>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d005      	beq.n	80047f8 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80047ec:	4b04      	ldr	r3, [pc, #16]	; (8004800 <prvCheckForValidListAndQueue+0x54>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4908      	ldr	r1, [pc, #32]	; (8004814 <prvCheckForValidListAndQueue+0x68>)
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7fe fd26 	bl	8003244 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80047f8:	f000 f97c 	bl	8004af4 <vPortExitCritical>
}
 80047fc:	bf00      	nop
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	20000294 	.word	0x20000294
 8004804:	20000264 	.word	0x20000264
 8004808:	20000278 	.word	0x20000278
 800480c:	2000028c 	.word	0x2000028c
 8004810:	20000290 	.word	0x20000290
 8004814:	08005a5c 	.word	0x08005a5c

08004818 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	3b04      	subs	r3, #4
 8004828:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004830:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	3b04      	subs	r3, #4
 8004836:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	f023 0201 	bic.w	r2, r3, #1
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	3b04      	subs	r3, #4
 8004846:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004848:	4a0c      	ldr	r2, [pc, #48]	; (800487c <pxPortInitialiseStack+0x64>)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	3b14      	subs	r3, #20
 8004852:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	3b04      	subs	r3, #4
 800485e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f06f 0202 	mvn.w	r2, #2
 8004866:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	3b20      	subs	r3, #32
 800486c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800486e:	68fb      	ldr	r3, [r7, #12]
}
 8004870:	4618      	mov	r0, r3
 8004872:	3714      	adds	r7, #20
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr
 800487c:	08004881 	.word	0x08004881

08004880 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004886:	2300      	movs	r3, #0
 8004888:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800488a:	4b12      	ldr	r3, [pc, #72]	; (80048d4 <prvTaskExitError+0x54>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004892:	d00a      	beq.n	80048aa <prvTaskExitError+0x2a>
	__asm volatile
 8004894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004898:	f383 8811 	msr	BASEPRI, r3
 800489c:	f3bf 8f6f 	isb	sy
 80048a0:	f3bf 8f4f 	dsb	sy
 80048a4:	60fb      	str	r3, [r7, #12]
}
 80048a6:	bf00      	nop
 80048a8:	e7fe      	b.n	80048a8 <prvTaskExitError+0x28>
	__asm volatile
 80048aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ae:	f383 8811 	msr	BASEPRI, r3
 80048b2:	f3bf 8f6f 	isb	sy
 80048b6:	f3bf 8f4f 	dsb	sy
 80048ba:	60bb      	str	r3, [r7, #8]
}
 80048bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80048be:	bf00      	nop
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d0fc      	beq.n	80048c0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80048c6:	bf00      	nop
 80048c8:	bf00      	nop
 80048ca:	3714      	adds	r7, #20
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr
 80048d4:	2000000c 	.word	0x2000000c
	...

080048e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80048e0:	4b07      	ldr	r3, [pc, #28]	; (8004900 <pxCurrentTCBConst2>)
 80048e2:	6819      	ldr	r1, [r3, #0]
 80048e4:	6808      	ldr	r0, [r1, #0]
 80048e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ea:	f380 8809 	msr	PSP, r0
 80048ee:	f3bf 8f6f 	isb	sy
 80048f2:	f04f 0000 	mov.w	r0, #0
 80048f6:	f380 8811 	msr	BASEPRI, r0
 80048fa:	4770      	bx	lr
 80048fc:	f3af 8000 	nop.w

08004900 <pxCurrentTCBConst2>:
 8004900:	20000098 	.word	0x20000098
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004904:	bf00      	nop
 8004906:	bf00      	nop

08004908 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004908:	4808      	ldr	r0, [pc, #32]	; (800492c <prvPortStartFirstTask+0x24>)
 800490a:	6800      	ldr	r0, [r0, #0]
 800490c:	6800      	ldr	r0, [r0, #0]
 800490e:	f380 8808 	msr	MSP, r0
 8004912:	f04f 0000 	mov.w	r0, #0
 8004916:	f380 8814 	msr	CONTROL, r0
 800491a:	b662      	cpsie	i
 800491c:	b661      	cpsie	f
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	f3bf 8f6f 	isb	sy
 8004926:	df00      	svc	0
 8004928:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800492a:	bf00      	nop
 800492c:	e000ed08 	.word	0xe000ed08

08004930 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b088      	sub	sp, #32
 8004934:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004936:	4b4e      	ldr	r3, [pc, #312]	; (8004a70 <xPortStartScheduler+0x140>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a4e      	ldr	r2, [pc, #312]	; (8004a74 <xPortStartScheduler+0x144>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d10a      	bne.n	8004956 <xPortStartScheduler+0x26>
	__asm volatile
 8004940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004944:	f383 8811 	msr	BASEPRI, r3
 8004948:	f3bf 8f6f 	isb	sy
 800494c:	f3bf 8f4f 	dsb	sy
 8004950:	61bb      	str	r3, [r7, #24]
}
 8004952:	bf00      	nop
 8004954:	e7fe      	b.n	8004954 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004956:	4b46      	ldr	r3, [pc, #280]	; (8004a70 <xPortStartScheduler+0x140>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a47      	ldr	r2, [pc, #284]	; (8004a78 <xPortStartScheduler+0x148>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d10a      	bne.n	8004976 <xPortStartScheduler+0x46>
	__asm volatile
 8004960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	617b      	str	r3, [r7, #20]
}
 8004972:	bf00      	nop
 8004974:	e7fe      	b.n	8004974 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004976:	4b41      	ldr	r3, [pc, #260]	; (8004a7c <xPortStartScheduler+0x14c>)
 8004978:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	b2db      	uxtb	r3, r3
 8004980:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	22ff      	movs	r2, #255	; 0xff
 8004986:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	b2db      	uxtb	r3, r3
 800498e:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004990:	79fb      	ldrb	r3, [r7, #7]
 8004992:	b2db      	uxtb	r3, r3
 8004994:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004998:	b2da      	uxtb	r2, r3
 800499a:	4b39      	ldr	r3, [pc, #228]	; (8004a80 <xPortStartScheduler+0x150>)
 800499c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800499e:	4b39      	ldr	r3, [pc, #228]	; (8004a84 <xPortStartScheduler+0x154>)
 80049a0:	2207      	movs	r2, #7
 80049a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049a4:	e009      	b.n	80049ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80049a6:	4b37      	ldr	r3, [pc, #220]	; (8004a84 <xPortStartScheduler+0x154>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	3b01      	subs	r3, #1
 80049ac:	4a35      	ldr	r2, [pc, #212]	; (8004a84 <xPortStartScheduler+0x154>)
 80049ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80049b0:	79fb      	ldrb	r3, [r7, #7]
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049ba:	79fb      	ldrb	r3, [r7, #7]
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c2:	2b80      	cmp	r3, #128	; 0x80
 80049c4:	d0ef      	beq.n	80049a6 <xPortStartScheduler+0x76>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 80049c6:	4b2f      	ldr	r3, [pc, #188]	; (8004a84 <xPortStartScheduler+0x154>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f1c3 0307 	rsb	r3, r3, #7
 80049ce:	2b04      	cmp	r3, #4
 80049d0:	d00a      	beq.n	80049e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80049d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d6:	f383 8811 	msr	BASEPRI, r3
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	f3bf 8f4f 	dsb	sy
 80049e2:	613b      	str	r3, [r7, #16]
}
 80049e4:	bf00      	nop
 80049e6:	e7fe      	b.n	80049e6 <xPortStartScheduler+0xb6>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80049e8:	4b26      	ldr	r3, [pc, #152]	; (8004a84 <xPortStartScheduler+0x154>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f1c3 0307 	rsb	r3, r3, #7
 80049f0:	2b04      	cmp	r3, #4
 80049f2:	d00a      	beq.n	8004a0a <xPortStartScheduler+0xda>
	__asm volatile
 80049f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f8:	f383 8811 	msr	BASEPRI, r3
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	60fb      	str	r3, [r7, #12]
}
 8004a06:	bf00      	nop
 8004a08:	e7fe      	b.n	8004a08 <xPortStartScheduler+0xd8>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a0a:	4b1e      	ldr	r3, [pc, #120]	; (8004a84 <xPortStartScheduler+0x154>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	021b      	lsls	r3, r3, #8
 8004a10:	4a1c      	ldr	r2, [pc, #112]	; (8004a84 <xPortStartScheduler+0x154>)
 8004a12:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a14:	4b1b      	ldr	r3, [pc, #108]	; (8004a84 <xPortStartScheduler+0x154>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a1c:	4a19      	ldr	r2, [pc, #100]	; (8004a84 <xPortStartScheduler+0x154>)
 8004a1e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	b2da      	uxtb	r2, r3
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004a28:	4b17      	ldr	r3, [pc, #92]	; (8004a88 <xPortStartScheduler+0x158>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a16      	ldr	r2, [pc, #88]	; (8004a88 <xPortStartScheduler+0x158>)
 8004a2e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a32:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004a34:	4b14      	ldr	r3, [pc, #80]	; (8004a88 <xPortStartScheduler+0x158>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a13      	ldr	r2, [pc, #76]	; (8004a88 <xPortStartScheduler+0x158>)
 8004a3a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004a3e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004a40:	f000 f8dc 	bl	8004bfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004a44:	4b11      	ldr	r3, [pc, #68]	; (8004a8c <xPortStartScheduler+0x15c>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004a4a:	f000 f8fb 	bl	8004c44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004a4e:	4b10      	ldr	r3, [pc, #64]	; (8004a90 <xPortStartScheduler+0x160>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a0f      	ldr	r2, [pc, #60]	; (8004a90 <xPortStartScheduler+0x160>)
 8004a54:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004a58:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004a5a:	f7ff ff55 	bl	8004908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004a5e:	f7fe ff81 	bl	8003964 <vTaskSwitchContext>
	prvTaskExitError();
 8004a62:	f7ff ff0d 	bl	8004880 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3720      	adds	r7, #32
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	e000ed00 	.word	0xe000ed00
 8004a74:	410fc271 	.word	0x410fc271
 8004a78:	410fc270 	.word	0x410fc270
 8004a7c:	e000e400 	.word	0xe000e400
 8004a80:	200002a0 	.word	0x200002a0
 8004a84:	200002a4 	.word	0x200002a4
 8004a88:	e000ed20 	.word	0xe000ed20
 8004a8c:	2000000c 	.word	0x2000000c
 8004a90:	e000ef34 	.word	0xe000ef34

08004a94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
	__asm volatile
 8004a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9e:	f383 8811 	msr	BASEPRI, r3
 8004aa2:	f3bf 8f6f 	isb	sy
 8004aa6:	f3bf 8f4f 	dsb	sy
 8004aaa:	607b      	str	r3, [r7, #4]
}
 8004aac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004aae:	4b0f      	ldr	r3, [pc, #60]	; (8004aec <vPortEnterCritical+0x58>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	4a0d      	ldr	r2, [pc, #52]	; (8004aec <vPortEnterCritical+0x58>)
 8004ab6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004ab8:	4b0c      	ldr	r3, [pc, #48]	; (8004aec <vPortEnterCritical+0x58>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d10f      	bne.n	8004ae0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ac0:	4b0b      	ldr	r3, [pc, #44]	; (8004af0 <vPortEnterCritical+0x5c>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00a      	beq.n	8004ae0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ace:	f383 8811 	msr	BASEPRI, r3
 8004ad2:	f3bf 8f6f 	isb	sy
 8004ad6:	f3bf 8f4f 	dsb	sy
 8004ada:	603b      	str	r3, [r7, #0]
}
 8004adc:	bf00      	nop
 8004ade:	e7fe      	b.n	8004ade <vPortEnterCritical+0x4a>
	}
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	2000000c 	.word	0x2000000c
 8004af0:	e000ed04 	.word	0xe000ed04

08004af4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004afa:	4b12      	ldr	r3, [pc, #72]	; (8004b44 <vPortExitCritical+0x50>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10a      	bne.n	8004b18 <vPortExitCritical+0x24>
	__asm volatile
 8004b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b06:	f383 8811 	msr	BASEPRI, r3
 8004b0a:	f3bf 8f6f 	isb	sy
 8004b0e:	f3bf 8f4f 	dsb	sy
 8004b12:	607b      	str	r3, [r7, #4]
}
 8004b14:	bf00      	nop
 8004b16:	e7fe      	b.n	8004b16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004b18:	4b0a      	ldr	r3, [pc, #40]	; (8004b44 <vPortExitCritical+0x50>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	4a09      	ldr	r2, [pc, #36]	; (8004b44 <vPortExitCritical+0x50>)
 8004b20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004b22:	4b08      	ldr	r3, [pc, #32]	; (8004b44 <vPortExitCritical+0x50>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d105      	bne.n	8004b36 <vPortExitCritical+0x42>
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	f383 8811 	msr	BASEPRI, r3
}
 8004b34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004b36:	bf00      	nop
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	2000000c 	.word	0x2000000c
	...

08004b50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004b50:	f3ef 8009 	mrs	r0, PSP
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	4b15      	ldr	r3, [pc, #84]	; (8004bb0 <pxCurrentTCBConst>)
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	f01e 0f10 	tst.w	lr, #16
 8004b60:	bf08      	it	eq
 8004b62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004b66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b6a:	6010      	str	r0, [r2, #0]
 8004b6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004b70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004b74:	f380 8811 	msr	BASEPRI, r0
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	f3bf 8f6f 	isb	sy
 8004b80:	f7fe fef0 	bl	8003964 <vTaskSwitchContext>
 8004b84:	f04f 0000 	mov.w	r0, #0
 8004b88:	f380 8811 	msr	BASEPRI, r0
 8004b8c:	bc09      	pop	{r0, r3}
 8004b8e:	6819      	ldr	r1, [r3, #0]
 8004b90:	6808      	ldr	r0, [r1, #0]
 8004b92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b96:	f01e 0f10 	tst.w	lr, #16
 8004b9a:	bf08      	it	eq
 8004b9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ba0:	f380 8809 	msr	PSP, r0
 8004ba4:	f3bf 8f6f 	isb	sy
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	f3af 8000 	nop.w

08004bb0 <pxCurrentTCBConst>:
 8004bb0:	20000098 	.word	0x20000098
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004bb4:	bf00      	nop
 8004bb6:	bf00      	nop

08004bb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
	__asm volatile
 8004bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc2:	f383 8811 	msr	BASEPRI, r3
 8004bc6:	f3bf 8f6f 	isb	sy
 8004bca:	f3bf 8f4f 	dsb	sy
 8004bce:	607b      	str	r3, [r7, #4]
}
 8004bd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004bd2:	f7fe fe0f 	bl	80037f4 <xTaskIncrementTick>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d003      	beq.n	8004be4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004bdc:	4b06      	ldr	r3, [pc, #24]	; (8004bf8 <SysTick_Handler+0x40>)
 8004bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	2300      	movs	r3, #0
 8004be6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	f383 8811 	msr	BASEPRI, r3
}
 8004bee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004bf0:	bf00      	nop
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	e000ed04 	.word	0xe000ed04

08004bfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c00:	4b0b      	ldr	r3, [pc, #44]	; (8004c30 <vPortSetupTimerInterrupt+0x34>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c06:	4b0b      	ldr	r3, [pc, #44]	; (8004c34 <vPortSetupTimerInterrupt+0x38>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c0c:	4b0a      	ldr	r3, [pc, #40]	; (8004c38 <vPortSetupTimerInterrupt+0x3c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a0a      	ldr	r2, [pc, #40]	; (8004c3c <vPortSetupTimerInterrupt+0x40>)
 8004c12:	fba2 2303 	umull	r2, r3, r2, r3
 8004c16:	099b      	lsrs	r3, r3, #6
 8004c18:	4a09      	ldr	r2, [pc, #36]	; (8004c40 <vPortSetupTimerInterrupt+0x44>)
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c1e:	4b04      	ldr	r3, [pc, #16]	; (8004c30 <vPortSetupTimerInterrupt+0x34>)
 8004c20:	2207      	movs	r2, #7
 8004c22:	601a      	str	r2, [r3, #0]
}
 8004c24:	bf00      	nop
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	e000e010 	.word	0xe000e010
 8004c34:	e000e018 	.word	0xe000e018
 8004c38:	20000000 	.word	0x20000000
 8004c3c:	10624dd3 	.word	0x10624dd3
 8004c40:	e000e014 	.word	0xe000e014

08004c44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004c44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004c54 <vPortEnableVFP+0x10>
 8004c48:	6801      	ldr	r1, [r0, #0]
 8004c4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004c4e:	6001      	str	r1, [r0, #0]
 8004c50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004c52:	bf00      	nop
 8004c54:	e000ed88 	.word	0xe000ed88

08004c58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004c5e:	f3ef 8305 	mrs	r3, IPSR
 8004c62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2b0f      	cmp	r3, #15
 8004c68:	d914      	bls.n	8004c94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004c6a:	4a17      	ldr	r2, [pc, #92]	; (8004cc8 <vPortValidateInterruptPriority+0x70>)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4413      	add	r3, r2
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004c74:	4b15      	ldr	r3, [pc, #84]	; (8004ccc <vPortValidateInterruptPriority+0x74>)
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	7afa      	ldrb	r2, [r7, #11]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d20a      	bcs.n	8004c94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c82:	f383 8811 	msr	BASEPRI, r3
 8004c86:	f3bf 8f6f 	isb	sy
 8004c8a:	f3bf 8f4f 	dsb	sy
 8004c8e:	607b      	str	r3, [r7, #4]
}
 8004c90:	bf00      	nop
 8004c92:	e7fe      	b.n	8004c92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004c94:	4b0e      	ldr	r3, [pc, #56]	; (8004cd0 <vPortValidateInterruptPriority+0x78>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c9c:	4b0d      	ldr	r3, [pc, #52]	; (8004cd4 <vPortValidateInterruptPriority+0x7c>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d90a      	bls.n	8004cba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca8:	f383 8811 	msr	BASEPRI, r3
 8004cac:	f3bf 8f6f 	isb	sy
 8004cb0:	f3bf 8f4f 	dsb	sy
 8004cb4:	603b      	str	r3, [r7, #0]
}
 8004cb6:	bf00      	nop
 8004cb8:	e7fe      	b.n	8004cb8 <vPortValidateInterruptPriority+0x60>
	}
 8004cba:	bf00      	nop
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	e000e3f0 	.word	0xe000e3f0
 8004ccc:	200002a0 	.word	0x200002a0
 8004cd0:	e000ed0c 	.word	0xe000ed0c
 8004cd4:	200002a4 	.word	0x200002a4

08004cd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b08a      	sub	sp, #40	; 0x28
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004ce4:	f7fe fccc 	bl	8003680 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004ce8:	4b58      	ldr	r3, [pc, #352]	; (8004e4c <pvPortMalloc+0x174>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004cf0:	f000 f910 	bl	8004f14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004cf4:	4b56      	ldr	r3, [pc, #344]	; (8004e50 <pvPortMalloc+0x178>)
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f040 808e 	bne.w	8004e1e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d01d      	beq.n	8004d44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004d08:	2208      	movs	r2, #8
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d014      	beq.n	8004d44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f023 0307 	bic.w	r3, r3, #7
 8004d20:	3308      	adds	r3, #8
 8004d22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f003 0307 	and.w	r3, r3, #7
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00a      	beq.n	8004d44 <pvPortMalloc+0x6c>
	__asm volatile
 8004d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d32:	f383 8811 	msr	BASEPRI, r3
 8004d36:	f3bf 8f6f 	isb	sy
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	617b      	str	r3, [r7, #20]
}
 8004d40:	bf00      	nop
 8004d42:	e7fe      	b.n	8004d42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d069      	beq.n	8004e1e <pvPortMalloc+0x146>
 8004d4a:	4b42      	ldr	r3, [pc, #264]	; (8004e54 <pvPortMalloc+0x17c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d864      	bhi.n	8004e1e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004d54:	4b40      	ldr	r3, [pc, #256]	; (8004e58 <pvPortMalloc+0x180>)
 8004d56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004d58:	4b3f      	ldr	r3, [pc, #252]	; (8004e58 <pvPortMalloc+0x180>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d5e:	e004      	b.n	8004d6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d903      	bls.n	8004d7c <pvPortMalloc+0xa4>
 8004d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1f1      	bne.n	8004d60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004d7c:	4b33      	ldr	r3, [pc, #204]	; (8004e4c <pvPortMalloc+0x174>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d04b      	beq.n	8004e1e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2208      	movs	r2, #8
 8004d8c:	4413      	add	r3, r2
 8004d8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	6a3b      	ldr	r3, [r7, #32]
 8004d96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	1ad2      	subs	r2, r2, r3
 8004da0:	2308      	movs	r3, #8
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d91f      	bls.n	8004de8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4413      	add	r3, r2
 8004dae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	f003 0307 	and.w	r3, r3, #7
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00a      	beq.n	8004dd0 <pvPortMalloc+0xf8>
	__asm volatile
 8004dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dbe:	f383 8811 	msr	BASEPRI, r3
 8004dc2:	f3bf 8f6f 	isb	sy
 8004dc6:	f3bf 8f4f 	dsb	sy
 8004dca:	613b      	str	r3, [r7, #16]
}
 8004dcc:	bf00      	nop
 8004dce:	e7fe      	b.n	8004dce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	1ad2      	subs	r2, r2, r3
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004de2:	69b8      	ldr	r0, [r7, #24]
 8004de4:	f000 f8f8 	bl	8004fd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004de8:	4b1a      	ldr	r3, [pc, #104]	; (8004e54 <pvPortMalloc+0x17c>)
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	4a18      	ldr	r2, [pc, #96]	; (8004e54 <pvPortMalloc+0x17c>)
 8004df4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004df6:	4b17      	ldr	r3, [pc, #92]	; (8004e54 <pvPortMalloc+0x17c>)
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	4b18      	ldr	r3, [pc, #96]	; (8004e5c <pvPortMalloc+0x184>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d203      	bcs.n	8004e0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e02:	4b14      	ldr	r3, [pc, #80]	; (8004e54 <pvPortMalloc+0x17c>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a15      	ldr	r2, [pc, #84]	; (8004e5c <pvPortMalloc+0x184>)
 8004e08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	4b10      	ldr	r3, [pc, #64]	; (8004e50 <pvPortMalloc+0x178>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	431a      	orrs	r2, r3
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004e1e:	f7fe fc3d 	bl	800369c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	f003 0307 	and.w	r3, r3, #7
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00a      	beq.n	8004e42 <pvPortMalloc+0x16a>
	__asm volatile
 8004e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e30:	f383 8811 	msr	BASEPRI, r3
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	60fb      	str	r3, [r7, #12]
}
 8004e3e:	bf00      	nop
 8004e40:	e7fe      	b.n	8004e40 <pvPortMalloc+0x168>
	return pvReturn;
 8004e42:	69fb      	ldr	r3, [r7, #28]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3728      	adds	r7, #40	; 0x28
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	20012eb0 	.word	0x20012eb0
 8004e50:	20012ebc 	.word	0x20012ebc
 8004e54:	20012eb4 	.word	0x20012eb4
 8004e58:	20012ea8 	.word	0x20012ea8
 8004e5c:	20012eb8 	.word	0x20012eb8

08004e60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d048      	beq.n	8004f04 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004e72:	2308      	movs	r3, #8
 8004e74:	425b      	negs	r3, r3
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	4413      	add	r3, r2
 8004e7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	685a      	ldr	r2, [r3, #4]
 8004e84:	4b21      	ldr	r3, [pc, #132]	; (8004f0c <vPortFree+0xac>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10a      	bne.n	8004ea4 <vPortFree+0x44>
	__asm volatile
 8004e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e92:	f383 8811 	msr	BASEPRI, r3
 8004e96:	f3bf 8f6f 	isb	sy
 8004e9a:	f3bf 8f4f 	dsb	sy
 8004e9e:	60fb      	str	r3, [r7, #12]
}
 8004ea0:	bf00      	nop
 8004ea2:	e7fe      	b.n	8004ea2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00a      	beq.n	8004ec2 <vPortFree+0x62>
	__asm volatile
 8004eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb0:	f383 8811 	msr	BASEPRI, r3
 8004eb4:	f3bf 8f6f 	isb	sy
 8004eb8:	f3bf 8f4f 	dsb	sy
 8004ebc:	60bb      	str	r3, [r7, #8]
}
 8004ebe:	bf00      	nop
 8004ec0:	e7fe      	b.n	8004ec0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	4b11      	ldr	r3, [pc, #68]	; (8004f0c <vPortFree+0xac>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4013      	ands	r3, r2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d019      	beq.n	8004f04 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d115      	bne.n	8004f04 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	685a      	ldr	r2, [r3, #4]
 8004edc:	4b0b      	ldr	r3, [pc, #44]	; (8004f0c <vPortFree+0xac>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	43db      	mvns	r3, r3
 8004ee2:	401a      	ands	r2, r3
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ee8:	f7fe fbca 	bl	8003680 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	4b07      	ldr	r3, [pc, #28]	; (8004f10 <vPortFree+0xb0>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	4a06      	ldr	r2, [pc, #24]	; (8004f10 <vPortFree+0xb0>)
 8004ef8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004efa:	6938      	ldr	r0, [r7, #16]
 8004efc:	f000 f86c 	bl	8004fd8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004f00:	f7fe fbcc 	bl	800369c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004f04:	bf00      	nop
 8004f06:	3718      	adds	r7, #24
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	20012ebc 	.word	0x20012ebc
 8004f10:	20012eb4 	.word	0x20012eb4

08004f14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f1a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004f1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004f20:	4b27      	ldr	r3, [pc, #156]	; (8004fc0 <prvHeapInit+0xac>)
 8004f22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f003 0307 	and.w	r3, r3, #7
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00c      	beq.n	8004f48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	3307      	adds	r3, #7
 8004f32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f023 0307 	bic.w	r3, r3, #7
 8004f3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	4a1f      	ldr	r2, [pc, #124]	; (8004fc0 <prvHeapInit+0xac>)
 8004f44:	4413      	add	r3, r2
 8004f46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f4c:	4a1d      	ldr	r2, [pc, #116]	; (8004fc4 <prvHeapInit+0xb0>)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004f52:	4b1c      	ldr	r3, [pc, #112]	; (8004fc4 <prvHeapInit+0xb0>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004f60:	2208      	movs	r2, #8
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	1a9b      	subs	r3, r3, r2
 8004f66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f023 0307 	bic.w	r3, r3, #7
 8004f6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	4a15      	ldr	r2, [pc, #84]	; (8004fc8 <prvHeapInit+0xb4>)
 8004f74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004f76:	4b14      	ldr	r3, [pc, #80]	; (8004fc8 <prvHeapInit+0xb4>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004f7e:	4b12      	ldr	r3, [pc, #72]	; (8004fc8 <prvHeapInit+0xb4>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2200      	movs	r2, #0
 8004f84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	1ad2      	subs	r2, r2, r3
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f94:	4b0c      	ldr	r3, [pc, #48]	; (8004fc8 <prvHeapInit+0xb4>)
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	4a0a      	ldr	r2, [pc, #40]	; (8004fcc <prvHeapInit+0xb8>)
 8004fa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	4a09      	ldr	r2, [pc, #36]	; (8004fd0 <prvHeapInit+0xbc>)
 8004faa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004fac:	4b09      	ldr	r3, [pc, #36]	; (8004fd4 <prvHeapInit+0xc0>)
 8004fae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004fb2:	601a      	str	r2, [r3, #0]
}
 8004fb4:	bf00      	nop
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	200002a8 	.word	0x200002a8
 8004fc4:	20012ea8 	.word	0x20012ea8
 8004fc8:	20012eb0 	.word	0x20012eb0
 8004fcc:	20012eb8 	.word	0x20012eb8
 8004fd0:	20012eb4 	.word	0x20012eb4
 8004fd4:	20012ebc 	.word	0x20012ebc

08004fd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004fe0:	4b28      	ldr	r3, [pc, #160]	; (8005084 <prvInsertBlockIntoFreeList+0xac>)
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	e002      	b.n	8004fec <prvInsertBlockIntoFreeList+0x14>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	60fb      	str	r3, [r7, #12]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d8f7      	bhi.n	8004fe6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	4413      	add	r3, r2
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	429a      	cmp	r2, r3
 8005006:	d108      	bne.n	800501a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	441a      	add	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	441a      	add	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	429a      	cmp	r2, r3
 800502c:	d118      	bne.n	8005060 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	4b15      	ldr	r3, [pc, #84]	; (8005088 <prvInsertBlockIntoFreeList+0xb0>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	429a      	cmp	r2, r3
 8005038:	d00d      	beq.n	8005056 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685a      	ldr	r2, [r3, #4]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	441a      	add	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	601a      	str	r2, [r3, #0]
 8005054:	e008      	b.n	8005068 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005056:	4b0c      	ldr	r3, [pc, #48]	; (8005088 <prvInsertBlockIntoFreeList+0xb0>)
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	601a      	str	r2, [r3, #0]
 800505e:	e003      	b.n	8005068 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	429a      	cmp	r2, r3
 800506e:	d002      	beq.n	8005076 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005076:	bf00      	nop
 8005078:	3714      	adds	r7, #20
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	20012ea8 	.word	0x20012ea8
 8005088:	20012eb0 	.word	0x20012eb0

0800508c <__errno>:
 800508c:	4b01      	ldr	r3, [pc, #4]	; (8005094 <__errno+0x8>)
 800508e:	6818      	ldr	r0, [r3, #0]
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	20000010 	.word	0x20000010

08005098 <__libc_init_array>:
 8005098:	b570      	push	{r4, r5, r6, lr}
 800509a:	4d0d      	ldr	r5, [pc, #52]	; (80050d0 <__libc_init_array+0x38>)
 800509c:	4c0d      	ldr	r4, [pc, #52]	; (80050d4 <__libc_init_array+0x3c>)
 800509e:	1b64      	subs	r4, r4, r5
 80050a0:	10a4      	asrs	r4, r4, #2
 80050a2:	2600      	movs	r6, #0
 80050a4:	42a6      	cmp	r6, r4
 80050a6:	d109      	bne.n	80050bc <__libc_init_array+0x24>
 80050a8:	4d0b      	ldr	r5, [pc, #44]	; (80050d8 <__libc_init_array+0x40>)
 80050aa:	4c0c      	ldr	r4, [pc, #48]	; (80050dc <__libc_init_array+0x44>)
 80050ac:	f000 fc4e 	bl	800594c <_init>
 80050b0:	1b64      	subs	r4, r4, r5
 80050b2:	10a4      	asrs	r4, r4, #2
 80050b4:	2600      	movs	r6, #0
 80050b6:	42a6      	cmp	r6, r4
 80050b8:	d105      	bne.n	80050c6 <__libc_init_array+0x2e>
 80050ba:	bd70      	pop	{r4, r5, r6, pc}
 80050bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80050c0:	4798      	blx	r3
 80050c2:	3601      	adds	r6, #1
 80050c4:	e7ee      	b.n	80050a4 <__libc_init_array+0xc>
 80050c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ca:	4798      	blx	r3
 80050cc:	3601      	adds	r6, #1
 80050ce:	e7f2      	b.n	80050b6 <__libc_init_array+0x1e>
 80050d0:	08005ab8 	.word	0x08005ab8
 80050d4:	08005ab8 	.word	0x08005ab8
 80050d8:	08005ab8 	.word	0x08005ab8
 80050dc:	08005abc 	.word	0x08005abc

080050e0 <memcpy>:
 80050e0:	440a      	add	r2, r1
 80050e2:	4291      	cmp	r1, r2
 80050e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80050e8:	d100      	bne.n	80050ec <memcpy+0xc>
 80050ea:	4770      	bx	lr
 80050ec:	b510      	push	{r4, lr}
 80050ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050f6:	4291      	cmp	r1, r2
 80050f8:	d1f9      	bne.n	80050ee <memcpy+0xe>
 80050fa:	bd10      	pop	{r4, pc}

080050fc <memset>:
 80050fc:	4402      	add	r2, r0
 80050fe:	4603      	mov	r3, r0
 8005100:	4293      	cmp	r3, r2
 8005102:	d100      	bne.n	8005106 <memset+0xa>
 8005104:	4770      	bx	lr
 8005106:	f803 1b01 	strb.w	r1, [r3], #1
 800510a:	e7f9      	b.n	8005100 <memset+0x4>

0800510c <siprintf>:
 800510c:	b40e      	push	{r1, r2, r3}
 800510e:	b500      	push	{lr}
 8005110:	b09c      	sub	sp, #112	; 0x70
 8005112:	ab1d      	add	r3, sp, #116	; 0x74
 8005114:	9002      	str	r0, [sp, #8]
 8005116:	9006      	str	r0, [sp, #24]
 8005118:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800511c:	4809      	ldr	r0, [pc, #36]	; (8005144 <siprintf+0x38>)
 800511e:	9107      	str	r1, [sp, #28]
 8005120:	9104      	str	r1, [sp, #16]
 8005122:	4909      	ldr	r1, [pc, #36]	; (8005148 <siprintf+0x3c>)
 8005124:	f853 2b04 	ldr.w	r2, [r3], #4
 8005128:	9105      	str	r1, [sp, #20]
 800512a:	6800      	ldr	r0, [r0, #0]
 800512c:	9301      	str	r3, [sp, #4]
 800512e:	a902      	add	r1, sp, #8
 8005130:	f000 f868 	bl	8005204 <_svfiprintf_r>
 8005134:	9b02      	ldr	r3, [sp, #8]
 8005136:	2200      	movs	r2, #0
 8005138:	701a      	strb	r2, [r3, #0]
 800513a:	b01c      	add	sp, #112	; 0x70
 800513c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005140:	b003      	add	sp, #12
 8005142:	4770      	bx	lr
 8005144:	20000010 	.word	0x20000010
 8005148:	ffff0208 	.word	0xffff0208

0800514c <__ssputs_r>:
 800514c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005150:	688e      	ldr	r6, [r1, #8]
 8005152:	429e      	cmp	r6, r3
 8005154:	4682      	mov	sl, r0
 8005156:	460c      	mov	r4, r1
 8005158:	4690      	mov	r8, r2
 800515a:	461f      	mov	r7, r3
 800515c:	d838      	bhi.n	80051d0 <__ssputs_r+0x84>
 800515e:	898a      	ldrh	r2, [r1, #12]
 8005160:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005164:	d032      	beq.n	80051cc <__ssputs_r+0x80>
 8005166:	6825      	ldr	r5, [r4, #0]
 8005168:	6909      	ldr	r1, [r1, #16]
 800516a:	eba5 0901 	sub.w	r9, r5, r1
 800516e:	6965      	ldr	r5, [r4, #20]
 8005170:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005174:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005178:	3301      	adds	r3, #1
 800517a:	444b      	add	r3, r9
 800517c:	106d      	asrs	r5, r5, #1
 800517e:	429d      	cmp	r5, r3
 8005180:	bf38      	it	cc
 8005182:	461d      	movcc	r5, r3
 8005184:	0553      	lsls	r3, r2, #21
 8005186:	d531      	bpl.n	80051ec <__ssputs_r+0xa0>
 8005188:	4629      	mov	r1, r5
 800518a:	f000 fb39 	bl	8005800 <_malloc_r>
 800518e:	4606      	mov	r6, r0
 8005190:	b950      	cbnz	r0, 80051a8 <__ssputs_r+0x5c>
 8005192:	230c      	movs	r3, #12
 8005194:	f8ca 3000 	str.w	r3, [sl]
 8005198:	89a3      	ldrh	r3, [r4, #12]
 800519a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800519e:	81a3      	strh	r3, [r4, #12]
 80051a0:	f04f 30ff 	mov.w	r0, #4294967295
 80051a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051a8:	6921      	ldr	r1, [r4, #16]
 80051aa:	464a      	mov	r2, r9
 80051ac:	f7ff ff98 	bl	80050e0 <memcpy>
 80051b0:	89a3      	ldrh	r3, [r4, #12]
 80051b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80051b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ba:	81a3      	strh	r3, [r4, #12]
 80051bc:	6126      	str	r6, [r4, #16]
 80051be:	6165      	str	r5, [r4, #20]
 80051c0:	444e      	add	r6, r9
 80051c2:	eba5 0509 	sub.w	r5, r5, r9
 80051c6:	6026      	str	r6, [r4, #0]
 80051c8:	60a5      	str	r5, [r4, #8]
 80051ca:	463e      	mov	r6, r7
 80051cc:	42be      	cmp	r6, r7
 80051ce:	d900      	bls.n	80051d2 <__ssputs_r+0x86>
 80051d0:	463e      	mov	r6, r7
 80051d2:	4632      	mov	r2, r6
 80051d4:	6820      	ldr	r0, [r4, #0]
 80051d6:	4641      	mov	r1, r8
 80051d8:	f000 faa8 	bl	800572c <memmove>
 80051dc:	68a3      	ldr	r3, [r4, #8]
 80051de:	6822      	ldr	r2, [r4, #0]
 80051e0:	1b9b      	subs	r3, r3, r6
 80051e2:	4432      	add	r2, r6
 80051e4:	60a3      	str	r3, [r4, #8]
 80051e6:	6022      	str	r2, [r4, #0]
 80051e8:	2000      	movs	r0, #0
 80051ea:	e7db      	b.n	80051a4 <__ssputs_r+0x58>
 80051ec:	462a      	mov	r2, r5
 80051ee:	f000 fb61 	bl	80058b4 <_realloc_r>
 80051f2:	4606      	mov	r6, r0
 80051f4:	2800      	cmp	r0, #0
 80051f6:	d1e1      	bne.n	80051bc <__ssputs_r+0x70>
 80051f8:	6921      	ldr	r1, [r4, #16]
 80051fa:	4650      	mov	r0, sl
 80051fc:	f000 fab0 	bl	8005760 <_free_r>
 8005200:	e7c7      	b.n	8005192 <__ssputs_r+0x46>
	...

08005204 <_svfiprintf_r>:
 8005204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005208:	4698      	mov	r8, r3
 800520a:	898b      	ldrh	r3, [r1, #12]
 800520c:	061b      	lsls	r3, r3, #24
 800520e:	b09d      	sub	sp, #116	; 0x74
 8005210:	4607      	mov	r7, r0
 8005212:	460d      	mov	r5, r1
 8005214:	4614      	mov	r4, r2
 8005216:	d50e      	bpl.n	8005236 <_svfiprintf_r+0x32>
 8005218:	690b      	ldr	r3, [r1, #16]
 800521a:	b963      	cbnz	r3, 8005236 <_svfiprintf_r+0x32>
 800521c:	2140      	movs	r1, #64	; 0x40
 800521e:	f000 faef 	bl	8005800 <_malloc_r>
 8005222:	6028      	str	r0, [r5, #0]
 8005224:	6128      	str	r0, [r5, #16]
 8005226:	b920      	cbnz	r0, 8005232 <_svfiprintf_r+0x2e>
 8005228:	230c      	movs	r3, #12
 800522a:	603b      	str	r3, [r7, #0]
 800522c:	f04f 30ff 	mov.w	r0, #4294967295
 8005230:	e0d1      	b.n	80053d6 <_svfiprintf_r+0x1d2>
 8005232:	2340      	movs	r3, #64	; 0x40
 8005234:	616b      	str	r3, [r5, #20]
 8005236:	2300      	movs	r3, #0
 8005238:	9309      	str	r3, [sp, #36]	; 0x24
 800523a:	2320      	movs	r3, #32
 800523c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005240:	f8cd 800c 	str.w	r8, [sp, #12]
 8005244:	2330      	movs	r3, #48	; 0x30
 8005246:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80053f0 <_svfiprintf_r+0x1ec>
 800524a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800524e:	f04f 0901 	mov.w	r9, #1
 8005252:	4623      	mov	r3, r4
 8005254:	469a      	mov	sl, r3
 8005256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800525a:	b10a      	cbz	r2, 8005260 <_svfiprintf_r+0x5c>
 800525c:	2a25      	cmp	r2, #37	; 0x25
 800525e:	d1f9      	bne.n	8005254 <_svfiprintf_r+0x50>
 8005260:	ebba 0b04 	subs.w	fp, sl, r4
 8005264:	d00b      	beq.n	800527e <_svfiprintf_r+0x7a>
 8005266:	465b      	mov	r3, fp
 8005268:	4622      	mov	r2, r4
 800526a:	4629      	mov	r1, r5
 800526c:	4638      	mov	r0, r7
 800526e:	f7ff ff6d 	bl	800514c <__ssputs_r>
 8005272:	3001      	adds	r0, #1
 8005274:	f000 80aa 	beq.w	80053cc <_svfiprintf_r+0x1c8>
 8005278:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800527a:	445a      	add	r2, fp
 800527c:	9209      	str	r2, [sp, #36]	; 0x24
 800527e:	f89a 3000 	ldrb.w	r3, [sl]
 8005282:	2b00      	cmp	r3, #0
 8005284:	f000 80a2 	beq.w	80053cc <_svfiprintf_r+0x1c8>
 8005288:	2300      	movs	r3, #0
 800528a:	f04f 32ff 	mov.w	r2, #4294967295
 800528e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005292:	f10a 0a01 	add.w	sl, sl, #1
 8005296:	9304      	str	r3, [sp, #16]
 8005298:	9307      	str	r3, [sp, #28]
 800529a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800529e:	931a      	str	r3, [sp, #104]	; 0x68
 80052a0:	4654      	mov	r4, sl
 80052a2:	2205      	movs	r2, #5
 80052a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052a8:	4851      	ldr	r0, [pc, #324]	; (80053f0 <_svfiprintf_r+0x1ec>)
 80052aa:	f7fa ff99 	bl	80001e0 <memchr>
 80052ae:	9a04      	ldr	r2, [sp, #16]
 80052b0:	b9d8      	cbnz	r0, 80052ea <_svfiprintf_r+0xe6>
 80052b2:	06d0      	lsls	r0, r2, #27
 80052b4:	bf44      	itt	mi
 80052b6:	2320      	movmi	r3, #32
 80052b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052bc:	0711      	lsls	r1, r2, #28
 80052be:	bf44      	itt	mi
 80052c0:	232b      	movmi	r3, #43	; 0x2b
 80052c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052c6:	f89a 3000 	ldrb.w	r3, [sl]
 80052ca:	2b2a      	cmp	r3, #42	; 0x2a
 80052cc:	d015      	beq.n	80052fa <_svfiprintf_r+0xf6>
 80052ce:	9a07      	ldr	r2, [sp, #28]
 80052d0:	4654      	mov	r4, sl
 80052d2:	2000      	movs	r0, #0
 80052d4:	f04f 0c0a 	mov.w	ip, #10
 80052d8:	4621      	mov	r1, r4
 80052da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052de:	3b30      	subs	r3, #48	; 0x30
 80052e0:	2b09      	cmp	r3, #9
 80052e2:	d94e      	bls.n	8005382 <_svfiprintf_r+0x17e>
 80052e4:	b1b0      	cbz	r0, 8005314 <_svfiprintf_r+0x110>
 80052e6:	9207      	str	r2, [sp, #28]
 80052e8:	e014      	b.n	8005314 <_svfiprintf_r+0x110>
 80052ea:	eba0 0308 	sub.w	r3, r0, r8
 80052ee:	fa09 f303 	lsl.w	r3, r9, r3
 80052f2:	4313      	orrs	r3, r2
 80052f4:	9304      	str	r3, [sp, #16]
 80052f6:	46a2      	mov	sl, r4
 80052f8:	e7d2      	b.n	80052a0 <_svfiprintf_r+0x9c>
 80052fa:	9b03      	ldr	r3, [sp, #12]
 80052fc:	1d19      	adds	r1, r3, #4
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	9103      	str	r1, [sp, #12]
 8005302:	2b00      	cmp	r3, #0
 8005304:	bfbb      	ittet	lt
 8005306:	425b      	neglt	r3, r3
 8005308:	f042 0202 	orrlt.w	r2, r2, #2
 800530c:	9307      	strge	r3, [sp, #28]
 800530e:	9307      	strlt	r3, [sp, #28]
 8005310:	bfb8      	it	lt
 8005312:	9204      	strlt	r2, [sp, #16]
 8005314:	7823      	ldrb	r3, [r4, #0]
 8005316:	2b2e      	cmp	r3, #46	; 0x2e
 8005318:	d10c      	bne.n	8005334 <_svfiprintf_r+0x130>
 800531a:	7863      	ldrb	r3, [r4, #1]
 800531c:	2b2a      	cmp	r3, #42	; 0x2a
 800531e:	d135      	bne.n	800538c <_svfiprintf_r+0x188>
 8005320:	9b03      	ldr	r3, [sp, #12]
 8005322:	1d1a      	adds	r2, r3, #4
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	9203      	str	r2, [sp, #12]
 8005328:	2b00      	cmp	r3, #0
 800532a:	bfb8      	it	lt
 800532c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005330:	3402      	adds	r4, #2
 8005332:	9305      	str	r3, [sp, #20]
 8005334:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005400 <_svfiprintf_r+0x1fc>
 8005338:	7821      	ldrb	r1, [r4, #0]
 800533a:	2203      	movs	r2, #3
 800533c:	4650      	mov	r0, sl
 800533e:	f7fa ff4f 	bl	80001e0 <memchr>
 8005342:	b140      	cbz	r0, 8005356 <_svfiprintf_r+0x152>
 8005344:	2340      	movs	r3, #64	; 0x40
 8005346:	eba0 000a 	sub.w	r0, r0, sl
 800534a:	fa03 f000 	lsl.w	r0, r3, r0
 800534e:	9b04      	ldr	r3, [sp, #16]
 8005350:	4303      	orrs	r3, r0
 8005352:	3401      	adds	r4, #1
 8005354:	9304      	str	r3, [sp, #16]
 8005356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800535a:	4826      	ldr	r0, [pc, #152]	; (80053f4 <_svfiprintf_r+0x1f0>)
 800535c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005360:	2206      	movs	r2, #6
 8005362:	f7fa ff3d 	bl	80001e0 <memchr>
 8005366:	2800      	cmp	r0, #0
 8005368:	d038      	beq.n	80053dc <_svfiprintf_r+0x1d8>
 800536a:	4b23      	ldr	r3, [pc, #140]	; (80053f8 <_svfiprintf_r+0x1f4>)
 800536c:	bb1b      	cbnz	r3, 80053b6 <_svfiprintf_r+0x1b2>
 800536e:	9b03      	ldr	r3, [sp, #12]
 8005370:	3307      	adds	r3, #7
 8005372:	f023 0307 	bic.w	r3, r3, #7
 8005376:	3308      	adds	r3, #8
 8005378:	9303      	str	r3, [sp, #12]
 800537a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800537c:	4433      	add	r3, r6
 800537e:	9309      	str	r3, [sp, #36]	; 0x24
 8005380:	e767      	b.n	8005252 <_svfiprintf_r+0x4e>
 8005382:	fb0c 3202 	mla	r2, ip, r2, r3
 8005386:	460c      	mov	r4, r1
 8005388:	2001      	movs	r0, #1
 800538a:	e7a5      	b.n	80052d8 <_svfiprintf_r+0xd4>
 800538c:	2300      	movs	r3, #0
 800538e:	3401      	adds	r4, #1
 8005390:	9305      	str	r3, [sp, #20]
 8005392:	4619      	mov	r1, r3
 8005394:	f04f 0c0a 	mov.w	ip, #10
 8005398:	4620      	mov	r0, r4
 800539a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800539e:	3a30      	subs	r2, #48	; 0x30
 80053a0:	2a09      	cmp	r2, #9
 80053a2:	d903      	bls.n	80053ac <_svfiprintf_r+0x1a8>
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d0c5      	beq.n	8005334 <_svfiprintf_r+0x130>
 80053a8:	9105      	str	r1, [sp, #20]
 80053aa:	e7c3      	b.n	8005334 <_svfiprintf_r+0x130>
 80053ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80053b0:	4604      	mov	r4, r0
 80053b2:	2301      	movs	r3, #1
 80053b4:	e7f0      	b.n	8005398 <_svfiprintf_r+0x194>
 80053b6:	ab03      	add	r3, sp, #12
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	462a      	mov	r2, r5
 80053bc:	4b0f      	ldr	r3, [pc, #60]	; (80053fc <_svfiprintf_r+0x1f8>)
 80053be:	a904      	add	r1, sp, #16
 80053c0:	4638      	mov	r0, r7
 80053c2:	f3af 8000 	nop.w
 80053c6:	1c42      	adds	r2, r0, #1
 80053c8:	4606      	mov	r6, r0
 80053ca:	d1d6      	bne.n	800537a <_svfiprintf_r+0x176>
 80053cc:	89ab      	ldrh	r3, [r5, #12]
 80053ce:	065b      	lsls	r3, r3, #25
 80053d0:	f53f af2c 	bmi.w	800522c <_svfiprintf_r+0x28>
 80053d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053d6:	b01d      	add	sp, #116	; 0x74
 80053d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053dc:	ab03      	add	r3, sp, #12
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	462a      	mov	r2, r5
 80053e2:	4b06      	ldr	r3, [pc, #24]	; (80053fc <_svfiprintf_r+0x1f8>)
 80053e4:	a904      	add	r1, sp, #16
 80053e6:	4638      	mov	r0, r7
 80053e8:	f000 f87a 	bl	80054e0 <_printf_i>
 80053ec:	e7eb      	b.n	80053c6 <_svfiprintf_r+0x1c2>
 80053ee:	bf00      	nop
 80053f0:	08005a7c 	.word	0x08005a7c
 80053f4:	08005a86 	.word	0x08005a86
 80053f8:	00000000 	.word	0x00000000
 80053fc:	0800514d 	.word	0x0800514d
 8005400:	08005a82 	.word	0x08005a82

08005404 <_printf_common>:
 8005404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005408:	4616      	mov	r6, r2
 800540a:	4699      	mov	r9, r3
 800540c:	688a      	ldr	r2, [r1, #8]
 800540e:	690b      	ldr	r3, [r1, #16]
 8005410:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005414:	4293      	cmp	r3, r2
 8005416:	bfb8      	it	lt
 8005418:	4613      	movlt	r3, r2
 800541a:	6033      	str	r3, [r6, #0]
 800541c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005420:	4607      	mov	r7, r0
 8005422:	460c      	mov	r4, r1
 8005424:	b10a      	cbz	r2, 800542a <_printf_common+0x26>
 8005426:	3301      	adds	r3, #1
 8005428:	6033      	str	r3, [r6, #0]
 800542a:	6823      	ldr	r3, [r4, #0]
 800542c:	0699      	lsls	r1, r3, #26
 800542e:	bf42      	ittt	mi
 8005430:	6833      	ldrmi	r3, [r6, #0]
 8005432:	3302      	addmi	r3, #2
 8005434:	6033      	strmi	r3, [r6, #0]
 8005436:	6825      	ldr	r5, [r4, #0]
 8005438:	f015 0506 	ands.w	r5, r5, #6
 800543c:	d106      	bne.n	800544c <_printf_common+0x48>
 800543e:	f104 0a19 	add.w	sl, r4, #25
 8005442:	68e3      	ldr	r3, [r4, #12]
 8005444:	6832      	ldr	r2, [r6, #0]
 8005446:	1a9b      	subs	r3, r3, r2
 8005448:	42ab      	cmp	r3, r5
 800544a:	dc26      	bgt.n	800549a <_printf_common+0x96>
 800544c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005450:	1e13      	subs	r3, r2, #0
 8005452:	6822      	ldr	r2, [r4, #0]
 8005454:	bf18      	it	ne
 8005456:	2301      	movne	r3, #1
 8005458:	0692      	lsls	r2, r2, #26
 800545a:	d42b      	bmi.n	80054b4 <_printf_common+0xb0>
 800545c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005460:	4649      	mov	r1, r9
 8005462:	4638      	mov	r0, r7
 8005464:	47c0      	blx	r8
 8005466:	3001      	adds	r0, #1
 8005468:	d01e      	beq.n	80054a8 <_printf_common+0xa4>
 800546a:	6823      	ldr	r3, [r4, #0]
 800546c:	68e5      	ldr	r5, [r4, #12]
 800546e:	6832      	ldr	r2, [r6, #0]
 8005470:	f003 0306 	and.w	r3, r3, #6
 8005474:	2b04      	cmp	r3, #4
 8005476:	bf08      	it	eq
 8005478:	1aad      	subeq	r5, r5, r2
 800547a:	68a3      	ldr	r3, [r4, #8]
 800547c:	6922      	ldr	r2, [r4, #16]
 800547e:	bf0c      	ite	eq
 8005480:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005484:	2500      	movne	r5, #0
 8005486:	4293      	cmp	r3, r2
 8005488:	bfc4      	itt	gt
 800548a:	1a9b      	subgt	r3, r3, r2
 800548c:	18ed      	addgt	r5, r5, r3
 800548e:	2600      	movs	r6, #0
 8005490:	341a      	adds	r4, #26
 8005492:	42b5      	cmp	r5, r6
 8005494:	d11a      	bne.n	80054cc <_printf_common+0xc8>
 8005496:	2000      	movs	r0, #0
 8005498:	e008      	b.n	80054ac <_printf_common+0xa8>
 800549a:	2301      	movs	r3, #1
 800549c:	4652      	mov	r2, sl
 800549e:	4649      	mov	r1, r9
 80054a0:	4638      	mov	r0, r7
 80054a2:	47c0      	blx	r8
 80054a4:	3001      	adds	r0, #1
 80054a6:	d103      	bne.n	80054b0 <_printf_common+0xac>
 80054a8:	f04f 30ff 	mov.w	r0, #4294967295
 80054ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054b0:	3501      	adds	r5, #1
 80054b2:	e7c6      	b.n	8005442 <_printf_common+0x3e>
 80054b4:	18e1      	adds	r1, r4, r3
 80054b6:	1c5a      	adds	r2, r3, #1
 80054b8:	2030      	movs	r0, #48	; 0x30
 80054ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054be:	4422      	add	r2, r4
 80054c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054c8:	3302      	adds	r3, #2
 80054ca:	e7c7      	b.n	800545c <_printf_common+0x58>
 80054cc:	2301      	movs	r3, #1
 80054ce:	4622      	mov	r2, r4
 80054d0:	4649      	mov	r1, r9
 80054d2:	4638      	mov	r0, r7
 80054d4:	47c0      	blx	r8
 80054d6:	3001      	adds	r0, #1
 80054d8:	d0e6      	beq.n	80054a8 <_printf_common+0xa4>
 80054da:	3601      	adds	r6, #1
 80054dc:	e7d9      	b.n	8005492 <_printf_common+0x8e>
	...

080054e0 <_printf_i>:
 80054e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054e4:	460c      	mov	r4, r1
 80054e6:	4691      	mov	r9, r2
 80054e8:	7e27      	ldrb	r7, [r4, #24]
 80054ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 80054ec:	2f78      	cmp	r7, #120	; 0x78
 80054ee:	4680      	mov	r8, r0
 80054f0:	469a      	mov	sl, r3
 80054f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054f6:	d807      	bhi.n	8005508 <_printf_i+0x28>
 80054f8:	2f62      	cmp	r7, #98	; 0x62
 80054fa:	d80a      	bhi.n	8005512 <_printf_i+0x32>
 80054fc:	2f00      	cmp	r7, #0
 80054fe:	f000 80d8 	beq.w	80056b2 <_printf_i+0x1d2>
 8005502:	2f58      	cmp	r7, #88	; 0x58
 8005504:	f000 80a3 	beq.w	800564e <_printf_i+0x16e>
 8005508:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800550c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005510:	e03a      	b.n	8005588 <_printf_i+0xa8>
 8005512:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005516:	2b15      	cmp	r3, #21
 8005518:	d8f6      	bhi.n	8005508 <_printf_i+0x28>
 800551a:	a001      	add	r0, pc, #4	; (adr r0, 8005520 <_printf_i+0x40>)
 800551c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005520:	08005579 	.word	0x08005579
 8005524:	0800558d 	.word	0x0800558d
 8005528:	08005509 	.word	0x08005509
 800552c:	08005509 	.word	0x08005509
 8005530:	08005509 	.word	0x08005509
 8005534:	08005509 	.word	0x08005509
 8005538:	0800558d 	.word	0x0800558d
 800553c:	08005509 	.word	0x08005509
 8005540:	08005509 	.word	0x08005509
 8005544:	08005509 	.word	0x08005509
 8005548:	08005509 	.word	0x08005509
 800554c:	08005699 	.word	0x08005699
 8005550:	080055bd 	.word	0x080055bd
 8005554:	0800567b 	.word	0x0800567b
 8005558:	08005509 	.word	0x08005509
 800555c:	08005509 	.word	0x08005509
 8005560:	080056bb 	.word	0x080056bb
 8005564:	08005509 	.word	0x08005509
 8005568:	080055bd 	.word	0x080055bd
 800556c:	08005509 	.word	0x08005509
 8005570:	08005509 	.word	0x08005509
 8005574:	08005683 	.word	0x08005683
 8005578:	680b      	ldr	r3, [r1, #0]
 800557a:	1d1a      	adds	r2, r3, #4
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	600a      	str	r2, [r1, #0]
 8005580:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005584:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005588:	2301      	movs	r3, #1
 800558a:	e0a3      	b.n	80056d4 <_printf_i+0x1f4>
 800558c:	6825      	ldr	r5, [r4, #0]
 800558e:	6808      	ldr	r0, [r1, #0]
 8005590:	062e      	lsls	r6, r5, #24
 8005592:	f100 0304 	add.w	r3, r0, #4
 8005596:	d50a      	bpl.n	80055ae <_printf_i+0xce>
 8005598:	6805      	ldr	r5, [r0, #0]
 800559a:	600b      	str	r3, [r1, #0]
 800559c:	2d00      	cmp	r5, #0
 800559e:	da03      	bge.n	80055a8 <_printf_i+0xc8>
 80055a0:	232d      	movs	r3, #45	; 0x2d
 80055a2:	426d      	negs	r5, r5
 80055a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055a8:	485e      	ldr	r0, [pc, #376]	; (8005724 <_printf_i+0x244>)
 80055aa:	230a      	movs	r3, #10
 80055ac:	e019      	b.n	80055e2 <_printf_i+0x102>
 80055ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 80055b2:	6805      	ldr	r5, [r0, #0]
 80055b4:	600b      	str	r3, [r1, #0]
 80055b6:	bf18      	it	ne
 80055b8:	b22d      	sxthne	r5, r5
 80055ba:	e7ef      	b.n	800559c <_printf_i+0xbc>
 80055bc:	680b      	ldr	r3, [r1, #0]
 80055be:	6825      	ldr	r5, [r4, #0]
 80055c0:	1d18      	adds	r0, r3, #4
 80055c2:	6008      	str	r0, [r1, #0]
 80055c4:	0628      	lsls	r0, r5, #24
 80055c6:	d501      	bpl.n	80055cc <_printf_i+0xec>
 80055c8:	681d      	ldr	r5, [r3, #0]
 80055ca:	e002      	b.n	80055d2 <_printf_i+0xf2>
 80055cc:	0669      	lsls	r1, r5, #25
 80055ce:	d5fb      	bpl.n	80055c8 <_printf_i+0xe8>
 80055d0:	881d      	ldrh	r5, [r3, #0]
 80055d2:	4854      	ldr	r0, [pc, #336]	; (8005724 <_printf_i+0x244>)
 80055d4:	2f6f      	cmp	r7, #111	; 0x6f
 80055d6:	bf0c      	ite	eq
 80055d8:	2308      	moveq	r3, #8
 80055da:	230a      	movne	r3, #10
 80055dc:	2100      	movs	r1, #0
 80055de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055e2:	6866      	ldr	r6, [r4, #4]
 80055e4:	60a6      	str	r6, [r4, #8]
 80055e6:	2e00      	cmp	r6, #0
 80055e8:	bfa2      	ittt	ge
 80055ea:	6821      	ldrge	r1, [r4, #0]
 80055ec:	f021 0104 	bicge.w	r1, r1, #4
 80055f0:	6021      	strge	r1, [r4, #0]
 80055f2:	b90d      	cbnz	r5, 80055f8 <_printf_i+0x118>
 80055f4:	2e00      	cmp	r6, #0
 80055f6:	d04d      	beq.n	8005694 <_printf_i+0x1b4>
 80055f8:	4616      	mov	r6, r2
 80055fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80055fe:	fb03 5711 	mls	r7, r3, r1, r5
 8005602:	5dc7      	ldrb	r7, [r0, r7]
 8005604:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005608:	462f      	mov	r7, r5
 800560a:	42bb      	cmp	r3, r7
 800560c:	460d      	mov	r5, r1
 800560e:	d9f4      	bls.n	80055fa <_printf_i+0x11a>
 8005610:	2b08      	cmp	r3, #8
 8005612:	d10b      	bne.n	800562c <_printf_i+0x14c>
 8005614:	6823      	ldr	r3, [r4, #0]
 8005616:	07df      	lsls	r7, r3, #31
 8005618:	d508      	bpl.n	800562c <_printf_i+0x14c>
 800561a:	6923      	ldr	r3, [r4, #16]
 800561c:	6861      	ldr	r1, [r4, #4]
 800561e:	4299      	cmp	r1, r3
 8005620:	bfde      	ittt	le
 8005622:	2330      	movle	r3, #48	; 0x30
 8005624:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005628:	f106 36ff 	addle.w	r6, r6, #4294967295
 800562c:	1b92      	subs	r2, r2, r6
 800562e:	6122      	str	r2, [r4, #16]
 8005630:	f8cd a000 	str.w	sl, [sp]
 8005634:	464b      	mov	r3, r9
 8005636:	aa03      	add	r2, sp, #12
 8005638:	4621      	mov	r1, r4
 800563a:	4640      	mov	r0, r8
 800563c:	f7ff fee2 	bl	8005404 <_printf_common>
 8005640:	3001      	adds	r0, #1
 8005642:	d14c      	bne.n	80056de <_printf_i+0x1fe>
 8005644:	f04f 30ff 	mov.w	r0, #4294967295
 8005648:	b004      	add	sp, #16
 800564a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800564e:	4835      	ldr	r0, [pc, #212]	; (8005724 <_printf_i+0x244>)
 8005650:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005654:	6823      	ldr	r3, [r4, #0]
 8005656:	680e      	ldr	r6, [r1, #0]
 8005658:	061f      	lsls	r7, r3, #24
 800565a:	f856 5b04 	ldr.w	r5, [r6], #4
 800565e:	600e      	str	r6, [r1, #0]
 8005660:	d514      	bpl.n	800568c <_printf_i+0x1ac>
 8005662:	07d9      	lsls	r1, r3, #31
 8005664:	bf44      	itt	mi
 8005666:	f043 0320 	orrmi.w	r3, r3, #32
 800566a:	6023      	strmi	r3, [r4, #0]
 800566c:	b91d      	cbnz	r5, 8005676 <_printf_i+0x196>
 800566e:	6823      	ldr	r3, [r4, #0]
 8005670:	f023 0320 	bic.w	r3, r3, #32
 8005674:	6023      	str	r3, [r4, #0]
 8005676:	2310      	movs	r3, #16
 8005678:	e7b0      	b.n	80055dc <_printf_i+0xfc>
 800567a:	6823      	ldr	r3, [r4, #0]
 800567c:	f043 0320 	orr.w	r3, r3, #32
 8005680:	6023      	str	r3, [r4, #0]
 8005682:	2378      	movs	r3, #120	; 0x78
 8005684:	4828      	ldr	r0, [pc, #160]	; (8005728 <_printf_i+0x248>)
 8005686:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800568a:	e7e3      	b.n	8005654 <_printf_i+0x174>
 800568c:	065e      	lsls	r6, r3, #25
 800568e:	bf48      	it	mi
 8005690:	b2ad      	uxthmi	r5, r5
 8005692:	e7e6      	b.n	8005662 <_printf_i+0x182>
 8005694:	4616      	mov	r6, r2
 8005696:	e7bb      	b.n	8005610 <_printf_i+0x130>
 8005698:	680b      	ldr	r3, [r1, #0]
 800569a:	6826      	ldr	r6, [r4, #0]
 800569c:	6960      	ldr	r0, [r4, #20]
 800569e:	1d1d      	adds	r5, r3, #4
 80056a0:	600d      	str	r5, [r1, #0]
 80056a2:	0635      	lsls	r5, r6, #24
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	d501      	bpl.n	80056ac <_printf_i+0x1cc>
 80056a8:	6018      	str	r0, [r3, #0]
 80056aa:	e002      	b.n	80056b2 <_printf_i+0x1d2>
 80056ac:	0671      	lsls	r1, r6, #25
 80056ae:	d5fb      	bpl.n	80056a8 <_printf_i+0x1c8>
 80056b0:	8018      	strh	r0, [r3, #0]
 80056b2:	2300      	movs	r3, #0
 80056b4:	6123      	str	r3, [r4, #16]
 80056b6:	4616      	mov	r6, r2
 80056b8:	e7ba      	b.n	8005630 <_printf_i+0x150>
 80056ba:	680b      	ldr	r3, [r1, #0]
 80056bc:	1d1a      	adds	r2, r3, #4
 80056be:	600a      	str	r2, [r1, #0]
 80056c0:	681e      	ldr	r6, [r3, #0]
 80056c2:	6862      	ldr	r2, [r4, #4]
 80056c4:	2100      	movs	r1, #0
 80056c6:	4630      	mov	r0, r6
 80056c8:	f7fa fd8a 	bl	80001e0 <memchr>
 80056cc:	b108      	cbz	r0, 80056d2 <_printf_i+0x1f2>
 80056ce:	1b80      	subs	r0, r0, r6
 80056d0:	6060      	str	r0, [r4, #4]
 80056d2:	6863      	ldr	r3, [r4, #4]
 80056d4:	6123      	str	r3, [r4, #16]
 80056d6:	2300      	movs	r3, #0
 80056d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056dc:	e7a8      	b.n	8005630 <_printf_i+0x150>
 80056de:	6923      	ldr	r3, [r4, #16]
 80056e0:	4632      	mov	r2, r6
 80056e2:	4649      	mov	r1, r9
 80056e4:	4640      	mov	r0, r8
 80056e6:	47d0      	blx	sl
 80056e8:	3001      	adds	r0, #1
 80056ea:	d0ab      	beq.n	8005644 <_printf_i+0x164>
 80056ec:	6823      	ldr	r3, [r4, #0]
 80056ee:	079b      	lsls	r3, r3, #30
 80056f0:	d413      	bmi.n	800571a <_printf_i+0x23a>
 80056f2:	68e0      	ldr	r0, [r4, #12]
 80056f4:	9b03      	ldr	r3, [sp, #12]
 80056f6:	4298      	cmp	r0, r3
 80056f8:	bfb8      	it	lt
 80056fa:	4618      	movlt	r0, r3
 80056fc:	e7a4      	b.n	8005648 <_printf_i+0x168>
 80056fe:	2301      	movs	r3, #1
 8005700:	4632      	mov	r2, r6
 8005702:	4649      	mov	r1, r9
 8005704:	4640      	mov	r0, r8
 8005706:	47d0      	blx	sl
 8005708:	3001      	adds	r0, #1
 800570a:	d09b      	beq.n	8005644 <_printf_i+0x164>
 800570c:	3501      	adds	r5, #1
 800570e:	68e3      	ldr	r3, [r4, #12]
 8005710:	9903      	ldr	r1, [sp, #12]
 8005712:	1a5b      	subs	r3, r3, r1
 8005714:	42ab      	cmp	r3, r5
 8005716:	dcf2      	bgt.n	80056fe <_printf_i+0x21e>
 8005718:	e7eb      	b.n	80056f2 <_printf_i+0x212>
 800571a:	2500      	movs	r5, #0
 800571c:	f104 0619 	add.w	r6, r4, #25
 8005720:	e7f5      	b.n	800570e <_printf_i+0x22e>
 8005722:	bf00      	nop
 8005724:	08005a8d 	.word	0x08005a8d
 8005728:	08005a9e 	.word	0x08005a9e

0800572c <memmove>:
 800572c:	4288      	cmp	r0, r1
 800572e:	b510      	push	{r4, lr}
 8005730:	eb01 0402 	add.w	r4, r1, r2
 8005734:	d902      	bls.n	800573c <memmove+0x10>
 8005736:	4284      	cmp	r4, r0
 8005738:	4623      	mov	r3, r4
 800573a:	d807      	bhi.n	800574c <memmove+0x20>
 800573c:	1e43      	subs	r3, r0, #1
 800573e:	42a1      	cmp	r1, r4
 8005740:	d008      	beq.n	8005754 <memmove+0x28>
 8005742:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005746:	f803 2f01 	strb.w	r2, [r3, #1]!
 800574a:	e7f8      	b.n	800573e <memmove+0x12>
 800574c:	4402      	add	r2, r0
 800574e:	4601      	mov	r1, r0
 8005750:	428a      	cmp	r2, r1
 8005752:	d100      	bne.n	8005756 <memmove+0x2a>
 8005754:	bd10      	pop	{r4, pc}
 8005756:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800575a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800575e:	e7f7      	b.n	8005750 <memmove+0x24>

08005760 <_free_r>:
 8005760:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005762:	2900      	cmp	r1, #0
 8005764:	d048      	beq.n	80057f8 <_free_r+0x98>
 8005766:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800576a:	9001      	str	r0, [sp, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	f1a1 0404 	sub.w	r4, r1, #4
 8005772:	bfb8      	it	lt
 8005774:	18e4      	addlt	r4, r4, r3
 8005776:	f000 f8d3 	bl	8005920 <__malloc_lock>
 800577a:	4a20      	ldr	r2, [pc, #128]	; (80057fc <_free_r+0x9c>)
 800577c:	9801      	ldr	r0, [sp, #4]
 800577e:	6813      	ldr	r3, [r2, #0]
 8005780:	4615      	mov	r5, r2
 8005782:	b933      	cbnz	r3, 8005792 <_free_r+0x32>
 8005784:	6063      	str	r3, [r4, #4]
 8005786:	6014      	str	r4, [r2, #0]
 8005788:	b003      	add	sp, #12
 800578a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800578e:	f000 b8cd 	b.w	800592c <__malloc_unlock>
 8005792:	42a3      	cmp	r3, r4
 8005794:	d90b      	bls.n	80057ae <_free_r+0x4e>
 8005796:	6821      	ldr	r1, [r4, #0]
 8005798:	1862      	adds	r2, r4, r1
 800579a:	4293      	cmp	r3, r2
 800579c:	bf04      	itt	eq
 800579e:	681a      	ldreq	r2, [r3, #0]
 80057a0:	685b      	ldreq	r3, [r3, #4]
 80057a2:	6063      	str	r3, [r4, #4]
 80057a4:	bf04      	itt	eq
 80057a6:	1852      	addeq	r2, r2, r1
 80057a8:	6022      	streq	r2, [r4, #0]
 80057aa:	602c      	str	r4, [r5, #0]
 80057ac:	e7ec      	b.n	8005788 <_free_r+0x28>
 80057ae:	461a      	mov	r2, r3
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	b10b      	cbz	r3, 80057b8 <_free_r+0x58>
 80057b4:	42a3      	cmp	r3, r4
 80057b6:	d9fa      	bls.n	80057ae <_free_r+0x4e>
 80057b8:	6811      	ldr	r1, [r2, #0]
 80057ba:	1855      	adds	r5, r2, r1
 80057bc:	42a5      	cmp	r5, r4
 80057be:	d10b      	bne.n	80057d8 <_free_r+0x78>
 80057c0:	6824      	ldr	r4, [r4, #0]
 80057c2:	4421      	add	r1, r4
 80057c4:	1854      	adds	r4, r2, r1
 80057c6:	42a3      	cmp	r3, r4
 80057c8:	6011      	str	r1, [r2, #0]
 80057ca:	d1dd      	bne.n	8005788 <_free_r+0x28>
 80057cc:	681c      	ldr	r4, [r3, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	6053      	str	r3, [r2, #4]
 80057d2:	4421      	add	r1, r4
 80057d4:	6011      	str	r1, [r2, #0]
 80057d6:	e7d7      	b.n	8005788 <_free_r+0x28>
 80057d8:	d902      	bls.n	80057e0 <_free_r+0x80>
 80057da:	230c      	movs	r3, #12
 80057dc:	6003      	str	r3, [r0, #0]
 80057de:	e7d3      	b.n	8005788 <_free_r+0x28>
 80057e0:	6825      	ldr	r5, [r4, #0]
 80057e2:	1961      	adds	r1, r4, r5
 80057e4:	428b      	cmp	r3, r1
 80057e6:	bf04      	itt	eq
 80057e8:	6819      	ldreq	r1, [r3, #0]
 80057ea:	685b      	ldreq	r3, [r3, #4]
 80057ec:	6063      	str	r3, [r4, #4]
 80057ee:	bf04      	itt	eq
 80057f0:	1949      	addeq	r1, r1, r5
 80057f2:	6021      	streq	r1, [r4, #0]
 80057f4:	6054      	str	r4, [r2, #4]
 80057f6:	e7c7      	b.n	8005788 <_free_r+0x28>
 80057f8:	b003      	add	sp, #12
 80057fa:	bd30      	pop	{r4, r5, pc}
 80057fc:	20012ec0 	.word	0x20012ec0

08005800 <_malloc_r>:
 8005800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005802:	1ccd      	adds	r5, r1, #3
 8005804:	f025 0503 	bic.w	r5, r5, #3
 8005808:	3508      	adds	r5, #8
 800580a:	2d0c      	cmp	r5, #12
 800580c:	bf38      	it	cc
 800580e:	250c      	movcc	r5, #12
 8005810:	2d00      	cmp	r5, #0
 8005812:	4606      	mov	r6, r0
 8005814:	db01      	blt.n	800581a <_malloc_r+0x1a>
 8005816:	42a9      	cmp	r1, r5
 8005818:	d903      	bls.n	8005822 <_malloc_r+0x22>
 800581a:	230c      	movs	r3, #12
 800581c:	6033      	str	r3, [r6, #0]
 800581e:	2000      	movs	r0, #0
 8005820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005822:	f000 f87d 	bl	8005920 <__malloc_lock>
 8005826:	4921      	ldr	r1, [pc, #132]	; (80058ac <_malloc_r+0xac>)
 8005828:	680a      	ldr	r2, [r1, #0]
 800582a:	4614      	mov	r4, r2
 800582c:	b99c      	cbnz	r4, 8005856 <_malloc_r+0x56>
 800582e:	4f20      	ldr	r7, [pc, #128]	; (80058b0 <_malloc_r+0xb0>)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	b923      	cbnz	r3, 800583e <_malloc_r+0x3e>
 8005834:	4621      	mov	r1, r4
 8005836:	4630      	mov	r0, r6
 8005838:	f000 f862 	bl	8005900 <_sbrk_r>
 800583c:	6038      	str	r0, [r7, #0]
 800583e:	4629      	mov	r1, r5
 8005840:	4630      	mov	r0, r6
 8005842:	f000 f85d 	bl	8005900 <_sbrk_r>
 8005846:	1c43      	adds	r3, r0, #1
 8005848:	d123      	bne.n	8005892 <_malloc_r+0x92>
 800584a:	230c      	movs	r3, #12
 800584c:	6033      	str	r3, [r6, #0]
 800584e:	4630      	mov	r0, r6
 8005850:	f000 f86c 	bl	800592c <__malloc_unlock>
 8005854:	e7e3      	b.n	800581e <_malloc_r+0x1e>
 8005856:	6823      	ldr	r3, [r4, #0]
 8005858:	1b5b      	subs	r3, r3, r5
 800585a:	d417      	bmi.n	800588c <_malloc_r+0x8c>
 800585c:	2b0b      	cmp	r3, #11
 800585e:	d903      	bls.n	8005868 <_malloc_r+0x68>
 8005860:	6023      	str	r3, [r4, #0]
 8005862:	441c      	add	r4, r3
 8005864:	6025      	str	r5, [r4, #0]
 8005866:	e004      	b.n	8005872 <_malloc_r+0x72>
 8005868:	6863      	ldr	r3, [r4, #4]
 800586a:	42a2      	cmp	r2, r4
 800586c:	bf0c      	ite	eq
 800586e:	600b      	streq	r3, [r1, #0]
 8005870:	6053      	strne	r3, [r2, #4]
 8005872:	4630      	mov	r0, r6
 8005874:	f000 f85a 	bl	800592c <__malloc_unlock>
 8005878:	f104 000b 	add.w	r0, r4, #11
 800587c:	1d23      	adds	r3, r4, #4
 800587e:	f020 0007 	bic.w	r0, r0, #7
 8005882:	1ac2      	subs	r2, r0, r3
 8005884:	d0cc      	beq.n	8005820 <_malloc_r+0x20>
 8005886:	1a1b      	subs	r3, r3, r0
 8005888:	50a3      	str	r3, [r4, r2]
 800588a:	e7c9      	b.n	8005820 <_malloc_r+0x20>
 800588c:	4622      	mov	r2, r4
 800588e:	6864      	ldr	r4, [r4, #4]
 8005890:	e7cc      	b.n	800582c <_malloc_r+0x2c>
 8005892:	1cc4      	adds	r4, r0, #3
 8005894:	f024 0403 	bic.w	r4, r4, #3
 8005898:	42a0      	cmp	r0, r4
 800589a:	d0e3      	beq.n	8005864 <_malloc_r+0x64>
 800589c:	1a21      	subs	r1, r4, r0
 800589e:	4630      	mov	r0, r6
 80058a0:	f000 f82e 	bl	8005900 <_sbrk_r>
 80058a4:	3001      	adds	r0, #1
 80058a6:	d1dd      	bne.n	8005864 <_malloc_r+0x64>
 80058a8:	e7cf      	b.n	800584a <_malloc_r+0x4a>
 80058aa:	bf00      	nop
 80058ac:	20012ec0 	.word	0x20012ec0
 80058b0:	20012ec4 	.word	0x20012ec4

080058b4 <_realloc_r>:
 80058b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058b6:	4607      	mov	r7, r0
 80058b8:	4614      	mov	r4, r2
 80058ba:	460e      	mov	r6, r1
 80058bc:	b921      	cbnz	r1, 80058c8 <_realloc_r+0x14>
 80058be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80058c2:	4611      	mov	r1, r2
 80058c4:	f7ff bf9c 	b.w	8005800 <_malloc_r>
 80058c8:	b922      	cbnz	r2, 80058d4 <_realloc_r+0x20>
 80058ca:	f7ff ff49 	bl	8005760 <_free_r>
 80058ce:	4625      	mov	r5, r4
 80058d0:	4628      	mov	r0, r5
 80058d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058d4:	f000 f830 	bl	8005938 <_malloc_usable_size_r>
 80058d8:	42a0      	cmp	r0, r4
 80058da:	d20f      	bcs.n	80058fc <_realloc_r+0x48>
 80058dc:	4621      	mov	r1, r4
 80058de:	4638      	mov	r0, r7
 80058e0:	f7ff ff8e 	bl	8005800 <_malloc_r>
 80058e4:	4605      	mov	r5, r0
 80058e6:	2800      	cmp	r0, #0
 80058e8:	d0f2      	beq.n	80058d0 <_realloc_r+0x1c>
 80058ea:	4631      	mov	r1, r6
 80058ec:	4622      	mov	r2, r4
 80058ee:	f7ff fbf7 	bl	80050e0 <memcpy>
 80058f2:	4631      	mov	r1, r6
 80058f4:	4638      	mov	r0, r7
 80058f6:	f7ff ff33 	bl	8005760 <_free_r>
 80058fa:	e7e9      	b.n	80058d0 <_realloc_r+0x1c>
 80058fc:	4635      	mov	r5, r6
 80058fe:	e7e7      	b.n	80058d0 <_realloc_r+0x1c>

08005900 <_sbrk_r>:
 8005900:	b538      	push	{r3, r4, r5, lr}
 8005902:	4d06      	ldr	r5, [pc, #24]	; (800591c <_sbrk_r+0x1c>)
 8005904:	2300      	movs	r3, #0
 8005906:	4604      	mov	r4, r0
 8005908:	4608      	mov	r0, r1
 800590a:	602b      	str	r3, [r5, #0]
 800590c:	f7fb f9c8 	bl	8000ca0 <_sbrk>
 8005910:	1c43      	adds	r3, r0, #1
 8005912:	d102      	bne.n	800591a <_sbrk_r+0x1a>
 8005914:	682b      	ldr	r3, [r5, #0]
 8005916:	b103      	cbz	r3, 800591a <_sbrk_r+0x1a>
 8005918:	6023      	str	r3, [r4, #0]
 800591a:	bd38      	pop	{r3, r4, r5, pc}
 800591c:	20012f98 	.word	0x20012f98

08005920 <__malloc_lock>:
 8005920:	4801      	ldr	r0, [pc, #4]	; (8005928 <__malloc_lock+0x8>)
 8005922:	f000 b811 	b.w	8005948 <__retarget_lock_acquire_recursive>
 8005926:	bf00      	nop
 8005928:	20012fa0 	.word	0x20012fa0

0800592c <__malloc_unlock>:
 800592c:	4801      	ldr	r0, [pc, #4]	; (8005934 <__malloc_unlock+0x8>)
 800592e:	f000 b80c 	b.w	800594a <__retarget_lock_release_recursive>
 8005932:	bf00      	nop
 8005934:	20012fa0 	.word	0x20012fa0

08005938 <_malloc_usable_size_r>:
 8005938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800593c:	1f18      	subs	r0, r3, #4
 800593e:	2b00      	cmp	r3, #0
 8005940:	bfbc      	itt	lt
 8005942:	580b      	ldrlt	r3, [r1, r0]
 8005944:	18c0      	addlt	r0, r0, r3
 8005946:	4770      	bx	lr

08005948 <__retarget_lock_acquire_recursive>:
 8005948:	4770      	bx	lr

0800594a <__retarget_lock_release_recursive>:
 800594a:	4770      	bx	lr

0800594c <_init>:
 800594c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594e:	bf00      	nop
 8005950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005952:	bc08      	pop	{r3}
 8005954:	469e      	mov	lr, r3
 8005956:	4770      	bx	lr

08005958 <_fini>:
 8005958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800595a:	bf00      	nop
 800595c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800595e:	bc08      	pop	{r3}
 8005960:	469e      	mov	lr, r3
 8005962:	4770      	bx	lr
