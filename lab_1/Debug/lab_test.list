
lab_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08004778  08004778  00014778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047c4  080047c4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080047c4  080047c4  000147c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047cc  080047cc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047cc  080047cc  000147cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047d0  080047d0  000147d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080047d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00012e0c  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012e1c  20012e1c  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011926  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027c8  00000000  00000000  00031966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e58  00000000  00000000  00034130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d40  00000000  00000000  00034f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022114  00000000  00000000  00035cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fad4  00000000  00000000  00057ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d066a  00000000  00000000  000678b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00137f1a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b4c  00000000  00000000  00137f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004760 	.word	0x08004760

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08004760 	.word	0x08004760

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 fb99 	bl	8000c04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f8db 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 f943 	bl	8000760 <MX_GPIO_Init>
  BaseType_t xReturned;
  TaskHandle_t xHandle = NULL;
 80004da:	2300      	movs	r3, #0
 80004dc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  MsgQueue = xQueueCreate(1,sizeof(unsigned int));
 80004de:	2200      	movs	r2, #0
 80004e0:	2104      	movs	r1, #4
 80004e2:	2001      	movs	r0, #1
 80004e4:	f001 ff00 	bl	80022e8 <xQueueGenericCreate>
 80004e8:	4603      	mov	r3, r0
 80004ea:	4a0c      	ldr	r2, [pc, #48]	; (800051c <main+0x54>)
 80004ec:	6013      	str	r3, [r2, #0]

  xTaskCreate(LEDTask_App,"LEDTask_App",128,NULL,1,&xHandle);
 80004ee:	1d3b      	adds	r3, r7, #4
 80004f0:	9301      	str	r3, [sp, #4]
 80004f2:	2301      	movs	r3, #1
 80004f4:	9300      	str	r3, [sp, #0]
 80004f6:	2300      	movs	r3, #0
 80004f8:	2280      	movs	r2, #128	; 0x80
 80004fa:	4909      	ldr	r1, [pc, #36]	; (8000520 <main+0x58>)
 80004fc:	4809      	ldr	r0, [pc, #36]	; (8000524 <main+0x5c>)
 80004fe:	f002 fb37 	bl	8002b70 <xTaskCreate>
  xTaskCreate(ButtonTask_App,"ButtonTask_App",128,NULL,1,&xHandle);
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	9301      	str	r3, [sp, #4]
 8000506:	2301      	movs	r3, #1
 8000508:	9300      	str	r3, [sp, #0]
 800050a:	2300      	movs	r3, #0
 800050c:	2280      	movs	r2, #128	; 0x80
 800050e:	4906      	ldr	r1, [pc, #24]	; (8000528 <main+0x60>)
 8000510:	4806      	ldr	r0, [pc, #24]	; (800052c <main+0x64>)
 8000512:	f002 fb2d 	bl	8002b70 <xTaskCreate>
  vTaskStartScheduler();
 8000516:	f002 fc9d 	bl	8002e54 <vTaskStartScheduler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051a:	e7fe      	b.n	800051a <main+0x52>
 800051c:	2000002c 	.word	0x2000002c
 8000520:	08004778 	.word	0x08004778
 8000524:	080005a9 	.word	0x080005a9
 8000528:	08004784 	.word	0x08004784
 800052c:	08000531 	.word	0x08000531

08000530 <ButtonTask_App>:
  }
  /* USER CODE END 3 */
}

void ButtonTask_App(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
	unsigned int task = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	603b      	str	r3, [r7, #0]
		unsigned int count = 0;
 800053a:	2300      	movs	r3, #0
 800053c:	607b      	str	r3, [r7, #4]
		for(;;)
		{
			if(HAL_GPIO_ReadPin(btn_blue_GPIO_Port,GPIO_PIN_0))
 800053e:	2101      	movs	r1, #1
 8000540:	4816      	ldr	r0, [pc, #88]	; (800059c <ButtonTask_App+0x6c>)
 8000542:	f000 fe43 	bl	80011cc <HAL_GPIO_ReadPin>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d0f8      	beq.n	800053e <ButtonTask_App+0xe>
			{
				HAL_Delay(100);//debounce
 800054c:	2064      	movs	r0, #100	; 0x64
 800054e:	f000 fb9b 	bl	8000c88 <HAL_Delay>

				while(HAL_GPIO_ReadPin(btn_blue_GPIO_Port,GPIO_PIN_0))
 8000552:	bf00      	nop
 8000554:	2101      	movs	r1, #1
 8000556:	4811      	ldr	r0, [pc, #68]	; (800059c <ButtonTask_App+0x6c>)
 8000558:	f000 fe38 	bl	80011cc <HAL_GPIO_ReadPin>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d1f8      	bne.n	8000554 <ButtonTask_App+0x24>
				{;}
				++count ;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	3301      	adds	r3, #1
 8000566:	607b      	str	r3, [r7, #4]
				if(count & 0x01)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	2b00      	cmp	r3, #0
 8000570:	d002      	beq.n	8000578 <ButtonTask_App+0x48>
					task = 1;
 8000572:	2301      	movs	r3, #1
 8000574:	603b      	str	r3, [r7, #0]
 8000576:	e001      	b.n	800057c <ButtonTask_App+0x4c>
				else
					task = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	603b      	str	r3, [r7, #0]
				xQueueSend(MsgQueue,(int * ) &task,1);
 800057c:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <ButtonTask_App+0x70>)
 800057e:	6818      	ldr	r0, [r3, #0]
 8000580:	4639      	mov	r1, r7
 8000582:	2300      	movs	r3, #0
 8000584:	2201      	movs	r2, #1
 8000586:	f001 ff0f 	bl	80023a8 <xQueueGenericSend>
				taskYIELD();
 800058a:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <ButtonTask_App+0x74>)
 800058c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	f3bf 8f4f 	dsb	sy
 8000596:	f3bf 8f6f 	isb	sy
			if(HAL_GPIO_ReadPin(btn_blue_GPIO_Port,GPIO_PIN_0))
 800059a:	e7d0      	b.n	800053e <ButtonTask_App+0xe>
 800059c:	40020000 	.word	0x40020000
 80005a0:	2000002c 	.word	0x2000002c
 80005a4:	e000ed04 	.word	0xe000ed04

080005a8 <LEDTask_App>:
			}
		}
}

void LEDTask_App(void *pvParameters)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	unsigned int light = 1;
 80005b0:	2301      	movs	r3, #1
 80005b2:	60fb      	str	r3, [r7, #12]
	for(;;)
	{
		while(light==0){
 80005b4:	e01e      	b.n	80005f4 <LEDTask_App+0x4c>
			HAL_GPIO_WritePin(led_orange_GPIO_Port, GPIO_PIN_13, GPIO_PIN_SET);
 80005b6:	2201      	movs	r2, #1
 80005b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005bc:	4831      	ldr	r0, [pc, #196]	; (8000684 <LEDTask_App+0xdc>)
 80005be:	f000 fe1d 	bl	80011fc <HAL_GPIO_WritePin>
			vTaskDelay(1000);
 80005c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005c6:	f002 fc11 	bl	8002dec <vTaskDelay>
			xQueueReceive(MsgQueue,&light, 0);
 80005ca:	4b2f      	ldr	r3, [pc, #188]	; (8000688 <LEDTask_App+0xe0>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	f107 010c 	add.w	r1, r7, #12
 80005d2:	2200      	movs	r2, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f002 f87d 	bl	80026d4 <xQueueReceive>
			HAL_GPIO_WritePin(led_orange_GPIO_Port, GPIO_PIN_13, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e0:	4828      	ldr	r0, [pc, #160]	; (8000684 <LEDTask_App+0xdc>)
 80005e2:	f000 fe0b 	bl	80011fc <HAL_GPIO_WritePin>
			vTaskDelay(1000);
 80005e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ea:	f002 fbff 	bl	8002dec <vTaskDelay>
			if(light==1) break;
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d003      	beq.n	80005fc <LEDTask_App+0x54>
		while(light==0){
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d0dd      	beq.n	80005b6 <LEDTask_App+0xe>
 80005fa:	e03c      	b.n	8000676 <LEDTask_App+0xce>
			if(light==1) break;
 80005fc:	bf00      	nop
		}
//		if(HAL_GPIO_ReadPin(btn_blue_GPIO_Port, GPIO_PIN_0)){

		while(light==1){
 80005fe:	e03a      	b.n	8000676 <LEDTask_App+0xce>
			HAL_GPIO_WritePin(led_green_GPIO_Port, GPIO_PIN_12, GPIO_PIN_SET);
 8000600:	2201      	movs	r2, #1
 8000602:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000606:	481f      	ldr	r0, [pc, #124]	; (8000684 <LEDTask_App+0xdc>)
 8000608:	f000 fdf8 	bl	80011fc <HAL_GPIO_WritePin>
			vTaskDelay(2000);
 800060c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000610:	f002 fbec 	bl	8002dec <vTaskDelay>
			xQueueReceive(MsgQueue,&light, 0);
 8000614:	4b1c      	ldr	r3, [pc, #112]	; (8000688 <LEDTask_App+0xe0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f107 010c 	add.w	r1, r7, #12
 800061c:	2200      	movs	r2, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f002 f858 	bl	80026d4 <xQueueReceive>
			HAL_GPIO_WritePin(led_green_GPIO_Port, GPIO_PIN_12, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800062a:	4816      	ldr	r0, [pc, #88]	; (8000684 <LEDTask_App+0xdc>)
 800062c:	f000 fde6 	bl	80011fc <HAL_GPIO_WritePin>
			vTaskDelay(2000);
 8000630:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000634:	f002 fbda 	bl	8002dec <vTaskDelay>
			HAL_GPIO_WritePin(led_red_GPIO_Port, GPIO_PIN_14, GPIO_PIN_SET);
 8000638:	2201      	movs	r2, #1
 800063a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800063e:	4811      	ldr	r0, [pc, #68]	; (8000684 <LEDTask_App+0xdc>)
 8000640:	f000 fddc 	bl	80011fc <HAL_GPIO_WritePin>
			vTaskDelay(2000);
 8000644:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000648:	f002 fbd0 	bl	8002dec <vTaskDelay>
			xQueueReceive(MsgQueue,&light, 0);
 800064c:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <LEDTask_App+0xe0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f107 010c 	add.w	r1, r7, #12
 8000654:	2200      	movs	r2, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f002 f83c 	bl	80026d4 <xQueueReceive>
			HAL_GPIO_WritePin(led_red_GPIO_Port, GPIO_PIN_14, GPIO_PIN_RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000662:	4808      	ldr	r0, [pc, #32]	; (8000684 <LEDTask_App+0xdc>)
 8000664:	f000 fdca 	bl	80011fc <HAL_GPIO_WritePin>
			vTaskDelay(2000);
 8000668:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800066c:	f002 fbbe 	bl	8002dec <vTaskDelay>
			if(light==0) break;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d003      	beq.n	800067e <LEDTask_App+0xd6>
		while(light==1){
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	2b01      	cmp	r3, #1
 800067a:	d0c1      	beq.n	8000600 <LEDTask_App+0x58>
 800067c:	e7ba      	b.n	80005f4 <LEDTask_App+0x4c>
			if(light==0) break;
 800067e:	bf00      	nop
		while(light==0){
 8000680:	e7b8      	b.n	80005f4 <LEDTask_App+0x4c>
 8000682:	bf00      	nop
 8000684:	40020c00 	.word	0x40020c00
 8000688:	2000002c 	.word	0x2000002c

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b094      	sub	sp, #80	; 0x50
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 0320 	add.w	r3, r7, #32
 8000696:	2230      	movs	r2, #48	; 0x30
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f004 f858 	bl	8004750 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	4b28      	ldr	r3, [pc, #160]	; (8000758 <SystemClock_Config+0xcc>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b8:	4a27      	ldr	r2, [pc, #156]	; (8000758 <SystemClock_Config+0xcc>)
 80006ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006be:	6413      	str	r3, [r2, #64]	; 0x40
 80006c0:	4b25      	ldr	r3, [pc, #148]	; (8000758 <SystemClock_Config+0xcc>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006cc:	2300      	movs	r3, #0
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	4b22      	ldr	r3, [pc, #136]	; (800075c <SystemClock_Config+0xd0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a21      	ldr	r2, [pc, #132]	; (800075c <SystemClock_Config+0xd0>)
 80006d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006da:	6013      	str	r3, [r2, #0]
 80006dc:	4b1f      	ldr	r3, [pc, #124]	; (800075c <SystemClock_Config+0xd0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e8:	2302      	movs	r3, #2
 80006ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ec:	2301      	movs	r3, #1
 80006ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f0:	2310      	movs	r3, #16
 80006f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f4:	2302      	movs	r3, #2
 80006f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f8:	2300      	movs	r3, #0
 80006fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006fc:	2308      	movs	r3, #8
 80006fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000700:	2332      	movs	r3, #50	; 0x32
 8000702:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000704:	2304      	movs	r3, #4
 8000706:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000708:	2307      	movs	r3, #7
 800070a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070c:	f107 0320 	add.w	r3, r7, #32
 8000710:	4618      	mov	r0, r3
 8000712:	f000 fd8d 	bl	8001230 <HAL_RCC_OscConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800071c:	f000 f98e 	bl	8000a3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000720:	230f      	movs	r3, #15
 8000722:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000724:	2302      	movs	r3, #2
 8000726:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800072c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000730:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000736:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f000 ffee 	bl	8001720 <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800074a:	f000 f977 	bl	8000a3c <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	3750      	adds	r7, #80	; 0x50
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08c      	sub	sp, #48	; 0x30
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	61bb      	str	r3, [r7, #24]
 800077a:	4ba1      	ldr	r3, [pc, #644]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4aa0      	ldr	r2, [pc, #640]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 8000780:	f043 0310 	orr.w	r3, r3, #16
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b9e      	ldr	r3, [pc, #632]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0310 	and.w	r3, r3, #16
 800078e:	61bb      	str	r3, [r7, #24]
 8000790:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
 8000796:	4b9a      	ldr	r3, [pc, #616]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a99      	ldr	r2, [pc, #612]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b97      	ldr	r3, [pc, #604]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0304 	and.w	r3, r3, #4
 80007aa:	617b      	str	r3, [r7, #20]
 80007ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	4b93      	ldr	r3, [pc, #588]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a92      	ldr	r2, [pc, #584]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 80007b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b90      	ldr	r3, [pc, #576]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	4b8c      	ldr	r3, [pc, #560]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a8b      	ldr	r2, [pc, #556]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b89      	ldr	r3, [pc, #548]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	4b85      	ldr	r3, [pc, #532]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a84      	ldr	r2, [pc, #528]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 80007f0:	f043 0302 	orr.w	r3, r3, #2
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b82      	ldr	r3, [pc, #520]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0302 	and.w	r3, r3, #2
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	4b7e      	ldr	r3, [pc, #504]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a7d      	ldr	r2, [pc, #500]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 800080c:	f043 0308 	orr.w	r3, r3, #8
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b7b      	ldr	r3, [pc, #492]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0308 	and.w	r3, r3, #8
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	2108      	movs	r1, #8
 8000822:	4878      	ldr	r0, [pc, #480]	; (8000a04 <MX_GPIO_Init+0x2a4>)
 8000824:	f000 fcea 	bl	80011fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000828:	2201      	movs	r2, #1
 800082a:	2101      	movs	r1, #1
 800082c:	4876      	ldr	r0, [pc, #472]	; (8000a08 <MX_GPIO_Init+0x2a8>)
 800082e:	f000 fce5 	bl	80011fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, led_green_Pin|led_orange_Pin|led_red_Pin|led_blue_Pin
 8000832:	2200      	movs	r2, #0
 8000834:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000838:	4874      	ldr	r0, [pc, #464]	; (8000a0c <MX_GPIO_Init+0x2ac>)
 800083a:	f000 fcdf 	bl	80011fc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800083e:	2308      	movs	r3, #8
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	486b      	ldr	r0, [pc, #428]	; (8000a04 <MX_GPIO_Init+0x2a4>)
 8000856:	f000 fb1d 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800085a:	2301      	movs	r3, #1
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085e:	2301      	movs	r3, #1
 8000860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	4619      	mov	r1, r3
 8000870:	4865      	ldr	r0, [pc, #404]	; (8000a08 <MX_GPIO_Init+0x2a8>)
 8000872:	f000 fb0f 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000876:	2308      	movs	r3, #8
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087a:	2302      	movs	r3, #2
 800087c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	2300      	movs	r3, #0
 8000884:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000886:	2305      	movs	r3, #5
 8000888:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	4619      	mov	r1, r3
 8000890:	485d      	ldr	r0, [pc, #372]	; (8000a08 <MX_GPIO_Init+0x2a8>)
 8000892:	f000 faff 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_blue_Pin */
  GPIO_InitStruct.Pin = btn_blue_Pin;
 8000896:	2301      	movs	r3, #1
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089a:	2300      	movs	r3, #0
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(btn_blue_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	4859      	ldr	r0, [pc, #356]	; (8000a10 <MX_GPIO_Init+0x2b0>)
 80008aa:	f000 faf3 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008ae:	2310      	movs	r3, #16
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b2:	2302      	movs	r3, #2
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008be:	2306      	movs	r3, #6
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	4851      	ldr	r0, [pc, #324]	; (8000a10 <MX_GPIO_Init+0x2b0>)
 80008ca:	f000 fae3 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008ce:	23e0      	movs	r3, #224	; 0xe0
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008de:	2305      	movs	r3, #5
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	4849      	ldr	r0, [pc, #292]	; (8000a10 <MX_GPIO_Init+0x2b0>)
 80008ea:	f000 fad3 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008ee:	2304      	movs	r3, #4
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f2:	2300      	movs	r3, #0
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	4844      	ldr	r0, [pc, #272]	; (8000a14 <MX_GPIO_Init+0x2b4>)
 8000902:	f000 fac7 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000918:	2305      	movs	r3, #5
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	483c      	ldr	r0, [pc, #240]	; (8000a14 <MX_GPIO_Init+0x2b4>)
 8000924:	f000 fab6 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : led_green_Pin led_orange_Pin led_red_Pin led_blue_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = led_green_Pin|led_orange_Pin|led_red_Pin|led_blue_Pin
 8000928:	f24f 0310 	movw	r3, #61456	; 0xf010
 800092c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	4832      	ldr	r0, [pc, #200]	; (8000a0c <MX_GPIO_Init+0x2ac>)
 8000942:	f000 faa7 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000946:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800094a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094c:	2302      	movs	r3, #2
 800094e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000958:	2306      	movs	r3, #6
 800095a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4619      	mov	r1, r3
 8000962:	4829      	ldr	r0, [pc, #164]	; (8000a08 <MX_GPIO_Init+0x2a8>)
 8000964:	f000 fa96 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000968:	f44f 7300 	mov.w	r3, #512	; 0x200
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4824      	ldr	r0, [pc, #144]	; (8000a10 <MX_GPIO_Init+0x2b0>)
 800097e:	f000 fa89 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000982:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000994:	230a      	movs	r3, #10
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	481c      	ldr	r0, [pc, #112]	; (8000a10 <MX_GPIO_Init+0x2b0>)
 80009a0:	f000 fa78 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009a4:	2320      	movs	r3, #32
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	4815      	ldr	r0, [pc, #84]	; (8000a0c <MX_GPIO_Init+0x2ac>)
 80009b8:	f000 fa6c 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009bc:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009c2:	2312      	movs	r3, #18
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009ce:	2304      	movs	r3, #4
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	480e      	ldr	r0, [pc, #56]	; (8000a14 <MX_GPIO_Init+0x2b4>)
 80009da:	f000 fa5b 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009de:	2302      	movs	r3, #2
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009e2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	4804      	ldr	r0, [pc, #16]	; (8000a04 <MX_GPIO_Init+0x2a4>)
 80009f4:	f000 fa4e 	bl	8000e94 <HAL_GPIO_Init>

}
 80009f8:	bf00      	nop
 80009fa:	3730      	adds	r7, #48	; 0x30
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40021000 	.word	0x40021000
 8000a08:	40020800 	.word	0x40020800
 8000a0c:	40020c00 	.word	0x40020c00
 8000a10:	40020000 	.word	0x40020000
 8000a14:	40020400 	.word	0x40020400

08000a18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d101      	bne.n	8000a2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a2a:	f000 f90d 	bl	8000c48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40001400 	.word	0x40001400

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a40:	b672      	cpsid	i
}
 8000a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <Error_Handler+0x8>
	...

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a56:	4a0f      	ldr	r2, [pc, #60]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	603b      	str	r3, [r7, #0]
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	4a08      	ldr	r2, [pc, #32]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a78:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800

08000a98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08c      	sub	sp, #48	; 0x30
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	2037      	movs	r0, #55	; 0x37
 8000aae:	f000 f9c7 	bl	8000e40 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000ab2:	2037      	movs	r0, #55	; 0x37
 8000ab4:	f000 f9e0 	bl	8000e78 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <HAL_InitTick+0xa4>)
 8000abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac0:	4a1e      	ldr	r2, [pc, #120]	; (8000b3c <HAL_InitTick+0xa4>)
 8000ac2:	f043 0320 	orr.w	r3, r3, #32
 8000ac6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac8:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <HAL_InitTick+0xa4>)
 8000aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000acc:	f003 0320 	and.w	r3, r3, #32
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ad4:	f107 0210 	add.w	r2, r7, #16
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4611      	mov	r1, r2
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f001 f806 	bl	8001af0 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ae4:	f000 fff0 	bl	8001ac8 <HAL_RCC_GetPCLK1Freq>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af0:	4a13      	ldr	r2, [pc, #76]	; (8000b40 <HAL_InitTick+0xa8>)
 8000af2:	fba2 2303 	umull	r2, r3, r2, r3
 8000af6:	0c9b      	lsrs	r3, r3, #18
 8000af8:	3b01      	subs	r3, #1
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <HAL_InitTick+0xac>)
 8000afe:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <HAL_InitTick+0xb0>)
 8000b00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <HAL_InitTick+0xac>)
 8000b04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b08:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000b0a:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <HAL_InitTick+0xac>)
 8000b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b0e:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <HAL_InitTick+0xac>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <HAL_InitTick+0xac>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000b1c:	4809      	ldr	r0, [pc, #36]	; (8000b44 <HAL_InitTick+0xac>)
 8000b1e:	f001 f819 	bl	8001b54 <HAL_TIM_Base_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d104      	bne.n	8000b32 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000b28:	4806      	ldr	r0, [pc, #24]	; (8000b44 <HAL_InitTick+0xac>)
 8000b2a:	f001 f86d 	bl	8001c08 <HAL_TIM_Base_Start_IT>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	e000      	b.n	8000b34 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3730      	adds	r7, #48	; 0x30
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	431bde83 	.word	0x431bde83
 8000b44:	20012d90 	.word	0x20012d90
 8000b48:	40001400 	.word	0x40001400

08000b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <NMI_Handler+0x4>

08000b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <HardFault_Handler+0x4>

08000b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <MemManage_Handler+0x4>

08000b5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <BusFault_Handler+0x4>

08000b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <UsageFault_Handler+0x4>

08000b6a <DebugMon_Handler>:
//
///**
//  * @brief This function handles Debug monitor.
//  */
void DebugMon_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000b7c:	4802      	ldr	r0, [pc, #8]	; (8000b88 <TIM7_IRQHandler+0x10>)
 8000b7e:	f001 f8b3 	bl	8001ce8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20012d90 	.word	0x20012d90

08000b8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <SystemInit+0x20>)
 8000b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b96:	4a05      	ldr	r2, [pc, #20]	; (8000bac <SystemInit+0x20>)
 8000b98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bb4:	480d      	ldr	r0, [pc, #52]	; (8000bec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bb6:	490e      	ldr	r1, [pc, #56]	; (8000bf0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bb8:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bbc:	e002      	b.n	8000bc4 <LoopCopyDataInit>

08000bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc2:	3304      	adds	r3, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc8:	d3f9      	bcc.n	8000bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bca:	4a0b      	ldr	r2, [pc, #44]	; (8000bf8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bcc:	4c0b      	ldr	r4, [pc, #44]	; (8000bfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd0:	e001      	b.n	8000bd6 <LoopFillZerobss>

08000bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd4:	3204      	adds	r2, #4

08000bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd8:	d3fb      	bcc.n	8000bd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bda:	f7ff ffd7 	bl	8000b8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bde:	f003 fd85 	bl	80046ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000be2:	f7ff fc71 	bl	80004c8 <main>
  bx  lr    
 8000be6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000be8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000bf4:	080047d4 	.word	0x080047d4
  ldr r2, =_sbss
 8000bf8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000bfc:	20012e1c 	.word	0x20012e1c

08000c00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c00:	e7fe      	b.n	8000c00 <ADC_IRQHandler>
	...

08000c04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c08:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <HAL_Init+0x40>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a0d      	ldr	r2, [pc, #52]	; (8000c44 <HAL_Init+0x40>)
 8000c0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c14:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <HAL_Init+0x40>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <HAL_Init+0x40>)
 8000c1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <HAL_Init+0x40>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <HAL_Init+0x40>)
 8000c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c2c:	2003      	movs	r0, #3
 8000c2e:	f000 f8fc 	bl	8000e2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c32:	2000      	movs	r0, #0
 8000c34:	f7ff ff30 	bl	8000a98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c38:	f7ff ff06 	bl	8000a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40023c00 	.word	0x40023c00

08000c48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_IncTick+0x20>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_IncTick+0x24>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4413      	add	r3, r2
 8000c58:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <HAL_IncTick+0x24>)
 8000c5a:	6013      	str	r3, [r2, #0]
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	20012dd8 	.word	0x20012dd8

08000c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return uwTick;
 8000c74:	4b03      	ldr	r3, [pc, #12]	; (8000c84 <HAL_GetTick+0x14>)
 8000c76:	681b      	ldr	r3, [r3, #0]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20012dd8 	.word	0x20012dd8

08000c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c90:	f7ff ffee 	bl	8000c70 <HAL_GetTick>
 8000c94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ca0:	d005      	beq.n	8000cae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <HAL_Delay+0x44>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	4413      	add	r3, r2
 8000cac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cae:	bf00      	nop
 8000cb0:	f7ff ffde 	bl	8000c70 <HAL_GetTick>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d8f7      	bhi.n	8000cb0 <HAL_Delay+0x28>
  {
  }
}
 8000cc0:	bf00      	nop
 8000cc2:	bf00      	nop
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000008 	.word	0x20000008

08000cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cec:	4013      	ands	r3, r2
 8000cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d02:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	60d3      	str	r3, [r2, #12]
}
 8000d08:	bf00      	nop
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <__NVIC_GetPriorityGrouping+0x18>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	0a1b      	lsrs	r3, r3, #8
 8000d22:	f003 0307 	and.w	r3, r3, #7
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	db0b      	blt.n	8000d5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	f003 021f 	and.w	r2, r3, #31
 8000d4c:	4907      	ldr	r1, [pc, #28]	; (8000d6c <__NVIC_EnableIRQ+0x38>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	095b      	lsrs	r3, r3, #5
 8000d54:	2001      	movs	r0, #1
 8000d56:	fa00 f202 	lsl.w	r2, r0, r2
 8000d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000e100 	.word	0xe000e100

08000d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	6039      	str	r1, [r7, #0]
 8000d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	db0a      	blt.n	8000d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	490c      	ldr	r1, [pc, #48]	; (8000dbc <__NVIC_SetPriority+0x4c>)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	0112      	lsls	r2, r2, #4
 8000d90:	b2d2      	uxtb	r2, r2
 8000d92:	440b      	add	r3, r1
 8000d94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d98:	e00a      	b.n	8000db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	4908      	ldr	r1, [pc, #32]	; (8000dc0 <__NVIC_SetPriority+0x50>)
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	f003 030f 	and.w	r3, r3, #15
 8000da6:	3b04      	subs	r3, #4
 8000da8:	0112      	lsls	r2, r2, #4
 8000daa:	b2d2      	uxtb	r2, r2
 8000dac:	440b      	add	r3, r1
 8000dae:	761a      	strb	r2, [r3, #24]
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000e100 	.word	0xe000e100
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b089      	sub	sp, #36	; 0x24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	f1c3 0307 	rsb	r3, r3, #7
 8000dde:	2b04      	cmp	r3, #4
 8000de0:	bf28      	it	cs
 8000de2:	2304      	movcs	r3, #4
 8000de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3304      	adds	r3, #4
 8000dea:	2b06      	cmp	r3, #6
 8000dec:	d902      	bls.n	8000df4 <NVIC_EncodePriority+0x30>
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3b03      	subs	r3, #3
 8000df2:	e000      	b.n	8000df6 <NVIC_EncodePriority+0x32>
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43da      	mvns	r2, r3
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	401a      	ands	r2, r3
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	fa01 f303 	lsl.w	r3, r1, r3
 8000e16:	43d9      	mvns	r1, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e1c:	4313      	orrs	r3, r2
         );
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3724      	adds	r7, #36	; 0x24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff ff4c 	bl	8000cd0 <__NVIC_SetPriorityGrouping>
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
 8000e4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e52:	f7ff ff61 	bl	8000d18 <__NVIC_GetPriorityGrouping>
 8000e56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	68b9      	ldr	r1, [r7, #8]
 8000e5c:	6978      	ldr	r0, [r7, #20]
 8000e5e:	f7ff ffb1 	bl	8000dc4 <NVIC_EncodePriority>
 8000e62:	4602      	mov	r2, r0
 8000e64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff ff80 	bl	8000d70 <__NVIC_SetPriority>
}
 8000e70:	bf00      	nop
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff ff54 	bl	8000d34 <__NVIC_EnableIRQ>
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b089      	sub	sp, #36	; 0x24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
 8000eae:	e16b      	b.n	8001188 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	697a      	ldr	r2, [r7, #20]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	f040 815a 	bne.w	8001182 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f003 0303 	and.w	r3, r3, #3
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d005      	beq.n	8000ee6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d130      	bne.n	8000f48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4013      	ands	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	68da      	ldr	r2, [r3, #12]
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	091b      	lsrs	r3, r3, #4
 8000f32:	f003 0201 	and.w	r2, r3, #1
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0303 	and.w	r3, r3, #3
 8000f50:	2b03      	cmp	r3, #3
 8000f52:	d017      	beq.n	8000f84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	2203      	movs	r2, #3
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	689a      	ldr	r2, [r3, #8]
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 0303 	and.w	r3, r3, #3
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d123      	bne.n	8000fd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	08da      	lsrs	r2, r3, #3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3208      	adds	r2, #8
 8000f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	f003 0307 	and.w	r3, r3, #7
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	220f      	movs	r2, #15
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	691a      	ldr	r2, [r3, #16]
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	08da      	lsrs	r2, r3, #3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3208      	adds	r2, #8
 8000fd2:	69b9      	ldr	r1, [r7, #24]
 8000fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 0203 	and.w	r2, r3, #3
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001014:	2b00      	cmp	r3, #0
 8001016:	f000 80b4 	beq.w	8001182 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b60      	ldr	r3, [pc, #384]	; (80011a0 <HAL_GPIO_Init+0x30c>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	4a5f      	ldr	r2, [pc, #380]	; (80011a0 <HAL_GPIO_Init+0x30c>)
 8001024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001028:	6453      	str	r3, [r2, #68]	; 0x44
 800102a:	4b5d      	ldr	r3, [pc, #372]	; (80011a0 <HAL_GPIO_Init+0x30c>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001036:	4a5b      	ldr	r2, [pc, #364]	; (80011a4 <HAL_GPIO_Init+0x310>)
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	089b      	lsrs	r3, r3, #2
 800103c:	3302      	adds	r3, #2
 800103e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	220f      	movs	r2, #15
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43db      	mvns	r3, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4013      	ands	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a52      	ldr	r2, [pc, #328]	; (80011a8 <HAL_GPIO_Init+0x314>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d02b      	beq.n	80010ba <HAL_GPIO_Init+0x226>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a51      	ldr	r2, [pc, #324]	; (80011ac <HAL_GPIO_Init+0x318>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d025      	beq.n	80010b6 <HAL_GPIO_Init+0x222>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a50      	ldr	r2, [pc, #320]	; (80011b0 <HAL_GPIO_Init+0x31c>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d01f      	beq.n	80010b2 <HAL_GPIO_Init+0x21e>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a4f      	ldr	r2, [pc, #316]	; (80011b4 <HAL_GPIO_Init+0x320>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d019      	beq.n	80010ae <HAL_GPIO_Init+0x21a>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a4e      	ldr	r2, [pc, #312]	; (80011b8 <HAL_GPIO_Init+0x324>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d013      	beq.n	80010aa <HAL_GPIO_Init+0x216>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a4d      	ldr	r2, [pc, #308]	; (80011bc <HAL_GPIO_Init+0x328>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d00d      	beq.n	80010a6 <HAL_GPIO_Init+0x212>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a4c      	ldr	r2, [pc, #304]	; (80011c0 <HAL_GPIO_Init+0x32c>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d007      	beq.n	80010a2 <HAL_GPIO_Init+0x20e>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a4b      	ldr	r2, [pc, #300]	; (80011c4 <HAL_GPIO_Init+0x330>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d101      	bne.n	800109e <HAL_GPIO_Init+0x20a>
 800109a:	2307      	movs	r3, #7
 800109c:	e00e      	b.n	80010bc <HAL_GPIO_Init+0x228>
 800109e:	2308      	movs	r3, #8
 80010a0:	e00c      	b.n	80010bc <HAL_GPIO_Init+0x228>
 80010a2:	2306      	movs	r3, #6
 80010a4:	e00a      	b.n	80010bc <HAL_GPIO_Init+0x228>
 80010a6:	2305      	movs	r3, #5
 80010a8:	e008      	b.n	80010bc <HAL_GPIO_Init+0x228>
 80010aa:	2304      	movs	r3, #4
 80010ac:	e006      	b.n	80010bc <HAL_GPIO_Init+0x228>
 80010ae:	2303      	movs	r3, #3
 80010b0:	e004      	b.n	80010bc <HAL_GPIO_Init+0x228>
 80010b2:	2302      	movs	r3, #2
 80010b4:	e002      	b.n	80010bc <HAL_GPIO_Init+0x228>
 80010b6:	2301      	movs	r3, #1
 80010b8:	e000      	b.n	80010bc <HAL_GPIO_Init+0x228>
 80010ba:	2300      	movs	r3, #0
 80010bc:	69fa      	ldr	r2, [r7, #28]
 80010be:	f002 0203 	and.w	r2, r2, #3
 80010c2:	0092      	lsls	r2, r2, #2
 80010c4:	4093      	lsls	r3, r2
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010cc:	4935      	ldr	r1, [pc, #212]	; (80011a4 <HAL_GPIO_Init+0x310>)
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	089b      	lsrs	r3, r3, #2
 80010d2:	3302      	adds	r3, #2
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010da:	4b3b      	ldr	r3, [pc, #236]	; (80011c8 <HAL_GPIO_Init+0x334>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	43db      	mvns	r3, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4013      	ands	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010fe:	4a32      	ldr	r2, [pc, #200]	; (80011c8 <HAL_GPIO_Init+0x334>)
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001104:	4b30      	ldr	r3, [pc, #192]	; (80011c8 <HAL_GPIO_Init+0x334>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d003      	beq.n	8001128 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	4313      	orrs	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001128:	4a27      	ldr	r2, [pc, #156]	; (80011c8 <HAL_GPIO_Init+0x334>)
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800112e:	4b26      	ldr	r3, [pc, #152]	; (80011c8 <HAL_GPIO_Init+0x334>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	43db      	mvns	r3, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4013      	ands	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001152:	4a1d      	ldr	r2, [pc, #116]	; (80011c8 <HAL_GPIO_Init+0x334>)
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001158:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <HAL_GPIO_Init+0x334>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	4313      	orrs	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800117c:	4a12      	ldr	r2, [pc, #72]	; (80011c8 <HAL_GPIO_Init+0x334>)
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3301      	adds	r3, #1
 8001186:	61fb      	str	r3, [r7, #28]
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	2b0f      	cmp	r3, #15
 800118c:	f67f ae90 	bls.w	8000eb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001190:	bf00      	nop
 8001192:	bf00      	nop
 8001194:	3724      	adds	r7, #36	; 0x24
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40013800 	.word	0x40013800
 80011a8:	40020000 	.word	0x40020000
 80011ac:	40020400 	.word	0x40020400
 80011b0:	40020800 	.word	0x40020800
 80011b4:	40020c00 	.word	0x40020c00
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40021400 	.word	0x40021400
 80011c0:	40021800 	.word	0x40021800
 80011c4:	40021c00 	.word	0x40021c00
 80011c8:	40013c00 	.word	0x40013c00

080011cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	691a      	ldr	r2, [r3, #16]
 80011dc:	887b      	ldrh	r3, [r7, #2]
 80011de:	4013      	ands	r3, r2
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d002      	beq.n	80011ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011e4:	2301      	movs	r3, #1
 80011e6:	73fb      	strb	r3, [r7, #15]
 80011e8:	e001      	b.n	80011ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011ea:	2300      	movs	r3, #0
 80011ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3714      	adds	r7, #20
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	807b      	strh	r3, [r7, #2]
 8001208:	4613      	mov	r3, r2
 800120a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800120c:	787b      	ldrb	r3, [r7, #1]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001212:	887a      	ldrh	r2, [r7, #2]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001218:	e003      	b.n	8001222 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800121a:	887b      	ldrh	r3, [r7, #2]
 800121c:	041a      	lsls	r2, r3, #16
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	619a      	str	r2, [r3, #24]
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
	...

08001230 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e264      	b.n	800170c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	2b00      	cmp	r3, #0
 800124c:	d075      	beq.n	800133a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800124e:	4ba3      	ldr	r3, [pc, #652]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f003 030c 	and.w	r3, r3, #12
 8001256:	2b04      	cmp	r3, #4
 8001258:	d00c      	beq.n	8001274 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800125a:	4ba0      	ldr	r3, [pc, #640]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001262:	2b08      	cmp	r3, #8
 8001264:	d112      	bne.n	800128c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001266:	4b9d      	ldr	r3, [pc, #628]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800126e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001272:	d10b      	bne.n	800128c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001274:	4b99      	ldr	r3, [pc, #612]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d05b      	beq.n	8001338 <HAL_RCC_OscConfig+0x108>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d157      	bne.n	8001338 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e23f      	b.n	800170c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001294:	d106      	bne.n	80012a4 <HAL_RCC_OscConfig+0x74>
 8001296:	4b91      	ldr	r3, [pc, #580]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a90      	ldr	r2, [pc, #576]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 800129c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	e01d      	b.n	80012e0 <HAL_RCC_OscConfig+0xb0>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012ac:	d10c      	bne.n	80012c8 <HAL_RCC_OscConfig+0x98>
 80012ae:	4b8b      	ldr	r3, [pc, #556]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a8a      	ldr	r2, [pc, #552]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 80012b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b8:	6013      	str	r3, [r2, #0]
 80012ba:	4b88      	ldr	r3, [pc, #544]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a87      	ldr	r2, [pc, #540]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 80012c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	e00b      	b.n	80012e0 <HAL_RCC_OscConfig+0xb0>
 80012c8:	4b84      	ldr	r3, [pc, #528]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a83      	ldr	r2, [pc, #524]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 80012ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	4b81      	ldr	r3, [pc, #516]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a80      	ldr	r2, [pc, #512]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 80012da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d013      	beq.n	8001310 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e8:	f7ff fcc2 	bl	8000c70 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f0:	f7ff fcbe 	bl	8000c70 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b64      	cmp	r3, #100	; 0x64
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e204      	b.n	800170c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001302:	4b76      	ldr	r3, [pc, #472]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0xc0>
 800130e:	e014      	b.n	800133a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001310:	f7ff fcae 	bl	8000c70 <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001318:	f7ff fcaa 	bl	8000c70 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b64      	cmp	r3, #100	; 0x64
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e1f0      	b.n	800170c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132a:	4b6c      	ldr	r3, [pc, #432]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1f0      	bne.n	8001318 <HAL_RCC_OscConfig+0xe8>
 8001336:	e000      	b.n	800133a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d063      	beq.n	800140e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001346:	4b65      	ldr	r3, [pc, #404]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f003 030c 	and.w	r3, r3, #12
 800134e:	2b00      	cmp	r3, #0
 8001350:	d00b      	beq.n	800136a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001352:	4b62      	ldr	r3, [pc, #392]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800135a:	2b08      	cmp	r3, #8
 800135c:	d11c      	bne.n	8001398 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800135e:	4b5f      	ldr	r3, [pc, #380]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d116      	bne.n	8001398 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136a:	4b5c      	ldr	r3, [pc, #368]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d005      	beq.n	8001382 <HAL_RCC_OscConfig+0x152>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d001      	beq.n	8001382 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e1c4      	b.n	800170c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001382:	4b56      	ldr	r3, [pc, #344]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	4952      	ldr	r1, [pc, #328]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 8001392:	4313      	orrs	r3, r2
 8001394:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001396:	e03a      	b.n	800140e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d020      	beq.n	80013e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a0:	4b4f      	ldr	r3, [pc, #316]	; (80014e0 <HAL_RCC_OscConfig+0x2b0>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a6:	f7ff fc63 	bl	8000c70 <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ae:	f7ff fc5f 	bl	8000c70 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e1a5      	b.n	800170c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c0:	4b46      	ldr	r3, [pc, #280]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d0f0      	beq.n	80013ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013cc:	4b43      	ldr	r3, [pc, #268]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	4940      	ldr	r1, [pc, #256]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	4313      	orrs	r3, r2
 80013de:	600b      	str	r3, [r1, #0]
 80013e0:	e015      	b.n	800140e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013e2:	4b3f      	ldr	r3, [pc, #252]	; (80014e0 <HAL_RCC_OscConfig+0x2b0>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e8:	f7ff fc42 	bl	8000c70 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f0:	f7ff fc3e 	bl	8000c70 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e184      	b.n	800170c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001402:	4b36      	ldr	r3, [pc, #216]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f0      	bne.n	80013f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0308 	and.w	r3, r3, #8
 8001416:	2b00      	cmp	r3, #0
 8001418:	d030      	beq.n	800147c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d016      	beq.n	8001450 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001422:	4b30      	ldr	r3, [pc, #192]	; (80014e4 <HAL_RCC_OscConfig+0x2b4>)
 8001424:	2201      	movs	r2, #1
 8001426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001428:	f7ff fc22 	bl	8000c70 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001430:	f7ff fc1e 	bl	8000c70 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e164      	b.n	800170c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001442:	4b26      	ldr	r3, [pc, #152]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 8001444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d0f0      	beq.n	8001430 <HAL_RCC_OscConfig+0x200>
 800144e:	e015      	b.n	800147c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001450:	4b24      	ldr	r3, [pc, #144]	; (80014e4 <HAL_RCC_OscConfig+0x2b4>)
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001456:	f7ff fc0b 	bl	8000c70 <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800145e:	f7ff fc07 	bl	8000c70 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e14d      	b.n	800170c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001470:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 8001472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1f0      	bne.n	800145e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 80a0 	beq.w	80015ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800148a:	2300      	movs	r3, #0
 800148c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800148e:	4b13      	ldr	r3, [pc, #76]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d10f      	bne.n	80014ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 80014a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a8:	6413      	str	r3, [r2, #64]	; 0x40
 80014aa:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014b6:	2301      	movs	r3, #1
 80014b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <HAL_RCC_OscConfig+0x2b8>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d121      	bne.n	800150a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <HAL_RCC_OscConfig+0x2b8>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a07      	ldr	r2, [pc, #28]	; (80014e8 <HAL_RCC_OscConfig+0x2b8>)
 80014cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014d2:	f7ff fbcd 	bl	8000c70 <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d8:	e011      	b.n	80014fe <HAL_RCC_OscConfig+0x2ce>
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800
 80014e0:	42470000 	.word	0x42470000
 80014e4:	42470e80 	.word	0x42470e80
 80014e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ec:	f7ff fbc0 	bl	8000c70 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e106      	b.n	800170c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fe:	4b85      	ldr	r3, [pc, #532]	; (8001714 <HAL_RCC_OscConfig+0x4e4>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0f0      	beq.n	80014ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d106      	bne.n	8001520 <HAL_RCC_OscConfig+0x2f0>
 8001512:	4b81      	ldr	r3, [pc, #516]	; (8001718 <HAL_RCC_OscConfig+0x4e8>)
 8001514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001516:	4a80      	ldr	r2, [pc, #512]	; (8001718 <HAL_RCC_OscConfig+0x4e8>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6713      	str	r3, [r2, #112]	; 0x70
 800151e:	e01c      	b.n	800155a <HAL_RCC_OscConfig+0x32a>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2b05      	cmp	r3, #5
 8001526:	d10c      	bne.n	8001542 <HAL_RCC_OscConfig+0x312>
 8001528:	4b7b      	ldr	r3, [pc, #492]	; (8001718 <HAL_RCC_OscConfig+0x4e8>)
 800152a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152c:	4a7a      	ldr	r2, [pc, #488]	; (8001718 <HAL_RCC_OscConfig+0x4e8>)
 800152e:	f043 0304 	orr.w	r3, r3, #4
 8001532:	6713      	str	r3, [r2, #112]	; 0x70
 8001534:	4b78      	ldr	r3, [pc, #480]	; (8001718 <HAL_RCC_OscConfig+0x4e8>)
 8001536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001538:	4a77      	ldr	r2, [pc, #476]	; (8001718 <HAL_RCC_OscConfig+0x4e8>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	6713      	str	r3, [r2, #112]	; 0x70
 8001540:	e00b      	b.n	800155a <HAL_RCC_OscConfig+0x32a>
 8001542:	4b75      	ldr	r3, [pc, #468]	; (8001718 <HAL_RCC_OscConfig+0x4e8>)
 8001544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001546:	4a74      	ldr	r2, [pc, #464]	; (8001718 <HAL_RCC_OscConfig+0x4e8>)
 8001548:	f023 0301 	bic.w	r3, r3, #1
 800154c:	6713      	str	r3, [r2, #112]	; 0x70
 800154e:	4b72      	ldr	r3, [pc, #456]	; (8001718 <HAL_RCC_OscConfig+0x4e8>)
 8001550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001552:	4a71      	ldr	r2, [pc, #452]	; (8001718 <HAL_RCC_OscConfig+0x4e8>)
 8001554:	f023 0304 	bic.w	r3, r3, #4
 8001558:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d015      	beq.n	800158e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001562:	f7ff fb85 	bl	8000c70 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001568:	e00a      	b.n	8001580 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800156a:	f7ff fb81 	bl	8000c70 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	f241 3288 	movw	r2, #5000	; 0x1388
 8001578:	4293      	cmp	r3, r2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e0c5      	b.n	800170c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001580:	4b65      	ldr	r3, [pc, #404]	; (8001718 <HAL_RCC_OscConfig+0x4e8>)
 8001582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d0ee      	beq.n	800156a <HAL_RCC_OscConfig+0x33a>
 800158c:	e014      	b.n	80015b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158e:	f7ff fb6f 	bl	8000c70 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001594:	e00a      	b.n	80015ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001596:	f7ff fb6b 	bl	8000c70 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e0af      	b.n	800170c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ac:	4b5a      	ldr	r3, [pc, #360]	; (8001718 <HAL_RCC_OscConfig+0x4e8>)
 80015ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1ee      	bne.n	8001596 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015b8:	7dfb      	ldrb	r3, [r7, #23]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d105      	bne.n	80015ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015be:	4b56      	ldr	r3, [pc, #344]	; (8001718 <HAL_RCC_OscConfig+0x4e8>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	4a55      	ldr	r2, [pc, #340]	; (8001718 <HAL_RCC_OscConfig+0x4e8>)
 80015c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 809b 	beq.w	800170a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015d4:	4b50      	ldr	r3, [pc, #320]	; (8001718 <HAL_RCC_OscConfig+0x4e8>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 030c 	and.w	r3, r3, #12
 80015dc:	2b08      	cmp	r3, #8
 80015de:	d05c      	beq.n	800169a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d141      	bne.n	800166c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e8:	4b4c      	ldr	r3, [pc, #304]	; (800171c <HAL_RCC_OscConfig+0x4ec>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ee:	f7ff fb3f 	bl	8000c70 <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f6:	f7ff fb3b 	bl	8000c70 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e081      	b.n	800170c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001608:	4b43      	ldr	r3, [pc, #268]	; (8001718 <HAL_RCC_OscConfig+0x4e8>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1f0      	bne.n	80015f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	69da      	ldr	r2, [r3, #28]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	431a      	orrs	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001622:	019b      	lsls	r3, r3, #6
 8001624:	431a      	orrs	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162a:	085b      	lsrs	r3, r3, #1
 800162c:	3b01      	subs	r3, #1
 800162e:	041b      	lsls	r3, r3, #16
 8001630:	431a      	orrs	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001636:	061b      	lsls	r3, r3, #24
 8001638:	4937      	ldr	r1, [pc, #220]	; (8001718 <HAL_RCC_OscConfig+0x4e8>)
 800163a:	4313      	orrs	r3, r2
 800163c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800163e:	4b37      	ldr	r3, [pc, #220]	; (800171c <HAL_RCC_OscConfig+0x4ec>)
 8001640:	2201      	movs	r2, #1
 8001642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001644:	f7ff fb14 	bl	8000c70 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800164c:	f7ff fb10 	bl	8000c70 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e056      	b.n	800170c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800165e:	4b2e      	ldr	r3, [pc, #184]	; (8001718 <HAL_RCC_OscConfig+0x4e8>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d0f0      	beq.n	800164c <HAL_RCC_OscConfig+0x41c>
 800166a:	e04e      	b.n	800170a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166c:	4b2b      	ldr	r3, [pc, #172]	; (800171c <HAL_RCC_OscConfig+0x4ec>)
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001672:	f7ff fafd 	bl	8000c70 <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800167a:	f7ff faf9 	bl	8000c70 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e03f      	b.n	800170c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168c:	4b22      	ldr	r3, [pc, #136]	; (8001718 <HAL_RCC_OscConfig+0x4e8>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1f0      	bne.n	800167a <HAL_RCC_OscConfig+0x44a>
 8001698:	e037      	b.n	800170a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d101      	bne.n	80016a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e032      	b.n	800170c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016a6:	4b1c      	ldr	r3, [pc, #112]	; (8001718 <HAL_RCC_OscConfig+0x4e8>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d028      	beq.n	8001706 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016be:	429a      	cmp	r2, r3
 80016c0:	d121      	bne.n	8001706 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d11a      	bne.n	8001706 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016d0:	68fa      	ldr	r2, [r7, #12]
 80016d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016d6:	4013      	ands	r3, r2
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016dc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016de:	4293      	cmp	r3, r2
 80016e0:	d111      	bne.n	8001706 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ec:	085b      	lsrs	r3, r3, #1
 80016ee:	3b01      	subs	r3, #1
 80016f0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d107      	bne.n	8001706 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001700:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001702:	429a      	cmp	r2, r3
 8001704:	d001      	beq.n	800170a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e000      	b.n	800170c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40007000 	.word	0x40007000
 8001718:	40023800 	.word	0x40023800
 800171c:	42470060 	.word	0x42470060

08001720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d101      	bne.n	8001734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e0cc      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001734:	4b68      	ldr	r3, [pc, #416]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0307 	and.w	r3, r3, #7
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	d90c      	bls.n	800175c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001742:	4b65      	ldr	r3, [pc, #404]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800174a:	4b63      	ldr	r3, [pc, #396]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	429a      	cmp	r2, r3
 8001756:	d001      	beq.n	800175c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e0b8      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d020      	beq.n	80017aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	2b00      	cmp	r3, #0
 8001772:	d005      	beq.n	8001780 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001774:	4b59      	ldr	r3, [pc, #356]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	4a58      	ldr	r2, [pc, #352]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800177e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0308 	and.w	r3, r3, #8
 8001788:	2b00      	cmp	r3, #0
 800178a:	d005      	beq.n	8001798 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800178c:	4b53      	ldr	r3, [pc, #332]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	4a52      	ldr	r2, [pc, #328]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001796:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001798:	4b50      	ldr	r3, [pc, #320]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	494d      	ldr	r1, [pc, #308]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d044      	beq.n	8001840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d107      	bne.n	80017ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017be:	4b47      	ldr	r3, [pc, #284]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d119      	bne.n	80017fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e07f      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d003      	beq.n	80017de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017da:	2b03      	cmp	r3, #3
 80017dc:	d107      	bne.n	80017ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017de:	4b3f      	ldr	r3, [pc, #252]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d109      	bne.n	80017fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e06f      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ee:	4b3b      	ldr	r3, [pc, #236]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e067      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017fe:	4b37      	ldr	r3, [pc, #220]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f023 0203 	bic.w	r2, r3, #3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	4934      	ldr	r1, [pc, #208]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	4313      	orrs	r3, r2
 800180e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001810:	f7ff fa2e 	bl	8000c70 <HAL_GetTick>
 8001814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001816:	e00a      	b.n	800182e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001818:	f7ff fa2a 	bl	8000c70 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	f241 3288 	movw	r2, #5000	; 0x1388
 8001826:	4293      	cmp	r3, r2
 8001828:	d901      	bls.n	800182e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e04f      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182e:	4b2b      	ldr	r3, [pc, #172]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 020c 	and.w	r2, r3, #12
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	429a      	cmp	r2, r3
 800183e:	d1eb      	bne.n	8001818 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001840:	4b25      	ldr	r3, [pc, #148]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	d20c      	bcs.n	8001868 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184e:	4b22      	ldr	r3, [pc, #136]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001856:	4b20      	ldr	r3, [pc, #128]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	429a      	cmp	r2, r3
 8001862:	d001      	beq.n	8001868 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e032      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b00      	cmp	r3, #0
 8001872:	d008      	beq.n	8001886 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001874:	4b19      	ldr	r3, [pc, #100]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	4916      	ldr	r1, [pc, #88]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	4313      	orrs	r3, r2
 8001884:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b00      	cmp	r3, #0
 8001890:	d009      	beq.n	80018a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001892:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	490e      	ldr	r1, [pc, #56]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018a6:	f000 f821 	bl	80018ec <HAL_RCC_GetSysClockFreq>
 80018aa:	4602      	mov	r2, r0
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	091b      	lsrs	r3, r3, #4
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	490a      	ldr	r1, [pc, #40]	; (80018e0 <HAL_RCC_ClockConfig+0x1c0>)
 80018b8:	5ccb      	ldrb	r3, [r1, r3]
 80018ba:	fa22 f303 	lsr.w	r3, r2, r3
 80018be:	4a09      	ldr	r2, [pc, #36]	; (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 80018c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <HAL_RCC_ClockConfig+0x1c8>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff f8e6 	bl	8000a98 <HAL_InitTick>

  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40023c00 	.word	0x40023c00
 80018dc:	40023800 	.word	0x40023800
 80018e0:	080047ac 	.word	0x080047ac
 80018e4:	20000000 	.word	0x20000000
 80018e8:	20000004 	.word	0x20000004

080018ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018f0:	b084      	sub	sp, #16
 80018f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	607b      	str	r3, [r7, #4]
 80018f8:	2300      	movs	r3, #0
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	2300      	movs	r3, #0
 80018fe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001904:	4b67      	ldr	r3, [pc, #412]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f003 030c 	and.w	r3, r3, #12
 800190c:	2b08      	cmp	r3, #8
 800190e:	d00d      	beq.n	800192c <HAL_RCC_GetSysClockFreq+0x40>
 8001910:	2b08      	cmp	r3, #8
 8001912:	f200 80bd 	bhi.w	8001a90 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001916:	2b00      	cmp	r3, #0
 8001918:	d002      	beq.n	8001920 <HAL_RCC_GetSysClockFreq+0x34>
 800191a:	2b04      	cmp	r3, #4
 800191c:	d003      	beq.n	8001926 <HAL_RCC_GetSysClockFreq+0x3a>
 800191e:	e0b7      	b.n	8001a90 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001920:	4b61      	ldr	r3, [pc, #388]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001922:	60bb      	str	r3, [r7, #8]
       break;
 8001924:	e0b7      	b.n	8001a96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001926:	4b61      	ldr	r3, [pc, #388]	; (8001aac <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001928:	60bb      	str	r3, [r7, #8]
      break;
 800192a:	e0b4      	b.n	8001a96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800192c:	4b5d      	ldr	r3, [pc, #372]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001934:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001936:	4b5b      	ldr	r3, [pc, #364]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d04d      	beq.n	80019de <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001942:	4b58      	ldr	r3, [pc, #352]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	099b      	lsrs	r3, r3, #6
 8001948:	461a      	mov	r2, r3
 800194a:	f04f 0300 	mov.w	r3, #0
 800194e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001952:	f04f 0100 	mov.w	r1, #0
 8001956:	ea02 0800 	and.w	r8, r2, r0
 800195a:	ea03 0901 	and.w	r9, r3, r1
 800195e:	4640      	mov	r0, r8
 8001960:	4649      	mov	r1, r9
 8001962:	f04f 0200 	mov.w	r2, #0
 8001966:	f04f 0300 	mov.w	r3, #0
 800196a:	014b      	lsls	r3, r1, #5
 800196c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001970:	0142      	lsls	r2, r0, #5
 8001972:	4610      	mov	r0, r2
 8001974:	4619      	mov	r1, r3
 8001976:	ebb0 0008 	subs.w	r0, r0, r8
 800197a:	eb61 0109 	sbc.w	r1, r1, r9
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	f04f 0300 	mov.w	r3, #0
 8001986:	018b      	lsls	r3, r1, #6
 8001988:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800198c:	0182      	lsls	r2, r0, #6
 800198e:	1a12      	subs	r2, r2, r0
 8001990:	eb63 0301 	sbc.w	r3, r3, r1
 8001994:	f04f 0000 	mov.w	r0, #0
 8001998:	f04f 0100 	mov.w	r1, #0
 800199c:	00d9      	lsls	r1, r3, #3
 800199e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019a2:	00d0      	lsls	r0, r2, #3
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	eb12 0208 	adds.w	r2, r2, r8
 80019ac:	eb43 0309 	adc.w	r3, r3, r9
 80019b0:	f04f 0000 	mov.w	r0, #0
 80019b4:	f04f 0100 	mov.w	r1, #0
 80019b8:	0259      	lsls	r1, r3, #9
 80019ba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80019be:	0250      	lsls	r0, r2, #9
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4610      	mov	r0, r2
 80019c6:	4619      	mov	r1, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	461a      	mov	r2, r3
 80019cc:	f04f 0300 	mov.w	r3, #0
 80019d0:	f7fe fbfe 	bl	80001d0 <__aeabi_uldivmod>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4613      	mov	r3, r2
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	e04a      	b.n	8001a74 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019de:	4b31      	ldr	r3, [pc, #196]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	099b      	lsrs	r3, r3, #6
 80019e4:	461a      	mov	r2, r3
 80019e6:	f04f 0300 	mov.w	r3, #0
 80019ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019ee:	f04f 0100 	mov.w	r1, #0
 80019f2:	ea02 0400 	and.w	r4, r2, r0
 80019f6:	ea03 0501 	and.w	r5, r3, r1
 80019fa:	4620      	mov	r0, r4
 80019fc:	4629      	mov	r1, r5
 80019fe:	f04f 0200 	mov.w	r2, #0
 8001a02:	f04f 0300 	mov.w	r3, #0
 8001a06:	014b      	lsls	r3, r1, #5
 8001a08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a0c:	0142      	lsls	r2, r0, #5
 8001a0e:	4610      	mov	r0, r2
 8001a10:	4619      	mov	r1, r3
 8001a12:	1b00      	subs	r0, r0, r4
 8001a14:	eb61 0105 	sbc.w	r1, r1, r5
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	f04f 0300 	mov.w	r3, #0
 8001a20:	018b      	lsls	r3, r1, #6
 8001a22:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a26:	0182      	lsls	r2, r0, #6
 8001a28:	1a12      	subs	r2, r2, r0
 8001a2a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a2e:	f04f 0000 	mov.w	r0, #0
 8001a32:	f04f 0100 	mov.w	r1, #0
 8001a36:	00d9      	lsls	r1, r3, #3
 8001a38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a3c:	00d0      	lsls	r0, r2, #3
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	1912      	adds	r2, r2, r4
 8001a44:	eb45 0303 	adc.w	r3, r5, r3
 8001a48:	f04f 0000 	mov.w	r0, #0
 8001a4c:	f04f 0100 	mov.w	r1, #0
 8001a50:	0299      	lsls	r1, r3, #10
 8001a52:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a56:	0290      	lsls	r0, r2, #10
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	4619      	mov	r1, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	461a      	mov	r2, r3
 8001a64:	f04f 0300 	mov.w	r3, #0
 8001a68:	f7fe fbb2 	bl	80001d0 <__aeabi_uldivmod>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4613      	mov	r3, r2
 8001a72:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	0c1b      	lsrs	r3, r3, #16
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	3301      	adds	r3, #1
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8c:	60bb      	str	r3, [r7, #8]
      break;
 8001a8e:	e002      	b.n	8001a96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a92:	60bb      	str	r3, [r7, #8]
      break;
 8001a94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a96:	68bb      	ldr	r3, [r7, #8]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	00f42400 	.word	0x00f42400
 8001aac:	007a1200 	.word	0x007a1200

08001ab0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ab4:	4b03      	ldr	r3, [pc, #12]	; (8001ac4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	20000000 	.word	0x20000000

08001ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001acc:	f7ff fff0 	bl	8001ab0 <HAL_RCC_GetHCLKFreq>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	0a9b      	lsrs	r3, r3, #10
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	4903      	ldr	r1, [pc, #12]	; (8001aec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ade:	5ccb      	ldrb	r3, [r1, r3]
 8001ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	080047bc 	.word	0x080047bc

08001af0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	220f      	movs	r2, #15
 8001afe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <HAL_RCC_GetClockConfig+0x5c>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 0203 	and.w	r2, r3, #3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <HAL_RCC_GetClockConfig+0x5c>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <HAL_RCC_GetClockConfig+0x5c>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b24:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <HAL_RCC_GetClockConfig+0x5c>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	08db      	lsrs	r3, r3, #3
 8001b2a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b32:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <HAL_RCC_GetClockConfig+0x60>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0207 	and.w	r2, r3, #7
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	601a      	str	r2, [r3, #0]
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40023c00 	.word	0x40023c00

08001b54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e041      	b.n	8001bea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d106      	bne.n	8001b80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f839 	bl	8001bf2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2202      	movs	r2, #2
 8001b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3304      	adds	r3, #4
 8001b90:	4619      	mov	r1, r3
 8001b92:	4610      	mov	r0, r2
 8001b94:	f000 f9d8 	bl	8001f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d001      	beq.n	8001c20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e04e      	b.n	8001cbe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2202      	movs	r2, #2
 8001c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68da      	ldr	r2, [r3, #12]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f042 0201 	orr.w	r2, r2, #1
 8001c36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a23      	ldr	r2, [pc, #140]	; (8001ccc <HAL_TIM_Base_Start_IT+0xc4>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d022      	beq.n	8001c88 <HAL_TIM_Base_Start_IT+0x80>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c4a:	d01d      	beq.n	8001c88 <HAL_TIM_Base_Start_IT+0x80>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a1f      	ldr	r2, [pc, #124]	; (8001cd0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d018      	beq.n	8001c88 <HAL_TIM_Base_Start_IT+0x80>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a1e      	ldr	r2, [pc, #120]	; (8001cd4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d013      	beq.n	8001c88 <HAL_TIM_Base_Start_IT+0x80>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a1c      	ldr	r2, [pc, #112]	; (8001cd8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d00e      	beq.n	8001c88 <HAL_TIM_Base_Start_IT+0x80>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a1b      	ldr	r2, [pc, #108]	; (8001cdc <HAL_TIM_Base_Start_IT+0xd4>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d009      	beq.n	8001c88 <HAL_TIM_Base_Start_IT+0x80>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a19      	ldr	r2, [pc, #100]	; (8001ce0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d004      	beq.n	8001c88 <HAL_TIM_Base_Start_IT+0x80>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a18      	ldr	r2, [pc, #96]	; (8001ce4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d111      	bne.n	8001cac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2b06      	cmp	r3, #6
 8001c98:	d010      	beq.n	8001cbc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f042 0201 	orr.w	r2, r2, #1
 8001ca8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001caa:	e007      	b.n	8001cbc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f042 0201 	orr.w	r2, r2, #1
 8001cba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	40010000 	.word	0x40010000
 8001cd0:	40000400 	.word	0x40000400
 8001cd4:	40000800 	.word	0x40000800
 8001cd8:	40000c00 	.word	0x40000c00
 8001cdc:	40010400 	.word	0x40010400
 8001ce0:	40014000 	.word	0x40014000
 8001ce4:	40001800 	.word	0x40001800

08001ce8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d122      	bne.n	8001d44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d11b      	bne.n	8001d44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f06f 0202 	mvn.w	r2, #2
 8001d14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f8ee 	bl	8001f0c <HAL_TIM_IC_CaptureCallback>
 8001d30:	e005      	b.n	8001d3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f8e0 	bl	8001ef8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 f8f1 	bl	8001f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	f003 0304 	and.w	r3, r3, #4
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	d122      	bne.n	8001d98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b04      	cmp	r3, #4
 8001d5e:	d11b      	bne.n	8001d98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f06f 0204 	mvn.w	r2, #4
 8001d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2202      	movs	r2, #2
 8001d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f8c4 	bl	8001f0c <HAL_TIM_IC_CaptureCallback>
 8001d84:	e005      	b.n	8001d92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f8b6 	bl	8001ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f8c7 	bl	8001f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	2b08      	cmp	r3, #8
 8001da4:	d122      	bne.n	8001dec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	f003 0308 	and.w	r3, r3, #8
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	d11b      	bne.n	8001dec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f06f 0208 	mvn.w	r2, #8
 8001dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2204      	movs	r2, #4
 8001dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f89a 	bl	8001f0c <HAL_TIM_IC_CaptureCallback>
 8001dd8:	e005      	b.n	8001de6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f88c 	bl	8001ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 f89d 	bl	8001f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	f003 0310 	and.w	r3, r3, #16
 8001df6:	2b10      	cmp	r3, #16
 8001df8:	d122      	bne.n	8001e40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	f003 0310 	and.w	r3, r3, #16
 8001e04:	2b10      	cmp	r3, #16
 8001e06:	d11b      	bne.n	8001e40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f06f 0210 	mvn.w	r2, #16
 8001e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2208      	movs	r2, #8
 8001e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f870 	bl	8001f0c <HAL_TIM_IC_CaptureCallback>
 8001e2c:	e005      	b.n	8001e3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f862 	bl	8001ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 f873 	bl	8001f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d10e      	bne.n	8001e6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d107      	bne.n	8001e6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f06f 0201 	mvn.w	r2, #1
 8001e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7fe fdd6 	bl	8000a18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e76:	2b80      	cmp	r3, #128	; 0x80
 8001e78:	d10e      	bne.n	8001e98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e84:	2b80      	cmp	r3, #128	; 0x80
 8001e86:	d107      	bne.n	8001e98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f902 	bl	800209c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea2:	2b40      	cmp	r3, #64	; 0x40
 8001ea4:	d10e      	bne.n	8001ec4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb0:	2b40      	cmp	r3, #64	; 0x40
 8001eb2:	d107      	bne.n	8001ec4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f838 	bl	8001f34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	f003 0320 	and.w	r3, r3, #32
 8001ece:	2b20      	cmp	r3, #32
 8001ed0:	d10e      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	f003 0320 	and.w	r3, r3, #32
 8001edc:	2b20      	cmp	r3, #32
 8001ede:	d107      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f06f 0220 	mvn.w	r2, #32
 8001ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f8cc 	bl	8002088 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a40      	ldr	r2, [pc, #256]	; (800205c <TIM_Base_SetConfig+0x114>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d013      	beq.n	8001f88 <TIM_Base_SetConfig+0x40>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f66:	d00f      	beq.n	8001f88 <TIM_Base_SetConfig+0x40>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a3d      	ldr	r2, [pc, #244]	; (8002060 <TIM_Base_SetConfig+0x118>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d00b      	beq.n	8001f88 <TIM_Base_SetConfig+0x40>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a3c      	ldr	r2, [pc, #240]	; (8002064 <TIM_Base_SetConfig+0x11c>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d007      	beq.n	8001f88 <TIM_Base_SetConfig+0x40>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a3b      	ldr	r2, [pc, #236]	; (8002068 <TIM_Base_SetConfig+0x120>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d003      	beq.n	8001f88 <TIM_Base_SetConfig+0x40>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a3a      	ldr	r2, [pc, #232]	; (800206c <TIM_Base_SetConfig+0x124>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d108      	bne.n	8001f9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a2f      	ldr	r2, [pc, #188]	; (800205c <TIM_Base_SetConfig+0x114>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d02b      	beq.n	8001ffa <TIM_Base_SetConfig+0xb2>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fa8:	d027      	beq.n	8001ffa <TIM_Base_SetConfig+0xb2>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a2c      	ldr	r2, [pc, #176]	; (8002060 <TIM_Base_SetConfig+0x118>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d023      	beq.n	8001ffa <TIM_Base_SetConfig+0xb2>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a2b      	ldr	r2, [pc, #172]	; (8002064 <TIM_Base_SetConfig+0x11c>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d01f      	beq.n	8001ffa <TIM_Base_SetConfig+0xb2>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a2a      	ldr	r2, [pc, #168]	; (8002068 <TIM_Base_SetConfig+0x120>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d01b      	beq.n	8001ffa <TIM_Base_SetConfig+0xb2>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a29      	ldr	r2, [pc, #164]	; (800206c <TIM_Base_SetConfig+0x124>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d017      	beq.n	8001ffa <TIM_Base_SetConfig+0xb2>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a28      	ldr	r2, [pc, #160]	; (8002070 <TIM_Base_SetConfig+0x128>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d013      	beq.n	8001ffa <TIM_Base_SetConfig+0xb2>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a27      	ldr	r2, [pc, #156]	; (8002074 <TIM_Base_SetConfig+0x12c>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d00f      	beq.n	8001ffa <TIM_Base_SetConfig+0xb2>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a26      	ldr	r2, [pc, #152]	; (8002078 <TIM_Base_SetConfig+0x130>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d00b      	beq.n	8001ffa <TIM_Base_SetConfig+0xb2>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a25      	ldr	r2, [pc, #148]	; (800207c <TIM_Base_SetConfig+0x134>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d007      	beq.n	8001ffa <TIM_Base_SetConfig+0xb2>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a24      	ldr	r2, [pc, #144]	; (8002080 <TIM_Base_SetConfig+0x138>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d003      	beq.n	8001ffa <TIM_Base_SetConfig+0xb2>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a23      	ldr	r2, [pc, #140]	; (8002084 <TIM_Base_SetConfig+0x13c>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d108      	bne.n	800200c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002000:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	4313      	orrs	r3, r2
 800200a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	4313      	orrs	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a0a      	ldr	r2, [pc, #40]	; (800205c <TIM_Base_SetConfig+0x114>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d003      	beq.n	8002040 <TIM_Base_SetConfig+0xf8>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a0c      	ldr	r2, [pc, #48]	; (800206c <TIM_Base_SetConfig+0x124>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d103      	bne.n	8002048 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	615a      	str	r2, [r3, #20]
}
 800204e:	bf00      	nop
 8002050:	3714      	adds	r7, #20
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	40010000 	.word	0x40010000
 8002060:	40000400 	.word	0x40000400
 8002064:	40000800 	.word	0x40000800
 8002068:	40000c00 	.word	0x40000c00
 800206c:	40010400 	.word	0x40010400
 8002070:	40014000 	.word	0x40014000
 8002074:	40014400 	.word	0x40014400
 8002078:	40014800 	.word	0x40014800
 800207c:	40001800 	.word	0x40001800
 8002080:	40001c00 	.word	0x40001c00
 8002084:	40002000 	.word	0x40002000

08002088 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f103 0208 	add.w	r2, r3, #8
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f04f 32ff 	mov.w	r2, #4294967295
 80020c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f103 0208 	add.w	r2, r3, #8
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f103 0208 	add.w	r2, r3, #8
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800210a:	b480      	push	{r7}
 800210c:	b085      	sub	sp, #20
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
 8002112:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	1c5a      	adds	r2, r3, #1
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	601a      	str	r2, [r3, #0]
}
 8002146:	bf00      	nop
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002152:	b480      	push	{r7}
 8002154:	b085      	sub	sp, #20
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
 800215a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002168:	d103      	bne.n	8002172 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	e00c      	b.n	800218c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3308      	adds	r3, #8
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	e002      	b.n	8002180 <vListInsert+0x2e>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	429a      	cmp	r2, r3
 800218a:	d2f6      	bcs.n	800217a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	1c5a      	adds	r2, r3, #1
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	601a      	str	r2, [r3, #0]
}
 80021b8:	bf00      	nop
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6892      	ldr	r2, [r2, #8]
 80021da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	6852      	ldr	r2, [r2, #4]
 80021e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d103      	bne.n	80021f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	1e5a      	subs	r2, r3, #1
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
}
 800220c:	4618      	mov	r0, r3
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10a      	bne.n	8002242 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800222c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002230:	f383 8811 	msr	BASEPRI, r3
 8002234:	f3bf 8f6f 	isb	sy
 8002238:	f3bf 8f4f 	dsb	sy
 800223c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800223e:	bf00      	nop
 8002240:	e7fe      	b.n	8002240 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002242:	f001 ff57 	bl	80040f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224e:	68f9      	ldr	r1, [r7, #12]
 8002250:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002252:	fb01 f303 	mul.w	r3, r1, r3
 8002256:	441a      	add	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002272:	3b01      	subs	r3, #1
 8002274:	68f9      	ldr	r1, [r7, #12]
 8002276:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002278:	fb01 f303 	mul.w	r3, r1, r3
 800227c:	441a      	add	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	22ff      	movs	r2, #255	; 0xff
 8002286:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	22ff      	movs	r2, #255	; 0xff
 800228e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d114      	bne.n	80022c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d01a      	beq.n	80022d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	3310      	adds	r3, #16
 80022a4:	4618      	mov	r0, r3
 80022a6:	f001 f841 	bl	800332c <xTaskRemoveFromEventList>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d012      	beq.n	80022d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80022b0:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <xQueueGenericReset+0xcc>)
 80022b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	f3bf 8f4f 	dsb	sy
 80022bc:	f3bf 8f6f 	isb	sy
 80022c0:	e009      	b.n	80022d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	3310      	adds	r3, #16
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff fef2 	bl	80020b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	3324      	adds	r3, #36	; 0x24
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff feed 	bl	80020b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80022d6:	f001 ff3d 	bl	8004154 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80022da:	2301      	movs	r3, #1
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	e000ed04 	.word	0xe000ed04

080022e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08a      	sub	sp, #40	; 0x28
 80022ec:	af02      	add	r7, sp, #8
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	4613      	mov	r3, r2
 80022f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10a      	bne.n	8002312 <xQueueGenericCreate+0x2a>
	__asm volatile
 80022fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002300:	f383 8811 	msr	BASEPRI, r3
 8002304:	f3bf 8f6f 	isb	sy
 8002308:	f3bf 8f4f 	dsb	sy
 800230c:	613b      	str	r3, [r7, #16]
}
 800230e:	bf00      	nop
 8002310:	e7fe      	b.n	8002310 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d102      	bne.n	800231e <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002318:	2300      	movs	r3, #0
 800231a:	61fb      	str	r3, [r7, #28]
 800231c:	e004      	b.n	8002328 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	68ba      	ldr	r2, [r7, #8]
 8002322:	fb02 f303 	mul.w	r3, r2, r3
 8002326:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	3350      	adds	r3, #80	; 0x50
 800232c:	4618      	mov	r0, r3
 800232e:	f002 f803 	bl	8004338 <pvPortMalloc>
 8002332:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00d      	beq.n	8002356 <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	3350      	adds	r3, #80	; 0x50
 8002342:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002344:	79fa      	ldrb	r2, [r7, #7]
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	4613      	mov	r3, r2
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	68b9      	ldr	r1, [r7, #8]
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 f805 	bl	8002360 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002356:	69bb      	ldr	r3, [r7, #24]
	}
 8002358:	4618      	mov	r0, r3
 800235a:	3720      	adds	r7, #32
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
 800236c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d103      	bne.n	800237c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	e002      	b.n	8002382 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800238e:	2101      	movs	r1, #1
 8002390:	69b8      	ldr	r0, [r7, #24]
 8002392:	f7ff ff41 	bl	8002218 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	78fa      	ldrb	r2, [r7, #3]
 800239a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800239e:	bf00      	nop
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08e      	sub	sp, #56	; 0x38
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
 80023b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80023b6:	2300      	movs	r3, #0
 80023b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80023be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10a      	bne.n	80023da <xQueueGenericSend+0x32>
	__asm volatile
 80023c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c8:	f383 8811 	msr	BASEPRI, r3
 80023cc:	f3bf 8f6f 	isb	sy
 80023d0:	f3bf 8f4f 	dsb	sy
 80023d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80023d6:	bf00      	nop
 80023d8:	e7fe      	b.n	80023d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d103      	bne.n	80023e8 <xQueueGenericSend+0x40>
 80023e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <xQueueGenericSend+0x44>
 80023e8:	2301      	movs	r3, #1
 80023ea:	e000      	b.n	80023ee <xQueueGenericSend+0x46>
 80023ec:	2300      	movs	r3, #0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10a      	bne.n	8002408 <xQueueGenericSend+0x60>
	__asm volatile
 80023f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f6:	f383 8811 	msr	BASEPRI, r3
 80023fa:	f3bf 8f6f 	isb	sy
 80023fe:	f3bf 8f4f 	dsb	sy
 8002402:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002404:	bf00      	nop
 8002406:	e7fe      	b.n	8002406 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	2b02      	cmp	r3, #2
 800240c:	d103      	bne.n	8002416 <xQueueGenericSend+0x6e>
 800240e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002412:	2b01      	cmp	r3, #1
 8002414:	d101      	bne.n	800241a <xQueueGenericSend+0x72>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <xQueueGenericSend+0x74>
 800241a:	2300      	movs	r3, #0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10a      	bne.n	8002436 <xQueueGenericSend+0x8e>
	__asm volatile
 8002420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002424:	f383 8811 	msr	BASEPRI, r3
 8002428:	f3bf 8f6f 	isb	sy
 800242c:	f3bf 8f4f 	dsb	sy
 8002430:	623b      	str	r3, [r7, #32]
}
 8002432:	bf00      	nop
 8002434:	e7fe      	b.n	8002434 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002436:	f001 f915 	bl	8003664 <xTaskGetSchedulerState>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d102      	bne.n	8002446 <xQueueGenericSend+0x9e>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <xQueueGenericSend+0xa2>
 8002446:	2301      	movs	r3, #1
 8002448:	e000      	b.n	800244c <xQueueGenericSend+0xa4>
 800244a:	2300      	movs	r3, #0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10a      	bne.n	8002466 <xQueueGenericSend+0xbe>
	__asm volatile
 8002450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002454:	f383 8811 	msr	BASEPRI, r3
 8002458:	f3bf 8f6f 	isb	sy
 800245c:	f3bf 8f4f 	dsb	sy
 8002460:	61fb      	str	r3, [r7, #28]
}
 8002462:	bf00      	nop
 8002464:	e7fe      	b.n	8002464 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002466:	f001 fe45 	bl	80040f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800246a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800246e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002472:	429a      	cmp	r2, r3
 8002474:	d302      	bcc.n	800247c <xQueueGenericSend+0xd4>
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	2b02      	cmp	r3, #2
 800247a:	d129      	bne.n	80024d0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	68b9      	ldr	r1, [r7, #8]
 8002480:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002482:	f000 fa07 	bl	8002894 <prvCopyDataToQueue>
 8002486:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	2b00      	cmp	r3, #0
 800248e:	d010      	beq.n	80024b2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002492:	3324      	adds	r3, #36	; 0x24
 8002494:	4618      	mov	r0, r3
 8002496:	f000 ff49 	bl	800332c <xTaskRemoveFromEventList>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d013      	beq.n	80024c8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80024a0:	4b3f      	ldr	r3, [pc, #252]	; (80025a0 <xQueueGenericSend+0x1f8>)
 80024a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	f3bf 8f4f 	dsb	sy
 80024ac:	f3bf 8f6f 	isb	sy
 80024b0:	e00a      	b.n	80024c8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80024b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d007      	beq.n	80024c8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80024b8:	4b39      	ldr	r3, [pc, #228]	; (80025a0 <xQueueGenericSend+0x1f8>)
 80024ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	f3bf 8f4f 	dsb	sy
 80024c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80024c8:	f001 fe44 	bl	8004154 <vPortExitCritical>
				return pdPASS;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e063      	b.n	8002598 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d103      	bne.n	80024de <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80024d6:	f001 fe3d 	bl	8004154 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80024da:	2300      	movs	r3, #0
 80024dc:	e05c      	b.n	8002598 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80024de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d106      	bne.n	80024f2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80024e4:	f107 0314 	add.w	r3, r7, #20
 80024e8:	4618      	mov	r0, r3
 80024ea:	f000 ff81 	bl	80033f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80024ee:	2301      	movs	r3, #1
 80024f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80024f2:	f001 fe2f 	bl	8004154 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80024f6:	f000 fcfb 	bl	8002ef0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80024fa:	f001 fdfb 	bl	80040f4 <vPortEnterCritical>
 80024fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002500:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002504:	b25b      	sxtb	r3, r3
 8002506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250a:	d103      	bne.n	8002514 <xQueueGenericSend+0x16c>
 800250c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002516:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800251a:	b25b      	sxtb	r3, r3
 800251c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002520:	d103      	bne.n	800252a <xQueueGenericSend+0x182>
 8002522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800252a:	f001 fe13 	bl	8004154 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800252e:	1d3a      	adds	r2, r7, #4
 8002530:	f107 0314 	add.w	r3, r7, #20
 8002534:	4611      	mov	r1, r2
 8002536:	4618      	mov	r0, r3
 8002538:	f000 ff70 	bl	800341c <xTaskCheckForTimeOut>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d124      	bne.n	800258c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002542:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002544:	f000 fa9e 	bl	8002a84 <prvIsQueueFull>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d018      	beq.n	8002580 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800254e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002550:	3310      	adds	r3, #16
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	4611      	mov	r1, r2
 8002556:	4618      	mov	r0, r3
 8002558:	f000 fe98 	bl	800328c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800255c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800255e:	f000 fa29 	bl	80029b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002562:	f000 fcd3 	bl	8002f0c <xTaskResumeAll>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	f47f af7c 	bne.w	8002466 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800256e:	4b0c      	ldr	r3, [pc, #48]	; (80025a0 <xQueueGenericSend+0x1f8>)
 8002570:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	f3bf 8f4f 	dsb	sy
 800257a:	f3bf 8f6f 	isb	sy
 800257e:	e772      	b.n	8002466 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002580:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002582:	f000 fa17 	bl	80029b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002586:	f000 fcc1 	bl	8002f0c <xTaskResumeAll>
 800258a:	e76c      	b.n	8002466 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800258c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800258e:	f000 fa11 	bl	80029b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002592:	f000 fcbb 	bl	8002f0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002596:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002598:	4618      	mov	r0, r3
 800259a:	3738      	adds	r7, #56	; 0x38
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	e000ed04 	.word	0xe000ed04

080025a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b08e      	sub	sp, #56	; 0x38
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
 80025b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80025b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10a      	bne.n	80025d2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80025bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c0:	f383 8811 	msr	BASEPRI, r3
 80025c4:	f3bf 8f6f 	isb	sy
 80025c8:	f3bf 8f4f 	dsb	sy
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80025ce:	bf00      	nop
 80025d0:	e7fe      	b.n	80025d0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d103      	bne.n	80025e0 <xQueueGenericSendFromISR+0x3c>
 80025d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <xQueueGenericSendFromISR+0x40>
 80025e0:	2301      	movs	r3, #1
 80025e2:	e000      	b.n	80025e6 <xQueueGenericSendFromISR+0x42>
 80025e4:	2300      	movs	r3, #0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10a      	bne.n	8002600 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80025ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ee:	f383 8811 	msr	BASEPRI, r3
 80025f2:	f3bf 8f6f 	isb	sy
 80025f6:	f3bf 8f4f 	dsb	sy
 80025fa:	623b      	str	r3, [r7, #32]
}
 80025fc:	bf00      	nop
 80025fe:	e7fe      	b.n	80025fe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	2b02      	cmp	r3, #2
 8002604:	d103      	bne.n	800260e <xQueueGenericSendFromISR+0x6a>
 8002606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800260a:	2b01      	cmp	r3, #1
 800260c:	d101      	bne.n	8002612 <xQueueGenericSendFromISR+0x6e>
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <xQueueGenericSendFromISR+0x70>
 8002612:	2300      	movs	r3, #0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10a      	bne.n	800262e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800261c:	f383 8811 	msr	BASEPRI, r3
 8002620:	f3bf 8f6f 	isb	sy
 8002624:	f3bf 8f4f 	dsb	sy
 8002628:	61fb      	str	r3, [r7, #28]
}
 800262a:	bf00      	nop
 800262c:	e7fe      	b.n	800262c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800262e:	f001 fe43 	bl	80042b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002632:	f3ef 8211 	mrs	r2, BASEPRI
 8002636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800263a:	f383 8811 	msr	BASEPRI, r3
 800263e:	f3bf 8f6f 	isb	sy
 8002642:	f3bf 8f4f 	dsb	sy
 8002646:	61ba      	str	r2, [r7, #24]
 8002648:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800264a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800264c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800264e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002650:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002656:	429a      	cmp	r2, r3
 8002658:	d302      	bcc.n	8002660 <xQueueGenericSendFromISR+0xbc>
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	2b02      	cmp	r3, #2
 800265e:	d12c      	bne.n	80026ba <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002662:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	68b9      	ldr	r1, [r7, #8]
 800266e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002670:	f000 f910 	bl	8002894 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002674:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800267c:	d112      	bne.n	80026a4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800267e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	2b00      	cmp	r3, #0
 8002684:	d016      	beq.n	80026b4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002688:	3324      	adds	r3, #36	; 0x24
 800268a:	4618      	mov	r0, r3
 800268c:	f000 fe4e 	bl	800332c <xTaskRemoveFromEventList>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00e      	beq.n	80026b4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00b      	beq.n	80026b4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	e007      	b.n	80026b4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80026a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80026a8:	3301      	adds	r3, #1
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	b25a      	sxtb	r2, r3
 80026ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80026b4:	2301      	movs	r3, #1
 80026b6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80026b8:	e001      	b.n	80026be <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	637b      	str	r3, [r7, #52]	; 0x34
 80026be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80026c8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80026ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3738      	adds	r7, #56	; 0x38
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b08c      	sub	sp, #48	; 0x30
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80026e0:	2300      	movs	r3, #0
 80026e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80026e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10a      	bne.n	8002704 <xQueueReceive+0x30>
	__asm volatile
 80026ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f2:	f383 8811 	msr	BASEPRI, r3
 80026f6:	f3bf 8f6f 	isb	sy
 80026fa:	f3bf 8f4f 	dsb	sy
 80026fe:	623b      	str	r3, [r7, #32]
}
 8002700:	bf00      	nop
 8002702:	e7fe      	b.n	8002702 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d103      	bne.n	8002712 <xQueueReceive+0x3e>
 800270a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <xQueueReceive+0x42>
 8002712:	2301      	movs	r3, #1
 8002714:	e000      	b.n	8002718 <xQueueReceive+0x44>
 8002716:	2300      	movs	r3, #0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10a      	bne.n	8002732 <xQueueReceive+0x5e>
	__asm volatile
 800271c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002720:	f383 8811 	msr	BASEPRI, r3
 8002724:	f3bf 8f6f 	isb	sy
 8002728:	f3bf 8f4f 	dsb	sy
 800272c:	61fb      	str	r3, [r7, #28]
}
 800272e:	bf00      	nop
 8002730:	e7fe      	b.n	8002730 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002732:	f000 ff97 	bl	8003664 <xTaskGetSchedulerState>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d102      	bne.n	8002742 <xQueueReceive+0x6e>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <xQueueReceive+0x72>
 8002742:	2301      	movs	r3, #1
 8002744:	e000      	b.n	8002748 <xQueueReceive+0x74>
 8002746:	2300      	movs	r3, #0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10a      	bne.n	8002762 <xQueueReceive+0x8e>
	__asm volatile
 800274c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002750:	f383 8811 	msr	BASEPRI, r3
 8002754:	f3bf 8f6f 	isb	sy
 8002758:	f3bf 8f4f 	dsb	sy
 800275c:	61bb      	str	r3, [r7, #24]
}
 800275e:	bf00      	nop
 8002760:	e7fe      	b.n	8002760 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002762:	f001 fcc7 	bl	80040f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	2b00      	cmp	r3, #0
 8002770:	d01f      	beq.n	80027b2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002772:	68b9      	ldr	r1, [r7, #8]
 8002774:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002776:	f000 f8f7 	bl	8002968 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	1e5a      	subs	r2, r3, #1
 800277e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002780:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00f      	beq.n	80027aa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800278a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278c:	3310      	adds	r3, #16
 800278e:	4618      	mov	r0, r3
 8002790:	f000 fdcc 	bl	800332c <xTaskRemoveFromEventList>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d007      	beq.n	80027aa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800279a:	4b3d      	ldr	r3, [pc, #244]	; (8002890 <xQueueReceive+0x1bc>)
 800279c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	f3bf 8f4f 	dsb	sy
 80027a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80027aa:	f001 fcd3 	bl	8004154 <vPortExitCritical>
				return pdPASS;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e069      	b.n	8002886 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d103      	bne.n	80027c0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80027b8:	f001 fccc 	bl	8004154 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80027bc:	2300      	movs	r3, #0
 80027be:	e062      	b.n	8002886 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80027c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80027c6:	f107 0310 	add.w	r3, r7, #16
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 fe10 	bl	80033f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80027d0:	2301      	movs	r3, #1
 80027d2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80027d4:	f001 fcbe 	bl	8004154 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80027d8:	f000 fb8a 	bl	8002ef0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80027dc:	f001 fc8a 	bl	80040f4 <vPortEnterCritical>
 80027e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027e6:	b25b      	sxtb	r3, r3
 80027e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ec:	d103      	bne.n	80027f6 <xQueueReceive+0x122>
 80027ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027fc:	b25b      	sxtb	r3, r3
 80027fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002802:	d103      	bne.n	800280c <xQueueReceive+0x138>
 8002804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800280c:	f001 fca2 	bl	8004154 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002810:	1d3a      	adds	r2, r7, #4
 8002812:	f107 0310 	add.w	r3, r7, #16
 8002816:	4611      	mov	r1, r2
 8002818:	4618      	mov	r0, r3
 800281a:	f000 fdff 	bl	800341c <xTaskCheckForTimeOut>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d123      	bne.n	800286c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002824:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002826:	f000 f917 	bl	8002a58 <prvIsQueueEmpty>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d017      	beq.n	8002860 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002832:	3324      	adds	r3, #36	; 0x24
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	4611      	mov	r1, r2
 8002838:	4618      	mov	r0, r3
 800283a:	f000 fd27 	bl	800328c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800283e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002840:	f000 f8b8 	bl	80029b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002844:	f000 fb62 	bl	8002f0c <xTaskResumeAll>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d189      	bne.n	8002762 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800284e:	4b10      	ldr	r3, [pc, #64]	; (8002890 <xQueueReceive+0x1bc>)
 8002850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	f3bf 8f4f 	dsb	sy
 800285a:	f3bf 8f6f 	isb	sy
 800285e:	e780      	b.n	8002762 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002860:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002862:	f000 f8a7 	bl	80029b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002866:	f000 fb51 	bl	8002f0c <xTaskResumeAll>
 800286a:	e77a      	b.n	8002762 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800286c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800286e:	f000 f8a1 	bl	80029b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002872:	f000 fb4b 	bl	8002f0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002876:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002878:	f000 f8ee 	bl	8002a58 <prvIsQueueEmpty>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	f43f af6f 	beq.w	8002762 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002884:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002886:	4618      	mov	r0, r3
 8002888:	3730      	adds	r7, #48	; 0x30
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	e000ed04 	.word	0xe000ed04

08002894 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10d      	bne.n	80028ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d14d      	bne.n	8002956 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 feee 	bl	80036a0 <xTaskPriorityDisinherit>
 80028c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	e043      	b.n	8002956 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d119      	bne.n	8002908 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6858      	ldr	r0, [r3, #4]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	461a      	mov	r2, r3
 80028de:	68b9      	ldr	r1, [r7, #8]
 80028e0:	f001 ff28 	bl	8004734 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	441a      	add	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d32b      	bcc.n	8002956 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	e026      	b.n	8002956 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	68d8      	ldr	r0, [r3, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	461a      	mov	r2, r3
 8002912:	68b9      	ldr	r1, [r7, #8]
 8002914:	f001 ff0e 	bl	8004734 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	68da      	ldr	r2, [r3, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	425b      	negs	r3, r3
 8002922:	441a      	add	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	68da      	ldr	r2, [r3, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d207      	bcs.n	8002944 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	425b      	negs	r3, r3
 800293e:	441a      	add	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d105      	bne.n	8002956 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d002      	beq.n	8002956 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	3b01      	subs	r3, #1
 8002954:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800295e:	697b      	ldr	r3, [r7, #20]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	2b00      	cmp	r3, #0
 8002978:	d018      	beq.n	80029ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68da      	ldr	r2, [r3, #12]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	441a      	add	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68da      	ldr	r2, [r3, #12]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	429a      	cmp	r2, r3
 8002992:	d303      	bcc.n	800299c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68d9      	ldr	r1, [r3, #12]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	461a      	mov	r2, r3
 80029a6:	6838      	ldr	r0, [r7, #0]
 80029a8:	f001 fec4 	bl	8004734 <memcpy>
	}
}
 80029ac:	bf00      	nop
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80029bc:	f001 fb9a 	bl	80040f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80029c8:	e011      	b.n	80029ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d012      	beq.n	80029f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	3324      	adds	r3, #36	; 0x24
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 fca8 	bl	800332c <xTaskRemoveFromEventList>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80029e2:	f000 fd7d 	bl	80034e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80029ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	dce9      	bgt.n	80029ca <prvUnlockQueue+0x16>
 80029f6:	e000      	b.n	80029fa <prvUnlockQueue+0x46>
					break;
 80029f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	22ff      	movs	r2, #255	; 0xff
 80029fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002a02:	f001 fba7 	bl	8004154 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002a06:	f001 fb75 	bl	80040f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a12:	e011      	b.n	8002a38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d012      	beq.n	8002a42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3310      	adds	r3, #16
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 fc83 	bl	800332c <xTaskRemoveFromEventList>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002a2c:	f000 fd58 	bl	80034e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002a30:	7bbb      	ldrb	r3, [r7, #14]
 8002a32:	3b01      	subs	r3, #1
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	dce9      	bgt.n	8002a14 <prvUnlockQueue+0x60>
 8002a40:	e000      	b.n	8002a44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002a42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	22ff      	movs	r2, #255	; 0xff
 8002a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002a4c:	f001 fb82 	bl	8004154 <vPortExitCritical>
}
 8002a50:	bf00      	nop
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a60:	f001 fb48 	bl	80040f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d102      	bne.n	8002a72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	e001      	b.n	8002a76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002a72:	2300      	movs	r3, #0
 8002a74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002a76:	f001 fb6d 	bl	8004154 <vPortExitCritical>

	return xReturn;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a8c:	f001 fb32 	bl	80040f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d102      	bne.n	8002aa2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	e001      	b.n	8002aa6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002aa6:	f001 fb55 	bl	8004154 <vPortExitCritical>

	return xReturn;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	e014      	b.n	8002aee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002ac4:	4a0f      	ldr	r2, [pc, #60]	; (8002b04 <vQueueAddToRegistry+0x50>)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10b      	bne.n	8002ae8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002ad0:	490c      	ldr	r1, [pc, #48]	; (8002b04 <vQueueAddToRegistry+0x50>)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002ada:	4a0a      	ldr	r2, [pc, #40]	; (8002b04 <vQueueAddToRegistry+0x50>)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002ae6:	e006      	b.n	8002af6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	3301      	adds	r3, #1
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2b07      	cmp	r3, #7
 8002af2:	d9e7      	bls.n	8002ac4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002af4:	bf00      	nop
 8002af6:	bf00      	nop
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	20012ddc 	.word	0x20012ddc

08002b08 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002b18:	f001 faec 	bl	80040f4 <vPortEnterCritical>
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b22:	b25b      	sxtb	r3, r3
 8002b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b28:	d103      	bne.n	8002b32 <vQueueWaitForMessageRestricted+0x2a>
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b38:	b25b      	sxtb	r3, r3
 8002b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3e:	d103      	bne.n	8002b48 <vQueueWaitForMessageRestricted+0x40>
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b48:	f001 fb04 	bl	8004154 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d106      	bne.n	8002b62 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	3324      	adds	r3, #36	; 0x24
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	68b9      	ldr	r1, [r7, #8]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f000 fbb9 	bl	80032d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002b62:	6978      	ldr	r0, [r7, #20]
 8002b64:	f7ff ff26 	bl	80029b4 <prvUnlockQueue>
	}
 8002b68:	bf00      	nop
 8002b6a:	3718      	adds	r7, #24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b08c      	sub	sp, #48	; 0x30
 8002b74:	af04      	add	r7, sp, #16
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	603b      	str	r3, [r7, #0]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002b80:	88fb      	ldrh	r3, [r7, #6]
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4618      	mov	r0, r3
 8002b86:	f001 fbd7 	bl	8004338 <pvPortMalloc>
 8002b8a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00e      	beq.n	8002bb0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002b92:	2058      	movs	r0, #88	; 0x58
 8002b94:	f001 fbd0 	bl	8004338 <pvPortMalloc>
 8002b98:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	631a      	str	r2, [r3, #48]	; 0x30
 8002ba6:	e005      	b.n	8002bb4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002ba8:	6978      	ldr	r0, [r7, #20]
 8002baa:	f001 fc89 	bl	80044c0 <vPortFree>
 8002bae:	e001      	b.n	8002bb4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d013      	beq.n	8002be2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002bba:	88fa      	ldrh	r2, [r7, #6]
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	9303      	str	r3, [sp, #12]
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	9302      	str	r3, [sp, #8]
 8002bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc6:	9301      	str	r3, [sp, #4]
 8002bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	68b9      	ldr	r1, [r7, #8]
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 f80e 	bl	8002bf2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002bd6:	69f8      	ldr	r0, [r7, #28]
 8002bd8:	f000 f89a 	bl	8002d10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	61bb      	str	r3, [r7, #24]
 8002be0:	e002      	b.n	8002be8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002be2:	f04f 33ff 	mov.w	r3, #4294967295
 8002be6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002be8:	69bb      	ldr	r3, [r7, #24]
	}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3720      	adds	r7, #32
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b088      	sub	sp, #32
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	60f8      	str	r0, [r7, #12]
 8002bfa:	60b9      	str	r1, [r7, #8]
 8002bfc:	607a      	str	r2, [r7, #4]
 8002bfe:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c02:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	461a      	mov	r2, r3
 8002c0a:	21a5      	movs	r1, #165	; 0xa5
 8002c0c:	f001 fda0 	bl	8004750 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	f023 0307 	bic.w	r3, r3, #7
 8002c28:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00a      	beq.n	8002c4a <prvInitialiseNewTask+0x58>
	__asm volatile
 8002c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c38:	f383 8811 	msr	BASEPRI, r3
 8002c3c:	f3bf 8f6f 	isb	sy
 8002c40:	f3bf 8f4f 	dsb	sy
 8002c44:	617b      	str	r3, [r7, #20]
}
 8002c46:	bf00      	nop
 8002c48:	e7fe      	b.n	8002c48 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d01f      	beq.n	8002c90 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c50:	2300      	movs	r3, #0
 8002c52:	61fb      	str	r3, [r7, #28]
 8002c54:	e012      	b.n	8002c7c <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	7819      	ldrb	r1, [r3, #0]
 8002c5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	4413      	add	r3, r2
 8002c64:	3334      	adds	r3, #52	; 0x34
 8002c66:	460a      	mov	r2, r1
 8002c68:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	4413      	add	r3, r2
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d006      	beq.n	8002c84 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	61fb      	str	r3, [r7, #28]
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	2b09      	cmp	r3, #9
 8002c80:	d9e9      	bls.n	8002c56 <prvInitialiseNewTask+0x64>
 8002c82:	e000      	b.n	8002c86 <prvInitialiseNewTask+0x94>
			{
				break;
 8002c84:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002c8e:	e003      	b.n	8002c98 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9a:	2b04      	cmp	r3, #4
 8002c9c:	d901      	bls.n	8002ca2 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c9e:	2304      	movs	r3, #4
 8002ca0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ca6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002caa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cac:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8002cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb6:	3304      	adds	r3, #4
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff fa19 	bl	80020f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc0:	3318      	adds	r3, #24
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff fa14 	bl	80020f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ccc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd0:	f1c3 0205 	rsb	r2, r3, #5
 8002cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cdc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	68f9      	ldr	r1, [r7, #12]
 8002cf0:	69b8      	ldr	r0, [r7, #24]
 8002cf2:	f001 f8d3 	bl	8003e9c <pxPortInitialiseStack>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d06:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d08:	bf00      	nop
 8002d0a:	3720      	adds	r7, #32
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002d18:	f001 f9ec 	bl	80040f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002d1c:	4b2c      	ldr	r3, [pc, #176]	; (8002dd0 <prvAddNewTaskToReadyList+0xc0>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	3301      	adds	r3, #1
 8002d22:	4a2b      	ldr	r2, [pc, #172]	; (8002dd0 <prvAddNewTaskToReadyList+0xc0>)
 8002d24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002d26:	4b2b      	ldr	r3, [pc, #172]	; (8002dd4 <prvAddNewTaskToReadyList+0xc4>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d109      	bne.n	8002d42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002d2e:	4a29      	ldr	r2, [pc, #164]	; (8002dd4 <prvAddNewTaskToReadyList+0xc4>)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002d34:	4b26      	ldr	r3, [pc, #152]	; (8002dd0 <prvAddNewTaskToReadyList+0xc0>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d110      	bne.n	8002d5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002d3c:	f000 fbf4 	bl	8003528 <prvInitialiseTaskLists>
 8002d40:	e00d      	b.n	8002d5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002d42:	4b25      	ldr	r3, [pc, #148]	; (8002dd8 <prvAddNewTaskToReadyList+0xc8>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d109      	bne.n	8002d5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002d4a:	4b22      	ldr	r3, [pc, #136]	; (8002dd4 <prvAddNewTaskToReadyList+0xc4>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d802      	bhi.n	8002d5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002d58:	4a1e      	ldr	r2, [pc, #120]	; (8002dd4 <prvAddNewTaskToReadyList+0xc4>)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002d5e:	4b1f      	ldr	r3, [pc, #124]	; (8002ddc <prvAddNewTaskToReadyList+0xcc>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	3301      	adds	r3, #1
 8002d64:	4a1d      	ldr	r2, [pc, #116]	; (8002ddc <prvAddNewTaskToReadyList+0xcc>)
 8002d66:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002d68:	4b1c      	ldr	r3, [pc, #112]	; (8002ddc <prvAddNewTaskToReadyList+0xcc>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d74:	2201      	movs	r2, #1
 8002d76:	409a      	lsls	r2, r3
 8002d78:	4b19      	ldr	r3, [pc, #100]	; (8002de0 <prvAddNewTaskToReadyList+0xd0>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	4a18      	ldr	r2, [pc, #96]	; (8002de0 <prvAddNewTaskToReadyList+0xd0>)
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d86:	4613      	mov	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4a15      	ldr	r2, [pc, #84]	; (8002de4 <prvAddNewTaskToReadyList+0xd4>)
 8002d90:	441a      	add	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	3304      	adds	r3, #4
 8002d96:	4619      	mov	r1, r3
 8002d98:	4610      	mov	r0, r2
 8002d9a:	f7ff f9b6 	bl	800210a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002d9e:	f001 f9d9 	bl	8004154 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002da2:	4b0d      	ldr	r3, [pc, #52]	; (8002dd8 <prvAddNewTaskToReadyList+0xc8>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00e      	beq.n	8002dc8 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002daa:	4b0a      	ldr	r3, [pc, #40]	; (8002dd4 <prvAddNewTaskToReadyList+0xc4>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d207      	bcs.n	8002dc8 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002db8:	4b0b      	ldr	r3, [pc, #44]	; (8002de8 <prvAddNewTaskToReadyList+0xd8>)
 8002dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	f3bf 8f4f 	dsb	sy
 8002dc4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002dc8:	bf00      	nop
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	20000108 	.word	0x20000108
 8002dd4:	20000030 	.word	0x20000030
 8002dd8:	20000114 	.word	0x20000114
 8002ddc:	20000124 	.word	0x20000124
 8002de0:	20000110 	.word	0x20000110
 8002de4:	20000034 	.word	0x20000034
 8002de8:	e000ed04 	.word	0xe000ed04

08002dec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002df4:	2300      	movs	r3, #0
 8002df6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d017      	beq.n	8002e2e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002dfe:	4b13      	ldr	r3, [pc, #76]	; (8002e4c <vTaskDelay+0x60>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00a      	beq.n	8002e1c <vTaskDelay+0x30>
	__asm volatile
 8002e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0a:	f383 8811 	msr	BASEPRI, r3
 8002e0e:	f3bf 8f6f 	isb	sy
 8002e12:	f3bf 8f4f 	dsb	sy
 8002e16:	60bb      	str	r3, [r7, #8]
}
 8002e18:	bf00      	nop
 8002e1a:	e7fe      	b.n	8002e1a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002e1c:	f000 f868 	bl	8002ef0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002e20:	2100      	movs	r1, #0
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 fcc2 	bl	80037ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002e28:	f000 f870 	bl	8002f0c <xTaskResumeAll>
 8002e2c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d107      	bne.n	8002e44 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002e34:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <vTaskDelay+0x64>)
 8002e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002e44:	bf00      	nop
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	20000130 	.word	0x20000130
 8002e50:	e000ed04 	.word	0xe000ed04

08002e54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8002e5a:	4b1f      	ldr	r3, [pc, #124]	; (8002ed8 <vTaskStartScheduler+0x84>)
 8002e5c:	9301      	str	r3, [sp, #4]
 8002e5e:	2300      	movs	r3, #0
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	2300      	movs	r3, #0
 8002e64:	2282      	movs	r2, #130	; 0x82
 8002e66:	491d      	ldr	r1, [pc, #116]	; (8002edc <vTaskStartScheduler+0x88>)
 8002e68:	481d      	ldr	r0, [pc, #116]	; (8002ee0 <vTaskStartScheduler+0x8c>)
 8002e6a:	f7ff fe81 	bl	8002b70 <xTaskCreate>
 8002e6e:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d102      	bne.n	8002e7c <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8002e76:	f000 fcff 	bl	8003878 <xTimerCreateTimerTask>
 8002e7a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d116      	bne.n	8002eb0 <vTaskStartScheduler+0x5c>
	__asm volatile
 8002e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e86:	f383 8811 	msr	BASEPRI, r3
 8002e8a:	f3bf 8f6f 	isb	sy
 8002e8e:	f3bf 8f4f 	dsb	sy
 8002e92:	60bb      	str	r3, [r7, #8]
}
 8002e94:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002e96:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <vTaskStartScheduler+0x90>)
 8002e98:	f04f 32ff 	mov.w	r2, #4294967295
 8002e9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002e9e:	4b12      	ldr	r3, [pc, #72]	; (8002ee8 <vTaskStartScheduler+0x94>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002ea4:	4b11      	ldr	r3, [pc, #68]	; (8002eec <vTaskStartScheduler+0x98>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002eaa:	f001 f881 	bl	8003fb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002eae:	e00e      	b.n	8002ece <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb6:	d10a      	bne.n	8002ece <vTaskStartScheduler+0x7a>
	__asm volatile
 8002eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ebc:	f383 8811 	msr	BASEPRI, r3
 8002ec0:	f3bf 8f6f 	isb	sy
 8002ec4:	f3bf 8f4f 	dsb	sy
 8002ec8:	607b      	str	r3, [r7, #4]
}
 8002eca:	bf00      	nop
 8002ecc:	e7fe      	b.n	8002ecc <vTaskStartScheduler+0x78>
}
 8002ece:	bf00      	nop
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	2000012c 	.word	0x2000012c
 8002edc:	08004794 	.word	0x08004794
 8002ee0:	080034f9 	.word	0x080034f9
 8002ee4:	20000128 	.word	0x20000128
 8002ee8:	20000114 	.word	0x20000114
 8002eec:	2000010c 	.word	0x2000010c

08002ef0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002ef4:	4b04      	ldr	r3, [pc, #16]	; (8002f08 <vTaskSuspendAll+0x18>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	4a03      	ldr	r2, [pc, #12]	; (8002f08 <vTaskSuspendAll+0x18>)
 8002efc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8002efe:	bf00      	nop
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	20000130 	.word	0x20000130

08002f0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002f12:	2300      	movs	r3, #0
 8002f14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002f16:	2300      	movs	r3, #0
 8002f18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002f1a:	4b41      	ldr	r3, [pc, #260]	; (8003020 <xTaskResumeAll+0x114>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10a      	bne.n	8002f38 <xTaskResumeAll+0x2c>
	__asm volatile
 8002f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f26:	f383 8811 	msr	BASEPRI, r3
 8002f2a:	f3bf 8f6f 	isb	sy
 8002f2e:	f3bf 8f4f 	dsb	sy
 8002f32:	603b      	str	r3, [r7, #0]
}
 8002f34:	bf00      	nop
 8002f36:	e7fe      	b.n	8002f36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002f38:	f001 f8dc 	bl	80040f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002f3c:	4b38      	ldr	r3, [pc, #224]	; (8003020 <xTaskResumeAll+0x114>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	3b01      	subs	r3, #1
 8002f42:	4a37      	ldr	r2, [pc, #220]	; (8003020 <xTaskResumeAll+0x114>)
 8002f44:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f46:	4b36      	ldr	r3, [pc, #216]	; (8003020 <xTaskResumeAll+0x114>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d161      	bne.n	8003012 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002f4e:	4b35      	ldr	r3, [pc, #212]	; (8003024 <xTaskResumeAll+0x118>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d05d      	beq.n	8003012 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f56:	e02e      	b.n	8002fb6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f58:	4b33      	ldr	r3, [pc, #204]	; (8003028 <xTaskResumeAll+0x11c>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	3318      	adds	r3, #24
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff f92d 	bl	80021c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	3304      	adds	r3, #4
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff f928 	bl	80021c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f78:	2201      	movs	r2, #1
 8002f7a:	409a      	lsls	r2, r3
 8002f7c:	4b2b      	ldr	r3, [pc, #172]	; (800302c <xTaskResumeAll+0x120>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	4a2a      	ldr	r2, [pc, #168]	; (800302c <xTaskResumeAll+0x120>)
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4a27      	ldr	r2, [pc, #156]	; (8003030 <xTaskResumeAll+0x124>)
 8002f94:	441a      	add	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	3304      	adds	r3, #4
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	4610      	mov	r0, r2
 8002f9e:	f7ff f8b4 	bl	800210a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa6:	4b23      	ldr	r3, [pc, #140]	; (8003034 <xTaskResumeAll+0x128>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d302      	bcc.n	8002fb6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002fb0:	4b21      	ldr	r3, [pc, #132]	; (8003038 <xTaskResumeAll+0x12c>)
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fb6:	4b1c      	ldr	r3, [pc, #112]	; (8003028 <xTaskResumeAll+0x11c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1cc      	bne.n	8002f58 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002fc4:	f000 fb2e 	bl	8003624 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002fc8:	4b1c      	ldr	r3, [pc, #112]	; (800303c <xTaskResumeAll+0x130>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d010      	beq.n	8002ff6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002fd4:	f000 f846 	bl	8003064 <xTaskIncrementTick>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d002      	beq.n	8002fe4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002fde:	4b16      	ldr	r3, [pc, #88]	; (8003038 <xTaskResumeAll+0x12c>)
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1f1      	bne.n	8002fd4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002ff0:	4b12      	ldr	r3, [pc, #72]	; (800303c <xTaskResumeAll+0x130>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002ff6:	4b10      	ldr	r3, [pc, #64]	; (8003038 <xTaskResumeAll+0x12c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d009      	beq.n	8003012 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002ffe:	2301      	movs	r3, #1
 8003000:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003002:	4b0f      	ldr	r3, [pc, #60]	; (8003040 <xTaskResumeAll+0x134>)
 8003004:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	f3bf 8f4f 	dsb	sy
 800300e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003012:	f001 f89f 	bl	8004154 <vPortExitCritical>

	return xAlreadyYielded;
 8003016:	68bb      	ldr	r3, [r7, #8]
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	20000130 	.word	0x20000130
 8003024:	20000108 	.word	0x20000108
 8003028:	200000c8 	.word	0x200000c8
 800302c:	20000110 	.word	0x20000110
 8003030:	20000034 	.word	0x20000034
 8003034:	20000030 	.word	0x20000030
 8003038:	2000011c 	.word	0x2000011c
 800303c:	20000118 	.word	0x20000118
 8003040:	e000ed04 	.word	0xe000ed04

08003044 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800304a:	4b05      	ldr	r3, [pc, #20]	; (8003060 <xTaskGetTickCount+0x1c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003050:	687b      	ldr	r3, [r7, #4]
}
 8003052:	4618      	mov	r0, r3
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	2000010c 	.word	0x2000010c

08003064 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800306a:	2300      	movs	r3, #0
 800306c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800306e:	4b4e      	ldr	r3, [pc, #312]	; (80031a8 <xTaskIncrementTick+0x144>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	f040 8088 	bne.w	8003188 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003078:	4b4c      	ldr	r3, [pc, #304]	; (80031ac <xTaskIncrementTick+0x148>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	3301      	adds	r3, #1
 800307e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003080:	4a4a      	ldr	r2, [pc, #296]	; (80031ac <xTaskIncrementTick+0x148>)
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d120      	bne.n	80030ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800308c:	4b48      	ldr	r3, [pc, #288]	; (80031b0 <xTaskIncrementTick+0x14c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00a      	beq.n	80030ac <xTaskIncrementTick+0x48>
	__asm volatile
 8003096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309a:	f383 8811 	msr	BASEPRI, r3
 800309e:	f3bf 8f6f 	isb	sy
 80030a2:	f3bf 8f4f 	dsb	sy
 80030a6:	603b      	str	r3, [r7, #0]
}
 80030a8:	bf00      	nop
 80030aa:	e7fe      	b.n	80030aa <xTaskIncrementTick+0x46>
 80030ac:	4b40      	ldr	r3, [pc, #256]	; (80031b0 <xTaskIncrementTick+0x14c>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	60fb      	str	r3, [r7, #12]
 80030b2:	4b40      	ldr	r3, [pc, #256]	; (80031b4 <xTaskIncrementTick+0x150>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a3e      	ldr	r2, [pc, #248]	; (80031b0 <xTaskIncrementTick+0x14c>)
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	4a3e      	ldr	r2, [pc, #248]	; (80031b4 <xTaskIncrementTick+0x150>)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6013      	str	r3, [r2, #0]
 80030c0:	4b3d      	ldr	r3, [pc, #244]	; (80031b8 <xTaskIncrementTick+0x154>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	3301      	adds	r3, #1
 80030c6:	4a3c      	ldr	r2, [pc, #240]	; (80031b8 <xTaskIncrementTick+0x154>)
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	f000 faab 	bl	8003624 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80030ce:	4b3b      	ldr	r3, [pc, #236]	; (80031bc <xTaskIncrementTick+0x158>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d348      	bcc.n	800316a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030d8:	4b35      	ldr	r3, [pc, #212]	; (80031b0 <xTaskIncrementTick+0x14c>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d104      	bne.n	80030ec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030e2:	4b36      	ldr	r3, [pc, #216]	; (80031bc <xTaskIncrementTick+0x158>)
 80030e4:	f04f 32ff 	mov.w	r2, #4294967295
 80030e8:	601a      	str	r2, [r3, #0]
					break;
 80030ea:	e03e      	b.n	800316a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030ec:	4b30      	ldr	r3, [pc, #192]	; (80031b0 <xTaskIncrementTick+0x14c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	429a      	cmp	r2, r3
 8003102:	d203      	bcs.n	800310c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003104:	4a2d      	ldr	r2, [pc, #180]	; (80031bc <xTaskIncrementTick+0x158>)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800310a:	e02e      	b.n	800316a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	3304      	adds	r3, #4
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff f857 	bl	80021c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311a:	2b00      	cmp	r3, #0
 800311c:	d004      	beq.n	8003128 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	3318      	adds	r3, #24
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff f84e 	bl	80021c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312c:	2201      	movs	r2, #1
 800312e:	409a      	lsls	r2, r3
 8003130:	4b23      	ldr	r3, [pc, #140]	; (80031c0 <xTaskIncrementTick+0x15c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4313      	orrs	r3, r2
 8003136:	4a22      	ldr	r2, [pc, #136]	; (80031c0 <xTaskIncrementTick+0x15c>)
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800313e:	4613      	mov	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4a1f      	ldr	r2, [pc, #124]	; (80031c4 <xTaskIncrementTick+0x160>)
 8003148:	441a      	add	r2, r3
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	3304      	adds	r3, #4
 800314e:	4619      	mov	r1, r3
 8003150:	4610      	mov	r0, r2
 8003152:	f7fe ffda 	bl	800210a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800315a:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <xTaskIncrementTick+0x164>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003160:	429a      	cmp	r2, r3
 8003162:	d3b9      	bcc.n	80030d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003164:	2301      	movs	r3, #1
 8003166:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003168:	e7b6      	b.n	80030d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800316a:	4b17      	ldr	r3, [pc, #92]	; (80031c8 <xTaskIncrementTick+0x164>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003170:	4914      	ldr	r1, [pc, #80]	; (80031c4 <xTaskIncrementTick+0x160>)
 8003172:	4613      	mov	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d907      	bls.n	8003192 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8003182:	2301      	movs	r3, #1
 8003184:	617b      	str	r3, [r7, #20]
 8003186:	e004      	b.n	8003192 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003188:	4b10      	ldr	r3, [pc, #64]	; (80031cc <xTaskIncrementTick+0x168>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	3301      	adds	r3, #1
 800318e:	4a0f      	ldr	r2, [pc, #60]	; (80031cc <xTaskIncrementTick+0x168>)
 8003190:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003192:	4b0f      	ldr	r3, [pc, #60]	; (80031d0 <xTaskIncrementTick+0x16c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800319a:	2301      	movs	r3, #1
 800319c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800319e:	697b      	ldr	r3, [r7, #20]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3718      	adds	r7, #24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	20000130 	.word	0x20000130
 80031ac:	2000010c 	.word	0x2000010c
 80031b0:	200000c0 	.word	0x200000c0
 80031b4:	200000c4 	.word	0x200000c4
 80031b8:	20000120 	.word	0x20000120
 80031bc:	20000128 	.word	0x20000128
 80031c0:	20000110 	.word	0x20000110
 80031c4:	20000034 	.word	0x20000034
 80031c8:	20000030 	.word	0x20000030
 80031cc:	20000118 	.word	0x20000118
 80031d0:	2000011c 	.word	0x2000011c

080031d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80031d4:	b480      	push	{r7}
 80031d6:	b087      	sub	sp, #28
 80031d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80031da:	4b27      	ldr	r3, [pc, #156]	; (8003278 <vTaskSwitchContext+0xa4>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80031e2:	4b26      	ldr	r3, [pc, #152]	; (800327c <vTaskSwitchContext+0xa8>)
 80031e4:	2201      	movs	r2, #1
 80031e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80031e8:	e03f      	b.n	800326a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80031ea:	4b24      	ldr	r3, [pc, #144]	; (800327c <vTaskSwitchContext+0xa8>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031f0:	4b23      	ldr	r3, [pc, #140]	; (8003280 <vTaskSwitchContext+0xac>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	fab3 f383 	clz	r3, r3
 80031fc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80031fe:	7afb      	ldrb	r3, [r7, #11]
 8003200:	f1c3 031f 	rsb	r3, r3, #31
 8003204:	617b      	str	r3, [r7, #20]
 8003206:	491f      	ldr	r1, [pc, #124]	; (8003284 <vTaskSwitchContext+0xb0>)
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	4613      	mov	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4413      	add	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	440b      	add	r3, r1
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10a      	bne.n	8003230 <vTaskSwitchContext+0x5c>
	__asm volatile
 800321a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321e:	f383 8811 	msr	BASEPRI, r3
 8003222:	f3bf 8f6f 	isb	sy
 8003226:	f3bf 8f4f 	dsb	sy
 800322a:	607b      	str	r3, [r7, #4]
}
 800322c:	bf00      	nop
 800322e:	e7fe      	b.n	800322e <vTaskSwitchContext+0x5a>
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	4613      	mov	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4a12      	ldr	r2, [pc, #72]	; (8003284 <vTaskSwitchContext+0xb0>)
 800323c:	4413      	add	r3, r2
 800323e:	613b      	str	r3, [r7, #16]
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	605a      	str	r2, [r3, #4]
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	3308      	adds	r3, #8
 8003252:	429a      	cmp	r2, r3
 8003254:	d104      	bne.n	8003260 <vTaskSwitchContext+0x8c>
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	605a      	str	r2, [r3, #4]
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	4a08      	ldr	r2, [pc, #32]	; (8003288 <vTaskSwitchContext+0xb4>)
 8003268:	6013      	str	r3, [r2, #0]
}
 800326a:	bf00      	nop
 800326c:	371c      	adds	r7, #28
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	20000130 	.word	0x20000130
 800327c:	2000011c 	.word	0x2000011c
 8003280:	20000110 	.word	0x20000110
 8003284:	20000034 	.word	0x20000034
 8003288:	20000030 	.word	0x20000030

0800328c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10a      	bne.n	80032b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800329c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a0:	f383 8811 	msr	BASEPRI, r3
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	f3bf 8f4f 	dsb	sy
 80032ac:	60fb      	str	r3, [r7, #12]
}
 80032ae:	bf00      	nop
 80032b0:	e7fe      	b.n	80032b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032b2:	4b07      	ldr	r3, [pc, #28]	; (80032d0 <vTaskPlaceOnEventList+0x44>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	3318      	adds	r3, #24
 80032b8:	4619      	mov	r1, r3
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7fe ff49 	bl	8002152 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80032c0:	2101      	movs	r1, #1
 80032c2:	6838      	ldr	r0, [r7, #0]
 80032c4:	f000 fa72 	bl	80037ac <prvAddCurrentTaskToDelayedList>
}
 80032c8:	bf00      	nop
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	20000030 	.word	0x20000030

080032d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10a      	bne.n	80032fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80032e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ea:	f383 8811 	msr	BASEPRI, r3
 80032ee:	f3bf 8f6f 	isb	sy
 80032f2:	f3bf 8f4f 	dsb	sy
 80032f6:	617b      	str	r3, [r7, #20]
}
 80032f8:	bf00      	nop
 80032fa:	e7fe      	b.n	80032fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032fc:	4b0a      	ldr	r3, [pc, #40]	; (8003328 <vTaskPlaceOnEventListRestricted+0x54>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	3318      	adds	r3, #24
 8003302:	4619      	mov	r1, r3
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f7fe ff00 	bl	800210a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d002      	beq.n	8003316 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003310:	f04f 33ff 	mov.w	r3, #4294967295
 8003314:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	68b8      	ldr	r0, [r7, #8]
 800331a:	f000 fa47 	bl	80037ac <prvAddCurrentTaskToDelayedList>
	}
 800331e:	bf00      	nop
 8003320:	3718      	adds	r7, #24
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	20000030 	.word	0x20000030

0800332c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10a      	bne.n	8003358 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003346:	f383 8811 	msr	BASEPRI, r3
 800334a:	f3bf 8f6f 	isb	sy
 800334e:	f3bf 8f4f 	dsb	sy
 8003352:	60fb      	str	r3, [r7, #12]
}
 8003354:	bf00      	nop
 8003356:	e7fe      	b.n	8003356 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	3318      	adds	r3, #24
 800335c:	4618      	mov	r0, r3
 800335e:	f7fe ff31 	bl	80021c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003362:	4b1d      	ldr	r3, [pc, #116]	; (80033d8 <xTaskRemoveFromEventList+0xac>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d11c      	bne.n	80033a4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	3304      	adds	r3, #4
 800336e:	4618      	mov	r0, r3
 8003370:	f7fe ff28 	bl	80021c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003378:	2201      	movs	r2, #1
 800337a:	409a      	lsls	r2, r3
 800337c:	4b17      	ldr	r3, [pc, #92]	; (80033dc <xTaskRemoveFromEventList+0xb0>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4313      	orrs	r3, r2
 8003382:	4a16      	ldr	r2, [pc, #88]	; (80033dc <xTaskRemoveFromEventList+0xb0>)
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800338a:	4613      	mov	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4413      	add	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4a13      	ldr	r2, [pc, #76]	; (80033e0 <xTaskRemoveFromEventList+0xb4>)
 8003394:	441a      	add	r2, r3
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	3304      	adds	r3, #4
 800339a:	4619      	mov	r1, r3
 800339c:	4610      	mov	r0, r2
 800339e:	f7fe feb4 	bl	800210a <vListInsertEnd>
 80033a2:	e005      	b.n	80033b0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	3318      	adds	r3, #24
 80033a8:	4619      	mov	r1, r3
 80033aa:	480e      	ldr	r0, [pc, #56]	; (80033e4 <xTaskRemoveFromEventList+0xb8>)
 80033ac:	f7fe fead 	bl	800210a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b4:	4b0c      	ldr	r3, [pc, #48]	; (80033e8 <xTaskRemoveFromEventList+0xbc>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d905      	bls.n	80033ca <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80033be:	2301      	movs	r3, #1
 80033c0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80033c2:	4b0a      	ldr	r3, [pc, #40]	; (80033ec <xTaskRemoveFromEventList+0xc0>)
 80033c4:	2201      	movs	r2, #1
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	e001      	b.n	80033ce <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80033ca:	2300      	movs	r3, #0
 80033cc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80033ce:	697b      	ldr	r3, [r7, #20]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3718      	adds	r7, #24
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	20000130 	.word	0x20000130
 80033dc:	20000110 	.word	0x20000110
 80033e0:	20000034 	.word	0x20000034
 80033e4:	200000c8 	.word	0x200000c8
 80033e8:	20000030 	.word	0x20000030
 80033ec:	2000011c 	.word	0x2000011c

080033f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80033f8:	4b06      	ldr	r3, [pc, #24]	; (8003414 <vTaskInternalSetTimeOutState+0x24>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003400:	4b05      	ldr	r3, [pc, #20]	; (8003418 <vTaskInternalSetTimeOutState+0x28>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	605a      	str	r2, [r3, #4]
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	20000120 	.word	0x20000120
 8003418:	2000010c 	.word	0x2000010c

0800341c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b088      	sub	sp, #32
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10a      	bne.n	8003442 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800342c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003430:	f383 8811 	msr	BASEPRI, r3
 8003434:	f3bf 8f6f 	isb	sy
 8003438:	f3bf 8f4f 	dsb	sy
 800343c:	613b      	str	r3, [r7, #16]
}
 800343e:	bf00      	nop
 8003440:	e7fe      	b.n	8003440 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10a      	bne.n	800345e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344c:	f383 8811 	msr	BASEPRI, r3
 8003450:	f3bf 8f6f 	isb	sy
 8003454:	f3bf 8f4f 	dsb	sy
 8003458:	60fb      	str	r3, [r7, #12]
}
 800345a:	bf00      	nop
 800345c:	e7fe      	b.n	800345c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800345e:	f000 fe49 	bl	80040f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003462:	4b1d      	ldr	r3, [pc, #116]	; (80034d8 <xTaskCheckForTimeOut+0xbc>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347a:	d102      	bne.n	8003482 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800347c:	2300      	movs	r3, #0
 800347e:	61fb      	str	r3, [r7, #28]
 8003480:	e023      	b.n	80034ca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	4b15      	ldr	r3, [pc, #84]	; (80034dc <xTaskCheckForTimeOut+0xc0>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d007      	beq.n	800349e <xTaskCheckForTimeOut+0x82>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	429a      	cmp	r2, r3
 8003496:	d302      	bcc.n	800349e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003498:	2301      	movs	r3, #1
 800349a:	61fb      	str	r3, [r7, #28]
 800349c:	e015      	b.n	80034ca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d20b      	bcs.n	80034c0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	1ad2      	subs	r2, r2, r3
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7ff ff9b 	bl	80033f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80034ba:	2300      	movs	r3, #0
 80034bc:	61fb      	str	r3, [r7, #28]
 80034be:	e004      	b.n	80034ca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	2200      	movs	r2, #0
 80034c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80034c6:	2301      	movs	r3, #1
 80034c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80034ca:	f000 fe43 	bl	8004154 <vPortExitCritical>

	return xReturn;
 80034ce:	69fb      	ldr	r3, [r7, #28]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3720      	adds	r7, #32
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	2000010c 	.word	0x2000010c
 80034dc:	20000120 	.word	0x20000120

080034e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80034e4:	4b03      	ldr	r3, [pc, #12]	; (80034f4 <vTaskMissedYield+0x14>)
 80034e6:	2201      	movs	r2, #1
 80034e8:	601a      	str	r2, [r3, #0]
}
 80034ea:	bf00      	nop
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	2000011c 	.word	0x2000011c

080034f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003500:	f000 f852 	bl	80035a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003504:	4b06      	ldr	r3, [pc, #24]	; (8003520 <prvIdleTask+0x28>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d9f9      	bls.n	8003500 <prvIdleTask+0x8>
			{
				taskYIELD();
 800350c:	4b05      	ldr	r3, [pc, #20]	; (8003524 <prvIdleTask+0x2c>)
 800350e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	f3bf 8f4f 	dsb	sy
 8003518:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800351c:	e7f0      	b.n	8003500 <prvIdleTask+0x8>
 800351e:	bf00      	nop
 8003520:	20000034 	.word	0x20000034
 8003524:	e000ed04 	.word	0xe000ed04

08003528 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800352e:	2300      	movs	r3, #0
 8003530:	607b      	str	r3, [r7, #4]
 8003532:	e00c      	b.n	800354e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4a12      	ldr	r2, [pc, #72]	; (8003588 <prvInitialiseTaskLists+0x60>)
 8003540:	4413      	add	r3, r2
 8003542:	4618      	mov	r0, r3
 8003544:	f7fe fdb4 	bl	80020b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	3301      	adds	r3, #1
 800354c:	607b      	str	r3, [r7, #4]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b04      	cmp	r3, #4
 8003552:	d9ef      	bls.n	8003534 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003554:	480d      	ldr	r0, [pc, #52]	; (800358c <prvInitialiseTaskLists+0x64>)
 8003556:	f7fe fdab 	bl	80020b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800355a:	480d      	ldr	r0, [pc, #52]	; (8003590 <prvInitialiseTaskLists+0x68>)
 800355c:	f7fe fda8 	bl	80020b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003560:	480c      	ldr	r0, [pc, #48]	; (8003594 <prvInitialiseTaskLists+0x6c>)
 8003562:	f7fe fda5 	bl	80020b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003566:	480c      	ldr	r0, [pc, #48]	; (8003598 <prvInitialiseTaskLists+0x70>)
 8003568:	f7fe fda2 	bl	80020b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800356c:	480b      	ldr	r0, [pc, #44]	; (800359c <prvInitialiseTaskLists+0x74>)
 800356e:	f7fe fd9f 	bl	80020b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003572:	4b0b      	ldr	r3, [pc, #44]	; (80035a0 <prvInitialiseTaskLists+0x78>)
 8003574:	4a05      	ldr	r2, [pc, #20]	; (800358c <prvInitialiseTaskLists+0x64>)
 8003576:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003578:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <prvInitialiseTaskLists+0x7c>)
 800357a:	4a05      	ldr	r2, [pc, #20]	; (8003590 <prvInitialiseTaskLists+0x68>)
 800357c:	601a      	str	r2, [r3, #0]
}
 800357e:	bf00      	nop
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	20000034 	.word	0x20000034
 800358c:	20000098 	.word	0x20000098
 8003590:	200000ac 	.word	0x200000ac
 8003594:	200000c8 	.word	0x200000c8
 8003598:	200000dc 	.word	0x200000dc
 800359c:	200000f4 	.word	0x200000f4
 80035a0:	200000c0 	.word	0x200000c0
 80035a4:	200000c4 	.word	0x200000c4

080035a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035ae:	e019      	b.n	80035e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80035b0:	f000 fda0 	bl	80040f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035b4:	4b10      	ldr	r3, [pc, #64]	; (80035f8 <prvCheckTasksWaitingTermination+0x50>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3304      	adds	r3, #4
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7fe fdff 	bl	80021c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80035c6:	4b0d      	ldr	r3, [pc, #52]	; (80035fc <prvCheckTasksWaitingTermination+0x54>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	4a0b      	ldr	r2, [pc, #44]	; (80035fc <prvCheckTasksWaitingTermination+0x54>)
 80035ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80035d0:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <prvCheckTasksWaitingTermination+0x58>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	3b01      	subs	r3, #1
 80035d6:	4a0a      	ldr	r2, [pc, #40]	; (8003600 <prvCheckTasksWaitingTermination+0x58>)
 80035d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80035da:	f000 fdbb 	bl	8004154 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f810 	bl	8003604 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035e4:	4b06      	ldr	r3, [pc, #24]	; (8003600 <prvCheckTasksWaitingTermination+0x58>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1e1      	bne.n	80035b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80035ec:	bf00      	nop
 80035ee:	bf00      	nop
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	200000dc 	.word	0x200000dc
 80035fc:	20000108 	.word	0x20000108
 8003600:	200000f0 	.word	0x200000f0

08003604 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003610:	4618      	mov	r0, r3
 8003612:	f000 ff55 	bl	80044c0 <vPortFree>
			vPortFree( pxTCB );
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 ff52 	bl	80044c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800361c:	bf00      	nop
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800362a:	4b0c      	ldr	r3, [pc, #48]	; (800365c <prvResetNextTaskUnblockTime+0x38>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d104      	bne.n	800363e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003634:	4b0a      	ldr	r3, [pc, #40]	; (8003660 <prvResetNextTaskUnblockTime+0x3c>)
 8003636:	f04f 32ff 	mov.w	r2, #4294967295
 800363a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800363c:	e008      	b.n	8003650 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800363e:	4b07      	ldr	r3, [pc, #28]	; (800365c <prvResetNextTaskUnblockTime+0x38>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	4a04      	ldr	r2, [pc, #16]	; (8003660 <prvResetNextTaskUnblockTime+0x3c>)
 800364e:	6013      	str	r3, [r2, #0]
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	200000c0 	.word	0x200000c0
 8003660:	20000128 	.word	0x20000128

08003664 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800366a:	4b0b      	ldr	r3, [pc, #44]	; (8003698 <xTaskGetSchedulerState+0x34>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d102      	bne.n	8003678 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003672:	2301      	movs	r3, #1
 8003674:	607b      	str	r3, [r7, #4]
 8003676:	e008      	b.n	800368a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003678:	4b08      	ldr	r3, [pc, #32]	; (800369c <xTaskGetSchedulerState+0x38>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d102      	bne.n	8003686 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003680:	2302      	movs	r3, #2
 8003682:	607b      	str	r3, [r7, #4]
 8003684:	e001      	b.n	800368a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003686:	2300      	movs	r3, #0
 8003688:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800368a:	687b      	ldr	r3, [r7, #4]
	}
 800368c:	4618      	mov	r0, r3
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	20000114 	.word	0x20000114
 800369c:	20000130 	.word	0x20000130

080036a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80036ac:	2300      	movs	r3, #0
 80036ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d06e      	beq.n	8003794 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80036b6:	4b3a      	ldr	r3, [pc, #232]	; (80037a0 <xTaskPriorityDisinherit+0x100>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d00a      	beq.n	80036d6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80036c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c4:	f383 8811 	msr	BASEPRI, r3
 80036c8:	f3bf 8f6f 	isb	sy
 80036cc:	f3bf 8f4f 	dsb	sy
 80036d0:	60fb      	str	r3, [r7, #12]
}
 80036d2:	bf00      	nop
 80036d4:	e7fe      	b.n	80036d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10a      	bne.n	80036f4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80036de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e2:	f383 8811 	msr	BASEPRI, r3
 80036e6:	f3bf 8f6f 	isb	sy
 80036ea:	f3bf 8f4f 	dsb	sy
 80036ee:	60bb      	str	r3, [r7, #8]
}
 80036f0:	bf00      	nop
 80036f2:	e7fe      	b.n	80036f2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036f8:	1e5a      	subs	r2, r3, #1
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003706:	429a      	cmp	r2, r3
 8003708:	d044      	beq.n	8003794 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800370e:	2b00      	cmp	r3, #0
 8003710:	d140      	bne.n	8003794 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	3304      	adds	r3, #4
 8003716:	4618      	mov	r0, r3
 8003718:	f7fe fd54 	bl	80021c4 <uxListRemove>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d115      	bne.n	800374e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003726:	491f      	ldr	r1, [pc, #124]	; (80037a4 <xTaskPriorityDisinherit+0x104>)
 8003728:	4613      	mov	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10a      	bne.n	800374e <xTaskPriorityDisinherit+0xae>
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373c:	2201      	movs	r2, #1
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	43da      	mvns	r2, r3
 8003744:	4b18      	ldr	r3, [pc, #96]	; (80037a8 <xTaskPriorityDisinherit+0x108>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4013      	ands	r3, r2
 800374a:	4a17      	ldr	r2, [pc, #92]	; (80037a8 <xTaskPriorityDisinherit+0x108>)
 800374c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375a:	f1c3 0205 	rsb	r2, r3, #5
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003766:	2201      	movs	r2, #1
 8003768:	409a      	lsls	r2, r3
 800376a:	4b0f      	ldr	r3, [pc, #60]	; (80037a8 <xTaskPriorityDisinherit+0x108>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4313      	orrs	r3, r2
 8003770:	4a0d      	ldr	r2, [pc, #52]	; (80037a8 <xTaskPriorityDisinherit+0x108>)
 8003772:	6013      	str	r3, [r2, #0]
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003778:	4613      	mov	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4a08      	ldr	r2, [pc, #32]	; (80037a4 <xTaskPriorityDisinherit+0x104>)
 8003782:	441a      	add	r2, r3
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	3304      	adds	r3, #4
 8003788:	4619      	mov	r1, r3
 800378a:	4610      	mov	r0, r2
 800378c:	f7fe fcbd 	bl	800210a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003790:	2301      	movs	r3, #1
 8003792:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003794:	697b      	ldr	r3, [r7, #20]
	}
 8003796:	4618      	mov	r0, r3
 8003798:	3718      	adds	r7, #24
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	20000030 	.word	0x20000030
 80037a4:	20000034 	.word	0x20000034
 80037a8:	20000110 	.word	0x20000110

080037ac <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80037b6:	4b29      	ldr	r3, [pc, #164]	; (800385c <prvAddCurrentTaskToDelayedList+0xb0>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037bc:	4b28      	ldr	r3, [pc, #160]	; (8003860 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	3304      	adds	r3, #4
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fe fcfe 	bl	80021c4 <uxListRemove>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10b      	bne.n	80037e6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80037ce:	4b24      	ldr	r3, [pc, #144]	; (8003860 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d4:	2201      	movs	r2, #1
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	43da      	mvns	r2, r3
 80037dc:	4b21      	ldr	r3, [pc, #132]	; (8003864 <prvAddCurrentTaskToDelayedList+0xb8>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4013      	ands	r3, r2
 80037e2:	4a20      	ldr	r2, [pc, #128]	; (8003864 <prvAddCurrentTaskToDelayedList+0xb8>)
 80037e4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ec:	d10a      	bne.n	8003804 <prvAddCurrentTaskToDelayedList+0x58>
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d007      	beq.n	8003804 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037f4:	4b1a      	ldr	r3, [pc, #104]	; (8003860 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	3304      	adds	r3, #4
 80037fa:	4619      	mov	r1, r3
 80037fc:	481a      	ldr	r0, [pc, #104]	; (8003868 <prvAddCurrentTaskToDelayedList+0xbc>)
 80037fe:	f7fe fc84 	bl	800210a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003802:	e026      	b.n	8003852 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4413      	add	r3, r2
 800380a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800380c:	4b14      	ldr	r3, [pc, #80]	; (8003860 <prvAddCurrentTaskToDelayedList+0xb4>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	429a      	cmp	r2, r3
 800381a:	d209      	bcs.n	8003830 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800381c:	4b13      	ldr	r3, [pc, #76]	; (800386c <prvAddCurrentTaskToDelayedList+0xc0>)
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	4b0f      	ldr	r3, [pc, #60]	; (8003860 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	3304      	adds	r3, #4
 8003826:	4619      	mov	r1, r3
 8003828:	4610      	mov	r0, r2
 800382a:	f7fe fc92 	bl	8002152 <vListInsert>
}
 800382e:	e010      	b.n	8003852 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003830:	4b0f      	ldr	r3, [pc, #60]	; (8003870 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	3304      	adds	r3, #4
 800383a:	4619      	mov	r1, r3
 800383c:	4610      	mov	r0, r2
 800383e:	f7fe fc88 	bl	8002152 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003842:	4b0c      	ldr	r3, [pc, #48]	; (8003874 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	429a      	cmp	r2, r3
 800384a:	d202      	bcs.n	8003852 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800384c:	4a09      	ldr	r2, [pc, #36]	; (8003874 <prvAddCurrentTaskToDelayedList+0xc8>)
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	6013      	str	r3, [r2, #0]
}
 8003852:	bf00      	nop
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	2000010c 	.word	0x2000010c
 8003860:	20000030 	.word	0x20000030
 8003864:	20000110 	.word	0x20000110
 8003868:	200000f4 	.word	0x200000f4
 800386c:	200000c4 	.word	0x200000c4
 8003870:	200000c0 	.word	0x200000c0
 8003874:	20000128 	.word	0x20000128

08003878 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800387e:	2300      	movs	r3, #0
 8003880:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003882:	f000 fad5 	bl	8003e30 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003886:	4b11      	ldr	r3, [pc, #68]	; (80038cc <xTimerCreateTimerTask+0x54>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00b      	beq.n	80038a6 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800388e:	4b10      	ldr	r3, [pc, #64]	; (80038d0 <xTimerCreateTimerTask+0x58>)
 8003890:	9301      	str	r3, [sp, #4]
 8003892:	2302      	movs	r3, #2
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	2300      	movs	r3, #0
 8003898:	f44f 7282 	mov.w	r2, #260	; 0x104
 800389c:	490d      	ldr	r1, [pc, #52]	; (80038d4 <xTimerCreateTimerTask+0x5c>)
 800389e:	480e      	ldr	r0, [pc, #56]	; (80038d8 <xTimerCreateTimerTask+0x60>)
 80038a0:	f7ff f966 	bl	8002b70 <xTaskCreate>
 80038a4:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10a      	bne.n	80038c2 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 80038ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b0:	f383 8811 	msr	BASEPRI, r3
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	603b      	str	r3, [r7, #0]
}
 80038be:	bf00      	nop
 80038c0:	e7fe      	b.n	80038c0 <xTimerCreateTimerTask+0x48>
	return xReturn;
 80038c2:	687b      	ldr	r3, [r7, #4]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	20000164 	.word	0x20000164
 80038d0:	20000168 	.word	0x20000168
 80038d4:	0800479c 	.word	0x0800479c
 80038d8:	08003a11 	.word	0x08003a11

080038dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b08a      	sub	sp, #40	; 0x28
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
 80038e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80038ea:	2300      	movs	r3, #0
 80038ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10a      	bne.n	800390a <xTimerGenericCommand+0x2e>
	__asm volatile
 80038f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f8:	f383 8811 	msr	BASEPRI, r3
 80038fc:	f3bf 8f6f 	isb	sy
 8003900:	f3bf 8f4f 	dsb	sy
 8003904:	623b      	str	r3, [r7, #32]
}
 8003906:	bf00      	nop
 8003908:	e7fe      	b.n	8003908 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800390a:	4b1a      	ldr	r3, [pc, #104]	; (8003974 <xTimerGenericCommand+0x98>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d02a      	beq.n	8003968 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	2b05      	cmp	r3, #5
 8003922:	dc18      	bgt.n	8003956 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003924:	f7ff fe9e 	bl	8003664 <xTaskGetSchedulerState>
 8003928:	4603      	mov	r3, r0
 800392a:	2b02      	cmp	r3, #2
 800392c:	d109      	bne.n	8003942 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800392e:	4b11      	ldr	r3, [pc, #68]	; (8003974 <xTimerGenericCommand+0x98>)
 8003930:	6818      	ldr	r0, [r3, #0]
 8003932:	f107 0114 	add.w	r1, r7, #20
 8003936:	2300      	movs	r3, #0
 8003938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800393a:	f7fe fd35 	bl	80023a8 <xQueueGenericSend>
 800393e:	6278      	str	r0, [r7, #36]	; 0x24
 8003940:	e012      	b.n	8003968 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003942:	4b0c      	ldr	r3, [pc, #48]	; (8003974 <xTimerGenericCommand+0x98>)
 8003944:	6818      	ldr	r0, [r3, #0]
 8003946:	f107 0114 	add.w	r1, r7, #20
 800394a:	2300      	movs	r3, #0
 800394c:	2200      	movs	r2, #0
 800394e:	f7fe fd2b 	bl	80023a8 <xQueueGenericSend>
 8003952:	6278      	str	r0, [r7, #36]	; 0x24
 8003954:	e008      	b.n	8003968 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003956:	4b07      	ldr	r3, [pc, #28]	; (8003974 <xTimerGenericCommand+0x98>)
 8003958:	6818      	ldr	r0, [r3, #0]
 800395a:	f107 0114 	add.w	r1, r7, #20
 800395e:	2300      	movs	r3, #0
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	f7fe fe1f 	bl	80025a4 <xQueueGenericSendFromISR>
 8003966:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800396a:	4618      	mov	r0, r3
 800396c:	3728      	adds	r7, #40	; 0x28
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	20000164 	.word	0x20000164

08003978 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b088      	sub	sp, #32
 800397c:	af02      	add	r7, sp, #8
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003982:	4b22      	ldr	r3, [pc, #136]	; (8003a0c <prvProcessExpiredTimer+0x94>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	3304      	adds	r3, #4
 8003990:	4618      	mov	r0, r3
 8003992:	f7fe fc17 	bl	80021c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800399c:	f003 0304 	and.w	r3, r3, #4
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d022      	beq.n	80039ea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	699a      	ldr	r2, [r3, #24]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	18d1      	adds	r1, r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	6978      	ldr	r0, [r7, #20]
 80039b2:	f000 f8d1 	bl	8003b58 <prvInsertTimerInActiveList>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d01f      	beq.n	80039fc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80039bc:	2300      	movs	r3, #0
 80039be:	9300      	str	r3, [sp, #0]
 80039c0:	2300      	movs	r3, #0
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	2100      	movs	r1, #0
 80039c6:	6978      	ldr	r0, [r7, #20]
 80039c8:	f7ff ff88 	bl	80038dc <xTimerGenericCommand>
 80039cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d113      	bne.n	80039fc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80039d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d8:	f383 8811 	msr	BASEPRI, r3
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	60fb      	str	r3, [r7, #12]
}
 80039e6:	bf00      	nop
 80039e8:	e7fe      	b.n	80039e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039f0:	f023 0301 	bic.w	r3, r3, #1
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	6978      	ldr	r0, [r7, #20]
 8003a02:	4798      	blx	r3
}
 8003a04:	bf00      	nop
 8003a06:	3718      	adds	r7, #24
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	2000015c 	.word	0x2000015c

08003a10 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003a18:	f107 0308 	add.w	r3, r7, #8
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f000 f857 	bl	8003ad0 <prvGetNextExpireTime>
 8003a22:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	4619      	mov	r1, r3
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f000 f803 	bl	8003a34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003a2e:	f000 f8d5 	bl	8003bdc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003a32:	e7f1      	b.n	8003a18 <prvTimerTask+0x8>

08003a34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003a3e:	f7ff fa57 	bl	8002ef0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003a42:	f107 0308 	add.w	r3, r7, #8
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 f866 	bl	8003b18 <prvSampleTimeNow>
 8003a4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d130      	bne.n	8003ab6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10a      	bne.n	8003a70 <prvProcessTimerOrBlockTask+0x3c>
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d806      	bhi.n	8003a70 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003a62:	f7ff fa53 	bl	8002f0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003a66:	68f9      	ldr	r1, [r7, #12]
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7ff ff85 	bl	8003978 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003a6e:	e024      	b.n	8003aba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d008      	beq.n	8003a88 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003a76:	4b13      	ldr	r3, [pc, #76]	; (8003ac4 <prvProcessTimerOrBlockTask+0x90>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <prvProcessTimerOrBlockTask+0x50>
 8003a80:	2301      	movs	r3, #1
 8003a82:	e000      	b.n	8003a86 <prvProcessTimerOrBlockTask+0x52>
 8003a84:	2300      	movs	r3, #0
 8003a86:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003a88:	4b0f      	ldr	r3, [pc, #60]	; (8003ac8 <prvProcessTimerOrBlockTask+0x94>)
 8003a8a:	6818      	ldr	r0, [r3, #0]
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	4619      	mov	r1, r3
 8003a96:	f7ff f837 	bl	8002b08 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003a9a:	f7ff fa37 	bl	8002f0c <xTaskResumeAll>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10a      	bne.n	8003aba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003aa4:	4b09      	ldr	r3, [pc, #36]	; (8003acc <prvProcessTimerOrBlockTask+0x98>)
 8003aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	f3bf 8f4f 	dsb	sy
 8003ab0:	f3bf 8f6f 	isb	sy
}
 8003ab4:	e001      	b.n	8003aba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003ab6:	f7ff fa29 	bl	8002f0c <xTaskResumeAll>
}
 8003aba:	bf00      	nop
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20000160 	.word	0x20000160
 8003ac8:	20000164 	.word	0x20000164
 8003acc:	e000ed04 	.word	0xe000ed04

08003ad0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003ad8:	4b0e      	ldr	r3, [pc, #56]	; (8003b14 <prvGetNextExpireTime+0x44>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <prvGetNextExpireTime+0x16>
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	e000      	b.n	8003ae8 <prvGetNextExpireTime+0x18>
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d105      	bne.n	8003b00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003af4:	4b07      	ldr	r3, [pc, #28]	; (8003b14 <prvGetNextExpireTime+0x44>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	60fb      	str	r3, [r7, #12]
 8003afe:	e001      	b.n	8003b04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003b04:	68fb      	ldr	r3, [r7, #12]
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	2000015c 	.word	0x2000015c

08003b18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003b20:	f7ff fa90 	bl	8003044 <xTaskGetTickCount>
 8003b24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003b26:	4b0b      	ldr	r3, [pc, #44]	; (8003b54 <prvSampleTimeNow+0x3c>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d205      	bcs.n	8003b3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003b30:	f000 f91a 	bl	8003d68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	601a      	str	r2, [r3, #0]
 8003b3a:	e002      	b.n	8003b42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003b42:	4a04      	ldr	r2, [pc, #16]	; (8003b54 <prvSampleTimeNow+0x3c>)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003b48:	68fb      	ldr	r3, [r7, #12]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	2000016c 	.word	0x2000016c

08003b58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
 8003b64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003b66:	2300      	movs	r3, #0
 8003b68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d812      	bhi.n	8003ba4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	1ad2      	subs	r2, r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d302      	bcc.n	8003b92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	617b      	str	r3, [r7, #20]
 8003b90:	e01b      	b.n	8003bca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003b92:	4b10      	ldr	r3, [pc, #64]	; (8003bd4 <prvInsertTimerInActiveList+0x7c>)
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	f7fe fad8 	bl	8002152 <vListInsert>
 8003ba2:	e012      	b.n	8003bca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d206      	bcs.n	8003bba <prvInsertTimerInActiveList+0x62>
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d302      	bcc.n	8003bba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	617b      	str	r3, [r7, #20]
 8003bb8:	e007      	b.n	8003bca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003bba:	4b07      	ldr	r3, [pc, #28]	; (8003bd8 <prvInsertTimerInActiveList+0x80>)
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	4610      	mov	r0, r2
 8003bc6:	f7fe fac4 	bl	8002152 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003bca:	697b      	ldr	r3, [r7, #20]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3718      	adds	r7, #24
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	20000160 	.word	0x20000160
 8003bd8:	2000015c 	.word	0x2000015c

08003bdc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b08c      	sub	sp, #48	; 0x30
 8003be0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003be2:	e0ae      	b.n	8003d42 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f2c0 80aa 	blt.w	8003d40 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d004      	beq.n	8003c02 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7fe fae1 	bl	80021c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c02:	1d3b      	adds	r3, r7, #4
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7ff ff87 	bl	8003b18 <prvSampleTimeNow>
 8003c0a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	2b09      	cmp	r3, #9
 8003c10:	f200 8097 	bhi.w	8003d42 <prvProcessReceivedCommands+0x166>
 8003c14:	a201      	add	r2, pc, #4	; (adr r2, 8003c1c <prvProcessReceivedCommands+0x40>)
 8003c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1a:	bf00      	nop
 8003c1c:	08003c45 	.word	0x08003c45
 8003c20:	08003c45 	.word	0x08003c45
 8003c24:	08003c45 	.word	0x08003c45
 8003c28:	08003cb9 	.word	0x08003cb9
 8003c2c:	08003ccd 	.word	0x08003ccd
 8003c30:	08003d17 	.word	0x08003d17
 8003c34:	08003c45 	.word	0x08003c45
 8003c38:	08003c45 	.word	0x08003c45
 8003c3c:	08003cb9 	.word	0x08003cb9
 8003c40:	08003ccd 	.word	0x08003ccd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c4a:	f043 0301 	orr.w	r3, r3, #1
 8003c4e:	b2da      	uxtb	r2, r3
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	18d1      	adds	r1, r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6a3a      	ldr	r2, [r7, #32]
 8003c62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c64:	f7ff ff78 	bl	8003b58 <prvInsertTimerInActiveList>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d069      	beq.n	8003d42 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c74:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d05e      	beq.n	8003d42 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	441a      	add	r2, r3
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	9300      	str	r3, [sp, #0]
 8003c90:	2300      	movs	r3, #0
 8003c92:	2100      	movs	r1, #0
 8003c94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c96:	f7ff fe21 	bl	80038dc <xTimerGenericCommand>
 8003c9a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d14f      	bne.n	8003d42 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8003ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca6:	f383 8811 	msr	BASEPRI, r3
 8003caa:	f3bf 8f6f 	isb	sy
 8003cae:	f3bf 8f4f 	dsb	sy
 8003cb2:	61bb      	str	r3, [r7, #24]
}
 8003cb4:	bf00      	nop
 8003cb6:	e7fe      	b.n	8003cb6 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cbe:	f023 0301 	bic.w	r3, r3, #1
 8003cc2:	b2da      	uxtb	r2, r3
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003cca:	e03a      	b.n	8003d42 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cd2:	f043 0301 	orr.w	r3, r3, #1
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10a      	bne.n	8003d02 <prvProcessReceivedCommands+0x126>
	__asm volatile
 8003cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf0:	f383 8811 	msr	BASEPRI, r3
 8003cf4:	f3bf 8f6f 	isb	sy
 8003cf8:	f3bf 8f4f 	dsb	sy
 8003cfc:	617b      	str	r3, [r7, #20]
}
 8003cfe:	bf00      	nop
 8003d00:	e7fe      	b.n	8003d00 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d04:	699a      	ldr	r2, [r3, #24]
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	18d1      	adds	r1, r2, r3
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	6a3a      	ldr	r2, [r7, #32]
 8003d0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d10:	f7ff ff22 	bl	8003b58 <prvInsertTimerInActiveList>
					break;
 8003d14:	e015      	b.n	8003d42 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d103      	bne.n	8003d2c <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8003d24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d26:	f000 fbcb 	bl	80044c0 <vPortFree>
 8003d2a:	e00a      	b.n	8003d42 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d32:	f023 0301 	bic.w	r3, r3, #1
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003d3e:	e000      	b.n	8003d42 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003d40:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d42:	4b08      	ldr	r3, [pc, #32]	; (8003d64 <prvProcessReceivedCommands+0x188>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f107 0108 	add.w	r1, r7, #8
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7fe fcc1 	bl	80026d4 <xQueueReceive>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f47f af45 	bne.w	8003be4 <prvProcessReceivedCommands+0x8>
	}
}
 8003d5a:	bf00      	nop
 8003d5c:	bf00      	nop
 8003d5e:	3728      	adds	r7, #40	; 0x28
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	20000164 	.word	0x20000164

08003d68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b088      	sub	sp, #32
 8003d6c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003d6e:	e048      	b.n	8003e02 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d70:	4b2d      	ldr	r3, [pc, #180]	; (8003e28 <prvSwitchTimerLists+0xc0>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d7a:	4b2b      	ldr	r3, [pc, #172]	; (8003e28 <prvSwitchTimerLists+0xc0>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	3304      	adds	r3, #4
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7fe fa1b 	bl	80021c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d02e      	beq.n	8003e02 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	4413      	add	r3, r2
 8003dac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d90e      	bls.n	8003dd4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003dc2:	4b19      	ldr	r3, [pc, #100]	; (8003e28 <prvSwitchTimerLists+0xc0>)
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	3304      	adds	r3, #4
 8003dca:	4619      	mov	r1, r3
 8003dcc:	4610      	mov	r0, r2
 8003dce:	f7fe f9c0 	bl	8002152 <vListInsert>
 8003dd2:	e016      	b.n	8003e02 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	2300      	movs	r3, #0
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	2100      	movs	r1, #0
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f7ff fd7c 	bl	80038dc <xTimerGenericCommand>
 8003de4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10a      	bne.n	8003e02 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8003dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df0:	f383 8811 	msr	BASEPRI, r3
 8003df4:	f3bf 8f6f 	isb	sy
 8003df8:	f3bf 8f4f 	dsb	sy
 8003dfc:	603b      	str	r3, [r7, #0]
}
 8003dfe:	bf00      	nop
 8003e00:	e7fe      	b.n	8003e00 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e02:	4b09      	ldr	r3, [pc, #36]	; (8003e28 <prvSwitchTimerLists+0xc0>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1b1      	bne.n	8003d70 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003e0c:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <prvSwitchTimerLists+0xc0>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003e12:	4b06      	ldr	r3, [pc, #24]	; (8003e2c <prvSwitchTimerLists+0xc4>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a04      	ldr	r2, [pc, #16]	; (8003e28 <prvSwitchTimerLists+0xc0>)
 8003e18:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003e1a:	4a04      	ldr	r2, [pc, #16]	; (8003e2c <prvSwitchTimerLists+0xc4>)
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	6013      	str	r3, [r2, #0]
}
 8003e20:	bf00      	nop
 8003e22:	3718      	adds	r7, #24
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	2000015c 	.word	0x2000015c
 8003e2c:	20000160 	.word	0x20000160

08003e30 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003e34:	f000 f95e 	bl	80040f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003e38:	4b12      	ldr	r3, [pc, #72]	; (8003e84 <prvCheckForValidListAndQueue+0x54>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d11d      	bne.n	8003e7c <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8003e40:	4811      	ldr	r0, [pc, #68]	; (8003e88 <prvCheckForValidListAndQueue+0x58>)
 8003e42:	f7fe f935 	bl	80020b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003e46:	4811      	ldr	r0, [pc, #68]	; (8003e8c <prvCheckForValidListAndQueue+0x5c>)
 8003e48:	f7fe f932 	bl	80020b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003e4c:	4b10      	ldr	r3, [pc, #64]	; (8003e90 <prvCheckForValidListAndQueue+0x60>)
 8003e4e:	4a0e      	ldr	r2, [pc, #56]	; (8003e88 <prvCheckForValidListAndQueue+0x58>)
 8003e50:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003e52:	4b10      	ldr	r3, [pc, #64]	; (8003e94 <prvCheckForValidListAndQueue+0x64>)
 8003e54:	4a0d      	ldr	r2, [pc, #52]	; (8003e8c <prvCheckForValidListAndQueue+0x5c>)
 8003e56:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003e58:	2200      	movs	r2, #0
 8003e5a:	210c      	movs	r1, #12
 8003e5c:	200a      	movs	r0, #10
 8003e5e:	f7fe fa43 	bl	80022e8 <xQueueGenericCreate>
 8003e62:	4603      	mov	r3, r0
 8003e64:	4a07      	ldr	r2, [pc, #28]	; (8003e84 <prvCheckForValidListAndQueue+0x54>)
 8003e66:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003e68:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <prvCheckForValidListAndQueue+0x54>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d005      	beq.n	8003e7c <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003e70:	4b04      	ldr	r3, [pc, #16]	; (8003e84 <prvCheckForValidListAndQueue+0x54>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4908      	ldr	r1, [pc, #32]	; (8003e98 <prvCheckForValidListAndQueue+0x68>)
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fe fe1c 	bl	8002ab4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e7c:	f000 f96a 	bl	8004154 <vPortExitCritical>
}
 8003e80:	bf00      	nop
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	20000164 	.word	0x20000164
 8003e88:	20000134 	.word	0x20000134
 8003e8c:	20000148 	.word	0x20000148
 8003e90:	2000015c 	.word	0x2000015c
 8003e94:	20000160 	.word	0x20000160
 8003e98:	080047a4 	.word	0x080047a4

08003e9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	3b04      	subs	r3, #4
 8003eac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003eb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	3b04      	subs	r3, #4
 8003eba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	f023 0201 	bic.w	r2, r3, #1
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	3b04      	subs	r3, #4
 8003eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003ecc:	4a0c      	ldr	r2, [pc, #48]	; (8003f00 <pxPortInitialiseStack+0x64>)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	3b14      	subs	r3, #20
 8003ed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	3b04      	subs	r3, #4
 8003ee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f06f 0202 	mvn.w	r2, #2
 8003eea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	3b20      	subs	r3, #32
 8003ef0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3714      	adds	r7, #20
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	08003f05 	.word	0x08003f05

08003f04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003f0e:	4b12      	ldr	r3, [pc, #72]	; (8003f58 <prvTaskExitError+0x54>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f16:	d00a      	beq.n	8003f2e <prvTaskExitError+0x2a>
	__asm volatile
 8003f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1c:	f383 8811 	msr	BASEPRI, r3
 8003f20:	f3bf 8f6f 	isb	sy
 8003f24:	f3bf 8f4f 	dsb	sy
 8003f28:	60fb      	str	r3, [r7, #12]
}
 8003f2a:	bf00      	nop
 8003f2c:	e7fe      	b.n	8003f2c <prvTaskExitError+0x28>
	__asm volatile
 8003f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f32:	f383 8811 	msr	BASEPRI, r3
 8003f36:	f3bf 8f6f 	isb	sy
 8003f3a:	f3bf 8f4f 	dsb	sy
 8003f3e:	60bb      	str	r3, [r7, #8]
}
 8003f40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003f42:	bf00      	nop
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0fc      	beq.n	8003f44 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003f4a:	bf00      	nop
 8003f4c:	bf00      	nop
 8003f4e:	3714      	adds	r7, #20
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr
 8003f58:	2000000c 	.word	0x2000000c
 8003f5c:	00000000 	.word	0x00000000

08003f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003f60:	4b07      	ldr	r3, [pc, #28]	; (8003f80 <pxCurrentTCBConst2>)
 8003f62:	6819      	ldr	r1, [r3, #0]
 8003f64:	6808      	ldr	r0, [r1, #0]
 8003f66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f6a:	f380 8809 	msr	PSP, r0
 8003f6e:	f3bf 8f6f 	isb	sy
 8003f72:	f04f 0000 	mov.w	r0, #0
 8003f76:	f380 8811 	msr	BASEPRI, r0
 8003f7a:	4770      	bx	lr
 8003f7c:	f3af 8000 	nop.w

08003f80 <pxCurrentTCBConst2>:
 8003f80:	20000030 	.word	0x20000030
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003f84:	bf00      	nop
 8003f86:	bf00      	nop

08003f88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003f88:	4808      	ldr	r0, [pc, #32]	; (8003fac <prvPortStartFirstTask+0x24>)
 8003f8a:	6800      	ldr	r0, [r0, #0]
 8003f8c:	6800      	ldr	r0, [r0, #0]
 8003f8e:	f380 8808 	msr	MSP, r0
 8003f92:	f04f 0000 	mov.w	r0, #0
 8003f96:	f380 8814 	msr	CONTROL, r0
 8003f9a:	b662      	cpsie	i
 8003f9c:	b661      	cpsie	f
 8003f9e:	f3bf 8f4f 	dsb	sy
 8003fa2:	f3bf 8f6f 	isb	sy
 8003fa6:	df00      	svc	0
 8003fa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003faa:	bf00      	nop
 8003fac:	e000ed08 	.word	0xe000ed08

08003fb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003fb6:	4b46      	ldr	r3, [pc, #280]	; (80040d0 <xPortStartScheduler+0x120>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a46      	ldr	r2, [pc, #280]	; (80040d4 <xPortStartScheduler+0x124>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d10a      	bne.n	8003fd6 <xPortStartScheduler+0x26>
	__asm volatile
 8003fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc4:	f383 8811 	msr	BASEPRI, r3
 8003fc8:	f3bf 8f6f 	isb	sy
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	613b      	str	r3, [r7, #16]
}
 8003fd2:	bf00      	nop
 8003fd4:	e7fe      	b.n	8003fd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003fd6:	4b3e      	ldr	r3, [pc, #248]	; (80040d0 <xPortStartScheduler+0x120>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a3f      	ldr	r2, [pc, #252]	; (80040d8 <xPortStartScheduler+0x128>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d10a      	bne.n	8003ff6 <xPortStartScheduler+0x46>
	__asm volatile
 8003fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe4:	f383 8811 	msr	BASEPRI, r3
 8003fe8:	f3bf 8f6f 	isb	sy
 8003fec:	f3bf 8f4f 	dsb	sy
 8003ff0:	60fb      	str	r3, [r7, #12]
}
 8003ff2:	bf00      	nop
 8003ff4:	e7fe      	b.n	8003ff4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003ff6:	4b39      	ldr	r3, [pc, #228]	; (80040dc <xPortStartScheduler+0x12c>)
 8003ff8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	22ff      	movs	r2, #255	; 0xff
 8004006:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	b2db      	uxtb	r3, r3
 800400e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004010:	78fb      	ldrb	r3, [r7, #3]
 8004012:	b2db      	uxtb	r3, r3
 8004014:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004018:	b2da      	uxtb	r2, r3
 800401a:	4b31      	ldr	r3, [pc, #196]	; (80040e0 <xPortStartScheduler+0x130>)
 800401c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800401e:	4b31      	ldr	r3, [pc, #196]	; (80040e4 <xPortStartScheduler+0x134>)
 8004020:	2207      	movs	r2, #7
 8004022:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004024:	e009      	b.n	800403a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004026:	4b2f      	ldr	r3, [pc, #188]	; (80040e4 <xPortStartScheduler+0x134>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	3b01      	subs	r3, #1
 800402c:	4a2d      	ldr	r2, [pc, #180]	; (80040e4 <xPortStartScheduler+0x134>)
 800402e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004030:	78fb      	ldrb	r3, [r7, #3]
 8004032:	b2db      	uxtb	r3, r3
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	b2db      	uxtb	r3, r3
 8004038:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800403a:	78fb      	ldrb	r3, [r7, #3]
 800403c:	b2db      	uxtb	r3, r3
 800403e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004042:	2b80      	cmp	r3, #128	; 0x80
 8004044:	d0ef      	beq.n	8004026 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004046:	4b27      	ldr	r3, [pc, #156]	; (80040e4 <xPortStartScheduler+0x134>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f1c3 0307 	rsb	r3, r3, #7
 800404e:	2b04      	cmp	r3, #4
 8004050:	d00a      	beq.n	8004068 <xPortStartScheduler+0xb8>
	__asm volatile
 8004052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004056:	f383 8811 	msr	BASEPRI, r3
 800405a:	f3bf 8f6f 	isb	sy
 800405e:	f3bf 8f4f 	dsb	sy
 8004062:	60bb      	str	r3, [r7, #8]
}
 8004064:	bf00      	nop
 8004066:	e7fe      	b.n	8004066 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004068:	4b1e      	ldr	r3, [pc, #120]	; (80040e4 <xPortStartScheduler+0x134>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	021b      	lsls	r3, r3, #8
 800406e:	4a1d      	ldr	r2, [pc, #116]	; (80040e4 <xPortStartScheduler+0x134>)
 8004070:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004072:	4b1c      	ldr	r3, [pc, #112]	; (80040e4 <xPortStartScheduler+0x134>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800407a:	4a1a      	ldr	r2, [pc, #104]	; (80040e4 <xPortStartScheduler+0x134>)
 800407c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	b2da      	uxtb	r2, r3
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004086:	4b18      	ldr	r3, [pc, #96]	; (80040e8 <xPortStartScheduler+0x138>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a17      	ldr	r2, [pc, #92]	; (80040e8 <xPortStartScheduler+0x138>)
 800408c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004090:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004092:	4b15      	ldr	r3, [pc, #84]	; (80040e8 <xPortStartScheduler+0x138>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a14      	ldr	r2, [pc, #80]	; (80040e8 <xPortStartScheduler+0x138>)
 8004098:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800409c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800409e:	f000 f8dd 	bl	800425c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80040a2:	4b12      	ldr	r3, [pc, #72]	; (80040ec <xPortStartScheduler+0x13c>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80040a8:	f000 f8fc 	bl	80042a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80040ac:	4b10      	ldr	r3, [pc, #64]	; (80040f0 <xPortStartScheduler+0x140>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a0f      	ldr	r2, [pc, #60]	; (80040f0 <xPortStartScheduler+0x140>)
 80040b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80040b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80040b8:	f7ff ff66 	bl	8003f88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80040bc:	f7ff f88a 	bl	80031d4 <vTaskSwitchContext>
	prvTaskExitError();
 80040c0:	f7ff ff20 	bl	8003f04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3718      	adds	r7, #24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	e000ed00 	.word	0xe000ed00
 80040d4:	410fc271 	.word	0x410fc271
 80040d8:	410fc270 	.word	0x410fc270
 80040dc:	e000e400 	.word	0xe000e400
 80040e0:	20000170 	.word	0x20000170
 80040e4:	20000174 	.word	0x20000174
 80040e8:	e000ed20 	.word	0xe000ed20
 80040ec:	2000000c 	.word	0x2000000c
 80040f0:	e000ef34 	.word	0xe000ef34

080040f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
	__asm volatile
 80040fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fe:	f383 8811 	msr	BASEPRI, r3
 8004102:	f3bf 8f6f 	isb	sy
 8004106:	f3bf 8f4f 	dsb	sy
 800410a:	607b      	str	r3, [r7, #4]
}
 800410c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800410e:	4b0f      	ldr	r3, [pc, #60]	; (800414c <vPortEnterCritical+0x58>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	3301      	adds	r3, #1
 8004114:	4a0d      	ldr	r2, [pc, #52]	; (800414c <vPortEnterCritical+0x58>)
 8004116:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004118:	4b0c      	ldr	r3, [pc, #48]	; (800414c <vPortEnterCritical+0x58>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d10f      	bne.n	8004140 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004120:	4b0b      	ldr	r3, [pc, #44]	; (8004150 <vPortEnterCritical+0x5c>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00a      	beq.n	8004140 <vPortEnterCritical+0x4c>
	__asm volatile
 800412a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412e:	f383 8811 	msr	BASEPRI, r3
 8004132:	f3bf 8f6f 	isb	sy
 8004136:	f3bf 8f4f 	dsb	sy
 800413a:	603b      	str	r3, [r7, #0]
}
 800413c:	bf00      	nop
 800413e:	e7fe      	b.n	800413e <vPortEnterCritical+0x4a>
	}
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	2000000c 	.word	0x2000000c
 8004150:	e000ed04 	.word	0xe000ed04

08004154 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800415a:	4b12      	ldr	r3, [pc, #72]	; (80041a4 <vPortExitCritical+0x50>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10a      	bne.n	8004178 <vPortExitCritical+0x24>
	__asm volatile
 8004162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004166:	f383 8811 	msr	BASEPRI, r3
 800416a:	f3bf 8f6f 	isb	sy
 800416e:	f3bf 8f4f 	dsb	sy
 8004172:	607b      	str	r3, [r7, #4]
}
 8004174:	bf00      	nop
 8004176:	e7fe      	b.n	8004176 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004178:	4b0a      	ldr	r3, [pc, #40]	; (80041a4 <vPortExitCritical+0x50>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	3b01      	subs	r3, #1
 800417e:	4a09      	ldr	r2, [pc, #36]	; (80041a4 <vPortExitCritical+0x50>)
 8004180:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004182:	4b08      	ldr	r3, [pc, #32]	; (80041a4 <vPortExitCritical+0x50>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d105      	bne.n	8004196 <vPortExitCritical+0x42>
 800418a:	2300      	movs	r3, #0
 800418c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	f383 8811 	msr	BASEPRI, r3
}
 8004194:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004196:	bf00      	nop
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	2000000c 	.word	0x2000000c
	...

080041b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80041b0:	f3ef 8009 	mrs	r0, PSP
 80041b4:	f3bf 8f6f 	isb	sy
 80041b8:	4b15      	ldr	r3, [pc, #84]	; (8004210 <pxCurrentTCBConst>)
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	f01e 0f10 	tst.w	lr, #16
 80041c0:	bf08      	it	eq
 80041c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80041c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ca:	6010      	str	r0, [r2, #0]
 80041cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80041d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80041d4:	f380 8811 	msr	BASEPRI, r0
 80041d8:	f3bf 8f4f 	dsb	sy
 80041dc:	f3bf 8f6f 	isb	sy
 80041e0:	f7fe fff8 	bl	80031d4 <vTaskSwitchContext>
 80041e4:	f04f 0000 	mov.w	r0, #0
 80041e8:	f380 8811 	msr	BASEPRI, r0
 80041ec:	bc09      	pop	{r0, r3}
 80041ee:	6819      	ldr	r1, [r3, #0]
 80041f0:	6808      	ldr	r0, [r1, #0]
 80041f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041f6:	f01e 0f10 	tst.w	lr, #16
 80041fa:	bf08      	it	eq
 80041fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004200:	f380 8809 	msr	PSP, r0
 8004204:	f3bf 8f6f 	isb	sy
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	f3af 8000 	nop.w

08004210 <pxCurrentTCBConst>:
 8004210:	20000030 	.word	0x20000030
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004214:	bf00      	nop
 8004216:	bf00      	nop

08004218 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
	__asm volatile
 800421e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004222:	f383 8811 	msr	BASEPRI, r3
 8004226:	f3bf 8f6f 	isb	sy
 800422a:	f3bf 8f4f 	dsb	sy
 800422e:	607b      	str	r3, [r7, #4]
}
 8004230:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004232:	f7fe ff17 	bl	8003064 <xTaskIncrementTick>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800423c:	4b06      	ldr	r3, [pc, #24]	; (8004258 <SysTick_Handler+0x40>)
 800423e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	2300      	movs	r3, #0
 8004246:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	f383 8811 	msr	BASEPRI, r3
}
 800424e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004250:	bf00      	nop
 8004252:	3708      	adds	r7, #8
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	e000ed04 	.word	0xe000ed04

0800425c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004260:	4b0b      	ldr	r3, [pc, #44]	; (8004290 <vPortSetupTimerInterrupt+0x34>)
 8004262:	2200      	movs	r2, #0
 8004264:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004266:	4b0b      	ldr	r3, [pc, #44]	; (8004294 <vPortSetupTimerInterrupt+0x38>)
 8004268:	2200      	movs	r2, #0
 800426a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800426c:	4b0a      	ldr	r3, [pc, #40]	; (8004298 <vPortSetupTimerInterrupt+0x3c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a0a      	ldr	r2, [pc, #40]	; (800429c <vPortSetupTimerInterrupt+0x40>)
 8004272:	fba2 2303 	umull	r2, r3, r2, r3
 8004276:	099b      	lsrs	r3, r3, #6
 8004278:	4a09      	ldr	r2, [pc, #36]	; (80042a0 <vPortSetupTimerInterrupt+0x44>)
 800427a:	3b01      	subs	r3, #1
 800427c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800427e:	4b04      	ldr	r3, [pc, #16]	; (8004290 <vPortSetupTimerInterrupt+0x34>)
 8004280:	2207      	movs	r2, #7
 8004282:	601a      	str	r2, [r3, #0]
}
 8004284:	bf00      	nop
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	e000e010 	.word	0xe000e010
 8004294:	e000e018 	.word	0xe000e018
 8004298:	20000000 	.word	0x20000000
 800429c:	10624dd3 	.word	0x10624dd3
 80042a0:	e000e014 	.word	0xe000e014

080042a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80042a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80042b4 <vPortEnableVFP+0x10>
 80042a8:	6801      	ldr	r1, [r0, #0]
 80042aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80042ae:	6001      	str	r1, [r0, #0]
 80042b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80042b2:	bf00      	nop
 80042b4:	e000ed88 	.word	0xe000ed88

080042b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80042be:	f3ef 8305 	mrs	r3, IPSR
 80042c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2b0f      	cmp	r3, #15
 80042c8:	d914      	bls.n	80042f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80042ca:	4a17      	ldr	r2, [pc, #92]	; (8004328 <vPortValidateInterruptPriority+0x70>)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4413      	add	r3, r2
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80042d4:	4b15      	ldr	r3, [pc, #84]	; (800432c <vPortValidateInterruptPriority+0x74>)
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	7afa      	ldrb	r2, [r7, #11]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d20a      	bcs.n	80042f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80042de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e2:	f383 8811 	msr	BASEPRI, r3
 80042e6:	f3bf 8f6f 	isb	sy
 80042ea:	f3bf 8f4f 	dsb	sy
 80042ee:	607b      	str	r3, [r7, #4]
}
 80042f0:	bf00      	nop
 80042f2:	e7fe      	b.n	80042f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80042f4:	4b0e      	ldr	r3, [pc, #56]	; (8004330 <vPortValidateInterruptPriority+0x78>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80042fc:	4b0d      	ldr	r3, [pc, #52]	; (8004334 <vPortValidateInterruptPriority+0x7c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	429a      	cmp	r2, r3
 8004302:	d90a      	bls.n	800431a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004308:	f383 8811 	msr	BASEPRI, r3
 800430c:	f3bf 8f6f 	isb	sy
 8004310:	f3bf 8f4f 	dsb	sy
 8004314:	603b      	str	r3, [r7, #0]
}
 8004316:	bf00      	nop
 8004318:	e7fe      	b.n	8004318 <vPortValidateInterruptPriority+0x60>
	}
 800431a:	bf00      	nop
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	e000e3f0 	.word	0xe000e3f0
 800432c:	20000170 	.word	0x20000170
 8004330:	e000ed0c 	.word	0xe000ed0c
 8004334:	20000174 	.word	0x20000174

08004338 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b08a      	sub	sp, #40	; 0x28
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004340:	2300      	movs	r3, #0
 8004342:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004344:	f7fe fdd4 	bl	8002ef0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004348:	4b58      	ldr	r3, [pc, #352]	; (80044ac <pvPortMalloc+0x174>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004350:	f000 f910 	bl	8004574 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004354:	4b56      	ldr	r3, [pc, #344]	; (80044b0 <pvPortMalloc+0x178>)
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4013      	ands	r3, r2
 800435c:	2b00      	cmp	r3, #0
 800435e:	f040 808e 	bne.w	800447e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d01d      	beq.n	80043a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004368:	2208      	movs	r2, #8
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4413      	add	r3, r2
 800436e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f003 0307 	and.w	r3, r3, #7
 8004376:	2b00      	cmp	r3, #0
 8004378:	d014      	beq.n	80043a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f023 0307 	bic.w	r3, r3, #7
 8004380:	3308      	adds	r3, #8
 8004382:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f003 0307 	and.w	r3, r3, #7
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00a      	beq.n	80043a4 <pvPortMalloc+0x6c>
	__asm volatile
 800438e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004392:	f383 8811 	msr	BASEPRI, r3
 8004396:	f3bf 8f6f 	isb	sy
 800439a:	f3bf 8f4f 	dsb	sy
 800439e:	617b      	str	r3, [r7, #20]
}
 80043a0:	bf00      	nop
 80043a2:	e7fe      	b.n	80043a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d069      	beq.n	800447e <pvPortMalloc+0x146>
 80043aa:	4b42      	ldr	r3, [pc, #264]	; (80044b4 <pvPortMalloc+0x17c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d864      	bhi.n	800447e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80043b4:	4b40      	ldr	r3, [pc, #256]	; (80044b8 <pvPortMalloc+0x180>)
 80043b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80043b8:	4b3f      	ldr	r3, [pc, #252]	; (80044b8 <pvPortMalloc+0x180>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043be:	e004      	b.n	80043ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d903      	bls.n	80043dc <pvPortMalloc+0xa4>
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1f1      	bne.n	80043c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80043dc:	4b33      	ldr	r3, [pc, #204]	; (80044ac <pvPortMalloc+0x174>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d04b      	beq.n	800447e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80043e6:	6a3b      	ldr	r3, [r7, #32]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2208      	movs	r2, #8
 80043ec:	4413      	add	r3, r2
 80043ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	6a3b      	ldr	r3, [r7, #32]
 80043f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	1ad2      	subs	r2, r2, r3
 8004400:	2308      	movs	r3, #8
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	429a      	cmp	r2, r3
 8004406:	d91f      	bls.n	8004448 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4413      	add	r3, r2
 800440e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	f003 0307 	and.w	r3, r3, #7
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <pvPortMalloc+0xf8>
	__asm volatile
 800441a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441e:	f383 8811 	msr	BASEPRI, r3
 8004422:	f3bf 8f6f 	isb	sy
 8004426:	f3bf 8f4f 	dsb	sy
 800442a:	613b      	str	r3, [r7, #16]
}
 800442c:	bf00      	nop
 800442e:	e7fe      	b.n	800442e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	1ad2      	subs	r2, r2, r3
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004442:	69b8      	ldr	r0, [r7, #24]
 8004444:	f000 f8f8 	bl	8004638 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004448:	4b1a      	ldr	r3, [pc, #104]	; (80044b4 <pvPortMalloc+0x17c>)
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	4a18      	ldr	r2, [pc, #96]	; (80044b4 <pvPortMalloc+0x17c>)
 8004454:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004456:	4b17      	ldr	r3, [pc, #92]	; (80044b4 <pvPortMalloc+0x17c>)
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	4b18      	ldr	r3, [pc, #96]	; (80044bc <pvPortMalloc+0x184>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	429a      	cmp	r2, r3
 8004460:	d203      	bcs.n	800446a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004462:	4b14      	ldr	r3, [pc, #80]	; (80044b4 <pvPortMalloc+0x17c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a15      	ldr	r2, [pc, #84]	; (80044bc <pvPortMalloc+0x184>)
 8004468:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	4b10      	ldr	r3, [pc, #64]	; (80044b0 <pvPortMalloc+0x178>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	431a      	orrs	r2, r3
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447a:	2200      	movs	r2, #0
 800447c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800447e:	f7fe fd45 	bl	8002f0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	f003 0307 	and.w	r3, r3, #7
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00a      	beq.n	80044a2 <pvPortMalloc+0x16a>
	__asm volatile
 800448c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004490:	f383 8811 	msr	BASEPRI, r3
 8004494:	f3bf 8f6f 	isb	sy
 8004498:	f3bf 8f4f 	dsb	sy
 800449c:	60fb      	str	r3, [r7, #12]
}
 800449e:	bf00      	nop
 80044a0:	e7fe      	b.n	80044a0 <pvPortMalloc+0x168>
	return pvReturn;
 80044a2:	69fb      	ldr	r3, [r7, #28]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3728      	adds	r7, #40	; 0x28
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	20012d80 	.word	0x20012d80
 80044b0:	20012d8c 	.word	0x20012d8c
 80044b4:	20012d84 	.word	0x20012d84
 80044b8:	20012d78 	.word	0x20012d78
 80044bc:	20012d88 	.word	0x20012d88

080044c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d048      	beq.n	8004564 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80044d2:	2308      	movs	r3, #8
 80044d4:	425b      	negs	r3, r3
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	4413      	add	r3, r2
 80044da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	4b21      	ldr	r3, [pc, #132]	; (800456c <vPortFree+0xac>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4013      	ands	r3, r2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10a      	bne.n	8004504 <vPortFree+0x44>
	__asm volatile
 80044ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f2:	f383 8811 	msr	BASEPRI, r3
 80044f6:	f3bf 8f6f 	isb	sy
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	60fb      	str	r3, [r7, #12]
}
 8004500:	bf00      	nop
 8004502:	e7fe      	b.n	8004502 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00a      	beq.n	8004522 <vPortFree+0x62>
	__asm volatile
 800450c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004510:	f383 8811 	msr	BASEPRI, r3
 8004514:	f3bf 8f6f 	isb	sy
 8004518:	f3bf 8f4f 	dsb	sy
 800451c:	60bb      	str	r3, [r7, #8]
}
 800451e:	bf00      	nop
 8004520:	e7fe      	b.n	8004520 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	4b11      	ldr	r3, [pc, #68]	; (800456c <vPortFree+0xac>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4013      	ands	r3, r2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d019      	beq.n	8004564 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d115      	bne.n	8004564 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	4b0b      	ldr	r3, [pc, #44]	; (800456c <vPortFree+0xac>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	43db      	mvns	r3, r3
 8004542:	401a      	ands	r2, r3
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004548:	f7fe fcd2 	bl	8002ef0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	4b07      	ldr	r3, [pc, #28]	; (8004570 <vPortFree+0xb0>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4413      	add	r3, r2
 8004556:	4a06      	ldr	r2, [pc, #24]	; (8004570 <vPortFree+0xb0>)
 8004558:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800455a:	6938      	ldr	r0, [r7, #16]
 800455c:	f000 f86c 	bl	8004638 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004560:	f7fe fcd4 	bl	8002f0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004564:	bf00      	nop
 8004566:	3718      	adds	r7, #24
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	20012d8c 	.word	0x20012d8c
 8004570:	20012d84 	.word	0x20012d84

08004574 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800457a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800457e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004580:	4b27      	ldr	r3, [pc, #156]	; (8004620 <prvHeapInit+0xac>)
 8004582:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00c      	beq.n	80045a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	3307      	adds	r3, #7
 8004592:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f023 0307 	bic.w	r3, r3, #7
 800459a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	4a1f      	ldr	r2, [pc, #124]	; (8004620 <prvHeapInit+0xac>)
 80045a4:	4413      	add	r3, r2
 80045a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80045ac:	4a1d      	ldr	r2, [pc, #116]	; (8004624 <prvHeapInit+0xb0>)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80045b2:	4b1c      	ldr	r3, [pc, #112]	; (8004624 <prvHeapInit+0xb0>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	4413      	add	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80045c0:	2208      	movs	r2, #8
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	1a9b      	subs	r3, r3, r2
 80045c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f023 0307 	bic.w	r3, r3, #7
 80045ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	4a15      	ldr	r2, [pc, #84]	; (8004628 <prvHeapInit+0xb4>)
 80045d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80045d6:	4b14      	ldr	r3, [pc, #80]	; (8004628 <prvHeapInit+0xb4>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2200      	movs	r2, #0
 80045dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80045de:	4b12      	ldr	r3, [pc, #72]	; (8004628 <prvHeapInit+0xb4>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2200      	movs	r2, #0
 80045e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	1ad2      	subs	r2, r2, r3
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80045f4:	4b0c      	ldr	r3, [pc, #48]	; (8004628 <prvHeapInit+0xb4>)
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	4a0a      	ldr	r2, [pc, #40]	; (800462c <prvHeapInit+0xb8>)
 8004602:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	4a09      	ldr	r2, [pc, #36]	; (8004630 <prvHeapInit+0xbc>)
 800460a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800460c:	4b09      	ldr	r3, [pc, #36]	; (8004634 <prvHeapInit+0xc0>)
 800460e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004612:	601a      	str	r2, [r3, #0]
}
 8004614:	bf00      	nop
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	20000178 	.word	0x20000178
 8004624:	20012d78 	.word	0x20012d78
 8004628:	20012d80 	.word	0x20012d80
 800462c:	20012d88 	.word	0x20012d88
 8004630:	20012d84 	.word	0x20012d84
 8004634:	20012d8c 	.word	0x20012d8c

08004638 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004640:	4b28      	ldr	r3, [pc, #160]	; (80046e4 <prvInsertBlockIntoFreeList+0xac>)
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	e002      	b.n	800464c <prvInsertBlockIntoFreeList+0x14>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	60fb      	str	r3, [r7, #12]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	429a      	cmp	r2, r3
 8004654:	d8f7      	bhi.n	8004646 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	4413      	add	r3, r2
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	429a      	cmp	r2, r3
 8004666:	d108      	bne.n	800467a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	441a      	add	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	441a      	add	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	429a      	cmp	r2, r3
 800468c:	d118      	bne.n	80046c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	4b15      	ldr	r3, [pc, #84]	; (80046e8 <prvInsertBlockIntoFreeList+0xb0>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	429a      	cmp	r2, r3
 8004698:	d00d      	beq.n	80046b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	441a      	add	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	e008      	b.n	80046c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80046b6:	4b0c      	ldr	r3, [pc, #48]	; (80046e8 <prvInsertBlockIntoFreeList+0xb0>)
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	e003      	b.n	80046c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d002      	beq.n	80046d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046d6:	bf00      	nop
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	20012d78 	.word	0x20012d78
 80046e8:	20012d80 	.word	0x20012d80

080046ec <__libc_init_array>:
 80046ec:	b570      	push	{r4, r5, r6, lr}
 80046ee:	4d0d      	ldr	r5, [pc, #52]	; (8004724 <__libc_init_array+0x38>)
 80046f0:	4c0d      	ldr	r4, [pc, #52]	; (8004728 <__libc_init_array+0x3c>)
 80046f2:	1b64      	subs	r4, r4, r5
 80046f4:	10a4      	asrs	r4, r4, #2
 80046f6:	2600      	movs	r6, #0
 80046f8:	42a6      	cmp	r6, r4
 80046fa:	d109      	bne.n	8004710 <__libc_init_array+0x24>
 80046fc:	4d0b      	ldr	r5, [pc, #44]	; (800472c <__libc_init_array+0x40>)
 80046fe:	4c0c      	ldr	r4, [pc, #48]	; (8004730 <__libc_init_array+0x44>)
 8004700:	f000 f82e 	bl	8004760 <_init>
 8004704:	1b64      	subs	r4, r4, r5
 8004706:	10a4      	asrs	r4, r4, #2
 8004708:	2600      	movs	r6, #0
 800470a:	42a6      	cmp	r6, r4
 800470c:	d105      	bne.n	800471a <__libc_init_array+0x2e>
 800470e:	bd70      	pop	{r4, r5, r6, pc}
 8004710:	f855 3b04 	ldr.w	r3, [r5], #4
 8004714:	4798      	blx	r3
 8004716:	3601      	adds	r6, #1
 8004718:	e7ee      	b.n	80046f8 <__libc_init_array+0xc>
 800471a:	f855 3b04 	ldr.w	r3, [r5], #4
 800471e:	4798      	blx	r3
 8004720:	3601      	adds	r6, #1
 8004722:	e7f2      	b.n	800470a <__libc_init_array+0x1e>
 8004724:	080047cc 	.word	0x080047cc
 8004728:	080047cc 	.word	0x080047cc
 800472c:	080047cc 	.word	0x080047cc
 8004730:	080047d0 	.word	0x080047d0

08004734 <memcpy>:
 8004734:	440a      	add	r2, r1
 8004736:	4291      	cmp	r1, r2
 8004738:	f100 33ff 	add.w	r3, r0, #4294967295
 800473c:	d100      	bne.n	8004740 <memcpy+0xc>
 800473e:	4770      	bx	lr
 8004740:	b510      	push	{r4, lr}
 8004742:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004746:	f803 4f01 	strb.w	r4, [r3, #1]!
 800474a:	4291      	cmp	r1, r2
 800474c:	d1f9      	bne.n	8004742 <memcpy+0xe>
 800474e:	bd10      	pop	{r4, pc}

08004750 <memset>:
 8004750:	4402      	add	r2, r0
 8004752:	4603      	mov	r3, r0
 8004754:	4293      	cmp	r3, r2
 8004756:	d100      	bne.n	800475a <memset+0xa>
 8004758:	4770      	bx	lr
 800475a:	f803 1b01 	strb.w	r1, [r3], #1
 800475e:	e7f9      	b.n	8004754 <memset+0x4>

08004760 <_init>:
 8004760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004762:	bf00      	nop
 8004764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004766:	bc08      	pop	{r3}
 8004768:	469e      	mov	lr, r3
 800476a:	4770      	bx	lr

0800476c <_fini>:
 800476c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476e:	bf00      	nop
 8004770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004772:	bc08      	pop	{r3}
 8004774:	469e      	mov	lr, r3
 8004776:	4770      	bx	lr
