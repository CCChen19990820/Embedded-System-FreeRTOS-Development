
lab_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dc8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08005f58  08005f58  00015f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800603c  0800603c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800603c  0800603c  0001603c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006044  08006044  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006044  08006044  00016044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006048  08006048  00016048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800604c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00012f70  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012f80  20012f80  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018922  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f5b  00000000  00000000  00038962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001288  00000000  00000000  0003b8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001180  00000000  00000000  0003cb48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002260c  00000000  00000000  0003dcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000153eb  00000000  00000000  000602d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d41f9  00000000  00000000  000756bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001498b8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e40  00000000  00000000  0014990c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005f40 	.word	0x08005f40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005f40 	.word	0x08005f40

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MEMS_Write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
SemaphoreHandle_t xSemaphore =NULL;

void MEMS_Write(uint8_t address,uint8_t data){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	460a      	mov	r2, r1
 80004d2:	71fb      	strb	r3, [r7, #7]
 80004d4:	4613      	mov	r3, r2
 80004d6:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	2108      	movs	r1, #8
 80004dc:	480b      	ldr	r0, [pc, #44]	; (800050c <MEMS_Write+0x44>)
 80004de:	f000 ff87 	bl	80013f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,&address,1,10);
 80004e2:	1df9      	adds	r1, r7, #7
 80004e4:	230a      	movs	r3, #10
 80004e6:	2201      	movs	r2, #1
 80004e8:	4809      	ldr	r0, [pc, #36]	; (8000510 <MEMS_Write+0x48>)
 80004ea:	f001 fcfc 	bl	8001ee6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1,&data,1,10);
 80004ee:	1db9      	adds	r1, r7, #6
 80004f0:	230a      	movs	r3, #10
 80004f2:	2201      	movs	r2, #1
 80004f4:	4806      	ldr	r0, [pc, #24]	; (8000510 <MEMS_Write+0x48>)
 80004f6:	f001 fcf6 	bl	8001ee6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3,GPIO_PIN_SET);
 80004fa:	2201      	movs	r2, #1
 80004fc:	2108      	movs	r1, #8
 80004fe:	4803      	ldr	r0, [pc, #12]	; (800050c <MEMS_Write+0x44>)
 8000500:	f000 ff76 	bl	80013f0 <HAL_GPIO_WritePin>
}
 8000504:	bf00      	nop
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40021000 	.word	0x40021000
 8000510:	20012e58 	.word	0x20012e58

08000514 <MEMS_Read>:

void MEMS_Read(uint8_t address,uint8_t *data){
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	6039      	str	r1, [r7, #0]
 800051e:	71fb      	strb	r3, [r7, #7]
    address |= 0x80;
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000526:	b2db      	uxtb	r3, r3
 8000528:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 800052a:	2200      	movs	r2, #0
 800052c:	2108      	movs	r1, #8
 800052e:	480c      	ldr	r0, [pc, #48]	; (8000560 <MEMS_Read+0x4c>)
 8000530:	f000 ff5e 	bl	80013f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,&address,1,10);
 8000534:	1df9      	adds	r1, r7, #7
 8000536:	230a      	movs	r3, #10
 8000538:	2201      	movs	r2, #1
 800053a:	480a      	ldr	r0, [pc, #40]	; (8000564 <MEMS_Read+0x50>)
 800053c:	f001 fcd3 	bl	8001ee6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1,data,1,10);
 8000540:	230a      	movs	r3, #10
 8000542:	2201      	movs	r2, #1
 8000544:	6839      	ldr	r1, [r7, #0]
 8000546:	4807      	ldr	r0, [pc, #28]	; (8000564 <MEMS_Read+0x50>)
 8000548:	f001 fe09 	bl	800215e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 800054c:	2201      	movs	r2, #1
 800054e:	2108      	movs	r1, #8
 8000550:	4803      	ldr	r0, [pc, #12]	; (8000560 <MEMS_Read+0x4c>)
 8000552:	f000 ff4d 	bl	80013f0 <HAL_GPIO_WritePin>
}
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40021000 	.word	0x40021000
 8000564:	20012e58 	.word	0x20012e58

08000568 <LED_Task>:

void LED_Task(void *pvParameter)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		HAL_GPIO_WritePin(led_green_GPIO_Port,GPIO_PIN_12,GPIO_PIN_SET);
 8000570:	2201      	movs	r2, #1
 8000572:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000576:	4809      	ldr	r0, [pc, #36]	; (800059c <LED_Task+0x34>)
 8000578:	f000 ff3a 	bl	80013f0 <HAL_GPIO_WritePin>
		vTaskDelay(1000);
 800057c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000580:	f003 fee4 	bl	800434c <vTaskDelay>
		HAL_GPIO_WritePin(led_green_GPIO_Port,GPIO_PIN_12,GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800058a:	4804      	ldr	r0, [pc, #16]	; (800059c <LED_Task+0x34>)
 800058c:	f000 ff30 	bl	80013f0 <HAL_GPIO_WritePin>
		vTaskDelay(1000);
 8000590:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000594:	f003 feda 	bl	800434c <vTaskDelay>
		HAL_GPIO_WritePin(led_green_GPIO_Port,GPIO_PIN_12,GPIO_PIN_SET);
 8000598:	e7ea      	b.n	8000570 <LED_Task+0x8>
 800059a:	bf00      	nop
 800059c:	40020c00 	.word	0x40020c00

080005a0 <vHandlerTask>:
	}
}

void vHandlerTask(void* pvParameters)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		if(xSemaphoreTake(xSemaphore, portMAX_DELAY) == pdTRUE){
 80005a8:	4b15      	ldr	r3, [pc, #84]	; (8000600 <vHandlerTask+0x60>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f04f 31ff 	mov.w	r1, #4294967295
 80005b0:	4618      	mov	r0, r3
 80005b2:	f003 fafb 	bl	8003bac <xQueueSemaphoreTake>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d1f5      	bne.n	80005a8 <vHandlerTask+0x8>
			uint8_t data = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	73fb      	strb	r3, [r7, #15]
			for(int i=0;i<10;i++)
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
 80005c4:	e012      	b.n	80005ec <vHandlerTask+0x4c>
			{
				uint32_t From_begin_time = HAL_GetTick();
 80005c6:	f000 fc89 	bl	8000edc <HAL_GetTick>
 80005ca:	6138      	str	r0, [r7, #16]
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80005cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d0:	480c      	ldr	r0, [pc, #48]	; (8000604 <vHandlerTask+0x64>)
 80005d2:	f000 ff26 	bl	8001422 <HAL_GPIO_TogglePin>
				while(HAL_GetTick() - From_begin_time < 250 / portTICK_RATE_MS){
 80005d6:	bf00      	nop
 80005d8:	f000 fc80 	bl	8000edc <HAL_GetTick>
 80005dc:	4602      	mov	r2, r0
 80005de:	693b      	ldr	r3, [r7, #16]
 80005e0:	1ad3      	subs	r3, r2, r3
 80005e2:	2bf9      	cmp	r3, #249	; 0xf9
 80005e4:	d9f8      	bls.n	80005d8 <vHandlerTask+0x38>
			for(int i=0;i<10;i++)
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	3301      	adds	r3, #1
 80005ea:	617b      	str	r3, [r7, #20]
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	2b09      	cmp	r3, #9
 80005f0:	dde9      	ble.n	80005c6 <vHandlerTask+0x26>
				}
			}
			MEMS_Read(LIS3DSH_OUTS1_ADDR, &data);
 80005f2:	f107 030f 	add.w	r3, r7, #15
 80005f6:	4619      	mov	r1, r3
 80005f8:	205f      	movs	r0, #95	; 0x5f
 80005fa:	f7ff ff8b 	bl	8000514 <MEMS_Read>
		if(xSemaphoreTake(xSemaphore, portMAX_DELAY) == pdTRUE){
 80005fe:	e7d3      	b.n	80005a8 <vHandlerTask+0x8>
 8000600:	2000002c 	.word	0x2000002c
 8000604:	40020c00 	.word	0x40020c00

08000608 <HAL_GPIO_EXTI_Callback>:
		}
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	80fb      	strh	r3, [r7, #6]

	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken=pdFALSE;
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(xSemaphore,&xHigherPriorityTaskWoken);
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <HAL_GPIO_EXTI_Callback+0x48>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f107 020c 	add.w	r2, r7, #12
 800061e:	4611      	mov	r1, r2
 8000620:	4618      	mov	r0, r3
 8000622:	f003 f955 	bl	80038d0 <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d007      	beq.n	800063c <HAL_GPIO_EXTI_Callback+0x34>
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <HAL_GPIO_EXTI_Callback+0x4c>)
 800062e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	f3bf 8f4f 	dsb	sy
 8000638:	f3bf 8f6f 	isb	sy
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800063c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000640:	4805      	ldr	r0, [pc, #20]	; (8000658 <HAL_GPIO_EXTI_Callback+0x50>)
 8000642:	f000 feee 	bl	8001422 <HAL_GPIO_TogglePin>
}
 8000646:	bf00      	nop
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	2000002c 	.word	0x2000002c
 8000654:	e000ed04 	.word	0xe000ed04
 8000658:	40020c00 	.word	0x40020c00

0800065c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000662:	f000 fc05 	bl	8000e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000666:	f000 f859 	bl	800071c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066a:	f000 f921 	bl	80008b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800066e:	f000 f8f5 	bl	800085c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000672:	f000 f8bd 	bl	80007f0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  MEMS_Write(LIS3DSH_CTRL_REG1_ADDR,0x01);
 8000676:	2101      	movs	r1, #1
 8000678:	2021      	movs	r0, #33	; 0x21
 800067a:	f7ff ff25 	bl	80004c8 <MEMS_Write>
  MEMS_Write(LIS3DSH_CTRL_REG3_ADDR,0x48);
 800067e:	2148      	movs	r1, #72	; 0x48
 8000680:	2023      	movs	r0, #35	; 0x23
 8000682:	f7ff ff21 	bl	80004c8 <MEMS_Write>
  MEMS_Write(LIS3DSH_CTRL_REG4_ADDR,0x67);
 8000686:	2167      	movs	r1, #103	; 0x67
 8000688:	2020      	movs	r0, #32
 800068a:	f7ff ff1d 	bl	80004c8 <MEMS_Write>
  MEMS_Write(LIS3DSH_CTRL_REG5_ADDR,0x00);
 800068e:	2100      	movs	r1, #0
 8000690:	2024      	movs	r0, #36	; 0x24
 8000692:	f7ff ff19 	bl	80004c8 <MEMS_Write>
  MEMS_Write(LIS3DSH_THRS1_1_ADDR,0x55);
 8000696:	2155      	movs	r1, #85	; 0x55
 8000698:	2057      	movs	r0, #87	; 0x57
 800069a:	f7ff ff15 	bl	80004c8 <MEMS_Write>
  MEMS_Write(LIS3DSH_ST1_1_ADDR,0x05);
 800069e:	2105      	movs	r1, #5
 80006a0:	2040      	movs	r0, #64	; 0x40
 80006a2:	f7ff ff11 	bl	80004c8 <MEMS_Write>
  MEMS_Write(LIS3DSH_ST1_2_ADDR,0x11);
 80006a6:	2111      	movs	r1, #17
 80006a8:	2041      	movs	r0, #65	; 0x41
 80006aa:	f7ff ff0d 	bl	80004c8 <MEMS_Write>
  MEMS_Write(LIS3DSH_MASK1_B_ADDR,0xFC);
 80006ae:	21fc      	movs	r1, #252	; 0xfc
 80006b0:	2059      	movs	r0, #89	; 0x59
 80006b2:	f7ff ff09 	bl	80004c8 <MEMS_Write>
  MEMS_Write(LIS3DSH_MASK1_A_ADDR,0xFC);
 80006b6:	21fc      	movs	r1, #252	; 0xfc
 80006b8:	205a      	movs	r0, #90	; 0x5a
 80006ba:	f7ff ff05 	bl	80004c8 <MEMS_Write>
  MEMS_Write(LIS3DSH_SETT1_ADDR,0x01);
 80006be:	2101      	movs	r1, #1
 80006c0:	205b      	movs	r0, #91	; 0x5b
 80006c2:	f7ff ff01 	bl	80004c8 <MEMS_Write>


  xSemaphore = xSemaphoreCreateBinary();
 80006c6:	2203      	movs	r2, #3
 80006c8:	2100      	movs	r1, #0
 80006ca:	2001      	movs	r0, #1
 80006cc:	f002 ff0a 	bl	80034e4 <xQueueGenericCreate>
 80006d0:	4603      	mov	r3, r0
 80006d2:	4a0d      	ldr	r2, [pc, #52]	; (8000708 <main+0xac>)
 80006d4:	6013      	str	r3, [r2, #0]

  xTaskCreate(LED_Task,"LED_Task",1000,NULL,1,NULL);
 80006d6:	2300      	movs	r3, #0
 80006d8:	9301      	str	r3, [sp, #4]
 80006da:	2301      	movs	r3, #1
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	2300      	movs	r3, #0
 80006e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006e4:	4909      	ldr	r1, [pc, #36]	; (800070c <main+0xb0>)
 80006e6:	480a      	ldr	r0, [pc, #40]	; (8000710 <main+0xb4>)
 80006e8:	f003 fcf2 	bl	80040d0 <xTaskCreate>
  xTaskCreate(vHandlerTask,"vHandlerTask",1000,NULL,3,NULL);
 80006ec:	2300      	movs	r3, #0
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	2303      	movs	r3, #3
 80006f2:	9300      	str	r3, [sp, #0]
 80006f4:	2300      	movs	r3, #0
 80006f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006fa:	4906      	ldr	r1, [pc, #24]	; (8000714 <main+0xb8>)
 80006fc:	4806      	ldr	r0, [pc, #24]	; (8000718 <main+0xbc>)
 80006fe:	f003 fce7 	bl	80040d0 <xTaskCreate>
  vTaskStartScheduler();
 8000702:	f003 fe57 	bl	80043b4 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000706:	e7fe      	b.n	8000706 <main+0xaa>
 8000708:	2000002c 	.word	0x2000002c
 800070c:	08005f58 	.word	0x08005f58
 8000710:	08000569 	.word	0x08000569
 8000714:	08005f64 	.word	0x08005f64
 8000718:	080005a1 	.word	0x080005a1

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b094      	sub	sp, #80	; 0x50
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	f107 0320 	add.w	r3, r7, #32
 8000726:	2230      	movs	r2, #48	; 0x30
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f005 fc00 	bl	8005f30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000740:	2300      	movs	r3, #0
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	4b28      	ldr	r3, [pc, #160]	; (80007e8 <SystemClock_Config+0xcc>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000748:	4a27      	ldr	r2, [pc, #156]	; (80007e8 <SystemClock_Config+0xcc>)
 800074a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074e:	6413      	str	r3, [r2, #64]	; 0x40
 8000750:	4b25      	ldr	r3, [pc, #148]	; (80007e8 <SystemClock_Config+0xcc>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800075c:	2300      	movs	r3, #0
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	4b22      	ldr	r3, [pc, #136]	; (80007ec <SystemClock_Config+0xd0>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a21      	ldr	r2, [pc, #132]	; (80007ec <SystemClock_Config+0xd0>)
 8000766:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800076a:	6013      	str	r3, [r2, #0]
 800076c:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <SystemClock_Config+0xd0>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000778:	2302      	movs	r3, #2
 800077a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800077c:	2301      	movs	r3, #1
 800077e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000780:	2310      	movs	r3, #16
 8000782:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000784:	2302      	movs	r3, #2
 8000786:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000788:	2300      	movs	r3, #0
 800078a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800078c:	2308      	movs	r3, #8
 800078e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000790:	2332      	movs	r3, #50	; 0x32
 8000792:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000794:	2304      	movs	r3, #4
 8000796:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000798:	2307      	movs	r3, #7
 800079a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079c:	f107 0320 	add.w	r3, r7, #32
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 fe71 	bl	8001488 <HAL_RCC_OscConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007ac:	f000 f9e4 	bl	8000b78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b0:	230f      	movs	r3, #15
 80007b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b4:	2302      	movs	r3, #2
 80007b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f001 f8d2 	bl	8001978 <HAL_RCC_ClockConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007da:	f000 f9cd 	bl	8000b78 <Error_Handler>
  }
}
 80007de:	bf00      	nop
 80007e0:	3750      	adds	r7, #80	; 0x50
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40007000 	.word	0x40007000

080007f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007f4:	4b17      	ldr	r3, [pc, #92]	; (8000854 <MX_SPI1_Init+0x64>)
 80007f6:	4a18      	ldr	r2, [pc, #96]	; (8000858 <MX_SPI1_Init+0x68>)
 80007f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007fa:	4b16      	ldr	r3, [pc, #88]	; (8000854 <MX_SPI1_Init+0x64>)
 80007fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000800:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000802:	4b14      	ldr	r3, [pc, #80]	; (8000854 <MX_SPI1_Init+0x64>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <MX_SPI1_Init+0x64>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_SPI1_Init+0x64>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_SPI1_Init+0x64>)
 8000816:	2200      	movs	r2, #0
 8000818:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_SPI1_Init+0x64>)
 800081c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000820:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_SPI1_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000828:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <MX_SPI1_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_SPI1_Init+0x64>)
 8000830:	2200      	movs	r2, #0
 8000832:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000834:	4b07      	ldr	r3, [pc, #28]	; (8000854 <MX_SPI1_Init+0x64>)
 8000836:	2200      	movs	r2, #0
 8000838:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_SPI1_Init+0x64>)
 800083c:	220a      	movs	r2, #10
 800083e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000840:	4804      	ldr	r0, [pc, #16]	; (8000854 <MX_SPI1_Init+0x64>)
 8000842:	f001 fac7 	bl	8001dd4 <HAL_SPI_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800084c:	f000 f994 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20012e58 	.word	0x20012e58
 8000858:	40013000 	.word	0x40013000

0800085c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000860:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000862:	4a12      	ldr	r2, [pc, #72]	; (80008ac <MX_USART2_UART_Init+0x50>)
 8000864:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000866:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000868:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800086c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <MX_USART2_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000880:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000882:	220c      	movs	r2, #12
 8000884:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_USART2_UART_Init+0x4c>)
 800088e:	2200      	movs	r2, #0
 8000890:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000892:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000894:	f002 faf4 	bl	8002e80 <HAL_UART_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800089e:	f000 f96b 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20012eb0 	.word	0x20012eb0
 80008ac:	40004400 	.word	0x40004400

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08c      	sub	sp, #48	; 0x30
 80008b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	61bb      	str	r3, [r7, #24]
 80008ca:	4b9c      	ldr	r3, [pc, #624]	; (8000b3c <MX_GPIO_Init+0x28c>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a9b      	ldr	r2, [pc, #620]	; (8000b3c <MX_GPIO_Init+0x28c>)
 80008d0:	f043 0310 	orr.w	r3, r3, #16
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b99      	ldr	r3, [pc, #612]	; (8000b3c <MX_GPIO_Init+0x28c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0310 	and.w	r3, r3, #16
 80008de:	61bb      	str	r3, [r7, #24]
 80008e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]
 80008e6:	4b95      	ldr	r3, [pc, #596]	; (8000b3c <MX_GPIO_Init+0x28c>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a94      	ldr	r2, [pc, #592]	; (8000b3c <MX_GPIO_Init+0x28c>)
 80008ec:	f043 0304 	orr.w	r3, r3, #4
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b92      	ldr	r3, [pc, #584]	; (8000b3c <MX_GPIO_Init+0x28c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0304 	and.w	r3, r3, #4
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]
 8000902:	4b8e      	ldr	r3, [pc, #568]	; (8000b3c <MX_GPIO_Init+0x28c>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a8d      	ldr	r2, [pc, #564]	; (8000b3c <MX_GPIO_Init+0x28c>)
 8000908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b8b      	ldr	r3, [pc, #556]	; (8000b3c <MX_GPIO_Init+0x28c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	4b87      	ldr	r3, [pc, #540]	; (8000b3c <MX_GPIO_Init+0x28c>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a86      	ldr	r2, [pc, #536]	; (8000b3c <MX_GPIO_Init+0x28c>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b84      	ldr	r3, [pc, #528]	; (8000b3c <MX_GPIO_Init+0x28c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	4b80      	ldr	r3, [pc, #512]	; (8000b3c <MX_GPIO_Init+0x28c>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a7f      	ldr	r2, [pc, #508]	; (8000b3c <MX_GPIO_Init+0x28c>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b7d      	ldr	r3, [pc, #500]	; (8000b3c <MX_GPIO_Init+0x28c>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b79      	ldr	r3, [pc, #484]	; (8000b3c <MX_GPIO_Init+0x28c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a78      	ldr	r2, [pc, #480]	; (8000b3c <MX_GPIO_Init+0x28c>)
 800095c:	f043 0308 	orr.w	r3, r3, #8
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b76      	ldr	r3, [pc, #472]	; (8000b3c <MX_GPIO_Init+0x28c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0308 	and.w	r3, r3, #8
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	2108      	movs	r1, #8
 8000972:	4873      	ldr	r0, [pc, #460]	; (8000b40 <MX_GPIO_Init+0x290>)
 8000974:	f000 fd3c 	bl	80013f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000978:	2201      	movs	r2, #1
 800097a:	2101      	movs	r1, #1
 800097c:	4871      	ldr	r0, [pc, #452]	; (8000b44 <MX_GPIO_Init+0x294>)
 800097e:	f000 fd37 	bl	80013f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, led_green_Pin|led_orange_Pin|led_red_Pin|led_blue_Pin
 8000982:	2200      	movs	r2, #0
 8000984:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000988:	486f      	ldr	r0, [pc, #444]	; (8000b48 <MX_GPIO_Init+0x298>)
 800098a:	f000 fd31 	bl	80013f0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800098e:	2308      	movs	r3, #8
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	4866      	ldr	r0, [pc, #408]	; (8000b40 <MX_GPIO_Init+0x290>)
 80009a6:	f000 fb87 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009aa:	2301      	movs	r3, #1
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	4860      	ldr	r0, [pc, #384]	; (8000b44 <MX_GPIO_Init+0x294>)
 80009c2:	f000 fb79 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009c6:	2308      	movs	r3, #8
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009d6:	2305      	movs	r3, #5
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	4858      	ldr	r0, [pc, #352]	; (8000b44 <MX_GPIO_Init+0x294>)
 80009e2:	f000 fb69 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_blue_Pin */
  GPIO_InitStruct.Pin = btn_blue_Pin;
 80009e6:	2301      	movs	r3, #1
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(btn_blue_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	4854      	ldr	r0, [pc, #336]	; (8000b4c <MX_GPIO_Init+0x29c>)
 80009fa:	f000 fb5d 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009fe:	2304      	movs	r3, #4
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a02:	2300      	movs	r3, #0
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4619      	mov	r1, r3
 8000a10:	484f      	ldr	r0, [pc, #316]	; (8000b50 <MX_GPIO_Init+0x2a0>)
 8000a12:	f000 fb51 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a28:	2305      	movs	r3, #5
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	4847      	ldr	r0, [pc, #284]	; (8000b50 <MX_GPIO_Init+0x2a0>)
 8000a34:	f000 fb40 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : led_green_Pin led_orange_Pin led_red_Pin led_blue_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = led_green_Pin|led_orange_Pin|led_red_Pin|led_blue_Pin
 8000a38:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a3c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	483d      	ldr	r0, [pc, #244]	; (8000b48 <MX_GPIO_Init+0x298>)
 8000a52:	f000 fb31 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a56:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a68:	2306      	movs	r3, #6
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4619      	mov	r1, r3
 8000a72:	4834      	ldr	r0, [pc, #208]	; (8000b44 <MX_GPIO_Init+0x294>)
 8000a74:	f000 fb20 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000a78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	482f      	ldr	r0, [pc, #188]	; (8000b4c <MX_GPIO_Init+0x29c>)
 8000a8e:	f000 fb13 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a92:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000aa4:	230a      	movs	r3, #10
 8000aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4619      	mov	r1, r3
 8000aae:	4827      	ldr	r0, [pc, #156]	; (8000b4c <MX_GPIO_Init+0x29c>)
 8000ab0:	f000 fb02 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ab4:	2320      	movs	r3, #32
 8000ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ac0:	f107 031c 	add.w	r3, r7, #28
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4820      	ldr	r0, [pc, #128]	; (8000b48 <MX_GPIO_Init+0x298>)
 8000ac8:	f000 faf6 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000acc:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ad2:	2312      	movs	r3, #18
 8000ad4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ade:	2304      	movs	r3, #4
 8000ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4819      	ldr	r0, [pc, #100]	; (8000b50 <MX_GPIO_Init+0x2a0>)
 8000aea:	f000 fae5 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000aee:	2301      	movs	r3, #1
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000af2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000af6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000afc:	f107 031c 	add.w	r3, r7, #28
 8000b00:	4619      	mov	r1, r3
 8000b02:	480f      	ldr	r0, [pc, #60]	; (8000b40 <MX_GPIO_Init+0x290>)
 8000b04:	f000 fad8 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b0c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4808      	ldr	r0, [pc, #32]	; (8000b40 <MX_GPIO_Init+0x290>)
 8000b1e:	f000 facb 	bl	80010b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2105      	movs	r1, #5
 8000b26:	2006      	movs	r0, #6
 8000b28:	f000 fa9c 	bl	8001064 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b2c:	2006      	movs	r0, #6
 8000b2e:	f000 fab5 	bl	800109c <HAL_NVIC_EnableIRQ>

}
 8000b32:	bf00      	nop
 8000b34:	3730      	adds	r7, #48	; 0x30
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40021000 	.word	0x40021000
 8000b44:	40020800 	.word	0x40020800
 8000b48:	40020c00 	.word	0x40020c00
 8000b4c:	40020000 	.word	0x40020000
 8000b50:	40020400 	.word	0x40020400

08000b54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d101      	bne.n	8000b6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b66:	f000 f9a5 	bl	8000eb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40001400 	.word	0x40001400

08000b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b7c:	b672      	cpsid	i
}
 8000b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <Error_Handler+0x8>
	...

08000b84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	4a0f      	ldr	r2, [pc, #60]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000b94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b98:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	603b      	str	r3, [r7, #0]
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	4a08      	ldr	r2, [pc, #32]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	40023800 	.word	0x40023800

08000bd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	; 0x28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a19      	ldr	r2, [pc, #100]	; (8000c58 <HAL_SPI_MspInit+0x84>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d12b      	bne.n	8000c4e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <HAL_SPI_MspInit+0x88>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	4a17      	ldr	r2, [pc, #92]	; (8000c5c <HAL_SPI_MspInit+0x88>)
 8000c00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c04:	6453      	str	r3, [r2, #68]	; 0x44
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <HAL_SPI_MspInit+0x88>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <HAL_SPI_MspInit+0x88>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a10      	ldr	r2, [pc, #64]	; (8000c5c <HAL_SPI_MspInit+0x88>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <HAL_SPI_MspInit+0x88>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c2e:	23e0      	movs	r3, #224	; 0xe0
 8000c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	2302      	movs	r3, #2
 8000c34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c3e:	2305      	movs	r3, #5
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c42:	f107 0314 	add.w	r3, r7, #20
 8000c46:	4619      	mov	r1, r3
 8000c48:	4805      	ldr	r0, [pc, #20]	; (8000c60 <HAL_SPI_MspInit+0x8c>)
 8000c4a:	f000 fa35 	bl	80010b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c4e:	bf00      	nop
 8000c50:	3728      	adds	r7, #40	; 0x28
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40013000 	.word	0x40013000
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020000 	.word	0x40020000

08000c64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08a      	sub	sp, #40	; 0x28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a19      	ldr	r2, [pc, #100]	; (8000ce8 <HAL_UART_MspInit+0x84>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d12b      	bne.n	8000cde <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	4b18      	ldr	r3, [pc, #96]	; (8000cec <HAL_UART_MspInit+0x88>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	4a17      	ldr	r2, [pc, #92]	; (8000cec <HAL_UART_MspInit+0x88>)
 8000c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c94:	6413      	str	r3, [r2, #64]	; 0x40
 8000c96:	4b15      	ldr	r3, [pc, #84]	; (8000cec <HAL_UART_MspInit+0x88>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <HAL_UART_MspInit+0x88>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a10      	ldr	r2, [pc, #64]	; (8000cec <HAL_UART_MspInit+0x88>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <HAL_UART_MspInit+0x88>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cbe:	230c      	movs	r3, #12
 8000cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cce:	2307      	movs	r3, #7
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd2:	f107 0314 	add.w	r3, r7, #20
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <HAL_UART_MspInit+0x8c>)
 8000cda:	f000 f9ed 	bl	80010b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cde:	bf00      	nop
 8000ce0:	3728      	adds	r7, #40	; 0x28
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40004400 	.word	0x40004400
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40020000 	.word	0x40020000

08000cf4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08c      	sub	sp, #48	; 0x30
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000d04:	2200      	movs	r2, #0
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	2037      	movs	r0, #55	; 0x37
 8000d0a:	f000 f9ab 	bl	8001064 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000d0e:	2037      	movs	r0, #55	; 0x37
 8000d10:	f000 f9c4 	bl	800109c <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000d14:	2300      	movs	r3, #0
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	4b1f      	ldr	r3, [pc, #124]	; (8000d98 <HAL_InitTick+0xa4>)
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1c:	4a1e      	ldr	r2, [pc, #120]	; (8000d98 <HAL_InitTick+0xa4>)
 8000d1e:	f043 0320 	orr.w	r3, r3, #32
 8000d22:	6413      	str	r3, [r2, #64]	; 0x40
 8000d24:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <HAL_InitTick+0xa4>)
 8000d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d28:	f003 0320 	and.w	r3, r3, #32
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d30:	f107 0210 	add.w	r2, r7, #16
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	4611      	mov	r1, r2
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f001 f818 	bl	8001d70 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000d40:	f000 ffee 	bl	8001d20 <HAL_RCC_GetPCLK1Freq>
 8000d44:	4603      	mov	r3, r0
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d4c:	4a13      	ldr	r2, [pc, #76]	; (8000d9c <HAL_InitTick+0xa8>)
 8000d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d52:	0c9b      	lsrs	r3, r3, #18
 8000d54:	3b01      	subs	r3, #1
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000d58:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <HAL_InitTick+0xac>)
 8000d5a:	4a12      	ldr	r2, [pc, #72]	; (8000da4 <HAL_InitTick+0xb0>)
 8000d5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <HAL_InitTick+0xac>)
 8000d60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d64:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000d66:	4a0e      	ldr	r2, [pc, #56]	; (8000da0 <HAL_InitTick+0xac>)
 8000d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d6a:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <HAL_InitTick+0xac>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <HAL_InitTick+0xac>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000d78:	4809      	ldr	r0, [pc, #36]	; (8000da0 <HAL_InitTick+0xac>)
 8000d7a:	f001 fdd3 	bl	8002924 <HAL_TIM_Base_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d104      	bne.n	8000d8e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000d84:	4806      	ldr	r0, [pc, #24]	; (8000da0 <HAL_InitTick+0xac>)
 8000d86:	f001 fe27 	bl	80029d8 <HAL_TIM_Base_Start_IT>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	e000      	b.n	8000d90 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3730      	adds	r7, #48	; 0x30
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	431bde83 	.word	0x431bde83
 8000da0:	20012ef4 	.word	0x20012ef4
 8000da4:	40001400 	.word	0x40001400

08000da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <NMI_Handler+0x4>

08000dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <HardFault_Handler+0x4>

08000db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <MemManage_Handler+0x4>

08000dba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dbe:	e7fe      	b.n	8000dbe <BusFault_Handler+0x4>

08000dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <UsageFault_Handler+0x4>

08000dc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PH0_OSC_IN_Pin);
 8000dd8:	2001      	movs	r0, #1
 8000dda:	f000 fb3d 	bl	8001458 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000de8:	4802      	ldr	r0, [pc, #8]	; (8000df4 <TIM7_IRQHandler+0x10>)
 8000dea:	f001 fe65 	bl	8002ab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20012ef4 	.word	0x20012ef4

08000df8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <SystemInit+0x20>)
 8000dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e02:	4a05      	ldr	r2, [pc, #20]	; (8000e18 <SystemInit+0x20>)
 8000e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e20:	480d      	ldr	r0, [pc, #52]	; (8000e58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e22:	490e      	ldr	r1, [pc, #56]	; (8000e5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e24:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e28:	e002      	b.n	8000e30 <LoopCopyDataInit>

08000e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2e:	3304      	adds	r3, #4

08000e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e34:	d3f9      	bcc.n	8000e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e36:	4a0b      	ldr	r2, [pc, #44]	; (8000e64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e38:	4c0b      	ldr	r4, [pc, #44]	; (8000e68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e3c:	e001      	b.n	8000e42 <LoopFillZerobss>

08000e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e40:	3204      	adds	r2, #4

08000e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e44:	d3fb      	bcc.n	8000e3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e46:	f7ff ffd7 	bl	8000df8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e4a:	f005 f83f 	bl	8005ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e4e:	f7ff fc05 	bl	800065c <main>
  bx  lr    
 8000e52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e5c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e60:	0800604c 	.word	0x0800604c
  ldr r2, =_sbss
 8000e64:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e68:	20012f80 	.word	0x20012f80

08000e6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e6c:	e7fe      	b.n	8000e6c <ADC_IRQHandler>
	...

08000e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e74:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <HAL_Init+0x40>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a0d      	ldr	r2, [pc, #52]	; (8000eb0 <HAL_Init+0x40>)
 8000e7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e80:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <HAL_Init+0x40>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <HAL_Init+0x40>)
 8000e86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e8c:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <HAL_Init+0x40>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a07      	ldr	r2, [pc, #28]	; (8000eb0 <HAL_Init+0x40>)
 8000e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e98:	2003      	movs	r0, #3
 8000e9a:	f000 f8d8 	bl	800104e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f7ff ff28 	bl	8000cf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea4:	f7ff fe6e 	bl	8000b84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40023c00 	.word	0x40023c00

08000eb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_IncTick+0x20>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_IncTick+0x24>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <HAL_IncTick+0x24>)
 8000ec6:	6013      	str	r3, [r2, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	20000008 	.word	0x20000008
 8000ed8:	20012f3c 	.word	0x20012f3c

08000edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <HAL_GetTick+0x14>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20012f3c 	.word	0x20012f3c

08000ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <__NVIC_SetPriorityGrouping+0x44>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f10:	4013      	ands	r3, r2
 8000f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f26:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <__NVIC_SetPriorityGrouping+0x44>)
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	60d3      	str	r3, [r2, #12]
}
 8000f2c:	bf00      	nop
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <__NVIC_GetPriorityGrouping+0x18>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	0a1b      	lsrs	r3, r3, #8
 8000f46:	f003 0307 	and.w	r3, r3, #7
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	db0b      	blt.n	8000f82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	f003 021f 	and.w	r2, r3, #31
 8000f70:	4907      	ldr	r1, [pc, #28]	; (8000f90 <__NVIC_EnableIRQ+0x38>)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	095b      	lsrs	r3, r3, #5
 8000f78:	2001      	movs	r0, #1
 8000f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000e100 	.word	0xe000e100

08000f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	6039      	str	r1, [r7, #0]
 8000f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	db0a      	blt.n	8000fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	490c      	ldr	r1, [pc, #48]	; (8000fe0 <__NVIC_SetPriority+0x4c>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	0112      	lsls	r2, r2, #4
 8000fb4:	b2d2      	uxtb	r2, r2
 8000fb6:	440b      	add	r3, r1
 8000fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fbc:	e00a      	b.n	8000fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4908      	ldr	r1, [pc, #32]	; (8000fe4 <__NVIC_SetPriority+0x50>)
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	f003 030f 	and.w	r3, r3, #15
 8000fca:	3b04      	subs	r3, #4
 8000fcc:	0112      	lsls	r2, r2, #4
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	761a      	strb	r2, [r3, #24]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000e100 	.word	0xe000e100
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b089      	sub	sp, #36	; 0x24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f1c3 0307 	rsb	r3, r3, #7
 8001002:	2b04      	cmp	r3, #4
 8001004:	bf28      	it	cs
 8001006:	2304      	movcs	r3, #4
 8001008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3304      	adds	r3, #4
 800100e:	2b06      	cmp	r3, #6
 8001010:	d902      	bls.n	8001018 <NVIC_EncodePriority+0x30>
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3b03      	subs	r3, #3
 8001016:	e000      	b.n	800101a <NVIC_EncodePriority+0x32>
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	f04f 32ff 	mov.w	r2, #4294967295
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43da      	mvns	r2, r3
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	401a      	ands	r2, r3
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001030:	f04f 31ff 	mov.w	r1, #4294967295
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	fa01 f303 	lsl.w	r3, r1, r3
 800103a:	43d9      	mvns	r1, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	4313      	orrs	r3, r2
         );
}
 8001042:	4618      	mov	r0, r3
 8001044:	3724      	adds	r7, #36	; 0x24
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ff4c 	bl	8000ef4 <__NVIC_SetPriorityGrouping>
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
 8001070:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001076:	f7ff ff61 	bl	8000f3c <__NVIC_GetPriorityGrouping>
 800107a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	68b9      	ldr	r1, [r7, #8]
 8001080:	6978      	ldr	r0, [r7, #20]
 8001082:	f7ff ffb1 	bl	8000fe8 <NVIC_EncodePriority>
 8001086:	4602      	mov	r2, r0
 8001088:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800108c:	4611      	mov	r1, r2
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff ff80 	bl	8000f94 <__NVIC_SetPriority>
}
 8001094:	bf00      	nop
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff ff54 	bl	8000f58 <__NVIC_EnableIRQ>
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b089      	sub	sp, #36	; 0x24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
 80010d2:	e16b      	b.n	80013ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010d4:	2201      	movs	r2, #1
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	f040 815a 	bne.w	80013a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 0303 	and.w	r3, r3, #3
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d005      	beq.n	800110a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001106:	2b02      	cmp	r3, #2
 8001108:	d130      	bne.n	800116c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	2203      	movs	r2, #3
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4013      	ands	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	68da      	ldr	r2, [r3, #12]
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001140:	2201      	movs	r2, #1
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	091b      	lsrs	r3, r3, #4
 8001156:	f003 0201 	and.w	r2, r3, #1
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	2b03      	cmp	r3, #3
 8001176:	d017      	beq.n	80011a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	2203      	movs	r2, #3
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d123      	bne.n	80011fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	08da      	lsrs	r2, r3, #3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3208      	adds	r2, #8
 80011bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	f003 0307 	and.w	r3, r3, #7
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	220f      	movs	r2, #15
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	691a      	ldr	r2, [r3, #16]
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	08da      	lsrs	r2, r3, #3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3208      	adds	r2, #8
 80011f6:	69b9      	ldr	r1, [r7, #24]
 80011f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	2203      	movs	r2, #3
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 0203 	and.w	r2, r3, #3
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001238:	2b00      	cmp	r3, #0
 800123a:	f000 80b4 	beq.w	80013a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	4b60      	ldr	r3, [pc, #384]	; (80013c4 <HAL_GPIO_Init+0x30c>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001246:	4a5f      	ldr	r2, [pc, #380]	; (80013c4 <HAL_GPIO_Init+0x30c>)
 8001248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800124c:	6453      	str	r3, [r2, #68]	; 0x44
 800124e:	4b5d      	ldr	r3, [pc, #372]	; (80013c4 <HAL_GPIO_Init+0x30c>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800125a:	4a5b      	ldr	r2, [pc, #364]	; (80013c8 <HAL_GPIO_Init+0x310>)
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	089b      	lsrs	r3, r3, #2
 8001260:	3302      	adds	r3, #2
 8001262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001266:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f003 0303 	and.w	r3, r3, #3
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	220f      	movs	r2, #15
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43db      	mvns	r3, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4013      	ands	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a52      	ldr	r2, [pc, #328]	; (80013cc <HAL_GPIO_Init+0x314>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d02b      	beq.n	80012de <HAL_GPIO_Init+0x226>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a51      	ldr	r2, [pc, #324]	; (80013d0 <HAL_GPIO_Init+0x318>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d025      	beq.n	80012da <HAL_GPIO_Init+0x222>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a50      	ldr	r2, [pc, #320]	; (80013d4 <HAL_GPIO_Init+0x31c>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d01f      	beq.n	80012d6 <HAL_GPIO_Init+0x21e>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a4f      	ldr	r2, [pc, #316]	; (80013d8 <HAL_GPIO_Init+0x320>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d019      	beq.n	80012d2 <HAL_GPIO_Init+0x21a>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a4e      	ldr	r2, [pc, #312]	; (80013dc <HAL_GPIO_Init+0x324>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d013      	beq.n	80012ce <HAL_GPIO_Init+0x216>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a4d      	ldr	r2, [pc, #308]	; (80013e0 <HAL_GPIO_Init+0x328>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d00d      	beq.n	80012ca <HAL_GPIO_Init+0x212>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a4c      	ldr	r2, [pc, #304]	; (80013e4 <HAL_GPIO_Init+0x32c>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d007      	beq.n	80012c6 <HAL_GPIO_Init+0x20e>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a4b      	ldr	r2, [pc, #300]	; (80013e8 <HAL_GPIO_Init+0x330>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d101      	bne.n	80012c2 <HAL_GPIO_Init+0x20a>
 80012be:	2307      	movs	r3, #7
 80012c0:	e00e      	b.n	80012e0 <HAL_GPIO_Init+0x228>
 80012c2:	2308      	movs	r3, #8
 80012c4:	e00c      	b.n	80012e0 <HAL_GPIO_Init+0x228>
 80012c6:	2306      	movs	r3, #6
 80012c8:	e00a      	b.n	80012e0 <HAL_GPIO_Init+0x228>
 80012ca:	2305      	movs	r3, #5
 80012cc:	e008      	b.n	80012e0 <HAL_GPIO_Init+0x228>
 80012ce:	2304      	movs	r3, #4
 80012d0:	e006      	b.n	80012e0 <HAL_GPIO_Init+0x228>
 80012d2:	2303      	movs	r3, #3
 80012d4:	e004      	b.n	80012e0 <HAL_GPIO_Init+0x228>
 80012d6:	2302      	movs	r3, #2
 80012d8:	e002      	b.n	80012e0 <HAL_GPIO_Init+0x228>
 80012da:	2301      	movs	r3, #1
 80012dc:	e000      	b.n	80012e0 <HAL_GPIO_Init+0x228>
 80012de:	2300      	movs	r3, #0
 80012e0:	69fa      	ldr	r2, [r7, #28]
 80012e2:	f002 0203 	and.w	r2, r2, #3
 80012e6:	0092      	lsls	r2, r2, #2
 80012e8:	4093      	lsls	r3, r2
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012f0:	4935      	ldr	r1, [pc, #212]	; (80013c8 <HAL_GPIO_Init+0x310>)
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	089b      	lsrs	r3, r3, #2
 80012f6:	3302      	adds	r3, #2
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012fe:	4b3b      	ldr	r3, [pc, #236]	; (80013ec <HAL_GPIO_Init+0x334>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	43db      	mvns	r3, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4013      	ands	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001322:	4a32      	ldr	r2, [pc, #200]	; (80013ec <HAL_GPIO_Init+0x334>)
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001328:	4b30      	ldr	r3, [pc, #192]	; (80013ec <HAL_GPIO_Init+0x334>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800134c:	4a27      	ldr	r2, [pc, #156]	; (80013ec <HAL_GPIO_Init+0x334>)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001352:	4b26      	ldr	r3, [pc, #152]	; (80013ec <HAL_GPIO_Init+0x334>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	43db      	mvns	r3, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4013      	ands	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001376:	4a1d      	ldr	r2, [pc, #116]	; (80013ec <HAL_GPIO_Init+0x334>)
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800137c:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <HAL_GPIO_Init+0x334>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013a0:	4a12      	ldr	r2, [pc, #72]	; (80013ec <HAL_GPIO_Init+0x334>)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3301      	adds	r3, #1
 80013aa:	61fb      	str	r3, [r7, #28]
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	2b0f      	cmp	r3, #15
 80013b0:	f67f ae90 	bls.w	80010d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013b4:	bf00      	nop
 80013b6:	bf00      	nop
 80013b8:	3724      	adds	r7, #36	; 0x24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40013800 	.word	0x40013800
 80013cc:	40020000 	.word	0x40020000
 80013d0:	40020400 	.word	0x40020400
 80013d4:	40020800 	.word	0x40020800
 80013d8:	40020c00 	.word	0x40020c00
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40021400 	.word	0x40021400
 80013e4:	40021800 	.word	0x40021800
 80013e8:	40021c00 	.word	0x40021c00
 80013ec:	40013c00 	.word	0x40013c00

080013f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	807b      	strh	r3, [r7, #2]
 80013fc:	4613      	mov	r3, r2
 80013fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001400:	787b      	ldrb	r3, [r7, #1]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001406:	887a      	ldrh	r2, [r7, #2]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800140c:	e003      	b.n	8001416 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800140e:	887b      	ldrh	r3, [r7, #2]
 8001410:	041a      	lsls	r2, r3, #16
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	619a      	str	r2, [r3, #24]
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001422:	b480      	push	{r7}
 8001424:	b085      	sub	sp, #20
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	460b      	mov	r3, r1
 800142c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001434:	887a      	ldrh	r2, [r7, #2]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	4013      	ands	r3, r2
 800143a:	041a      	lsls	r2, r3, #16
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	43d9      	mvns	r1, r3
 8001440:	887b      	ldrh	r3, [r7, #2]
 8001442:	400b      	ands	r3, r1
 8001444:	431a      	orrs	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	619a      	str	r2, [r3, #24]
}
 800144a:	bf00      	nop
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
	...

08001458 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001462:	4b08      	ldr	r3, [pc, #32]	; (8001484 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001464:	695a      	ldr	r2, [r3, #20]
 8001466:	88fb      	ldrh	r3, [r7, #6]
 8001468:	4013      	ands	r3, r2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d006      	beq.n	800147c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800146e:	4a05      	ldr	r2, [pc, #20]	; (8001484 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001470:	88fb      	ldrh	r3, [r7, #6]
 8001472:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001474:	88fb      	ldrh	r3, [r7, #6]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff f8c6 	bl	8000608 <HAL_GPIO_EXTI_Callback>
  }
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40013c00 	.word	0x40013c00

08001488 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d101      	bne.n	800149a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e264      	b.n	8001964 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d075      	beq.n	8001592 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014a6:	4ba3      	ldr	r3, [pc, #652]	; (8001734 <HAL_RCC_OscConfig+0x2ac>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f003 030c 	and.w	r3, r3, #12
 80014ae:	2b04      	cmp	r3, #4
 80014b0:	d00c      	beq.n	80014cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014b2:	4ba0      	ldr	r3, [pc, #640]	; (8001734 <HAL_RCC_OscConfig+0x2ac>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014ba:	2b08      	cmp	r3, #8
 80014bc:	d112      	bne.n	80014e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014be:	4b9d      	ldr	r3, [pc, #628]	; (8001734 <HAL_RCC_OscConfig+0x2ac>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014ca:	d10b      	bne.n	80014e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014cc:	4b99      	ldr	r3, [pc, #612]	; (8001734 <HAL_RCC_OscConfig+0x2ac>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d05b      	beq.n	8001590 <HAL_RCC_OscConfig+0x108>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d157      	bne.n	8001590 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e23f      	b.n	8001964 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ec:	d106      	bne.n	80014fc <HAL_RCC_OscConfig+0x74>
 80014ee:	4b91      	ldr	r3, [pc, #580]	; (8001734 <HAL_RCC_OscConfig+0x2ac>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a90      	ldr	r2, [pc, #576]	; (8001734 <HAL_RCC_OscConfig+0x2ac>)
 80014f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	e01d      	b.n	8001538 <HAL_RCC_OscConfig+0xb0>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001504:	d10c      	bne.n	8001520 <HAL_RCC_OscConfig+0x98>
 8001506:	4b8b      	ldr	r3, [pc, #556]	; (8001734 <HAL_RCC_OscConfig+0x2ac>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a8a      	ldr	r2, [pc, #552]	; (8001734 <HAL_RCC_OscConfig+0x2ac>)
 800150c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	4b88      	ldr	r3, [pc, #544]	; (8001734 <HAL_RCC_OscConfig+0x2ac>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a87      	ldr	r2, [pc, #540]	; (8001734 <HAL_RCC_OscConfig+0x2ac>)
 8001518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	e00b      	b.n	8001538 <HAL_RCC_OscConfig+0xb0>
 8001520:	4b84      	ldr	r3, [pc, #528]	; (8001734 <HAL_RCC_OscConfig+0x2ac>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a83      	ldr	r2, [pc, #524]	; (8001734 <HAL_RCC_OscConfig+0x2ac>)
 8001526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800152a:	6013      	str	r3, [r2, #0]
 800152c:	4b81      	ldr	r3, [pc, #516]	; (8001734 <HAL_RCC_OscConfig+0x2ac>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a80      	ldr	r2, [pc, #512]	; (8001734 <HAL_RCC_OscConfig+0x2ac>)
 8001532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001536:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d013      	beq.n	8001568 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001540:	f7ff fccc 	bl	8000edc <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001548:	f7ff fcc8 	bl	8000edc <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b64      	cmp	r3, #100	; 0x64
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e204      	b.n	8001964 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800155a:	4b76      	ldr	r3, [pc, #472]	; (8001734 <HAL_RCC_OscConfig+0x2ac>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0f0      	beq.n	8001548 <HAL_RCC_OscConfig+0xc0>
 8001566:	e014      	b.n	8001592 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001568:	f7ff fcb8 	bl	8000edc <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001570:	f7ff fcb4 	bl	8000edc <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b64      	cmp	r3, #100	; 0x64
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e1f0      	b.n	8001964 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001582:	4b6c      	ldr	r3, [pc, #432]	; (8001734 <HAL_RCC_OscConfig+0x2ac>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1f0      	bne.n	8001570 <HAL_RCC_OscConfig+0xe8>
 800158e:	e000      	b.n	8001592 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001590:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d063      	beq.n	8001666 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800159e:	4b65      	ldr	r3, [pc, #404]	; (8001734 <HAL_RCC_OscConfig+0x2ac>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f003 030c 	and.w	r3, r3, #12
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d00b      	beq.n	80015c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015aa:	4b62      	ldr	r3, [pc, #392]	; (8001734 <HAL_RCC_OscConfig+0x2ac>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015b2:	2b08      	cmp	r3, #8
 80015b4:	d11c      	bne.n	80015f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015b6:	4b5f      	ldr	r3, [pc, #380]	; (8001734 <HAL_RCC_OscConfig+0x2ac>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d116      	bne.n	80015f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015c2:	4b5c      	ldr	r3, [pc, #368]	; (8001734 <HAL_RCC_OscConfig+0x2ac>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d005      	beq.n	80015da <HAL_RCC_OscConfig+0x152>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d001      	beq.n	80015da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e1c4      	b.n	8001964 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015da:	4b56      	ldr	r3, [pc, #344]	; (8001734 <HAL_RCC_OscConfig+0x2ac>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	4952      	ldr	r1, [pc, #328]	; (8001734 <HAL_RCC_OscConfig+0x2ac>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ee:	e03a      	b.n	8001666 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d020      	beq.n	800163a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015f8:	4b4f      	ldr	r3, [pc, #316]	; (8001738 <HAL_RCC_OscConfig+0x2b0>)
 80015fa:	2201      	movs	r2, #1
 80015fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fe:	f7ff fc6d 	bl	8000edc <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001604:	e008      	b.n	8001618 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001606:	f7ff fc69 	bl	8000edc <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e1a5      	b.n	8001964 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001618:	4b46      	ldr	r3, [pc, #280]	; (8001734 <HAL_RCC_OscConfig+0x2ac>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0f0      	beq.n	8001606 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001624:	4b43      	ldr	r3, [pc, #268]	; (8001734 <HAL_RCC_OscConfig+0x2ac>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	691b      	ldr	r3, [r3, #16]
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	4940      	ldr	r1, [pc, #256]	; (8001734 <HAL_RCC_OscConfig+0x2ac>)
 8001634:	4313      	orrs	r3, r2
 8001636:	600b      	str	r3, [r1, #0]
 8001638:	e015      	b.n	8001666 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800163a:	4b3f      	ldr	r3, [pc, #252]	; (8001738 <HAL_RCC_OscConfig+0x2b0>)
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001640:	f7ff fc4c 	bl	8000edc <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001648:	f7ff fc48 	bl	8000edc <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e184      	b.n	8001964 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800165a:	4b36      	ldr	r3, [pc, #216]	; (8001734 <HAL_RCC_OscConfig+0x2ac>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f0      	bne.n	8001648 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0308 	and.w	r3, r3, #8
 800166e:	2b00      	cmp	r3, #0
 8001670:	d030      	beq.n	80016d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d016      	beq.n	80016a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800167a:	4b30      	ldr	r3, [pc, #192]	; (800173c <HAL_RCC_OscConfig+0x2b4>)
 800167c:	2201      	movs	r2, #1
 800167e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001680:	f7ff fc2c 	bl	8000edc <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001688:	f7ff fc28 	bl	8000edc <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e164      	b.n	8001964 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800169a:	4b26      	ldr	r3, [pc, #152]	; (8001734 <HAL_RCC_OscConfig+0x2ac>)
 800169c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0f0      	beq.n	8001688 <HAL_RCC_OscConfig+0x200>
 80016a6:	e015      	b.n	80016d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016a8:	4b24      	ldr	r3, [pc, #144]	; (800173c <HAL_RCC_OscConfig+0x2b4>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ae:	f7ff fc15 	bl	8000edc <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016b6:	f7ff fc11 	bl	8000edc <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e14d      	b.n	8001964 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c8:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <HAL_RCC_OscConfig+0x2ac>)
 80016ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1f0      	bne.n	80016b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	2b00      	cmp	r3, #0
 80016de:	f000 80a0 	beq.w	8001822 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016e2:	2300      	movs	r3, #0
 80016e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016e6:	4b13      	ldr	r3, [pc, #76]	; (8001734 <HAL_RCC_OscConfig+0x2ac>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10f      	bne.n	8001712 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <HAL_RCC_OscConfig+0x2ac>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	4a0e      	ldr	r2, [pc, #56]	; (8001734 <HAL_RCC_OscConfig+0x2ac>)
 80016fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001700:	6413      	str	r3, [r2, #64]	; 0x40
 8001702:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <HAL_RCC_OscConfig+0x2ac>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800170e:	2301      	movs	r3, #1
 8001710:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001712:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <HAL_RCC_OscConfig+0x2b8>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171a:	2b00      	cmp	r3, #0
 800171c:	d121      	bne.n	8001762 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800171e:	4b08      	ldr	r3, [pc, #32]	; (8001740 <HAL_RCC_OscConfig+0x2b8>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a07      	ldr	r2, [pc, #28]	; (8001740 <HAL_RCC_OscConfig+0x2b8>)
 8001724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001728:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800172a:	f7ff fbd7 	bl	8000edc <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001730:	e011      	b.n	8001756 <HAL_RCC_OscConfig+0x2ce>
 8001732:	bf00      	nop
 8001734:	40023800 	.word	0x40023800
 8001738:	42470000 	.word	0x42470000
 800173c:	42470e80 	.word	0x42470e80
 8001740:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001744:	f7ff fbca 	bl	8000edc <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e106      	b.n	8001964 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001756:	4b85      	ldr	r3, [pc, #532]	; (800196c <HAL_RCC_OscConfig+0x4e4>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175e:	2b00      	cmp	r3, #0
 8001760:	d0f0      	beq.n	8001744 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d106      	bne.n	8001778 <HAL_RCC_OscConfig+0x2f0>
 800176a:	4b81      	ldr	r3, [pc, #516]	; (8001970 <HAL_RCC_OscConfig+0x4e8>)
 800176c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800176e:	4a80      	ldr	r2, [pc, #512]	; (8001970 <HAL_RCC_OscConfig+0x4e8>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6713      	str	r3, [r2, #112]	; 0x70
 8001776:	e01c      	b.n	80017b2 <HAL_RCC_OscConfig+0x32a>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	2b05      	cmp	r3, #5
 800177e:	d10c      	bne.n	800179a <HAL_RCC_OscConfig+0x312>
 8001780:	4b7b      	ldr	r3, [pc, #492]	; (8001970 <HAL_RCC_OscConfig+0x4e8>)
 8001782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001784:	4a7a      	ldr	r2, [pc, #488]	; (8001970 <HAL_RCC_OscConfig+0x4e8>)
 8001786:	f043 0304 	orr.w	r3, r3, #4
 800178a:	6713      	str	r3, [r2, #112]	; 0x70
 800178c:	4b78      	ldr	r3, [pc, #480]	; (8001970 <HAL_RCC_OscConfig+0x4e8>)
 800178e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001790:	4a77      	ldr	r2, [pc, #476]	; (8001970 <HAL_RCC_OscConfig+0x4e8>)
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	6713      	str	r3, [r2, #112]	; 0x70
 8001798:	e00b      	b.n	80017b2 <HAL_RCC_OscConfig+0x32a>
 800179a:	4b75      	ldr	r3, [pc, #468]	; (8001970 <HAL_RCC_OscConfig+0x4e8>)
 800179c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800179e:	4a74      	ldr	r2, [pc, #464]	; (8001970 <HAL_RCC_OscConfig+0x4e8>)
 80017a0:	f023 0301 	bic.w	r3, r3, #1
 80017a4:	6713      	str	r3, [r2, #112]	; 0x70
 80017a6:	4b72      	ldr	r3, [pc, #456]	; (8001970 <HAL_RCC_OscConfig+0x4e8>)
 80017a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017aa:	4a71      	ldr	r2, [pc, #452]	; (8001970 <HAL_RCC_OscConfig+0x4e8>)
 80017ac:	f023 0304 	bic.w	r3, r3, #4
 80017b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d015      	beq.n	80017e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ba:	f7ff fb8f 	bl	8000edc <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c0:	e00a      	b.n	80017d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017c2:	f7ff fb8b 	bl	8000edc <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e0c5      	b.n	8001964 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d8:	4b65      	ldr	r3, [pc, #404]	; (8001970 <HAL_RCC_OscConfig+0x4e8>)
 80017da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0ee      	beq.n	80017c2 <HAL_RCC_OscConfig+0x33a>
 80017e4:	e014      	b.n	8001810 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e6:	f7ff fb79 	bl	8000edc <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ec:	e00a      	b.n	8001804 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ee:	f7ff fb75 	bl	8000edc <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e0af      	b.n	8001964 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001804:	4b5a      	ldr	r3, [pc, #360]	; (8001970 <HAL_RCC_OscConfig+0x4e8>)
 8001806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1ee      	bne.n	80017ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001810:	7dfb      	ldrb	r3, [r7, #23]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d105      	bne.n	8001822 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001816:	4b56      	ldr	r3, [pc, #344]	; (8001970 <HAL_RCC_OscConfig+0x4e8>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	4a55      	ldr	r2, [pc, #340]	; (8001970 <HAL_RCC_OscConfig+0x4e8>)
 800181c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001820:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	2b00      	cmp	r3, #0
 8001828:	f000 809b 	beq.w	8001962 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800182c:	4b50      	ldr	r3, [pc, #320]	; (8001970 <HAL_RCC_OscConfig+0x4e8>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 030c 	and.w	r3, r3, #12
 8001834:	2b08      	cmp	r3, #8
 8001836:	d05c      	beq.n	80018f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	2b02      	cmp	r3, #2
 800183e:	d141      	bne.n	80018c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001840:	4b4c      	ldr	r3, [pc, #304]	; (8001974 <HAL_RCC_OscConfig+0x4ec>)
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001846:	f7ff fb49 	bl	8000edc <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800184e:	f7ff fb45 	bl	8000edc <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e081      	b.n	8001964 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001860:	4b43      	ldr	r3, [pc, #268]	; (8001970 <HAL_RCC_OscConfig+0x4e8>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1f0      	bne.n	800184e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	69da      	ldr	r2, [r3, #28]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	431a      	orrs	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187a:	019b      	lsls	r3, r3, #6
 800187c:	431a      	orrs	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001882:	085b      	lsrs	r3, r3, #1
 8001884:	3b01      	subs	r3, #1
 8001886:	041b      	lsls	r3, r3, #16
 8001888:	431a      	orrs	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188e:	061b      	lsls	r3, r3, #24
 8001890:	4937      	ldr	r1, [pc, #220]	; (8001970 <HAL_RCC_OscConfig+0x4e8>)
 8001892:	4313      	orrs	r3, r2
 8001894:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001896:	4b37      	ldr	r3, [pc, #220]	; (8001974 <HAL_RCC_OscConfig+0x4ec>)
 8001898:	2201      	movs	r2, #1
 800189a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189c:	f7ff fb1e 	bl	8000edc <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018a4:	f7ff fb1a 	bl	8000edc <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e056      	b.n	8001964 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b6:	4b2e      	ldr	r3, [pc, #184]	; (8001970 <HAL_RCC_OscConfig+0x4e8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0f0      	beq.n	80018a4 <HAL_RCC_OscConfig+0x41c>
 80018c2:	e04e      	b.n	8001962 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c4:	4b2b      	ldr	r3, [pc, #172]	; (8001974 <HAL_RCC_OscConfig+0x4ec>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ca:	f7ff fb07 	bl	8000edc <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d2:	f7ff fb03 	bl	8000edc <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e03f      	b.n	8001964 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018e4:	4b22      	ldr	r3, [pc, #136]	; (8001970 <HAL_RCC_OscConfig+0x4e8>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1f0      	bne.n	80018d2 <HAL_RCC_OscConfig+0x44a>
 80018f0:	e037      	b.n	8001962 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d101      	bne.n	80018fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e032      	b.n	8001964 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018fe:	4b1c      	ldr	r3, [pc, #112]	; (8001970 <HAL_RCC_OscConfig+0x4e8>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d028      	beq.n	800195e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001916:	429a      	cmp	r2, r3
 8001918:	d121      	bne.n	800195e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001924:	429a      	cmp	r2, r3
 8001926:	d11a      	bne.n	800195e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800192e:	4013      	ands	r3, r2
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001934:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001936:	4293      	cmp	r3, r2
 8001938:	d111      	bne.n	800195e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001944:	085b      	lsrs	r3, r3, #1
 8001946:	3b01      	subs	r3, #1
 8001948:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800194a:	429a      	cmp	r2, r3
 800194c:	d107      	bne.n	800195e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001958:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800195a:	429a      	cmp	r2, r3
 800195c:	d001      	beq.n	8001962 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e000      	b.n	8001964 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40007000 	.word	0x40007000
 8001970:	40023800 	.word	0x40023800
 8001974:	42470060 	.word	0x42470060

08001978 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d101      	bne.n	800198c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e0cc      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800198c:	4b68      	ldr	r3, [pc, #416]	; (8001b30 <HAL_RCC_ClockConfig+0x1b8>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	429a      	cmp	r2, r3
 8001998:	d90c      	bls.n	80019b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199a:	4b65      	ldr	r3, [pc, #404]	; (8001b30 <HAL_RCC_ClockConfig+0x1b8>)
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a2:	4b63      	ldr	r3, [pc, #396]	; (8001b30 <HAL_RCC_ClockConfig+0x1b8>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d001      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e0b8      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d020      	beq.n	8001a02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d005      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019cc:	4b59      	ldr	r3, [pc, #356]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	4a58      	ldr	r2, [pc, #352]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0308 	and.w	r3, r3, #8
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d005      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019e4:	4b53      	ldr	r3, [pc, #332]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	4a52      	ldr	r2, [pc, #328]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019f0:	4b50      	ldr	r3, [pc, #320]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	494d      	ldr	r1, [pc, #308]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d044      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d107      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a16:	4b47      	ldr	r3, [pc, #284]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d119      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e07f      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d003      	beq.n	8001a36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	d107      	bne.n	8001a46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a36:	4b3f      	ldr	r3, [pc, #252]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d109      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e06f      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a46:	4b3b      	ldr	r3, [pc, #236]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e067      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a56:	4b37      	ldr	r3, [pc, #220]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f023 0203 	bic.w	r2, r3, #3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	4934      	ldr	r1, [pc, #208]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a68:	f7ff fa38 	bl	8000edc <HAL_GetTick>
 8001a6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a6e:	e00a      	b.n	8001a86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a70:	f7ff fa34 	bl	8000edc <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e04f      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a86:	4b2b      	ldr	r3, [pc, #172]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 020c 	and.w	r2, r3, #12
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d1eb      	bne.n	8001a70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a98:	4b25      	ldr	r3, [pc, #148]	; (8001b30 <HAL_RCC_ClockConfig+0x1b8>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d20c      	bcs.n	8001ac0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa6:	4b22      	ldr	r3, [pc, #136]	; (8001b30 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aae:	4b20      	ldr	r3, [pc, #128]	; (8001b30 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d001      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e032      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d008      	beq.n	8001ade <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001acc:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	4916      	ldr	r1, [pc, #88]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d009      	beq.n	8001afe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aea:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	490e      	ldr	r1, [pc, #56]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001afe:	f000 f821 	bl	8001b44 <HAL_RCC_GetSysClockFreq>
 8001b02:	4602      	mov	r2, r0
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	091b      	lsrs	r3, r3, #4
 8001b0a:	f003 030f 	and.w	r3, r3, #15
 8001b0e:	490a      	ldr	r1, [pc, #40]	; (8001b38 <HAL_RCC_ClockConfig+0x1c0>)
 8001b10:	5ccb      	ldrb	r3, [r1, r3]
 8001b12:	fa22 f303 	lsr.w	r3, r2, r3
 8001b16:	4a09      	ldr	r2, [pc, #36]	; (8001b3c <HAL_RCC_ClockConfig+0x1c4>)
 8001b18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b1a:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <HAL_RCC_ClockConfig+0x1c8>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff f8e8 	bl	8000cf4 <HAL_InitTick>

  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40023c00 	.word	0x40023c00
 8001b34:	40023800 	.word	0x40023800
 8001b38:	08006024 	.word	0x08006024
 8001b3c:	20000000 	.word	0x20000000
 8001b40:	20000004 	.word	0x20000004

08001b44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b44:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b48:	b084      	sub	sp, #16
 8001b4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	607b      	str	r3, [r7, #4]
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	2300      	movs	r3, #0
 8001b56:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b5c:	4b67      	ldr	r3, [pc, #412]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 030c 	and.w	r3, r3, #12
 8001b64:	2b08      	cmp	r3, #8
 8001b66:	d00d      	beq.n	8001b84 <HAL_RCC_GetSysClockFreq+0x40>
 8001b68:	2b08      	cmp	r3, #8
 8001b6a:	f200 80bd 	bhi.w	8001ce8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d002      	beq.n	8001b78 <HAL_RCC_GetSysClockFreq+0x34>
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	d003      	beq.n	8001b7e <HAL_RCC_GetSysClockFreq+0x3a>
 8001b76:	e0b7      	b.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b78:	4b61      	ldr	r3, [pc, #388]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b7a:	60bb      	str	r3, [r7, #8]
       break;
 8001b7c:	e0b7      	b.n	8001cee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b7e:	4b61      	ldr	r3, [pc, #388]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001b80:	60bb      	str	r3, [r7, #8]
      break;
 8001b82:	e0b4      	b.n	8001cee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b84:	4b5d      	ldr	r3, [pc, #372]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b8c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b8e:	4b5b      	ldr	r3, [pc, #364]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d04d      	beq.n	8001c36 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b9a:	4b58      	ldr	r3, [pc, #352]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	099b      	lsrs	r3, r3, #6
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	f04f 0300 	mov.w	r3, #0
 8001ba6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001baa:	f04f 0100 	mov.w	r1, #0
 8001bae:	ea02 0800 	and.w	r8, r2, r0
 8001bb2:	ea03 0901 	and.w	r9, r3, r1
 8001bb6:	4640      	mov	r0, r8
 8001bb8:	4649      	mov	r1, r9
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	f04f 0300 	mov.w	r3, #0
 8001bc2:	014b      	lsls	r3, r1, #5
 8001bc4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001bc8:	0142      	lsls	r2, r0, #5
 8001bca:	4610      	mov	r0, r2
 8001bcc:	4619      	mov	r1, r3
 8001bce:	ebb0 0008 	subs.w	r0, r0, r8
 8001bd2:	eb61 0109 	sbc.w	r1, r1, r9
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	f04f 0300 	mov.w	r3, #0
 8001bde:	018b      	lsls	r3, r1, #6
 8001be0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001be4:	0182      	lsls	r2, r0, #6
 8001be6:	1a12      	subs	r2, r2, r0
 8001be8:	eb63 0301 	sbc.w	r3, r3, r1
 8001bec:	f04f 0000 	mov.w	r0, #0
 8001bf0:	f04f 0100 	mov.w	r1, #0
 8001bf4:	00d9      	lsls	r1, r3, #3
 8001bf6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001bfa:	00d0      	lsls	r0, r2, #3
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	eb12 0208 	adds.w	r2, r2, r8
 8001c04:	eb43 0309 	adc.w	r3, r3, r9
 8001c08:	f04f 0000 	mov.w	r0, #0
 8001c0c:	f04f 0100 	mov.w	r1, #0
 8001c10:	0259      	lsls	r1, r3, #9
 8001c12:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001c16:	0250      	lsls	r0, r2, #9
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	4619      	mov	r1, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	461a      	mov	r2, r3
 8001c24:	f04f 0300 	mov.w	r3, #0
 8001c28:	f7fe fad2 	bl	80001d0 <__aeabi_uldivmod>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4613      	mov	r3, r2
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	e04a      	b.n	8001ccc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c36:	4b31      	ldr	r3, [pc, #196]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	099b      	lsrs	r3, r3, #6
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	f04f 0300 	mov.w	r3, #0
 8001c42:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c46:	f04f 0100 	mov.w	r1, #0
 8001c4a:	ea02 0400 	and.w	r4, r2, r0
 8001c4e:	ea03 0501 	and.w	r5, r3, r1
 8001c52:	4620      	mov	r0, r4
 8001c54:	4629      	mov	r1, r5
 8001c56:	f04f 0200 	mov.w	r2, #0
 8001c5a:	f04f 0300 	mov.w	r3, #0
 8001c5e:	014b      	lsls	r3, r1, #5
 8001c60:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c64:	0142      	lsls	r2, r0, #5
 8001c66:	4610      	mov	r0, r2
 8001c68:	4619      	mov	r1, r3
 8001c6a:	1b00      	subs	r0, r0, r4
 8001c6c:	eb61 0105 	sbc.w	r1, r1, r5
 8001c70:	f04f 0200 	mov.w	r2, #0
 8001c74:	f04f 0300 	mov.w	r3, #0
 8001c78:	018b      	lsls	r3, r1, #6
 8001c7a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c7e:	0182      	lsls	r2, r0, #6
 8001c80:	1a12      	subs	r2, r2, r0
 8001c82:	eb63 0301 	sbc.w	r3, r3, r1
 8001c86:	f04f 0000 	mov.w	r0, #0
 8001c8a:	f04f 0100 	mov.w	r1, #0
 8001c8e:	00d9      	lsls	r1, r3, #3
 8001c90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c94:	00d0      	lsls	r0, r2, #3
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	1912      	adds	r2, r2, r4
 8001c9c:	eb45 0303 	adc.w	r3, r5, r3
 8001ca0:	f04f 0000 	mov.w	r0, #0
 8001ca4:	f04f 0100 	mov.w	r1, #0
 8001ca8:	0299      	lsls	r1, r3, #10
 8001caa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001cae:	0290      	lsls	r0, r2, #10
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	f04f 0300 	mov.w	r3, #0
 8001cc0:	f7fe fa86 	bl	80001d0 <__aeabi_uldivmod>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4613      	mov	r3, r2
 8001cca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	0c1b      	lsrs	r3, r3, #16
 8001cd2:	f003 0303 	and.w	r3, r3, #3
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce4:	60bb      	str	r3, [r7, #8]
      break;
 8001ce6:	e002      	b.n	8001cee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ce8:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001cea:	60bb      	str	r3, [r7, #8]
      break;
 8001cec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cee:	68bb      	ldr	r3, [r7, #8]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	00f42400 	.word	0x00f42400
 8001d04:	007a1200 	.word	0x007a1200

08001d08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d0c:	4b03      	ldr	r3, [pc, #12]	; (8001d1c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	20000000 	.word	0x20000000

08001d20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d24:	f7ff fff0 	bl	8001d08 <HAL_RCC_GetHCLKFreq>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	0a9b      	lsrs	r3, r3, #10
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	4903      	ldr	r1, [pc, #12]	; (8001d44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d36:	5ccb      	ldrb	r3, [r1, r3]
 8001d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40023800 	.word	0x40023800
 8001d44:	08006034 	.word	0x08006034

08001d48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d4c:	f7ff ffdc 	bl	8001d08 <HAL_RCC_GetHCLKFreq>
 8001d50:	4602      	mov	r2, r0
 8001d52:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	0b5b      	lsrs	r3, r3, #13
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	4903      	ldr	r1, [pc, #12]	; (8001d6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d5e:	5ccb      	ldrb	r3, [r1, r3]
 8001d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	08006034 	.word	0x08006034

08001d70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	220f      	movs	r2, #15
 8001d7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d80:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <HAL_RCC_GetClockConfig+0x5c>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 0203 	and.w	r2, r3, #3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d8c:	4b0f      	ldr	r3, [pc, #60]	; (8001dcc <HAL_RCC_GetClockConfig+0x5c>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d98:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <HAL_RCC_GetClockConfig+0x5c>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001da4:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <HAL_RCC_GetClockConfig+0x5c>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	08db      	lsrs	r3, r3, #3
 8001daa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001db2:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <HAL_RCC_GetClockConfig+0x60>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0207 	and.w	r2, r3, #7
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	601a      	str	r2, [r3, #0]
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	40023c00 	.word	0x40023c00

08001dd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e07b      	b.n	8001ede <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d108      	bne.n	8001e00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001df6:	d009      	beq.n	8001e0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	61da      	str	r2, [r3, #28]
 8001dfe:	e005      	b.n	8001e0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d106      	bne.n	8001e2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7fe fed4 	bl	8000bd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2202      	movs	r2, #2
 8001e30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001e54:	431a      	orrs	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e86:	431a      	orrs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e90:	ea42 0103 	orr.w	r1, r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e98:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	0c1b      	lsrs	r3, r3, #16
 8001eaa:	f003 0104 	and.w	r1, r3, #4
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb2:	f003 0210 	and.w	r2, r3, #16
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	69da      	ldr	r2, [r3, #28]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ecc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b088      	sub	sp, #32
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	60f8      	str	r0, [r7, #12]
 8001eee:	60b9      	str	r1, [r7, #8]
 8001ef0:	603b      	str	r3, [r7, #0]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d101      	bne.n	8001f08 <HAL_SPI_Transmit+0x22>
 8001f04:	2302      	movs	r3, #2
 8001f06:	e126      	b.n	8002156 <HAL_SPI_Transmit+0x270>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f10:	f7fe ffe4 	bl	8000edc <HAL_GetTick>
 8001f14:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001f16:	88fb      	ldrh	r3, [r7, #6]
 8001f18:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d002      	beq.n	8001f2c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001f26:	2302      	movs	r3, #2
 8001f28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f2a:	e10b      	b.n	8002144 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d002      	beq.n	8001f38 <HAL_SPI_Transmit+0x52>
 8001f32:	88fb      	ldrh	r3, [r7, #6]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d102      	bne.n	8001f3e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f3c:	e102      	b.n	8002144 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2203      	movs	r2, #3
 8001f42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	88fa      	ldrh	r2, [r7, #6]
 8001f56:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	88fa      	ldrh	r2, [r7, #6]
 8001f5c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f84:	d10f      	bne.n	8001fa6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fa4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb0:	2b40      	cmp	r3, #64	; 0x40
 8001fb2:	d007      	beq.n	8001fc4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fc2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fcc:	d14b      	bne.n	8002066 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d002      	beq.n	8001fdc <HAL_SPI_Transmit+0xf6>
 8001fd6:	8afb      	ldrh	r3, [r7, #22]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d13e      	bne.n	800205a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe0:	881a      	ldrh	r2, [r3, #0]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fec:	1c9a      	adds	r2, r3, #2
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002000:	e02b      	b.n	800205a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b02      	cmp	r3, #2
 800200e:	d112      	bne.n	8002036 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002014:	881a      	ldrh	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002020:	1c9a      	adds	r2, r3, #2
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800202a:	b29b      	uxth	r3, r3
 800202c:	3b01      	subs	r3, #1
 800202e:	b29a      	uxth	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	86da      	strh	r2, [r3, #54]	; 0x36
 8002034:	e011      	b.n	800205a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002036:	f7fe ff51 	bl	8000edc <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	429a      	cmp	r2, r3
 8002044:	d803      	bhi.n	800204e <HAL_SPI_Transmit+0x168>
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800204c:	d102      	bne.n	8002054 <HAL_SPI_Transmit+0x16e>
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d102      	bne.n	800205a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002058:	e074      	b.n	8002144 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800205e:	b29b      	uxth	r3, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1ce      	bne.n	8002002 <HAL_SPI_Transmit+0x11c>
 8002064:	e04c      	b.n	8002100 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d002      	beq.n	8002074 <HAL_SPI_Transmit+0x18e>
 800206e:	8afb      	ldrh	r3, [r7, #22]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d140      	bne.n	80020f6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	330c      	adds	r3, #12
 800207e:	7812      	ldrb	r2, [r2, #0]
 8002080:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	1c5a      	adds	r2, r3, #1
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002090:	b29b      	uxth	r3, r3
 8002092:	3b01      	subs	r3, #1
 8002094:	b29a      	uxth	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800209a:	e02c      	b.n	80020f6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d113      	bne.n	80020d2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	330c      	adds	r3, #12
 80020b4:	7812      	ldrb	r2, [r2, #0]
 80020b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020bc:	1c5a      	adds	r2, r3, #1
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	3b01      	subs	r3, #1
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80020d0:	e011      	b.n	80020f6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020d2:	f7fe ff03 	bl	8000edc <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d803      	bhi.n	80020ea <HAL_SPI_Transmit+0x204>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e8:	d102      	bne.n	80020f0 <HAL_SPI_Transmit+0x20a>
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d102      	bne.n	80020f6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80020f4:	e026      	b.n	8002144 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1cd      	bne.n	800209c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	6839      	ldr	r1, [r7, #0]
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f000 fbcb 	bl	80028a0 <SPI_EndRxTxTransaction>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d002      	beq.n	8002116 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2220      	movs	r2, #32
 8002114:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10a      	bne.n	8002134 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800211e:	2300      	movs	r3, #0
 8002120:	613b      	str	r3, [r7, #16]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	613b      	str	r3, [r7, #16]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002138:	2b00      	cmp	r3, #0
 800213a:	d002      	beq.n	8002142 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	77fb      	strb	r3, [r7, #31]
 8002140:	e000      	b.n	8002144 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002142:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002154:	7ffb      	ldrb	r3, [r7, #31]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3720      	adds	r7, #32
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b088      	sub	sp, #32
 8002162:	af02      	add	r7, sp, #8
 8002164:	60f8      	str	r0, [r7, #12]
 8002166:	60b9      	str	r1, [r7, #8]
 8002168:	603b      	str	r3, [r7, #0]
 800216a:	4613      	mov	r3, r2
 800216c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800216e:	2300      	movs	r3, #0
 8002170:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800217a:	d112      	bne.n	80021a2 <HAL_SPI_Receive+0x44>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10e      	bne.n	80021a2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2204      	movs	r2, #4
 8002188:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800218c:	88fa      	ldrh	r2, [r7, #6]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	4613      	mov	r3, r2
 8002194:	68ba      	ldr	r2, [r7, #8]
 8002196:	68b9      	ldr	r1, [r7, #8]
 8002198:	68f8      	ldr	r0, [r7, #12]
 800219a:	f000 f8f1 	bl	8002380 <HAL_SPI_TransmitReceive>
 800219e:	4603      	mov	r3, r0
 80021a0:	e0ea      	b.n	8002378 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d101      	bne.n	80021b0 <HAL_SPI_Receive+0x52>
 80021ac:	2302      	movs	r3, #2
 80021ae:	e0e3      	b.n	8002378 <HAL_SPI_Receive+0x21a>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021b8:	f7fe fe90 	bl	8000edc <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d002      	beq.n	80021d0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80021ca:	2302      	movs	r3, #2
 80021cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80021ce:	e0ca      	b.n	8002366 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d002      	beq.n	80021dc <HAL_SPI_Receive+0x7e>
 80021d6:	88fb      	ldrh	r3, [r7, #6]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d102      	bne.n	80021e2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	75fb      	strb	r3, [r7, #23]
    goto error;
 80021e0:	e0c1      	b.n	8002366 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2204      	movs	r2, #4
 80021e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	68ba      	ldr	r2, [r7, #8]
 80021f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	88fa      	ldrh	r2, [r7, #6]
 80021fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	88fa      	ldrh	r2, [r7, #6]
 8002200:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2200      	movs	r2, #0
 800221e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002228:	d10f      	bne.n	800224a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002238:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002248:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002254:	2b40      	cmp	r3, #64	; 0x40
 8002256:	d007      	beq.n	8002268 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002266:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d162      	bne.n	8002336 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002270:	e02e      	b.n	80022d0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	2b01      	cmp	r3, #1
 800227e:	d115      	bne.n	80022ac <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f103 020c 	add.w	r2, r3, #12
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800228c:	7812      	ldrb	r2, [r2, #0]
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002296:	1c5a      	adds	r2, r3, #1
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	3b01      	subs	r3, #1
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80022aa:	e011      	b.n	80022d0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022ac:	f7fe fe16 	bl	8000edc <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d803      	bhi.n	80022c4 <HAL_SPI_Receive+0x166>
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c2:	d102      	bne.n	80022ca <HAL_SPI_Receive+0x16c>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d102      	bne.n	80022d0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80022ce:	e04a      	b.n	8002366 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1cb      	bne.n	8002272 <HAL_SPI_Receive+0x114>
 80022da:	e031      	b.n	8002340 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d113      	bne.n	8002312 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f4:	b292      	uxth	r2, r2
 80022f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fc:	1c9a      	adds	r2, r3, #2
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002306:	b29b      	uxth	r3, r3
 8002308:	3b01      	subs	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002310:	e011      	b.n	8002336 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002312:	f7fe fde3 	bl	8000edc <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d803      	bhi.n	800232a <HAL_SPI_Receive+0x1cc>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002328:	d102      	bne.n	8002330 <HAL_SPI_Receive+0x1d2>
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d102      	bne.n	8002336 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002334:	e017      	b.n	8002366 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800233a:	b29b      	uxth	r3, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1cd      	bne.n	80022dc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	6839      	ldr	r1, [r7, #0]
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 fa45 	bl	80027d4 <SPI_EndRxTransaction>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d002      	beq.n	8002356 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2220      	movs	r2, #32
 8002354:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235a:	2b00      	cmp	r3, #0
 800235c:	d002      	beq.n	8002364 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	75fb      	strb	r3, [r7, #23]
 8002362:	e000      	b.n	8002366 <HAL_SPI_Receive+0x208>
  }

error :
 8002364:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002376:	7dfb      	ldrb	r3, [r7, #23]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08c      	sub	sp, #48	; 0x30
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
 800238c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800238e:	2301      	movs	r3, #1
 8002390:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d101      	bne.n	80023a6 <HAL_SPI_TransmitReceive+0x26>
 80023a2:	2302      	movs	r3, #2
 80023a4:	e18a      	b.n	80026bc <HAL_SPI_TransmitReceive+0x33c>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023ae:	f7fe fd95 	bl	8000edc <HAL_GetTick>
 80023b2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80023c4:	887b      	ldrh	r3, [r7, #2]
 80023c6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80023c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d00f      	beq.n	80023f0 <HAL_SPI_TransmitReceive+0x70>
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023d6:	d107      	bne.n	80023e8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d103      	bne.n	80023e8 <HAL_SPI_TransmitReceive+0x68>
 80023e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d003      	beq.n	80023f0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80023e8:	2302      	movs	r3, #2
 80023ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80023ee:	e15b      	b.n	80026a8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d005      	beq.n	8002402 <HAL_SPI_TransmitReceive+0x82>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d002      	beq.n	8002402 <HAL_SPI_TransmitReceive+0x82>
 80023fc:	887b      	ldrh	r3, [r7, #2]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d103      	bne.n	800240a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002408:	e14e      	b.n	80026a8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b04      	cmp	r3, #4
 8002414:	d003      	beq.n	800241e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2205      	movs	r2, #5
 800241a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	887a      	ldrh	r2, [r7, #2]
 800242e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	887a      	ldrh	r2, [r7, #2]
 8002434:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	68ba      	ldr	r2, [r7, #8]
 800243a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	887a      	ldrh	r2, [r7, #2]
 8002440:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	887a      	ldrh	r2, [r7, #2]
 8002446:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800245e:	2b40      	cmp	r3, #64	; 0x40
 8002460:	d007      	beq.n	8002472 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002470:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800247a:	d178      	bne.n	800256e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d002      	beq.n	800248a <HAL_SPI_TransmitReceive+0x10a>
 8002484:	8b7b      	ldrh	r3, [r7, #26]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d166      	bne.n	8002558 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	881a      	ldrh	r2, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	1c9a      	adds	r2, r3, #2
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	3b01      	subs	r3, #1
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024ae:	e053      	b.n	8002558 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d11b      	bne.n	80024f6 <HAL_SPI_TransmitReceive+0x176>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d016      	beq.n	80024f6 <HAL_SPI_TransmitReceive+0x176>
 80024c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d113      	bne.n	80024f6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	881a      	ldrh	r2, [r3, #0]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	1c9a      	adds	r2, r3, #2
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b01      	cmp	r3, #1
 8002502:	d119      	bne.n	8002538 <HAL_SPI_TransmitReceive+0x1b8>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002508:	b29b      	uxth	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d014      	beq.n	8002538 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68da      	ldr	r2, [r3, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002518:	b292      	uxth	r2, r2
 800251a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002520:	1c9a      	adds	r2, r3, #2
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800252a:	b29b      	uxth	r3, r3
 800252c:	3b01      	subs	r3, #1
 800252e:	b29a      	uxth	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002534:	2301      	movs	r3, #1
 8002536:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002538:	f7fe fcd0 	bl	8000edc <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002544:	429a      	cmp	r2, r3
 8002546:	d807      	bhi.n	8002558 <HAL_SPI_TransmitReceive+0x1d8>
 8002548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800254a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254e:	d003      	beq.n	8002558 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002556:	e0a7      	b.n	80026a8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800255c:	b29b      	uxth	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1a6      	bne.n	80024b0 <HAL_SPI_TransmitReceive+0x130>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002566:	b29b      	uxth	r3, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1a1      	bne.n	80024b0 <HAL_SPI_TransmitReceive+0x130>
 800256c:	e07c      	b.n	8002668 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d002      	beq.n	800257c <HAL_SPI_TransmitReceive+0x1fc>
 8002576:	8b7b      	ldrh	r3, [r7, #26]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d16b      	bne.n	8002654 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	330c      	adds	r3, #12
 8002586:	7812      	ldrb	r2, [r2, #0]
 8002588:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	1c5a      	adds	r2, r3, #1
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002598:	b29b      	uxth	r3, r3
 800259a:	3b01      	subs	r3, #1
 800259c:	b29a      	uxth	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025a2:	e057      	b.n	8002654 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d11c      	bne.n	80025ec <HAL_SPI_TransmitReceive+0x26c>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d017      	beq.n	80025ec <HAL_SPI_TransmitReceive+0x26c>
 80025bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d114      	bne.n	80025ec <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	330c      	adds	r3, #12
 80025cc:	7812      	ldrb	r2, [r2, #0]
 80025ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d4:	1c5a      	adds	r2, r3, #1
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025de:	b29b      	uxth	r3, r3
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025e8:	2300      	movs	r3, #0
 80025ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d119      	bne.n	800262e <HAL_SPI_TransmitReceive+0x2ae>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025fe:	b29b      	uxth	r3, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	d014      	beq.n	800262e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68da      	ldr	r2, [r3, #12]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002616:	1c5a      	adds	r2, r3, #1
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002620:	b29b      	uxth	r3, r3
 8002622:	3b01      	subs	r3, #1
 8002624:	b29a      	uxth	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800262a:	2301      	movs	r3, #1
 800262c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800262e:	f7fe fc55 	bl	8000edc <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800263a:	429a      	cmp	r2, r3
 800263c:	d803      	bhi.n	8002646 <HAL_SPI_TransmitReceive+0x2c6>
 800263e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002644:	d102      	bne.n	800264c <HAL_SPI_TransmitReceive+0x2cc>
 8002646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002648:	2b00      	cmp	r3, #0
 800264a:	d103      	bne.n	8002654 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002652:	e029      	b.n	80026a8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002658:	b29b      	uxth	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1a2      	bne.n	80025a4 <HAL_SPI_TransmitReceive+0x224>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002662:	b29b      	uxth	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	d19d      	bne.n	80025a4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800266a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f000 f917 	bl	80028a0 <SPI_EndRxTxTransaction>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d006      	beq.n	8002686 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2220      	movs	r2, #32
 8002682:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002684:	e010      	b.n	80026a8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10b      	bne.n	80026a6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	617b      	str	r3, [r7, #20]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	617b      	str	r3, [r7, #20]
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	e000      	b.n	80026a8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80026a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80026b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3730      	adds	r7, #48	; 0x30
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b088      	sub	sp, #32
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	603b      	str	r3, [r7, #0]
 80026d0:	4613      	mov	r3, r2
 80026d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80026d4:	f7fe fc02 	bl	8000edc <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026dc:	1a9b      	subs	r3, r3, r2
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	4413      	add	r3, r2
 80026e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80026e4:	f7fe fbfa 	bl	8000edc <HAL_GetTick>
 80026e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80026ea:	4b39      	ldr	r3, [pc, #228]	; (80027d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	015b      	lsls	r3, r3, #5
 80026f0:	0d1b      	lsrs	r3, r3, #20
 80026f2:	69fa      	ldr	r2, [r7, #28]
 80026f4:	fb02 f303 	mul.w	r3, r2, r3
 80026f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026fa:	e054      	b.n	80027a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002702:	d050      	beq.n	80027a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002704:	f7fe fbea 	bl	8000edc <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	69fa      	ldr	r2, [r7, #28]
 8002710:	429a      	cmp	r2, r3
 8002712:	d902      	bls.n	800271a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d13d      	bne.n	8002796 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002728:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002732:	d111      	bne.n	8002758 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800273c:	d004      	beq.n	8002748 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002746:	d107      	bne.n	8002758 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002756:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002760:	d10f      	bne.n	8002782 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002780:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e017      	b.n	80027c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	4013      	ands	r3, r2
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	bf0c      	ite	eq
 80027b6:	2301      	moveq	r3, #1
 80027b8:	2300      	movne	r3, #0
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	461a      	mov	r2, r3
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d19b      	bne.n	80026fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3720      	adds	r7, #32
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000000 	.word	0x20000000

080027d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af02      	add	r7, sp, #8
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027e8:	d111      	bne.n	800280e <SPI_EndRxTransaction+0x3a>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027f2:	d004      	beq.n	80027fe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027fc:	d107      	bne.n	800280e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800280c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002816:	d12a      	bne.n	800286e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002820:	d012      	beq.n	8002848 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	2200      	movs	r2, #0
 800282a:	2180      	movs	r1, #128	; 0x80
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f7ff ff49 	bl	80026c4 <SPI_WaitFlagStateUntilTimeout>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d02d      	beq.n	8002894 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283c:	f043 0220 	orr.w	r2, r3, #32
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e026      	b.n	8002896 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2200      	movs	r2, #0
 8002850:	2101      	movs	r1, #1
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f7ff ff36 	bl	80026c4 <SPI_WaitFlagStateUntilTimeout>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d01a      	beq.n	8002894 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002862:	f043 0220 	orr.w	r2, r3, #32
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e013      	b.n	8002896 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	2200      	movs	r2, #0
 8002876:	2101      	movs	r1, #1
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f7ff ff23 	bl	80026c4 <SPI_WaitFlagStateUntilTimeout>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d007      	beq.n	8002894 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002888:	f043 0220 	orr.w	r2, r3, #32
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e000      	b.n	8002896 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
	...

080028a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b088      	sub	sp, #32
 80028a4:	af02      	add	r7, sp, #8
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80028ac:	4b1b      	ldr	r3, [pc, #108]	; (800291c <SPI_EndRxTxTransaction+0x7c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a1b      	ldr	r2, [pc, #108]	; (8002920 <SPI_EndRxTxTransaction+0x80>)
 80028b2:	fba2 2303 	umull	r2, r3, r2, r3
 80028b6:	0d5b      	lsrs	r3, r3, #21
 80028b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028bc:	fb02 f303 	mul.w	r3, r2, r3
 80028c0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028ca:	d112      	bne.n	80028f2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2200      	movs	r2, #0
 80028d4:	2180      	movs	r1, #128	; 0x80
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f7ff fef4 	bl	80026c4 <SPI_WaitFlagStateUntilTimeout>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d016      	beq.n	8002910 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e6:	f043 0220 	orr.w	r2, r3, #32
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e00f      	b.n	8002912 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00a      	beq.n	800290e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	3b01      	subs	r3, #1
 80028fc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002908:	2b80      	cmp	r3, #128	; 0x80
 800290a:	d0f2      	beq.n	80028f2 <SPI_EndRxTxTransaction+0x52>
 800290c:	e000      	b.n	8002910 <SPI_EndRxTxTransaction+0x70>
        break;
 800290e:	bf00      	nop
  }

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	20000000 	.word	0x20000000
 8002920:	165e9f81 	.word	0x165e9f81

08002924 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e041      	b.n	80029ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d106      	bne.n	8002950 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f839 	bl	80029c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2202      	movs	r2, #2
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3304      	adds	r3, #4
 8002960:	4619      	mov	r1, r3
 8002962:	4610      	mov	r0, r2
 8002964:	f000 f9d8 	bl	8002d18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
	...

080029d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d001      	beq.n	80029f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e04e      	b.n	8002a8e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0201 	orr.w	r2, r2, #1
 8002a06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a23      	ldr	r2, [pc, #140]	; (8002a9c <HAL_TIM_Base_Start_IT+0xc4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d022      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0x80>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a1a:	d01d      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0x80>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a1f      	ldr	r2, [pc, #124]	; (8002aa0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d018      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0x80>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a1e      	ldr	r2, [pc, #120]	; (8002aa4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d013      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0x80>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a1c      	ldr	r2, [pc, #112]	; (8002aa8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d00e      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0x80>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a1b      	ldr	r2, [pc, #108]	; (8002aac <HAL_TIM_Base_Start_IT+0xd4>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d009      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0x80>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a19      	ldr	r2, [pc, #100]	; (8002ab0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d004      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0x80>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a18      	ldr	r2, [pc, #96]	; (8002ab4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d111      	bne.n	8002a7c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2b06      	cmp	r3, #6
 8002a68:	d010      	beq.n	8002a8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f042 0201 	orr.w	r2, r2, #1
 8002a78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a7a:	e007      	b.n	8002a8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 0201 	orr.w	r2, r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	40010000 	.word	0x40010000
 8002aa0:	40000400 	.word	0x40000400
 8002aa4:	40000800 	.word	0x40000800
 8002aa8:	40000c00 	.word	0x40000c00
 8002aac:	40010400 	.word	0x40010400
 8002ab0:	40014000 	.word	0x40014000
 8002ab4:	40001800 	.word	0x40001800

08002ab8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d122      	bne.n	8002b14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d11b      	bne.n	8002b14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f06f 0202 	mvn.w	r2, #2
 8002ae4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f8ee 	bl	8002cdc <HAL_TIM_IC_CaptureCallback>
 8002b00:	e005      	b.n	8002b0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f8e0 	bl	8002cc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f8f1 	bl	8002cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	f003 0304 	and.w	r3, r3, #4
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d122      	bne.n	8002b68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b04      	cmp	r3, #4
 8002b2e:	d11b      	bne.n	8002b68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f06f 0204 	mvn.w	r2, #4
 8002b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f8c4 	bl	8002cdc <HAL_TIM_IC_CaptureCallback>
 8002b54:	e005      	b.n	8002b62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f8b6 	bl	8002cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f8c7 	bl	8002cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b08      	cmp	r3, #8
 8002b74:	d122      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f003 0308 	and.w	r3, r3, #8
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d11b      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0208 	mvn.w	r2, #8
 8002b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2204      	movs	r2, #4
 8002b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f89a 	bl	8002cdc <HAL_TIM_IC_CaptureCallback>
 8002ba8:	e005      	b.n	8002bb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f88c 	bl	8002cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f89d 	bl	8002cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	f003 0310 	and.w	r3, r3, #16
 8002bc6:	2b10      	cmp	r3, #16
 8002bc8:	d122      	bne.n	8002c10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f003 0310 	and.w	r3, r3, #16
 8002bd4:	2b10      	cmp	r3, #16
 8002bd6:	d11b      	bne.n	8002c10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f06f 0210 	mvn.w	r2, #16
 8002be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2208      	movs	r2, #8
 8002be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f870 	bl	8002cdc <HAL_TIM_IC_CaptureCallback>
 8002bfc:	e005      	b.n	8002c0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f862 	bl	8002cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f873 	bl	8002cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d10e      	bne.n	8002c3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d107      	bne.n	8002c3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f06f 0201 	mvn.w	r2, #1
 8002c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7fd ff8c 	bl	8000b54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c46:	2b80      	cmp	r3, #128	; 0x80
 8002c48:	d10e      	bne.n	8002c68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c54:	2b80      	cmp	r3, #128	; 0x80
 8002c56:	d107      	bne.n	8002c68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f902 	bl	8002e6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c72:	2b40      	cmp	r3, #64	; 0x40
 8002c74:	d10e      	bne.n	8002c94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c80:	2b40      	cmp	r3, #64	; 0x40
 8002c82:	d107      	bne.n	8002c94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f838 	bl	8002d04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	f003 0320 	and.w	r3, r3, #32
 8002c9e:	2b20      	cmp	r3, #32
 8002ca0:	d10e      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f003 0320 	and.w	r3, r3, #32
 8002cac:	2b20      	cmp	r3, #32
 8002cae:	d107      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f06f 0220 	mvn.w	r2, #32
 8002cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f8cc 	bl	8002e58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cc0:	bf00      	nop
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a40      	ldr	r2, [pc, #256]	; (8002e2c <TIM_Base_SetConfig+0x114>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d013      	beq.n	8002d58 <TIM_Base_SetConfig+0x40>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d36:	d00f      	beq.n	8002d58 <TIM_Base_SetConfig+0x40>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a3d      	ldr	r2, [pc, #244]	; (8002e30 <TIM_Base_SetConfig+0x118>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d00b      	beq.n	8002d58 <TIM_Base_SetConfig+0x40>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a3c      	ldr	r2, [pc, #240]	; (8002e34 <TIM_Base_SetConfig+0x11c>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d007      	beq.n	8002d58 <TIM_Base_SetConfig+0x40>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a3b      	ldr	r2, [pc, #236]	; (8002e38 <TIM_Base_SetConfig+0x120>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d003      	beq.n	8002d58 <TIM_Base_SetConfig+0x40>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a3a      	ldr	r2, [pc, #232]	; (8002e3c <TIM_Base_SetConfig+0x124>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d108      	bne.n	8002d6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a2f      	ldr	r2, [pc, #188]	; (8002e2c <TIM_Base_SetConfig+0x114>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d02b      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d78:	d027      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a2c      	ldr	r2, [pc, #176]	; (8002e30 <TIM_Base_SetConfig+0x118>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d023      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a2b      	ldr	r2, [pc, #172]	; (8002e34 <TIM_Base_SetConfig+0x11c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d01f      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a2a      	ldr	r2, [pc, #168]	; (8002e38 <TIM_Base_SetConfig+0x120>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d01b      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a29      	ldr	r2, [pc, #164]	; (8002e3c <TIM_Base_SetConfig+0x124>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d017      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a28      	ldr	r2, [pc, #160]	; (8002e40 <TIM_Base_SetConfig+0x128>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d013      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a27      	ldr	r2, [pc, #156]	; (8002e44 <TIM_Base_SetConfig+0x12c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d00f      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a26      	ldr	r2, [pc, #152]	; (8002e48 <TIM_Base_SetConfig+0x130>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d00b      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a25      	ldr	r2, [pc, #148]	; (8002e4c <TIM_Base_SetConfig+0x134>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d007      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a24      	ldr	r2, [pc, #144]	; (8002e50 <TIM_Base_SetConfig+0x138>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d003      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a23      	ldr	r2, [pc, #140]	; (8002e54 <TIM_Base_SetConfig+0x13c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d108      	bne.n	8002ddc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a0a      	ldr	r2, [pc, #40]	; (8002e2c <TIM_Base_SetConfig+0x114>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d003      	beq.n	8002e10 <TIM_Base_SetConfig+0xf8>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a0c      	ldr	r2, [pc, #48]	; (8002e3c <TIM_Base_SetConfig+0x124>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d103      	bne.n	8002e18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	691a      	ldr	r2, [r3, #16]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	615a      	str	r2, [r3, #20]
}
 8002e1e:	bf00      	nop
 8002e20:	3714      	adds	r7, #20
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	40010000 	.word	0x40010000
 8002e30:	40000400 	.word	0x40000400
 8002e34:	40000800 	.word	0x40000800
 8002e38:	40000c00 	.word	0x40000c00
 8002e3c:	40010400 	.word	0x40010400
 8002e40:	40014000 	.word	0x40014000
 8002e44:	40014400 	.word	0x40014400
 8002e48:	40014800 	.word	0x40014800
 8002e4c:	40001800 	.word	0x40001800
 8002e50:	40001c00 	.word	0x40001c00
 8002e54:	40002000 	.word	0x40002000

08002e58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e03f      	b.n	8002f12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d106      	bne.n	8002eac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7fd fedc 	bl	8000c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2224      	movs	r2, #36	; 0x24
 8002eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ec2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f829 	bl	8002f1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	691a      	ldr	r2, [r3, #16]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ed8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	695a      	ldr	r2, [r3, #20]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ee8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68da      	ldr	r2, [r3, #12]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ef8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
	...

08002f1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f20:	b09f      	sub	sp, #124	; 0x7c
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f32:	68d9      	ldr	r1, [r3, #12]
 8002f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	ea40 0301 	orr.w	r3, r0, r1
 8002f3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	431a      	orrs	r2, r3
 8002f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f60:	f021 010c 	bic.w	r1, r1, #12
 8002f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f6a:	430b      	orrs	r3, r1
 8002f6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f7a:	6999      	ldr	r1, [r3, #24]
 8002f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	ea40 0301 	orr.w	r3, r0, r1
 8002f84:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	4bc5      	ldr	r3, [pc, #788]	; (80032a0 <UART_SetConfig+0x384>)
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d004      	beq.n	8002f9a <UART_SetConfig+0x7e>
 8002f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	4bc3      	ldr	r3, [pc, #780]	; (80032a4 <UART_SetConfig+0x388>)
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d103      	bne.n	8002fa2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f9a:	f7fe fed5 	bl	8001d48 <HAL_RCC_GetPCLK2Freq>
 8002f9e:	6778      	str	r0, [r7, #116]	; 0x74
 8002fa0:	e002      	b.n	8002fa8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fa2:	f7fe febd 	bl	8001d20 <HAL_RCC_GetPCLK1Freq>
 8002fa6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fb0:	f040 80b6 	bne.w	8003120 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fb6:	461c      	mov	r4, r3
 8002fb8:	f04f 0500 	mov.w	r5, #0
 8002fbc:	4622      	mov	r2, r4
 8002fbe:	462b      	mov	r3, r5
 8002fc0:	1891      	adds	r1, r2, r2
 8002fc2:	6439      	str	r1, [r7, #64]	; 0x40
 8002fc4:	415b      	adcs	r3, r3
 8002fc6:	647b      	str	r3, [r7, #68]	; 0x44
 8002fc8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002fcc:	1912      	adds	r2, r2, r4
 8002fce:	eb45 0303 	adc.w	r3, r5, r3
 8002fd2:	f04f 0000 	mov.w	r0, #0
 8002fd6:	f04f 0100 	mov.w	r1, #0
 8002fda:	00d9      	lsls	r1, r3, #3
 8002fdc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fe0:	00d0      	lsls	r0, r2, #3
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	1911      	adds	r1, r2, r4
 8002fe8:	6639      	str	r1, [r7, #96]	; 0x60
 8002fea:	416b      	adcs	r3, r5
 8002fec:	667b      	str	r3, [r7, #100]	; 0x64
 8002fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	f04f 0300 	mov.w	r3, #0
 8002ff8:	1891      	adds	r1, r2, r2
 8002ffa:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ffc:	415b      	adcs	r3, r3
 8002ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003000:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003004:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003008:	f7fd f8e2 	bl	80001d0 <__aeabi_uldivmod>
 800300c:	4602      	mov	r2, r0
 800300e:	460b      	mov	r3, r1
 8003010:	4ba5      	ldr	r3, [pc, #660]	; (80032a8 <UART_SetConfig+0x38c>)
 8003012:	fba3 2302 	umull	r2, r3, r3, r2
 8003016:	095b      	lsrs	r3, r3, #5
 8003018:	011e      	lsls	r6, r3, #4
 800301a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800301c:	461c      	mov	r4, r3
 800301e:	f04f 0500 	mov.w	r5, #0
 8003022:	4622      	mov	r2, r4
 8003024:	462b      	mov	r3, r5
 8003026:	1891      	adds	r1, r2, r2
 8003028:	6339      	str	r1, [r7, #48]	; 0x30
 800302a:	415b      	adcs	r3, r3
 800302c:	637b      	str	r3, [r7, #52]	; 0x34
 800302e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003032:	1912      	adds	r2, r2, r4
 8003034:	eb45 0303 	adc.w	r3, r5, r3
 8003038:	f04f 0000 	mov.w	r0, #0
 800303c:	f04f 0100 	mov.w	r1, #0
 8003040:	00d9      	lsls	r1, r3, #3
 8003042:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003046:	00d0      	lsls	r0, r2, #3
 8003048:	4602      	mov	r2, r0
 800304a:	460b      	mov	r3, r1
 800304c:	1911      	adds	r1, r2, r4
 800304e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003050:	416b      	adcs	r3, r5
 8003052:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	461a      	mov	r2, r3
 800305a:	f04f 0300 	mov.w	r3, #0
 800305e:	1891      	adds	r1, r2, r2
 8003060:	62b9      	str	r1, [r7, #40]	; 0x28
 8003062:	415b      	adcs	r3, r3
 8003064:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003066:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800306a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800306e:	f7fd f8af 	bl	80001d0 <__aeabi_uldivmod>
 8003072:	4602      	mov	r2, r0
 8003074:	460b      	mov	r3, r1
 8003076:	4b8c      	ldr	r3, [pc, #560]	; (80032a8 <UART_SetConfig+0x38c>)
 8003078:	fba3 1302 	umull	r1, r3, r3, r2
 800307c:	095b      	lsrs	r3, r3, #5
 800307e:	2164      	movs	r1, #100	; 0x64
 8003080:	fb01 f303 	mul.w	r3, r1, r3
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	3332      	adds	r3, #50	; 0x32
 800308a:	4a87      	ldr	r2, [pc, #540]	; (80032a8 <UART_SetConfig+0x38c>)
 800308c:	fba2 2303 	umull	r2, r3, r2, r3
 8003090:	095b      	lsrs	r3, r3, #5
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003098:	441e      	add	r6, r3
 800309a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800309c:	4618      	mov	r0, r3
 800309e:	f04f 0100 	mov.w	r1, #0
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	1894      	adds	r4, r2, r2
 80030a8:	623c      	str	r4, [r7, #32]
 80030aa:	415b      	adcs	r3, r3
 80030ac:	627b      	str	r3, [r7, #36]	; 0x24
 80030ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030b2:	1812      	adds	r2, r2, r0
 80030b4:	eb41 0303 	adc.w	r3, r1, r3
 80030b8:	f04f 0400 	mov.w	r4, #0
 80030bc:	f04f 0500 	mov.w	r5, #0
 80030c0:	00dd      	lsls	r5, r3, #3
 80030c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80030c6:	00d4      	lsls	r4, r2, #3
 80030c8:	4622      	mov	r2, r4
 80030ca:	462b      	mov	r3, r5
 80030cc:	1814      	adds	r4, r2, r0
 80030ce:	653c      	str	r4, [r7, #80]	; 0x50
 80030d0:	414b      	adcs	r3, r1
 80030d2:	657b      	str	r3, [r7, #84]	; 0x54
 80030d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	461a      	mov	r2, r3
 80030da:	f04f 0300 	mov.w	r3, #0
 80030de:	1891      	adds	r1, r2, r2
 80030e0:	61b9      	str	r1, [r7, #24]
 80030e2:	415b      	adcs	r3, r3
 80030e4:	61fb      	str	r3, [r7, #28]
 80030e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030ea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80030ee:	f7fd f86f 	bl	80001d0 <__aeabi_uldivmod>
 80030f2:	4602      	mov	r2, r0
 80030f4:	460b      	mov	r3, r1
 80030f6:	4b6c      	ldr	r3, [pc, #432]	; (80032a8 <UART_SetConfig+0x38c>)
 80030f8:	fba3 1302 	umull	r1, r3, r3, r2
 80030fc:	095b      	lsrs	r3, r3, #5
 80030fe:	2164      	movs	r1, #100	; 0x64
 8003100:	fb01 f303 	mul.w	r3, r1, r3
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	3332      	adds	r3, #50	; 0x32
 800310a:	4a67      	ldr	r2, [pc, #412]	; (80032a8 <UART_SetConfig+0x38c>)
 800310c:	fba2 2303 	umull	r2, r3, r2, r3
 8003110:	095b      	lsrs	r3, r3, #5
 8003112:	f003 0207 	and.w	r2, r3, #7
 8003116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4432      	add	r2, r6
 800311c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800311e:	e0b9      	b.n	8003294 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003120:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003122:	461c      	mov	r4, r3
 8003124:	f04f 0500 	mov.w	r5, #0
 8003128:	4622      	mov	r2, r4
 800312a:	462b      	mov	r3, r5
 800312c:	1891      	adds	r1, r2, r2
 800312e:	6139      	str	r1, [r7, #16]
 8003130:	415b      	adcs	r3, r3
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003138:	1912      	adds	r2, r2, r4
 800313a:	eb45 0303 	adc.w	r3, r5, r3
 800313e:	f04f 0000 	mov.w	r0, #0
 8003142:	f04f 0100 	mov.w	r1, #0
 8003146:	00d9      	lsls	r1, r3, #3
 8003148:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800314c:	00d0      	lsls	r0, r2, #3
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	eb12 0804 	adds.w	r8, r2, r4
 8003156:	eb43 0905 	adc.w	r9, r3, r5
 800315a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	4618      	mov	r0, r3
 8003160:	f04f 0100 	mov.w	r1, #0
 8003164:	f04f 0200 	mov.w	r2, #0
 8003168:	f04f 0300 	mov.w	r3, #0
 800316c:	008b      	lsls	r3, r1, #2
 800316e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003172:	0082      	lsls	r2, r0, #2
 8003174:	4640      	mov	r0, r8
 8003176:	4649      	mov	r1, r9
 8003178:	f7fd f82a 	bl	80001d0 <__aeabi_uldivmod>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	4b49      	ldr	r3, [pc, #292]	; (80032a8 <UART_SetConfig+0x38c>)
 8003182:	fba3 2302 	umull	r2, r3, r3, r2
 8003186:	095b      	lsrs	r3, r3, #5
 8003188:	011e      	lsls	r6, r3, #4
 800318a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800318c:	4618      	mov	r0, r3
 800318e:	f04f 0100 	mov.w	r1, #0
 8003192:	4602      	mov	r2, r0
 8003194:	460b      	mov	r3, r1
 8003196:	1894      	adds	r4, r2, r2
 8003198:	60bc      	str	r4, [r7, #8]
 800319a:	415b      	adcs	r3, r3
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031a2:	1812      	adds	r2, r2, r0
 80031a4:	eb41 0303 	adc.w	r3, r1, r3
 80031a8:	f04f 0400 	mov.w	r4, #0
 80031ac:	f04f 0500 	mov.w	r5, #0
 80031b0:	00dd      	lsls	r5, r3, #3
 80031b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80031b6:	00d4      	lsls	r4, r2, #3
 80031b8:	4622      	mov	r2, r4
 80031ba:	462b      	mov	r3, r5
 80031bc:	1814      	adds	r4, r2, r0
 80031be:	64bc      	str	r4, [r7, #72]	; 0x48
 80031c0:	414b      	adcs	r3, r1
 80031c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f04f 0100 	mov.w	r1, #0
 80031ce:	f04f 0200 	mov.w	r2, #0
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	008b      	lsls	r3, r1, #2
 80031d8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80031dc:	0082      	lsls	r2, r0, #2
 80031de:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80031e2:	f7fc fff5 	bl	80001d0 <__aeabi_uldivmod>
 80031e6:	4602      	mov	r2, r0
 80031e8:	460b      	mov	r3, r1
 80031ea:	4b2f      	ldr	r3, [pc, #188]	; (80032a8 <UART_SetConfig+0x38c>)
 80031ec:	fba3 1302 	umull	r1, r3, r3, r2
 80031f0:	095b      	lsrs	r3, r3, #5
 80031f2:	2164      	movs	r1, #100	; 0x64
 80031f4:	fb01 f303 	mul.w	r3, r1, r3
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	011b      	lsls	r3, r3, #4
 80031fc:	3332      	adds	r3, #50	; 0x32
 80031fe:	4a2a      	ldr	r2, [pc, #168]	; (80032a8 <UART_SetConfig+0x38c>)
 8003200:	fba2 2303 	umull	r2, r3, r2, r3
 8003204:	095b      	lsrs	r3, r3, #5
 8003206:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800320a:	441e      	add	r6, r3
 800320c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800320e:	4618      	mov	r0, r3
 8003210:	f04f 0100 	mov.w	r1, #0
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	1894      	adds	r4, r2, r2
 800321a:	603c      	str	r4, [r7, #0]
 800321c:	415b      	adcs	r3, r3
 800321e:	607b      	str	r3, [r7, #4]
 8003220:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003224:	1812      	adds	r2, r2, r0
 8003226:	eb41 0303 	adc.w	r3, r1, r3
 800322a:	f04f 0400 	mov.w	r4, #0
 800322e:	f04f 0500 	mov.w	r5, #0
 8003232:	00dd      	lsls	r5, r3, #3
 8003234:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003238:	00d4      	lsls	r4, r2, #3
 800323a:	4622      	mov	r2, r4
 800323c:	462b      	mov	r3, r5
 800323e:	eb12 0a00 	adds.w	sl, r2, r0
 8003242:	eb43 0b01 	adc.w	fp, r3, r1
 8003246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	4618      	mov	r0, r3
 800324c:	f04f 0100 	mov.w	r1, #0
 8003250:	f04f 0200 	mov.w	r2, #0
 8003254:	f04f 0300 	mov.w	r3, #0
 8003258:	008b      	lsls	r3, r1, #2
 800325a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800325e:	0082      	lsls	r2, r0, #2
 8003260:	4650      	mov	r0, sl
 8003262:	4659      	mov	r1, fp
 8003264:	f7fc ffb4 	bl	80001d0 <__aeabi_uldivmod>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	4b0e      	ldr	r3, [pc, #56]	; (80032a8 <UART_SetConfig+0x38c>)
 800326e:	fba3 1302 	umull	r1, r3, r3, r2
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	2164      	movs	r1, #100	; 0x64
 8003276:	fb01 f303 	mul.w	r3, r1, r3
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	3332      	adds	r3, #50	; 0x32
 8003280:	4a09      	ldr	r2, [pc, #36]	; (80032a8 <UART_SetConfig+0x38c>)
 8003282:	fba2 2303 	umull	r2, r3, r2, r3
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	f003 020f 	and.w	r2, r3, #15
 800328c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4432      	add	r2, r6
 8003292:	609a      	str	r2, [r3, #8]
}
 8003294:	bf00      	nop
 8003296:	377c      	adds	r7, #124	; 0x7c
 8003298:	46bd      	mov	sp, r7
 800329a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800329e:	bf00      	nop
 80032a0:	40011000 	.word	0x40011000
 80032a4:	40011400 	.word	0x40011400
 80032a8:	51eb851f 	.word	0x51eb851f

080032ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f103 0208 	add.w	r2, r3, #8
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f04f 32ff 	mov.w	r2, #4294967295
 80032c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f103 0208 	add.w	r2, r3, #8
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f103 0208 	add.w	r2, r3, #8
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003306:	b480      	push	{r7}
 8003308:	b085      	sub	sp, #20
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
 800330e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	1c5a      	adds	r2, r3, #1
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	601a      	str	r2, [r3, #0]
}
 8003342:	bf00      	nop
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr

0800334e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800334e:	b480      	push	{r7}
 8003350:	b085      	sub	sp, #20
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
 8003356:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003364:	d103      	bne.n	800336e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	e00c      	b.n	8003388 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	3308      	adds	r3, #8
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	e002      	b.n	800337c <vListInsert+0x2e>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68ba      	ldr	r2, [r7, #8]
 8003384:	429a      	cmp	r2, r3
 8003386:	d2f6      	bcs.n	8003376 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	1c5a      	adds	r2, r3, #1
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	601a      	str	r2, [r3, #0]
}
 80033b4:	bf00      	nop
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6892      	ldr	r2, [r2, #8]
 80033d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6852      	ldr	r2, [r2, #4]
 80033e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d103      	bne.n	80033f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	1e5a      	subs	r2, r3, #1
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10a      	bne.n	800343e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342c:	f383 8811 	msr	BASEPRI, r3
 8003430:	f3bf 8f6f 	isb	sy
 8003434:	f3bf 8f4f 	dsb	sy
 8003438:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800343a:	bf00      	nop
 800343c:	e7fe      	b.n	800343c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800343e:	f002 fa49 	bl	80058d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344a:	68f9      	ldr	r1, [r7, #12]
 800344c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800344e:	fb01 f303 	mul.w	r3, r1, r3
 8003452:	441a      	add	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800346e:	3b01      	subs	r3, #1
 8003470:	68f9      	ldr	r1, [r7, #12]
 8003472:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003474:	fb01 f303 	mul.w	r3, r1, r3
 8003478:	441a      	add	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	22ff      	movs	r2, #255	; 0xff
 8003482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	22ff      	movs	r2, #255	; 0xff
 800348a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d114      	bne.n	80034be <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d01a      	beq.n	80034d2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	3310      	adds	r3, #16
 80034a0:	4618      	mov	r0, r3
 80034a2:	f001 f9f3 	bl	800488c <xTaskRemoveFromEventList>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d012      	beq.n	80034d2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80034ac:	4b0c      	ldr	r3, [pc, #48]	; (80034e0 <xQueueGenericReset+0xcc>)
 80034ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	f3bf 8f4f 	dsb	sy
 80034b8:	f3bf 8f6f 	isb	sy
 80034bc:	e009      	b.n	80034d2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	3310      	adds	r3, #16
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7ff fef2 	bl	80032ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	3324      	adds	r3, #36	; 0x24
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff feed 	bl	80032ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80034d2:	f002 fa2f 	bl	8005934 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80034d6:	2301      	movs	r3, #1
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	e000ed04 	.word	0xe000ed04

080034e4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b08a      	sub	sp, #40	; 0x28
 80034e8:	af02      	add	r7, sp, #8
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	4613      	mov	r3, r2
 80034f0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10a      	bne.n	800350e <xQueueGenericCreate+0x2a>
	__asm volatile
 80034f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fc:	f383 8811 	msr	BASEPRI, r3
 8003500:	f3bf 8f6f 	isb	sy
 8003504:	f3bf 8f4f 	dsb	sy
 8003508:	613b      	str	r3, [r7, #16]
}
 800350a:	bf00      	nop
 800350c:	e7fe      	b.n	800350c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d102      	bne.n	800351a <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003514:	2300      	movs	r3, #0
 8003516:	61fb      	str	r3, [r7, #28]
 8003518:	e004      	b.n	8003524 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	fb02 f303 	mul.w	r3, r2, r3
 8003522:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	3350      	adds	r3, #80	; 0x50
 8003528:	4618      	mov	r0, r3
 800352a:	f002 faf5 	bl	8005b18 <pvPortMalloc>
 800352e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00d      	beq.n	8003552 <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	3350      	adds	r3, #80	; 0x50
 800353e:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003540:	79fa      	ldrb	r2, [r7, #7]
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	4613      	mov	r3, r2
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	68b9      	ldr	r1, [r7, #8]
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f000 f805 	bl	800355c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003552:	69bb      	ldr	r3, [r7, #24]
	}
 8003554:	4618      	mov	r0, r3
 8003556:	3720      	adds	r7, #32
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
 8003568:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d103      	bne.n	8003578 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	601a      	str	r2, [r3, #0]
 8003576:	e002      	b.n	800357e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800358a:	2101      	movs	r1, #1
 800358c:	69b8      	ldr	r0, [r7, #24]
 800358e:	f7ff ff41 	bl	8003414 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	78fa      	ldrb	r2, [r7, #3]
 8003596:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800359a:	bf00      	nop
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b08e      	sub	sp, #56	; 0x38
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
 80035b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80035b2:	2300      	movs	r3, #0
 80035b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80035ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10a      	bne.n	80035d6 <xQueueGenericSend+0x32>
	__asm volatile
 80035c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c4:	f383 8811 	msr	BASEPRI, r3
 80035c8:	f3bf 8f6f 	isb	sy
 80035cc:	f3bf 8f4f 	dsb	sy
 80035d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80035d2:	bf00      	nop
 80035d4:	e7fe      	b.n	80035d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d103      	bne.n	80035e4 <xQueueGenericSend+0x40>
 80035dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <xQueueGenericSend+0x44>
 80035e4:	2301      	movs	r3, #1
 80035e6:	e000      	b.n	80035ea <xQueueGenericSend+0x46>
 80035e8:	2300      	movs	r3, #0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10a      	bne.n	8003604 <xQueueGenericSend+0x60>
	__asm volatile
 80035ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f2:	f383 8811 	msr	BASEPRI, r3
 80035f6:	f3bf 8f6f 	isb	sy
 80035fa:	f3bf 8f4f 	dsb	sy
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003600:	bf00      	nop
 8003602:	e7fe      	b.n	8003602 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	2b02      	cmp	r3, #2
 8003608:	d103      	bne.n	8003612 <xQueueGenericSend+0x6e>
 800360a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360e:	2b01      	cmp	r3, #1
 8003610:	d101      	bne.n	8003616 <xQueueGenericSend+0x72>
 8003612:	2301      	movs	r3, #1
 8003614:	e000      	b.n	8003618 <xQueueGenericSend+0x74>
 8003616:	2300      	movs	r3, #0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10a      	bne.n	8003632 <xQueueGenericSend+0x8e>
	__asm volatile
 800361c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003620:	f383 8811 	msr	BASEPRI, r3
 8003624:	f3bf 8f6f 	isb	sy
 8003628:	f3bf 8f4f 	dsb	sy
 800362c:	623b      	str	r3, [r7, #32]
}
 800362e:	bf00      	nop
 8003630:	e7fe      	b.n	8003630 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003632:	f001 fac7 	bl	8004bc4 <xTaskGetSchedulerState>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d102      	bne.n	8003642 <xQueueGenericSend+0x9e>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <xQueueGenericSend+0xa2>
 8003642:	2301      	movs	r3, #1
 8003644:	e000      	b.n	8003648 <xQueueGenericSend+0xa4>
 8003646:	2300      	movs	r3, #0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10a      	bne.n	8003662 <xQueueGenericSend+0xbe>
	__asm volatile
 800364c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003650:	f383 8811 	msr	BASEPRI, r3
 8003654:	f3bf 8f6f 	isb	sy
 8003658:	f3bf 8f4f 	dsb	sy
 800365c:	61fb      	str	r3, [r7, #28]
}
 800365e:	bf00      	nop
 8003660:	e7fe      	b.n	8003660 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003662:	f002 f937 	bl	80058d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003668:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800366a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366e:	429a      	cmp	r2, r3
 8003670:	d302      	bcc.n	8003678 <xQueueGenericSend+0xd4>
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	2b02      	cmp	r3, #2
 8003676:	d129      	bne.n	80036cc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	68b9      	ldr	r1, [r7, #8]
 800367c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800367e:	f000 fbb9 	bl	8003df4 <prvCopyDataToQueue>
 8003682:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	2b00      	cmp	r3, #0
 800368a:	d010      	beq.n	80036ae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800368c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368e:	3324      	adds	r3, #36	; 0x24
 8003690:	4618      	mov	r0, r3
 8003692:	f001 f8fb 	bl	800488c <xTaskRemoveFromEventList>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d013      	beq.n	80036c4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800369c:	4b3f      	ldr	r3, [pc, #252]	; (800379c <xQueueGenericSend+0x1f8>)
 800369e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	f3bf 8f4f 	dsb	sy
 80036a8:	f3bf 8f6f 	isb	sy
 80036ac:	e00a      	b.n	80036c4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80036ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d007      	beq.n	80036c4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80036b4:	4b39      	ldr	r3, [pc, #228]	; (800379c <xQueueGenericSend+0x1f8>)
 80036b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	f3bf 8f4f 	dsb	sy
 80036c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80036c4:	f002 f936 	bl	8005934 <vPortExitCritical>
				return pdPASS;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e063      	b.n	8003794 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d103      	bne.n	80036da <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80036d2:	f002 f92f 	bl	8005934 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80036d6:	2300      	movs	r3, #0
 80036d8:	e05c      	b.n	8003794 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80036da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d106      	bne.n	80036ee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80036e0:	f107 0314 	add.w	r3, r7, #20
 80036e4:	4618      	mov	r0, r3
 80036e6:	f001 f933 	bl	8004950 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80036ea:	2301      	movs	r3, #1
 80036ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80036ee:	f002 f921 	bl	8005934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80036f2:	f000 fead 	bl	8004450 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80036f6:	f002 f8ed 	bl	80058d4 <vPortEnterCritical>
 80036fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003700:	b25b      	sxtb	r3, r3
 8003702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003706:	d103      	bne.n	8003710 <xQueueGenericSend+0x16c>
 8003708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003712:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003716:	b25b      	sxtb	r3, r3
 8003718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800371c:	d103      	bne.n	8003726 <xQueueGenericSend+0x182>
 800371e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003726:	f002 f905 	bl	8005934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800372a:	1d3a      	adds	r2, r7, #4
 800372c:	f107 0314 	add.w	r3, r7, #20
 8003730:	4611      	mov	r1, r2
 8003732:	4618      	mov	r0, r3
 8003734:	f001 f922 	bl	800497c <xTaskCheckForTimeOut>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d124      	bne.n	8003788 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800373e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003740:	f000 fc50 	bl	8003fe4 <prvIsQueueFull>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d018      	beq.n	800377c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800374a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374c:	3310      	adds	r3, #16
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	4611      	mov	r1, r2
 8003752:	4618      	mov	r0, r3
 8003754:	f001 f84a 	bl	80047ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003758:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800375a:	f000 fbdb 	bl	8003f14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800375e:	f000 fe85 	bl	800446c <xTaskResumeAll>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	f47f af7c 	bne.w	8003662 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800376a:	4b0c      	ldr	r3, [pc, #48]	; (800379c <xQueueGenericSend+0x1f8>)
 800376c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	f3bf 8f4f 	dsb	sy
 8003776:	f3bf 8f6f 	isb	sy
 800377a:	e772      	b.n	8003662 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800377c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800377e:	f000 fbc9 	bl	8003f14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003782:	f000 fe73 	bl	800446c <xTaskResumeAll>
 8003786:	e76c      	b.n	8003662 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003788:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800378a:	f000 fbc3 	bl	8003f14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800378e:	f000 fe6d 	bl	800446c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003792:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003794:	4618      	mov	r0, r3
 8003796:	3738      	adds	r7, #56	; 0x38
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	e000ed04 	.word	0xe000ed04

080037a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b08e      	sub	sp, #56	; 0x38
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
 80037ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80037b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10a      	bne.n	80037ce <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80037b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037bc:	f383 8811 	msr	BASEPRI, r3
 80037c0:	f3bf 8f6f 	isb	sy
 80037c4:	f3bf 8f4f 	dsb	sy
 80037c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80037ca:	bf00      	nop
 80037cc:	e7fe      	b.n	80037cc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d103      	bne.n	80037dc <xQueueGenericSendFromISR+0x3c>
 80037d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <xQueueGenericSendFromISR+0x40>
 80037dc:	2301      	movs	r3, #1
 80037de:	e000      	b.n	80037e2 <xQueueGenericSendFromISR+0x42>
 80037e0:	2300      	movs	r3, #0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10a      	bne.n	80037fc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80037e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ea:	f383 8811 	msr	BASEPRI, r3
 80037ee:	f3bf 8f6f 	isb	sy
 80037f2:	f3bf 8f4f 	dsb	sy
 80037f6:	623b      	str	r3, [r7, #32]
}
 80037f8:	bf00      	nop
 80037fa:	e7fe      	b.n	80037fa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d103      	bne.n	800380a <xQueueGenericSendFromISR+0x6a>
 8003802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003806:	2b01      	cmp	r3, #1
 8003808:	d101      	bne.n	800380e <xQueueGenericSendFromISR+0x6e>
 800380a:	2301      	movs	r3, #1
 800380c:	e000      	b.n	8003810 <xQueueGenericSendFromISR+0x70>
 800380e:	2300      	movs	r3, #0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10a      	bne.n	800382a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003818:	f383 8811 	msr	BASEPRI, r3
 800381c:	f3bf 8f6f 	isb	sy
 8003820:	f3bf 8f4f 	dsb	sy
 8003824:	61fb      	str	r3, [r7, #28]
}
 8003826:	bf00      	nop
 8003828:	e7fe      	b.n	8003828 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800382a:	f002 f935 	bl	8005a98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800382e:	f3ef 8211 	mrs	r2, BASEPRI
 8003832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003836:	f383 8811 	msr	BASEPRI, r3
 800383a:	f3bf 8f6f 	isb	sy
 800383e:	f3bf 8f4f 	dsb	sy
 8003842:	61ba      	str	r2, [r7, #24]
 8003844:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003846:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003848:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800384a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800384e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003852:	429a      	cmp	r2, r3
 8003854:	d302      	bcc.n	800385c <xQueueGenericSendFromISR+0xbc>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b02      	cmp	r3, #2
 800385a:	d12c      	bne.n	80038b6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800385c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	68b9      	ldr	r1, [r7, #8]
 800386a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800386c:	f000 fac2 	bl	8003df4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003870:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003878:	d112      	bne.n	80038a0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800387a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	2b00      	cmp	r3, #0
 8003880:	d016      	beq.n	80038b0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003884:	3324      	adds	r3, #36	; 0x24
 8003886:	4618      	mov	r0, r3
 8003888:	f001 f800 	bl	800488c <xTaskRemoveFromEventList>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00e      	beq.n	80038b0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00b      	beq.n	80038b0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	e007      	b.n	80038b0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80038a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80038a4:	3301      	adds	r3, #1
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	b25a      	sxtb	r2, r3
 80038aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80038b0:	2301      	movs	r3, #1
 80038b2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80038b4:	e001      	b.n	80038ba <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80038b6:	2300      	movs	r3, #0
 80038b8:	637b      	str	r3, [r7, #52]	; 0x34
 80038ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038bc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80038c4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80038c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3738      	adds	r7, #56	; 0x38
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b08e      	sub	sp, #56	; 0x38
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80038de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10a      	bne.n	80038fa <xQueueGiveFromISR+0x2a>
	__asm volatile
 80038e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e8:	f383 8811 	msr	BASEPRI, r3
 80038ec:	f3bf 8f6f 	isb	sy
 80038f0:	f3bf 8f4f 	dsb	sy
 80038f4:	623b      	str	r3, [r7, #32]
}
 80038f6:	bf00      	nop
 80038f8:	e7fe      	b.n	80038f8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80038fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00a      	beq.n	8003918 <xQueueGiveFromISR+0x48>
	__asm volatile
 8003902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003906:	f383 8811 	msr	BASEPRI, r3
 800390a:	f3bf 8f6f 	isb	sy
 800390e:	f3bf 8f4f 	dsb	sy
 8003912:	61fb      	str	r3, [r7, #28]
}
 8003914:	bf00      	nop
 8003916:	e7fe      	b.n	8003916 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d103      	bne.n	8003928 <xQueueGiveFromISR+0x58>
 8003920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <xQueueGiveFromISR+0x5c>
 8003928:	2301      	movs	r3, #1
 800392a:	e000      	b.n	800392e <xQueueGiveFromISR+0x5e>
 800392c:	2300      	movs	r3, #0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10a      	bne.n	8003948 <xQueueGiveFromISR+0x78>
	__asm volatile
 8003932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003936:	f383 8811 	msr	BASEPRI, r3
 800393a:	f3bf 8f6f 	isb	sy
 800393e:	f3bf 8f4f 	dsb	sy
 8003942:	61bb      	str	r3, [r7, #24]
}
 8003944:	bf00      	nop
 8003946:	e7fe      	b.n	8003946 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003948:	f002 f8a6 	bl	8005a98 <vPortValidateInterruptPriority>
	__asm volatile
 800394c:	f3ef 8211 	mrs	r2, BASEPRI
 8003950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003954:	f383 8811 	msr	BASEPRI, r3
 8003958:	f3bf 8f6f 	isb	sy
 800395c:	f3bf 8f4f 	dsb	sy
 8003960:	617a      	str	r2, [r7, #20]
 8003962:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003964:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003966:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800396e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003972:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003974:	429a      	cmp	r2, r3
 8003976:	d22b      	bcs.n	80039d0 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800397e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003984:	1c5a      	adds	r2, r3, #1
 8003986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003988:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800398a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800398e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003992:	d112      	bne.n	80039ba <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	2b00      	cmp	r3, #0
 800399a:	d016      	beq.n	80039ca <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800399c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399e:	3324      	adds	r3, #36	; 0x24
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 ff73 	bl	800488c <xTaskRemoveFromEventList>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00e      	beq.n	80039ca <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00b      	beq.n	80039ca <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2201      	movs	r2, #1
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	e007      	b.n	80039ca <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80039ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039be:	3301      	adds	r3, #1
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	b25a      	sxtb	r2, r3
 80039c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80039ca:	2301      	movs	r3, #1
 80039cc:	637b      	str	r3, [r7, #52]	; 0x34
 80039ce:	e001      	b.n	80039d4 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80039d0:	2300      	movs	r3, #0
 80039d2:	637b      	str	r3, [r7, #52]	; 0x34
 80039d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f383 8811 	msr	BASEPRI, r3
}
 80039de:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80039e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3738      	adds	r7, #56	; 0x38
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
	...

080039ec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08c      	sub	sp, #48	; 0x30
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80039f8:	2300      	movs	r3, #0
 80039fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10a      	bne.n	8003a1c <xQueueReceive+0x30>
	__asm volatile
 8003a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0a:	f383 8811 	msr	BASEPRI, r3
 8003a0e:	f3bf 8f6f 	isb	sy
 8003a12:	f3bf 8f4f 	dsb	sy
 8003a16:	623b      	str	r3, [r7, #32]
}
 8003a18:	bf00      	nop
 8003a1a:	e7fe      	b.n	8003a1a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d103      	bne.n	8003a2a <xQueueReceive+0x3e>
 8003a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <xQueueReceive+0x42>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <xQueueReceive+0x44>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10a      	bne.n	8003a4a <xQueueReceive+0x5e>
	__asm volatile
 8003a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a38:	f383 8811 	msr	BASEPRI, r3
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	61fb      	str	r3, [r7, #28]
}
 8003a46:	bf00      	nop
 8003a48:	e7fe      	b.n	8003a48 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a4a:	f001 f8bb 	bl	8004bc4 <xTaskGetSchedulerState>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d102      	bne.n	8003a5a <xQueueReceive+0x6e>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <xQueueReceive+0x72>
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e000      	b.n	8003a60 <xQueueReceive+0x74>
 8003a5e:	2300      	movs	r3, #0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10a      	bne.n	8003a7a <xQueueReceive+0x8e>
	__asm volatile
 8003a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a68:	f383 8811 	msr	BASEPRI, r3
 8003a6c:	f3bf 8f6f 	isb	sy
 8003a70:	f3bf 8f4f 	dsb	sy
 8003a74:	61bb      	str	r3, [r7, #24]
}
 8003a76:	bf00      	nop
 8003a78:	e7fe      	b.n	8003a78 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a7a:	f001 ff2b 	bl	80058d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a82:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d01f      	beq.n	8003aca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a8a:	68b9      	ldr	r1, [r7, #8]
 8003a8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a8e:	f000 fa1b 	bl	8003ec8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	1e5a      	subs	r2, r3, #1
 8003a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a98:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00f      	beq.n	8003ac2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa4:	3310      	adds	r3, #16
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f000 fef0 	bl	800488c <xTaskRemoveFromEventList>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d007      	beq.n	8003ac2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003ab2:	4b3d      	ldr	r3, [pc, #244]	; (8003ba8 <xQueueReceive+0x1bc>)
 8003ab4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	f3bf 8f4f 	dsb	sy
 8003abe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003ac2:	f001 ff37 	bl	8005934 <vPortExitCritical>
				return pdPASS;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e069      	b.n	8003b9e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d103      	bne.n	8003ad8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ad0:	f001 ff30 	bl	8005934 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	e062      	b.n	8003b9e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d106      	bne.n	8003aec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ade:	f107 0310 	add.w	r3, r7, #16
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 ff34 	bl	8004950 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003aec:	f001 ff22 	bl	8005934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003af0:	f000 fcae 	bl	8004450 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003af4:	f001 feee 	bl	80058d4 <vPortEnterCritical>
 8003af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003afe:	b25b      	sxtb	r3, r3
 8003b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b04:	d103      	bne.n	8003b0e <xQueueReceive+0x122>
 8003b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b14:	b25b      	sxtb	r3, r3
 8003b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1a:	d103      	bne.n	8003b24 <xQueueReceive+0x138>
 8003b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b24:	f001 ff06 	bl	8005934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b28:	1d3a      	adds	r2, r7, #4
 8003b2a:	f107 0310 	add.w	r3, r7, #16
 8003b2e:	4611      	mov	r1, r2
 8003b30:	4618      	mov	r0, r3
 8003b32:	f000 ff23 	bl	800497c <xTaskCheckForTimeOut>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d123      	bne.n	8003b84 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b3e:	f000 fa3b 	bl	8003fb8 <prvIsQueueEmpty>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d017      	beq.n	8003b78 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4a:	3324      	adds	r3, #36	; 0x24
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	4611      	mov	r1, r2
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 fe4b 	bl	80047ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003b56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b58:	f000 f9dc 	bl	8003f14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b5c:	f000 fc86 	bl	800446c <xTaskResumeAll>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d189      	bne.n	8003a7a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003b66:	4b10      	ldr	r3, [pc, #64]	; (8003ba8 <xQueueReceive+0x1bc>)
 8003b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	f3bf 8f4f 	dsb	sy
 8003b72:	f3bf 8f6f 	isb	sy
 8003b76:	e780      	b.n	8003a7a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003b78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b7a:	f000 f9cb 	bl	8003f14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b7e:	f000 fc75 	bl	800446c <xTaskResumeAll>
 8003b82:	e77a      	b.n	8003a7a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003b84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b86:	f000 f9c5 	bl	8003f14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b8a:	f000 fc6f 	bl	800446c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b90:	f000 fa12 	bl	8003fb8 <prvIsQueueEmpty>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f43f af6f 	beq.w	8003a7a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3730      	adds	r7, #48	; 0x30
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	e000ed04 	.word	0xe000ed04

08003bac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b08e      	sub	sp, #56	; 0x38
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10a      	bne.n	8003bde <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bcc:	f383 8811 	msr	BASEPRI, r3
 8003bd0:	f3bf 8f6f 	isb	sy
 8003bd4:	f3bf 8f4f 	dsb	sy
 8003bd8:	623b      	str	r3, [r7, #32]
}
 8003bda:	bf00      	nop
 8003bdc:	e7fe      	b.n	8003bdc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00a      	beq.n	8003bfc <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bea:	f383 8811 	msr	BASEPRI, r3
 8003bee:	f3bf 8f6f 	isb	sy
 8003bf2:	f3bf 8f4f 	dsb	sy
 8003bf6:	61fb      	str	r3, [r7, #28]
}
 8003bf8:	bf00      	nop
 8003bfa:	e7fe      	b.n	8003bfa <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bfc:	f000 ffe2 	bl	8004bc4 <xTaskGetSchedulerState>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d102      	bne.n	8003c0c <xQueueSemaphoreTake+0x60>
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <xQueueSemaphoreTake+0x64>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e000      	b.n	8003c12 <xQueueSemaphoreTake+0x66>
 8003c10:	2300      	movs	r3, #0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10a      	bne.n	8003c2c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1a:	f383 8811 	msr	BASEPRI, r3
 8003c1e:	f3bf 8f6f 	isb	sy
 8003c22:	f3bf 8f4f 	dsb	sy
 8003c26:	61bb      	str	r3, [r7, #24]
}
 8003c28:	bf00      	nop
 8003c2a:	e7fe      	b.n	8003c2a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c2c:	f001 fe52 	bl	80058d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c34:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d024      	beq.n	8003c86 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3e:	1e5a      	subs	r2, r3, #1
 8003c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c42:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d104      	bne.n	8003c56 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003c4c:	f001 f978 	bl	8004f40 <pvTaskIncrementMutexHeldCount>
 8003c50:	4602      	mov	r2, r0
 8003c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c54:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00f      	beq.n	8003c7e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c60:	3310      	adds	r3, #16
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 fe12 	bl	800488c <xTaskRemoveFromEventList>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d007      	beq.n	8003c7e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c6e:	4b54      	ldr	r3, [pc, #336]	; (8003dc0 <xQueueSemaphoreTake+0x214>)
 8003c70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	f3bf 8f4f 	dsb	sy
 8003c7a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c7e:	f001 fe59 	bl	8005934 <vPortExitCritical>
				return pdPASS;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e097      	b.n	8003db6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d111      	bne.n	8003cb0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00a      	beq.n	8003ca8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c96:	f383 8811 	msr	BASEPRI, r3
 8003c9a:	f3bf 8f6f 	isb	sy
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	617b      	str	r3, [r7, #20]
}
 8003ca4:	bf00      	nop
 8003ca6:	e7fe      	b.n	8003ca6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003ca8:	f001 fe44 	bl	8005934 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003cac:	2300      	movs	r3, #0
 8003cae:	e082      	b.n	8003db6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d106      	bne.n	8003cc4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003cb6:	f107 030c 	add.w	r3, r7, #12
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 fe48 	bl	8004950 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003cc4:	f001 fe36 	bl	8005934 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003cc8:	f000 fbc2 	bl	8004450 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ccc:	f001 fe02 	bl	80058d4 <vPortEnterCritical>
 8003cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cd6:	b25b      	sxtb	r3, r3
 8003cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cdc:	d103      	bne.n	8003ce6 <xQueueSemaphoreTake+0x13a>
 8003cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cec:	b25b      	sxtb	r3, r3
 8003cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf2:	d103      	bne.n	8003cfc <xQueueSemaphoreTake+0x150>
 8003cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cfc:	f001 fe1a 	bl	8005934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d00:	463a      	mov	r2, r7
 8003d02:	f107 030c 	add.w	r3, r7, #12
 8003d06:	4611      	mov	r1, r2
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 fe37 	bl	800497c <xTaskCheckForTimeOut>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d132      	bne.n	8003d7a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d16:	f000 f94f 	bl	8003fb8 <prvIsQueueEmpty>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d026      	beq.n	8003d6e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d109      	bne.n	8003d3c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003d28:	f001 fdd4 	bl	80058d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f000 ff65 	bl	8004c00 <xTaskPriorityInherit>
 8003d36:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003d38:	f001 fdfc 	bl	8005934 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3e:	3324      	adds	r3, #36	; 0x24
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	4611      	mov	r1, r2
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 fd51 	bl	80047ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d4c:	f000 f8e2 	bl	8003f14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d50:	f000 fb8c 	bl	800446c <xTaskResumeAll>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f47f af68 	bne.w	8003c2c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003d5c:	4b18      	ldr	r3, [pc, #96]	; (8003dc0 <xQueueSemaphoreTake+0x214>)
 8003d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	f3bf 8f6f 	isb	sy
 8003d6c:	e75e      	b.n	8003c2c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003d6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d70:	f000 f8d0 	bl	8003f14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d74:	f000 fb7a 	bl	800446c <xTaskResumeAll>
 8003d78:	e758      	b.n	8003c2c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003d7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d7c:	f000 f8ca 	bl	8003f14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d80:	f000 fb74 	bl	800446c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d86:	f000 f917 	bl	8003fb8 <prvIsQueueEmpty>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f43f af4d 	beq.w	8003c2c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00d      	beq.n	8003db4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003d98:	f001 fd9c 	bl	80058d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003d9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d9e:	f000 f811 	bl	8003dc4 <prvGetDisinheritPriorityAfterTimeout>
 8003da2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003daa:	4618      	mov	r0, r3
 8003dac:	f001 f82e 	bl	8004e0c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003db0:	f001 fdc0 	bl	8005934 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003db4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3738      	adds	r7, #56	; 0x38
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	e000ed04 	.word	0xe000ed04

08003dc4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d006      	beq.n	8003de2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f1c3 030f 	rsb	r3, r3, #15
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	e001      	b.n	8003de6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003de2:	2300      	movs	r3, #0
 8003de4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003de6:	68fb      	ldr	r3, [r7, #12]
	}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003e00:	2300      	movs	r3, #0
 8003e02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10d      	bne.n	8003e2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d14d      	bne.n	8003eb6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 ff6e 	bl	8004d00 <xTaskPriorityDisinherit>
 8003e24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	609a      	str	r2, [r3, #8]
 8003e2c:	e043      	b.n	8003eb6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d119      	bne.n	8003e68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6858      	ldr	r0, [r3, #4]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	68b9      	ldr	r1, [r7, #8]
 8003e40:	f002 f868 	bl	8005f14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4c:	441a      	add	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d32b      	bcc.n	8003eb6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	605a      	str	r2, [r3, #4]
 8003e66:	e026      	b.n	8003eb6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	68d8      	ldr	r0, [r3, #12]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e70:	461a      	mov	r2, r3
 8003e72:	68b9      	ldr	r1, [r7, #8]
 8003e74:	f002 f84e 	bl	8005f14 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	68da      	ldr	r2, [r3, #12]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e80:	425b      	negs	r3, r3
 8003e82:	441a      	add	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	68da      	ldr	r2, [r3, #12]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d207      	bcs.n	8003ea4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9c:	425b      	negs	r3, r3
 8003e9e:	441a      	add	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d105      	bne.n	8003eb6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d002      	beq.n	8003eb6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003ebe:	697b      	ldr	r3, [r7, #20]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3718      	adds	r7, #24
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d018      	beq.n	8003f0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68da      	ldr	r2, [r3, #12]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	441a      	add	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68da      	ldr	r2, [r3, #12]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d303      	bcc.n	8003efc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68d9      	ldr	r1, [r3, #12]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f04:	461a      	mov	r2, r3
 8003f06:	6838      	ldr	r0, [r7, #0]
 8003f08:	f002 f804 	bl	8005f14 <memcpy>
	}
}
 8003f0c:	bf00      	nop
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003f1c:	f001 fcda 	bl	80058d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f28:	e011      	b.n	8003f4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d012      	beq.n	8003f58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	3324      	adds	r3, #36	; 0x24
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 fca8 	bl	800488c <xTaskRemoveFromEventList>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003f42:	f000 fd7d 	bl	8004a40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003f46:	7bfb      	ldrb	r3, [r7, #15]
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	dce9      	bgt.n	8003f2a <prvUnlockQueue+0x16>
 8003f56:	e000      	b.n	8003f5a <prvUnlockQueue+0x46>
					break;
 8003f58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	22ff      	movs	r2, #255	; 0xff
 8003f5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003f62:	f001 fce7 	bl	8005934 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003f66:	f001 fcb5 	bl	80058d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f72:	e011      	b.n	8003f98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d012      	beq.n	8003fa2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	3310      	adds	r3, #16
 8003f80:	4618      	mov	r0, r3
 8003f82:	f000 fc83 	bl	800488c <xTaskRemoveFromEventList>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003f8c:	f000 fd58 	bl	8004a40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003f90:	7bbb      	ldrb	r3, [r7, #14]
 8003f92:	3b01      	subs	r3, #1
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	dce9      	bgt.n	8003f74 <prvUnlockQueue+0x60>
 8003fa0:	e000      	b.n	8003fa4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003fa2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	22ff      	movs	r2, #255	; 0xff
 8003fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003fac:	f001 fcc2 	bl	8005934 <vPortExitCritical>
}
 8003fb0:	bf00      	nop
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003fc0:	f001 fc88 	bl	80058d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d102      	bne.n	8003fd2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	e001      	b.n	8003fd6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003fd6:	f001 fcad 	bl	8005934 <vPortExitCritical>

	return xReturn;
 8003fda:	68fb      	ldr	r3, [r7, #12]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003fec:	f001 fc72 	bl	80058d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d102      	bne.n	8004002 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	60fb      	str	r3, [r7, #12]
 8004000:	e001      	b.n	8004006 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004002:	2300      	movs	r3, #0
 8004004:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004006:	f001 fc95 	bl	8005934 <vPortExitCritical>

	return xReturn;
 800400a:	68fb      	ldr	r3, [r7, #12]
}
 800400c:	4618      	mov	r0, r3
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800401e:	2300      	movs	r3, #0
 8004020:	60fb      	str	r3, [r7, #12]
 8004022:	e014      	b.n	800404e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004024:	4a0f      	ldr	r2, [pc, #60]	; (8004064 <vQueueAddToRegistry+0x50>)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10b      	bne.n	8004048 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004030:	490c      	ldr	r1, [pc, #48]	; (8004064 <vQueueAddToRegistry+0x50>)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800403a:	4a0a      	ldr	r2, [pc, #40]	; (8004064 <vQueueAddToRegistry+0x50>)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	4413      	add	r3, r2
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004046:	e006      	b.n	8004056 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	3301      	adds	r3, #1
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2b07      	cmp	r3, #7
 8004052:	d9e7      	bls.n	8004024 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004054:	bf00      	nop
 8004056:	bf00      	nop
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	20012f40 	.word	0x20012f40

08004068 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004078:	f001 fc2c 	bl	80058d4 <vPortEnterCritical>
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004082:	b25b      	sxtb	r3, r3
 8004084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004088:	d103      	bne.n	8004092 <vQueueWaitForMessageRestricted+0x2a>
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004098:	b25b      	sxtb	r3, r3
 800409a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409e:	d103      	bne.n	80040a8 <vQueueWaitForMessageRestricted+0x40>
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040a8:	f001 fc44 	bl	8005934 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d106      	bne.n	80040c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	3324      	adds	r3, #36	; 0x24
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	68b9      	ldr	r1, [r7, #8]
 80040bc:	4618      	mov	r0, r3
 80040be:	f000 fbb9 	bl	8004834 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80040c2:	6978      	ldr	r0, [r7, #20]
 80040c4:	f7ff ff26 	bl	8003f14 <prvUnlockQueue>
	}
 80040c8:	bf00      	nop
 80040ca:	3718      	adds	r7, #24
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b08c      	sub	sp, #48	; 0x30
 80040d4:	af04      	add	r7, sp, #16
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	603b      	str	r3, [r7, #0]
 80040dc:	4613      	mov	r3, r2
 80040de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80040e0:	88fb      	ldrh	r3, [r7, #6]
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4618      	mov	r0, r3
 80040e6:	f001 fd17 	bl	8005b18 <pvPortMalloc>
 80040ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00e      	beq.n	8004110 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80040f2:	2058      	movs	r0, #88	; 0x58
 80040f4:	f001 fd10 	bl	8005b18 <pvPortMalloc>
 80040f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	631a      	str	r2, [r3, #48]	; 0x30
 8004106:	e005      	b.n	8004114 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004108:	6978      	ldr	r0, [r7, #20]
 800410a:	f001 fdc9 	bl	8005ca0 <vPortFree>
 800410e:	e001      	b.n	8004114 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004110:	2300      	movs	r3, #0
 8004112:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d013      	beq.n	8004142 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800411a:	88fa      	ldrh	r2, [r7, #6]
 800411c:	2300      	movs	r3, #0
 800411e:	9303      	str	r3, [sp, #12]
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	9302      	str	r3, [sp, #8]
 8004124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004126:	9301      	str	r3, [sp, #4]
 8004128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	68b9      	ldr	r1, [r7, #8]
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f000 f80e 	bl	8004152 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004136:	69f8      	ldr	r0, [r7, #28]
 8004138:	f000 f89a 	bl	8004270 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800413c:	2301      	movs	r3, #1
 800413e:	61bb      	str	r3, [r7, #24]
 8004140:	e002      	b.n	8004148 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004142:	f04f 33ff 	mov.w	r3, #4294967295
 8004146:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004148:	69bb      	ldr	r3, [r7, #24]
	}
 800414a:	4618      	mov	r0, r3
 800414c:	3720      	adds	r7, #32
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b088      	sub	sp, #32
 8004156:	af00      	add	r7, sp, #0
 8004158:	60f8      	str	r0, [r7, #12]
 800415a:	60b9      	str	r1, [r7, #8]
 800415c:	607a      	str	r2, [r7, #4]
 800415e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004162:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	461a      	mov	r2, r3
 800416a:	21a5      	movs	r1, #165	; 0xa5
 800416c:	f001 fee0 	bl	8005f30 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004172:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800417a:	3b01      	subs	r3, #1
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	4413      	add	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	f023 0307 	bic.w	r3, r3, #7
 8004188:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	f003 0307 	and.w	r3, r3, #7
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00a      	beq.n	80041aa <prvInitialiseNewTask+0x58>
	__asm volatile
 8004194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004198:	f383 8811 	msr	BASEPRI, r3
 800419c:	f3bf 8f6f 	isb	sy
 80041a0:	f3bf 8f4f 	dsb	sy
 80041a4:	617b      	str	r3, [r7, #20]
}
 80041a6:	bf00      	nop
 80041a8:	e7fe      	b.n	80041a8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d01f      	beq.n	80041f0 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041b0:	2300      	movs	r3, #0
 80041b2:	61fb      	str	r3, [r7, #28]
 80041b4:	e012      	b.n	80041dc <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	4413      	add	r3, r2
 80041bc:	7819      	ldrb	r1, [r3, #0]
 80041be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	4413      	add	r3, r2
 80041c4:	3334      	adds	r3, #52	; 0x34
 80041c6:	460a      	mov	r2, r1
 80041c8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80041ca:	68ba      	ldr	r2, [r7, #8]
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	4413      	add	r3, r2
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d006      	beq.n	80041e4 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	3301      	adds	r3, #1
 80041da:	61fb      	str	r3, [r7, #28]
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	2b09      	cmp	r3, #9
 80041e0:	d9e9      	bls.n	80041b6 <prvInitialiseNewTask+0x64>
 80041e2:	e000      	b.n	80041e6 <prvInitialiseNewTask+0x94>
			{
				break;
 80041e4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80041e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80041ee:	e003      	b.n	80041f8 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80041f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80041f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fa:	2b0e      	cmp	r3, #14
 80041fc:	d901      	bls.n	8004202 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80041fe:	230e      	movs	r3, #14
 8004200:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004204:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004206:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800420c:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 800420e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004210:	2200      	movs	r2, #0
 8004212:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004216:	3304      	adds	r3, #4
 8004218:	4618      	mov	r0, r3
 800421a:	f7ff f867 	bl	80032ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800421e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004220:	3318      	adds	r3, #24
 8004222:	4618      	mov	r0, r3
 8004224:	f7ff f862 	bl	80032ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800422c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800422e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004230:	f1c3 020f 	rsb	r2, r3, #15
 8004234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004236:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800423c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800423e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004240:	2200      	movs	r2, #0
 8004242:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	68f9      	ldr	r1, [r7, #12]
 8004250:	69b8      	ldr	r0, [r7, #24]
 8004252:	f001 fa01 	bl	8005658 <pxPortInitialiseStack>
 8004256:	4602      	mov	r2, r0
 8004258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800425c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800425e:	2b00      	cmp	r3, #0
 8004260:	d002      	beq.n	8004268 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004266:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004268:	bf00      	nop
 800426a:	3720      	adds	r7, #32
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004278:	f001 fb2c 	bl	80058d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800427c:	4b2c      	ldr	r3, [pc, #176]	; (8004330 <prvAddNewTaskToReadyList+0xc0>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	3301      	adds	r3, #1
 8004282:	4a2b      	ldr	r2, [pc, #172]	; (8004330 <prvAddNewTaskToReadyList+0xc0>)
 8004284:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004286:	4b2b      	ldr	r3, [pc, #172]	; (8004334 <prvAddNewTaskToReadyList+0xc4>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d109      	bne.n	80042a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800428e:	4a29      	ldr	r2, [pc, #164]	; (8004334 <prvAddNewTaskToReadyList+0xc4>)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004294:	4b26      	ldr	r3, [pc, #152]	; (8004330 <prvAddNewTaskToReadyList+0xc0>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d110      	bne.n	80042be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800429c:	f000 fbf4 	bl	8004a88 <prvInitialiseTaskLists>
 80042a0:	e00d      	b.n	80042be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80042a2:	4b25      	ldr	r3, [pc, #148]	; (8004338 <prvAddNewTaskToReadyList+0xc8>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d109      	bne.n	80042be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80042aa:	4b22      	ldr	r3, [pc, #136]	; (8004334 <prvAddNewTaskToReadyList+0xc4>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d802      	bhi.n	80042be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80042b8:	4a1e      	ldr	r2, [pc, #120]	; (8004334 <prvAddNewTaskToReadyList+0xc4>)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80042be:	4b1f      	ldr	r3, [pc, #124]	; (800433c <prvAddNewTaskToReadyList+0xcc>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	3301      	adds	r3, #1
 80042c4:	4a1d      	ldr	r2, [pc, #116]	; (800433c <prvAddNewTaskToReadyList+0xcc>)
 80042c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80042c8:	4b1c      	ldr	r3, [pc, #112]	; (800433c <prvAddNewTaskToReadyList+0xcc>)
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d4:	2201      	movs	r2, #1
 80042d6:	409a      	lsls	r2, r3
 80042d8:	4b19      	ldr	r3, [pc, #100]	; (8004340 <prvAddNewTaskToReadyList+0xd0>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4313      	orrs	r3, r2
 80042de:	4a18      	ldr	r2, [pc, #96]	; (8004340 <prvAddNewTaskToReadyList+0xd0>)
 80042e0:	6013      	str	r3, [r2, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e6:	4613      	mov	r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4413      	add	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4a15      	ldr	r2, [pc, #84]	; (8004344 <prvAddNewTaskToReadyList+0xd4>)
 80042f0:	441a      	add	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	3304      	adds	r3, #4
 80042f6:	4619      	mov	r1, r3
 80042f8:	4610      	mov	r0, r2
 80042fa:	f7ff f804 	bl	8003306 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80042fe:	f001 fb19 	bl	8005934 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004302:	4b0d      	ldr	r3, [pc, #52]	; (8004338 <prvAddNewTaskToReadyList+0xc8>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00e      	beq.n	8004328 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800430a:	4b0a      	ldr	r3, [pc, #40]	; (8004334 <prvAddNewTaskToReadyList+0xc4>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004314:	429a      	cmp	r2, r3
 8004316:	d207      	bcs.n	8004328 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004318:	4b0b      	ldr	r3, [pc, #44]	; (8004348 <prvAddNewTaskToReadyList+0xd8>)
 800431a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	f3bf 8f4f 	dsb	sy
 8004324:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004328:	bf00      	nop
 800432a:	3708      	adds	r7, #8
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	200001d0 	.word	0x200001d0
 8004334:	20000030 	.word	0x20000030
 8004338:	200001dc 	.word	0x200001dc
 800433c:	200001ec 	.word	0x200001ec
 8004340:	200001d8 	.word	0x200001d8
 8004344:	20000034 	.word	0x20000034
 8004348:	e000ed04 	.word	0xe000ed04

0800434c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004354:	2300      	movs	r3, #0
 8004356:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d017      	beq.n	800438e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800435e:	4b13      	ldr	r3, [pc, #76]	; (80043ac <vTaskDelay+0x60>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00a      	beq.n	800437c <vTaskDelay+0x30>
	__asm volatile
 8004366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436a:	f383 8811 	msr	BASEPRI, r3
 800436e:	f3bf 8f6f 	isb	sy
 8004372:	f3bf 8f4f 	dsb	sy
 8004376:	60bb      	str	r3, [r7, #8]
}
 8004378:	bf00      	nop
 800437a:	e7fe      	b.n	800437a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800437c:	f000 f868 	bl	8004450 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004380:	2100      	movs	r1, #0
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 fdf0 	bl	8004f68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004388:	f000 f870 	bl	800446c <xTaskResumeAll>
 800438c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d107      	bne.n	80043a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004394:	4b06      	ldr	r3, [pc, #24]	; (80043b0 <vTaskDelay+0x64>)
 8004396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80043a4:	bf00      	nop
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	200001f8 	.word	0x200001f8
 80043b0:	e000ed04 	.word	0xe000ed04

080043b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80043ba:	4b1f      	ldr	r3, [pc, #124]	; (8004438 <vTaskStartScheduler+0x84>)
 80043bc:	9301      	str	r3, [sp, #4]
 80043be:	2300      	movs	r3, #0
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	2300      	movs	r3, #0
 80043c4:	2282      	movs	r2, #130	; 0x82
 80043c6:	491d      	ldr	r1, [pc, #116]	; (800443c <vTaskStartScheduler+0x88>)
 80043c8:	481d      	ldr	r0, [pc, #116]	; (8004440 <vTaskStartScheduler+0x8c>)
 80043ca:	f7ff fe81 	bl	80040d0 <xTaskCreate>
 80043ce:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d102      	bne.n	80043dc <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80043d6:	f000 fe2d 	bl	8005034 <xTimerCreateTimerTask>
 80043da:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d116      	bne.n	8004410 <vTaskStartScheduler+0x5c>
	__asm volatile
 80043e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e6:	f383 8811 	msr	BASEPRI, r3
 80043ea:	f3bf 8f6f 	isb	sy
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	60bb      	str	r3, [r7, #8]
}
 80043f4:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80043f6:	4b13      	ldr	r3, [pc, #76]	; (8004444 <vTaskStartScheduler+0x90>)
 80043f8:	f04f 32ff 	mov.w	r2, #4294967295
 80043fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80043fe:	4b12      	ldr	r3, [pc, #72]	; (8004448 <vTaskStartScheduler+0x94>)
 8004400:	2201      	movs	r2, #1
 8004402:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004404:	4b11      	ldr	r3, [pc, #68]	; (800444c <vTaskStartScheduler+0x98>)
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800440a:	f001 f9b1 	bl	8005770 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800440e:	e00e      	b.n	800442e <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004416:	d10a      	bne.n	800442e <vTaskStartScheduler+0x7a>
	__asm volatile
 8004418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441c:	f383 8811 	msr	BASEPRI, r3
 8004420:	f3bf 8f6f 	isb	sy
 8004424:	f3bf 8f4f 	dsb	sy
 8004428:	607b      	str	r3, [r7, #4]
}
 800442a:	bf00      	nop
 800442c:	e7fe      	b.n	800442c <vTaskStartScheduler+0x78>
}
 800442e:	bf00      	nop
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	200001f4 	.word	0x200001f4
 800443c:	08005f74 	.word	0x08005f74
 8004440:	08004a59 	.word	0x08004a59
 8004444:	200001f0 	.word	0x200001f0
 8004448:	200001dc 	.word	0x200001dc
 800444c:	200001d4 	.word	0x200001d4

08004450 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004450:	b480      	push	{r7}
 8004452:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004454:	4b04      	ldr	r3, [pc, #16]	; (8004468 <vTaskSuspendAll+0x18>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	3301      	adds	r3, #1
 800445a:	4a03      	ldr	r2, [pc, #12]	; (8004468 <vTaskSuspendAll+0x18>)
 800445c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800445e:	bf00      	nop
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr
 8004468:	200001f8 	.word	0x200001f8

0800446c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004472:	2300      	movs	r3, #0
 8004474:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004476:	2300      	movs	r3, #0
 8004478:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800447a:	4b41      	ldr	r3, [pc, #260]	; (8004580 <xTaskResumeAll+0x114>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10a      	bne.n	8004498 <xTaskResumeAll+0x2c>
	__asm volatile
 8004482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004486:	f383 8811 	msr	BASEPRI, r3
 800448a:	f3bf 8f6f 	isb	sy
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	603b      	str	r3, [r7, #0]
}
 8004494:	bf00      	nop
 8004496:	e7fe      	b.n	8004496 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004498:	f001 fa1c 	bl	80058d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800449c:	4b38      	ldr	r3, [pc, #224]	; (8004580 <xTaskResumeAll+0x114>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	3b01      	subs	r3, #1
 80044a2:	4a37      	ldr	r2, [pc, #220]	; (8004580 <xTaskResumeAll+0x114>)
 80044a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044a6:	4b36      	ldr	r3, [pc, #216]	; (8004580 <xTaskResumeAll+0x114>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d161      	bne.n	8004572 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80044ae:	4b35      	ldr	r3, [pc, #212]	; (8004584 <xTaskResumeAll+0x118>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d05d      	beq.n	8004572 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044b6:	e02e      	b.n	8004516 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044b8:	4b33      	ldr	r3, [pc, #204]	; (8004588 <xTaskResumeAll+0x11c>)
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	3318      	adds	r3, #24
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7fe ff7b 	bl	80033c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	3304      	adds	r3, #4
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fe ff76 	bl	80033c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d8:	2201      	movs	r2, #1
 80044da:	409a      	lsls	r2, r3
 80044dc:	4b2b      	ldr	r3, [pc, #172]	; (800458c <xTaskResumeAll+0x120>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	4a2a      	ldr	r2, [pc, #168]	; (800458c <xTaskResumeAll+0x120>)
 80044e4:	6013      	str	r3, [r2, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ea:	4613      	mov	r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4413      	add	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4a27      	ldr	r2, [pc, #156]	; (8004590 <xTaskResumeAll+0x124>)
 80044f4:	441a      	add	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	3304      	adds	r3, #4
 80044fa:	4619      	mov	r1, r3
 80044fc:	4610      	mov	r0, r2
 80044fe:	f7fe ff02 	bl	8003306 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004506:	4b23      	ldr	r3, [pc, #140]	; (8004594 <xTaskResumeAll+0x128>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450c:	429a      	cmp	r2, r3
 800450e:	d302      	bcc.n	8004516 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004510:	4b21      	ldr	r3, [pc, #132]	; (8004598 <xTaskResumeAll+0x12c>)
 8004512:	2201      	movs	r2, #1
 8004514:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004516:	4b1c      	ldr	r3, [pc, #112]	; (8004588 <xTaskResumeAll+0x11c>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1cc      	bne.n	80044b8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004524:	f000 fb2e 	bl	8004b84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004528:	4b1c      	ldr	r3, [pc, #112]	; (800459c <xTaskResumeAll+0x130>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d010      	beq.n	8004556 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004534:	f000 f846 	bl	80045c4 <xTaskIncrementTick>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d002      	beq.n	8004544 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800453e:	4b16      	ldr	r3, [pc, #88]	; (8004598 <xTaskResumeAll+0x12c>)
 8004540:	2201      	movs	r2, #1
 8004542:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	3b01      	subs	r3, #1
 8004548:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1f1      	bne.n	8004534 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004550:	4b12      	ldr	r3, [pc, #72]	; (800459c <xTaskResumeAll+0x130>)
 8004552:	2200      	movs	r2, #0
 8004554:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004556:	4b10      	ldr	r3, [pc, #64]	; (8004598 <xTaskResumeAll+0x12c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d009      	beq.n	8004572 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800455e:	2301      	movs	r3, #1
 8004560:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004562:	4b0f      	ldr	r3, [pc, #60]	; (80045a0 <xTaskResumeAll+0x134>)
 8004564:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004568:	601a      	str	r2, [r3, #0]
 800456a:	f3bf 8f4f 	dsb	sy
 800456e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004572:	f001 f9df 	bl	8005934 <vPortExitCritical>

	return xAlreadyYielded;
 8004576:	68bb      	ldr	r3, [r7, #8]
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	200001f8 	.word	0x200001f8
 8004584:	200001d0 	.word	0x200001d0
 8004588:	20000190 	.word	0x20000190
 800458c:	200001d8 	.word	0x200001d8
 8004590:	20000034 	.word	0x20000034
 8004594:	20000030 	.word	0x20000030
 8004598:	200001e4 	.word	0x200001e4
 800459c:	200001e0 	.word	0x200001e0
 80045a0:	e000ed04 	.word	0xe000ed04

080045a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80045aa:	4b05      	ldr	r3, [pc, #20]	; (80045c0 <xTaskGetTickCount+0x1c>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80045b0:	687b      	ldr	r3, [r7, #4]
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	200001d4 	.word	0x200001d4

080045c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80045ca:	2300      	movs	r3, #0
 80045cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045ce:	4b4e      	ldr	r3, [pc, #312]	; (8004708 <xTaskIncrementTick+0x144>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f040 8088 	bne.w	80046e8 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80045d8:	4b4c      	ldr	r3, [pc, #304]	; (800470c <xTaskIncrementTick+0x148>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	3301      	adds	r3, #1
 80045de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80045e0:	4a4a      	ldr	r2, [pc, #296]	; (800470c <xTaskIncrementTick+0x148>)
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d120      	bne.n	800462e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80045ec:	4b48      	ldr	r3, [pc, #288]	; (8004710 <xTaskIncrementTick+0x14c>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <xTaskIncrementTick+0x48>
	__asm volatile
 80045f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fa:	f383 8811 	msr	BASEPRI, r3
 80045fe:	f3bf 8f6f 	isb	sy
 8004602:	f3bf 8f4f 	dsb	sy
 8004606:	603b      	str	r3, [r7, #0]
}
 8004608:	bf00      	nop
 800460a:	e7fe      	b.n	800460a <xTaskIncrementTick+0x46>
 800460c:	4b40      	ldr	r3, [pc, #256]	; (8004710 <xTaskIncrementTick+0x14c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	60fb      	str	r3, [r7, #12]
 8004612:	4b40      	ldr	r3, [pc, #256]	; (8004714 <xTaskIncrementTick+0x150>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a3e      	ldr	r2, [pc, #248]	; (8004710 <xTaskIncrementTick+0x14c>)
 8004618:	6013      	str	r3, [r2, #0]
 800461a:	4a3e      	ldr	r2, [pc, #248]	; (8004714 <xTaskIncrementTick+0x150>)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6013      	str	r3, [r2, #0]
 8004620:	4b3d      	ldr	r3, [pc, #244]	; (8004718 <xTaskIncrementTick+0x154>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	3301      	adds	r3, #1
 8004626:	4a3c      	ldr	r2, [pc, #240]	; (8004718 <xTaskIncrementTick+0x154>)
 8004628:	6013      	str	r3, [r2, #0]
 800462a:	f000 faab 	bl	8004b84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800462e:	4b3b      	ldr	r3, [pc, #236]	; (800471c <xTaskIncrementTick+0x158>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	429a      	cmp	r2, r3
 8004636:	d348      	bcc.n	80046ca <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004638:	4b35      	ldr	r3, [pc, #212]	; (8004710 <xTaskIncrementTick+0x14c>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d104      	bne.n	800464c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004642:	4b36      	ldr	r3, [pc, #216]	; (800471c <xTaskIncrementTick+0x158>)
 8004644:	f04f 32ff 	mov.w	r2, #4294967295
 8004648:	601a      	str	r2, [r3, #0]
					break;
 800464a:	e03e      	b.n	80046ca <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800464c:	4b30      	ldr	r3, [pc, #192]	; (8004710 <xTaskIncrementTick+0x14c>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	429a      	cmp	r2, r3
 8004662:	d203      	bcs.n	800466c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004664:	4a2d      	ldr	r2, [pc, #180]	; (800471c <xTaskIncrementTick+0x158>)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800466a:	e02e      	b.n	80046ca <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	3304      	adds	r3, #4
 8004670:	4618      	mov	r0, r3
 8004672:	f7fe fea5 	bl	80033c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467a:	2b00      	cmp	r3, #0
 800467c:	d004      	beq.n	8004688 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	3318      	adds	r3, #24
 8004682:	4618      	mov	r0, r3
 8004684:	f7fe fe9c 	bl	80033c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468c:	2201      	movs	r2, #1
 800468e:	409a      	lsls	r2, r3
 8004690:	4b23      	ldr	r3, [pc, #140]	; (8004720 <xTaskIncrementTick+0x15c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4313      	orrs	r3, r2
 8004696:	4a22      	ldr	r2, [pc, #136]	; (8004720 <xTaskIncrementTick+0x15c>)
 8004698:	6013      	str	r3, [r2, #0]
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800469e:	4613      	mov	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4413      	add	r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4a1f      	ldr	r2, [pc, #124]	; (8004724 <xTaskIncrementTick+0x160>)
 80046a8:	441a      	add	r2, r3
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	3304      	adds	r3, #4
 80046ae:	4619      	mov	r1, r3
 80046b0:	4610      	mov	r0, r2
 80046b2:	f7fe fe28 	bl	8003306 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ba:	4b1b      	ldr	r3, [pc, #108]	; (8004728 <xTaskIncrementTick+0x164>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d3b9      	bcc.n	8004638 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80046c4:	2301      	movs	r3, #1
 80046c6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046c8:	e7b6      	b.n	8004638 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80046ca:	4b17      	ldr	r3, [pc, #92]	; (8004728 <xTaskIncrementTick+0x164>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d0:	4914      	ldr	r1, [pc, #80]	; (8004724 <xTaskIncrementTick+0x160>)
 80046d2:	4613      	mov	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	440b      	add	r3, r1
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d907      	bls.n	80046f2 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80046e2:	2301      	movs	r3, #1
 80046e4:	617b      	str	r3, [r7, #20]
 80046e6:	e004      	b.n	80046f2 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80046e8:	4b10      	ldr	r3, [pc, #64]	; (800472c <xTaskIncrementTick+0x168>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	3301      	adds	r3, #1
 80046ee:	4a0f      	ldr	r2, [pc, #60]	; (800472c <xTaskIncrementTick+0x168>)
 80046f0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80046f2:	4b0f      	ldr	r3, [pc, #60]	; (8004730 <xTaskIncrementTick+0x16c>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80046fa:	2301      	movs	r3, #1
 80046fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80046fe:	697b      	ldr	r3, [r7, #20]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3718      	adds	r7, #24
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	200001f8 	.word	0x200001f8
 800470c:	200001d4 	.word	0x200001d4
 8004710:	20000188 	.word	0x20000188
 8004714:	2000018c 	.word	0x2000018c
 8004718:	200001e8 	.word	0x200001e8
 800471c:	200001f0 	.word	0x200001f0
 8004720:	200001d8 	.word	0x200001d8
 8004724:	20000034 	.word	0x20000034
 8004728:	20000030 	.word	0x20000030
 800472c:	200001e0 	.word	0x200001e0
 8004730:	200001e4 	.word	0x200001e4

08004734 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004734:	b480      	push	{r7}
 8004736:	b087      	sub	sp, #28
 8004738:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800473a:	4b27      	ldr	r3, [pc, #156]	; (80047d8 <vTaskSwitchContext+0xa4>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004742:	4b26      	ldr	r3, [pc, #152]	; (80047dc <vTaskSwitchContext+0xa8>)
 8004744:	2201      	movs	r2, #1
 8004746:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004748:	e03f      	b.n	80047ca <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800474a:	4b24      	ldr	r3, [pc, #144]	; (80047dc <vTaskSwitchContext+0xa8>)
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004750:	4b23      	ldr	r3, [pc, #140]	; (80047e0 <vTaskSwitchContext+0xac>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	fab3 f383 	clz	r3, r3
 800475c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800475e:	7afb      	ldrb	r3, [r7, #11]
 8004760:	f1c3 031f 	rsb	r3, r3, #31
 8004764:	617b      	str	r3, [r7, #20]
 8004766:	491f      	ldr	r1, [pc, #124]	; (80047e4 <vTaskSwitchContext+0xb0>)
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	4613      	mov	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	440b      	add	r3, r1
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10a      	bne.n	8004790 <vTaskSwitchContext+0x5c>
	__asm volatile
 800477a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477e:	f383 8811 	msr	BASEPRI, r3
 8004782:	f3bf 8f6f 	isb	sy
 8004786:	f3bf 8f4f 	dsb	sy
 800478a:	607b      	str	r3, [r7, #4]
}
 800478c:	bf00      	nop
 800478e:	e7fe      	b.n	800478e <vTaskSwitchContext+0x5a>
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	4613      	mov	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	4a12      	ldr	r2, [pc, #72]	; (80047e4 <vTaskSwitchContext+0xb0>)
 800479c:	4413      	add	r3, r2
 800479e:	613b      	str	r3, [r7, #16]
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	605a      	str	r2, [r3, #4]
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	3308      	adds	r3, #8
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d104      	bne.n	80047c0 <vTaskSwitchContext+0x8c>
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	605a      	str	r2, [r3, #4]
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	4a08      	ldr	r2, [pc, #32]	; (80047e8 <vTaskSwitchContext+0xb4>)
 80047c8:	6013      	str	r3, [r2, #0]
}
 80047ca:	bf00      	nop
 80047cc:	371c      	adds	r7, #28
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	200001f8 	.word	0x200001f8
 80047dc:	200001e4 	.word	0x200001e4
 80047e0:	200001d8 	.word	0x200001d8
 80047e4:	20000034 	.word	0x20000034
 80047e8:	20000030 	.word	0x20000030

080047ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10a      	bne.n	8004812 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80047fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004800:	f383 8811 	msr	BASEPRI, r3
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	f3bf 8f4f 	dsb	sy
 800480c:	60fb      	str	r3, [r7, #12]
}
 800480e:	bf00      	nop
 8004810:	e7fe      	b.n	8004810 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004812:	4b07      	ldr	r3, [pc, #28]	; (8004830 <vTaskPlaceOnEventList+0x44>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	3318      	adds	r3, #24
 8004818:	4619      	mov	r1, r3
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7fe fd97 	bl	800334e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004820:	2101      	movs	r1, #1
 8004822:	6838      	ldr	r0, [r7, #0]
 8004824:	f000 fba0 	bl	8004f68 <prvAddCurrentTaskToDelayedList>
}
 8004828:	bf00      	nop
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	20000030 	.word	0x20000030

08004834 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004834:	b580      	push	{r7, lr}
 8004836:	b086      	sub	sp, #24
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10a      	bne.n	800485c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484a:	f383 8811 	msr	BASEPRI, r3
 800484e:	f3bf 8f6f 	isb	sy
 8004852:	f3bf 8f4f 	dsb	sy
 8004856:	617b      	str	r3, [r7, #20]
}
 8004858:	bf00      	nop
 800485a:	e7fe      	b.n	800485a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800485c:	4b0a      	ldr	r3, [pc, #40]	; (8004888 <vTaskPlaceOnEventListRestricted+0x54>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	3318      	adds	r3, #24
 8004862:	4619      	mov	r1, r3
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f7fe fd4e 	bl	8003306 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004870:	f04f 33ff 	mov.w	r3, #4294967295
 8004874:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004876:	6879      	ldr	r1, [r7, #4]
 8004878:	68b8      	ldr	r0, [r7, #8]
 800487a:	f000 fb75 	bl	8004f68 <prvAddCurrentTaskToDelayedList>
	}
 800487e:	bf00      	nop
 8004880:	3718      	adds	r7, #24
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	20000030 	.word	0x20000030

0800488c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10a      	bne.n	80048b8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80048a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a6:	f383 8811 	msr	BASEPRI, r3
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	60fb      	str	r3, [r7, #12]
}
 80048b4:	bf00      	nop
 80048b6:	e7fe      	b.n	80048b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	3318      	adds	r3, #24
 80048bc:	4618      	mov	r0, r3
 80048be:	f7fe fd7f 	bl	80033c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048c2:	4b1d      	ldr	r3, [pc, #116]	; (8004938 <xTaskRemoveFromEventList+0xac>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d11c      	bne.n	8004904 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	3304      	adds	r3, #4
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fe fd76 	bl	80033c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d8:	2201      	movs	r2, #1
 80048da:	409a      	lsls	r2, r3
 80048dc:	4b17      	ldr	r3, [pc, #92]	; (800493c <xTaskRemoveFromEventList+0xb0>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	4a16      	ldr	r2, [pc, #88]	; (800493c <xTaskRemoveFromEventList+0xb0>)
 80048e4:	6013      	str	r3, [r2, #0]
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ea:	4613      	mov	r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4413      	add	r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4a13      	ldr	r2, [pc, #76]	; (8004940 <xTaskRemoveFromEventList+0xb4>)
 80048f4:	441a      	add	r2, r3
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	3304      	adds	r3, #4
 80048fa:	4619      	mov	r1, r3
 80048fc:	4610      	mov	r0, r2
 80048fe:	f7fe fd02 	bl	8003306 <vListInsertEnd>
 8004902:	e005      	b.n	8004910 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	3318      	adds	r3, #24
 8004908:	4619      	mov	r1, r3
 800490a:	480e      	ldr	r0, [pc, #56]	; (8004944 <xTaskRemoveFromEventList+0xb8>)
 800490c:	f7fe fcfb 	bl	8003306 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004914:	4b0c      	ldr	r3, [pc, #48]	; (8004948 <xTaskRemoveFromEventList+0xbc>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491a:	429a      	cmp	r2, r3
 800491c:	d905      	bls.n	800492a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800491e:	2301      	movs	r3, #1
 8004920:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004922:	4b0a      	ldr	r3, [pc, #40]	; (800494c <xTaskRemoveFromEventList+0xc0>)
 8004924:	2201      	movs	r2, #1
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	e001      	b.n	800492e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800492a:	2300      	movs	r3, #0
 800492c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800492e:	697b      	ldr	r3, [r7, #20]
}
 8004930:	4618      	mov	r0, r3
 8004932:	3718      	adds	r7, #24
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	200001f8 	.word	0x200001f8
 800493c:	200001d8 	.word	0x200001d8
 8004940:	20000034 	.word	0x20000034
 8004944:	20000190 	.word	0x20000190
 8004948:	20000030 	.word	0x20000030
 800494c:	200001e4 	.word	0x200001e4

08004950 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004958:	4b06      	ldr	r3, [pc, #24]	; (8004974 <vTaskInternalSetTimeOutState+0x24>)
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004960:	4b05      	ldr	r3, [pc, #20]	; (8004978 <vTaskInternalSetTimeOutState+0x28>)
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	605a      	str	r2, [r3, #4]
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr
 8004974:	200001e8 	.word	0x200001e8
 8004978:	200001d4 	.word	0x200001d4

0800497c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b088      	sub	sp, #32
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10a      	bne.n	80049a2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800498c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	613b      	str	r3, [r7, #16]
}
 800499e:	bf00      	nop
 80049a0:	e7fe      	b.n	80049a0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d10a      	bne.n	80049be <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80049a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ac:	f383 8811 	msr	BASEPRI, r3
 80049b0:	f3bf 8f6f 	isb	sy
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	60fb      	str	r3, [r7, #12]
}
 80049ba:	bf00      	nop
 80049bc:	e7fe      	b.n	80049bc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80049be:	f000 ff89 	bl	80058d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80049c2:	4b1d      	ldr	r3, [pc, #116]	; (8004a38 <xTaskCheckForTimeOut+0xbc>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049da:	d102      	bne.n	80049e2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80049dc:	2300      	movs	r3, #0
 80049de:	61fb      	str	r3, [r7, #28]
 80049e0:	e023      	b.n	8004a2a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	4b15      	ldr	r3, [pc, #84]	; (8004a3c <xTaskCheckForTimeOut+0xc0>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d007      	beq.n	80049fe <xTaskCheckForTimeOut+0x82>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d302      	bcc.n	80049fe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80049f8:	2301      	movs	r3, #1
 80049fa:	61fb      	str	r3, [r7, #28]
 80049fc:	e015      	b.n	8004a2a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d20b      	bcs.n	8004a20 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	1ad2      	subs	r2, r2, r3
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f7ff ff9b 	bl	8004950 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	61fb      	str	r3, [r7, #28]
 8004a1e:	e004      	b.n	8004a2a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	2200      	movs	r2, #0
 8004a24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004a26:	2301      	movs	r3, #1
 8004a28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004a2a:	f000 ff83 	bl	8005934 <vPortExitCritical>

	return xReturn;
 8004a2e:	69fb      	ldr	r3, [r7, #28]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3720      	adds	r7, #32
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	200001d4 	.word	0x200001d4
 8004a3c:	200001e8 	.word	0x200001e8

08004a40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a40:	b480      	push	{r7}
 8004a42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004a44:	4b03      	ldr	r3, [pc, #12]	; (8004a54 <vTaskMissedYield+0x14>)
 8004a46:	2201      	movs	r2, #1
 8004a48:	601a      	str	r2, [r3, #0]
}
 8004a4a:	bf00      	nop
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	200001e4 	.word	0x200001e4

08004a58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a60:	f000 f852 	bl	8004b08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a64:	4b06      	ldr	r3, [pc, #24]	; (8004a80 <prvIdleTask+0x28>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d9f9      	bls.n	8004a60 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a6c:	4b05      	ldr	r3, [pc, #20]	; (8004a84 <prvIdleTask+0x2c>)
 8004a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a72:	601a      	str	r2, [r3, #0]
 8004a74:	f3bf 8f4f 	dsb	sy
 8004a78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004a7c:	e7f0      	b.n	8004a60 <prvIdleTask+0x8>
 8004a7e:	bf00      	nop
 8004a80:	20000034 	.word	0x20000034
 8004a84:	e000ed04 	.word	0xe000ed04

08004a88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a8e:	2300      	movs	r3, #0
 8004a90:	607b      	str	r3, [r7, #4]
 8004a92:	e00c      	b.n	8004aae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	4613      	mov	r3, r2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4a12      	ldr	r2, [pc, #72]	; (8004ae8 <prvInitialiseTaskLists+0x60>)
 8004aa0:	4413      	add	r3, r2
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7fe fc02 	bl	80032ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	607b      	str	r3, [r7, #4]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2b0e      	cmp	r3, #14
 8004ab2:	d9ef      	bls.n	8004a94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ab4:	480d      	ldr	r0, [pc, #52]	; (8004aec <prvInitialiseTaskLists+0x64>)
 8004ab6:	f7fe fbf9 	bl	80032ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004aba:	480d      	ldr	r0, [pc, #52]	; (8004af0 <prvInitialiseTaskLists+0x68>)
 8004abc:	f7fe fbf6 	bl	80032ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ac0:	480c      	ldr	r0, [pc, #48]	; (8004af4 <prvInitialiseTaskLists+0x6c>)
 8004ac2:	f7fe fbf3 	bl	80032ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004ac6:	480c      	ldr	r0, [pc, #48]	; (8004af8 <prvInitialiseTaskLists+0x70>)
 8004ac8:	f7fe fbf0 	bl	80032ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004acc:	480b      	ldr	r0, [pc, #44]	; (8004afc <prvInitialiseTaskLists+0x74>)
 8004ace:	f7fe fbed 	bl	80032ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004ad2:	4b0b      	ldr	r3, [pc, #44]	; (8004b00 <prvInitialiseTaskLists+0x78>)
 8004ad4:	4a05      	ldr	r2, [pc, #20]	; (8004aec <prvInitialiseTaskLists+0x64>)
 8004ad6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ad8:	4b0a      	ldr	r3, [pc, #40]	; (8004b04 <prvInitialiseTaskLists+0x7c>)
 8004ada:	4a05      	ldr	r2, [pc, #20]	; (8004af0 <prvInitialiseTaskLists+0x68>)
 8004adc:	601a      	str	r2, [r3, #0]
}
 8004ade:	bf00      	nop
 8004ae0:	3708      	adds	r7, #8
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	20000034 	.word	0x20000034
 8004aec:	20000160 	.word	0x20000160
 8004af0:	20000174 	.word	0x20000174
 8004af4:	20000190 	.word	0x20000190
 8004af8:	200001a4 	.word	0x200001a4
 8004afc:	200001bc 	.word	0x200001bc
 8004b00:	20000188 	.word	0x20000188
 8004b04:	2000018c 	.word	0x2000018c

08004b08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b0e:	e019      	b.n	8004b44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004b10:	f000 fee0 	bl	80058d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b14:	4b10      	ldr	r3, [pc, #64]	; (8004b58 <prvCheckTasksWaitingTermination+0x50>)
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	3304      	adds	r3, #4
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7fe fc4d 	bl	80033c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b26:	4b0d      	ldr	r3, [pc, #52]	; (8004b5c <prvCheckTasksWaitingTermination+0x54>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	4a0b      	ldr	r2, [pc, #44]	; (8004b5c <prvCheckTasksWaitingTermination+0x54>)
 8004b2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b30:	4b0b      	ldr	r3, [pc, #44]	; (8004b60 <prvCheckTasksWaitingTermination+0x58>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	3b01      	subs	r3, #1
 8004b36:	4a0a      	ldr	r2, [pc, #40]	; (8004b60 <prvCheckTasksWaitingTermination+0x58>)
 8004b38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004b3a:	f000 fefb 	bl	8005934 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f810 	bl	8004b64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b44:	4b06      	ldr	r3, [pc, #24]	; (8004b60 <prvCheckTasksWaitingTermination+0x58>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1e1      	bne.n	8004b10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b4c:	bf00      	nop
 8004b4e:	bf00      	nop
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	200001a4 	.word	0x200001a4
 8004b5c:	200001d0 	.word	0x200001d0
 8004b60:	200001b8 	.word	0x200001b8

08004b64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b70:	4618      	mov	r0, r3
 8004b72:	f001 f895 	bl	8005ca0 <vPortFree>
			vPortFree( pxTCB );
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f001 f892 	bl	8005ca0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b7c:	bf00      	nop
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b8a:	4b0c      	ldr	r3, [pc, #48]	; (8004bbc <prvResetNextTaskUnblockTime+0x38>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d104      	bne.n	8004b9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b94:	4b0a      	ldr	r3, [pc, #40]	; (8004bc0 <prvResetNextTaskUnblockTime+0x3c>)
 8004b96:	f04f 32ff 	mov.w	r2, #4294967295
 8004b9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b9c:	e008      	b.n	8004bb0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b9e:	4b07      	ldr	r3, [pc, #28]	; (8004bbc <prvResetNextTaskUnblockTime+0x38>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	4a04      	ldr	r2, [pc, #16]	; (8004bc0 <prvResetNextTaskUnblockTime+0x3c>)
 8004bae:	6013      	str	r3, [r2, #0]
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	20000188 	.word	0x20000188
 8004bc0:	200001f0 	.word	0x200001f0

08004bc4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004bca:	4b0b      	ldr	r3, [pc, #44]	; (8004bf8 <xTaskGetSchedulerState+0x34>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d102      	bne.n	8004bd8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	607b      	str	r3, [r7, #4]
 8004bd6:	e008      	b.n	8004bea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bd8:	4b08      	ldr	r3, [pc, #32]	; (8004bfc <xTaskGetSchedulerState+0x38>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d102      	bne.n	8004be6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004be0:	2302      	movs	r3, #2
 8004be2:	607b      	str	r3, [r7, #4]
 8004be4:	e001      	b.n	8004bea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004be6:	2300      	movs	r3, #0
 8004be8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004bea:	687b      	ldr	r3, [r7, #4]
	}
 8004bec:	4618      	mov	r0, r3
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr
 8004bf8:	200001dc 	.word	0x200001dc
 8004bfc:	200001f8 	.word	0x200001f8

08004c00 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d069      	beq.n	8004cea <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c1a:	4b36      	ldr	r3, [pc, #216]	; (8004cf4 <xTaskPriorityInherit+0xf4>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d259      	bcs.n	8004cd8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	db06      	blt.n	8004c3a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c2c:	4b31      	ldr	r3, [pc, #196]	; (8004cf4 <xTaskPriorityInherit+0xf4>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c32:	f1c3 020f 	rsb	r2, r3, #15
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	6959      	ldr	r1, [r3, #20]
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c42:	4613      	mov	r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	4413      	add	r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4a2b      	ldr	r2, [pc, #172]	; (8004cf8 <xTaskPriorityInherit+0xf8>)
 8004c4c:	4413      	add	r3, r2
 8004c4e:	4299      	cmp	r1, r3
 8004c50:	d13a      	bne.n	8004cc8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	3304      	adds	r3, #4
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7fe fbb2 	bl	80033c0 <uxListRemove>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d115      	bne.n	8004c8e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c66:	4924      	ldr	r1, [pc, #144]	; (8004cf8 <xTaskPriorityInherit+0xf8>)
 8004c68:	4613      	mov	r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	4413      	add	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	440b      	add	r3, r1
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10a      	bne.n	8004c8e <xTaskPriorityInherit+0x8e>
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c82:	43da      	mvns	r2, r3
 8004c84:	4b1d      	ldr	r3, [pc, #116]	; (8004cfc <xTaskPriorityInherit+0xfc>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	4a1c      	ldr	r2, [pc, #112]	; (8004cfc <xTaskPriorityInherit+0xfc>)
 8004c8c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004c8e:	4b19      	ldr	r3, [pc, #100]	; (8004cf4 <xTaskPriorityInherit+0xf4>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	409a      	lsls	r2, r3
 8004ca0:	4b16      	ldr	r3, [pc, #88]	; (8004cfc <xTaskPriorityInherit+0xfc>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	4a15      	ldr	r2, [pc, #84]	; (8004cfc <xTaskPriorityInherit+0xfc>)
 8004ca8:	6013      	str	r3, [r2, #0]
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cae:	4613      	mov	r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4a10      	ldr	r2, [pc, #64]	; (8004cf8 <xTaskPriorityInherit+0xf8>)
 8004cb8:	441a      	add	r2, r3
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	3304      	adds	r3, #4
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	4610      	mov	r0, r2
 8004cc2:	f7fe fb20 	bl	8003306 <vListInsertEnd>
 8004cc6:	e004      	b.n	8004cd2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004cc8:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <xTaskPriorityInherit+0xf4>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	60fb      	str	r3, [r7, #12]
 8004cd6:	e008      	b.n	8004cea <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004cdc:	4b05      	ldr	r3, [pc, #20]	; (8004cf4 <xTaskPriorityInherit+0xf4>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d201      	bcs.n	8004cea <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004cea:	68fb      	ldr	r3, [r7, #12]
	}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	20000030 	.word	0x20000030
 8004cf8:	20000034 	.word	0x20000034
 8004cfc:	200001d8 	.word	0x200001d8

08004d00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d06e      	beq.n	8004df4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004d16:	4b3a      	ldr	r3, [pc, #232]	; (8004e00 <xTaskPriorityDisinherit+0x100>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d00a      	beq.n	8004d36 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d24:	f383 8811 	msr	BASEPRI, r3
 8004d28:	f3bf 8f6f 	isb	sy
 8004d2c:	f3bf 8f4f 	dsb	sy
 8004d30:	60fb      	str	r3, [r7, #12]
}
 8004d32:	bf00      	nop
 8004d34:	e7fe      	b.n	8004d34 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10a      	bne.n	8004d54 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	60bb      	str	r3, [r7, #8]
}
 8004d50:	bf00      	nop
 8004d52:	e7fe      	b.n	8004d52 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d58:	1e5a      	subs	r2, r3, #1
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d044      	beq.n	8004df4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d140      	bne.n	8004df4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	3304      	adds	r3, #4
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fe fb22 	bl	80033c0 <uxListRemove>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d115      	bne.n	8004dae <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d86:	491f      	ldr	r1, [pc, #124]	; (8004e04 <xTaskPriorityDisinherit+0x104>)
 8004d88:	4613      	mov	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	440b      	add	r3, r1
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10a      	bne.n	8004dae <xTaskPriorityDisinherit+0xae>
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004da2:	43da      	mvns	r2, r3
 8004da4:	4b18      	ldr	r3, [pc, #96]	; (8004e08 <xTaskPriorityDisinherit+0x108>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4013      	ands	r3, r2
 8004daa:	4a17      	ldr	r2, [pc, #92]	; (8004e08 <xTaskPriorityDisinherit+0x108>)
 8004dac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dba:	f1c3 020f 	rsb	r2, r3, #15
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	409a      	lsls	r2, r3
 8004dca:	4b0f      	ldr	r3, [pc, #60]	; (8004e08 <xTaskPriorityDisinherit+0x108>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	4a0d      	ldr	r2, [pc, #52]	; (8004e08 <xTaskPriorityDisinherit+0x108>)
 8004dd2:	6013      	str	r3, [r2, #0]
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd8:	4613      	mov	r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4413      	add	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4a08      	ldr	r2, [pc, #32]	; (8004e04 <xTaskPriorityDisinherit+0x104>)
 8004de2:	441a      	add	r2, r3
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	3304      	adds	r3, #4
 8004de8:	4619      	mov	r1, r3
 8004dea:	4610      	mov	r0, r2
 8004dec:	f7fe fa8b 	bl	8003306 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004df0:	2301      	movs	r3, #1
 8004df2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004df4:	697b      	ldr	r3, [r7, #20]
	}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3718      	adds	r7, #24
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	20000030 	.word	0x20000030
 8004e04:	20000034 	.word	0x20000034
 8004e08:	200001d8 	.word	0x200001d8

08004e0c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b088      	sub	sp, #32
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f000 8083 	beq.w	8004f2c <vTaskPriorityDisinheritAfterTimeout+0x120>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10a      	bne.n	8004e44 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e32:	f383 8811 	msr	BASEPRI, r3
 8004e36:	f3bf 8f6f 	isb	sy
 8004e3a:	f3bf 8f4f 	dsb	sy
 8004e3e:	60fb      	str	r3, [r7, #12]
}
 8004e40:	bf00      	nop
 8004e42:	e7fe      	b.n	8004e42 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d902      	bls.n	8004e54 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	61fb      	str	r3, [r7, #28]
 8004e52:	e002      	b.n	8004e5a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e58:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5e:	69fa      	ldr	r2, [r7, #28]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d063      	beq.n	8004f2c <vTaskPriorityDisinheritAfterTimeout+0x120>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d15e      	bne.n	8004f2c <vTaskPriorityDisinheritAfterTimeout+0x120>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004e6e:	4b31      	ldr	r3, [pc, #196]	; (8004f34 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d10a      	bne.n	8004e8e <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8004e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7c:	f383 8811 	msr	BASEPRI, r3
 8004e80:	f3bf 8f6f 	isb	sy
 8004e84:	f3bf 8f4f 	dsb	sy
 8004e88:	60bb      	str	r3, [r7, #8]
}
 8004e8a:	bf00      	nop
 8004e8c:	e7fe      	b.n	8004e8c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e92:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	69fa      	ldr	r2, [r7, #28]
 8004e98:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	db04      	blt.n	8004eac <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	f1c3 020f 	rsb	r2, r3, #15
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	6959      	ldr	r1, [r3, #20]
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4413      	add	r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4a1f      	ldr	r2, [pc, #124]	; (8004f38 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004ebc:	4413      	add	r3, r2
 8004ebe:	4299      	cmp	r1, r3
 8004ec0:	d134      	bne.n	8004f2c <vTaskPriorityDisinheritAfterTimeout+0x120>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7fe fa7a 	bl	80033c0 <uxListRemove>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d115      	bne.n	8004efe <vTaskPriorityDisinheritAfterTimeout+0xf2>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed6:	4918      	ldr	r1, [pc, #96]	; (8004f38 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004ed8:	4613      	mov	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	440b      	add	r3, r1
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10a      	bne.n	8004efe <vTaskPriorityDisinheritAfterTimeout+0xf2>
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eec:	2201      	movs	r2, #1
 8004eee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef2:	43da      	mvns	r2, r3
 8004ef4:	4b11      	ldr	r3, [pc, #68]	; (8004f3c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4013      	ands	r3, r2
 8004efa:	4a10      	ldr	r2, [pc, #64]	; (8004f3c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8004efc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f02:	2201      	movs	r2, #1
 8004f04:	409a      	lsls	r2, r3
 8004f06:	4b0d      	ldr	r3, [pc, #52]	; (8004f3c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	4a0b      	ldr	r2, [pc, #44]	; (8004f3c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8004f0e:	6013      	str	r3, [r2, #0]
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f14:	4613      	mov	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4a06      	ldr	r2, [pc, #24]	; (8004f38 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004f1e:	441a      	add	r2, r3
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	3304      	adds	r3, #4
 8004f24:	4619      	mov	r1, r3
 8004f26:	4610      	mov	r0, r2
 8004f28:	f7fe f9ed 	bl	8003306 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f2c:	bf00      	nop
 8004f2e:	3720      	adds	r7, #32
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	20000030 	.word	0x20000030
 8004f38:	20000034 	.word	0x20000034
 8004f3c:	200001d8 	.word	0x200001d8

08004f40 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004f40:	b480      	push	{r7}
 8004f42:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004f44:	4b07      	ldr	r3, [pc, #28]	; (8004f64 <pvTaskIncrementMutexHeldCount+0x24>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d004      	beq.n	8004f56 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004f4c:	4b05      	ldr	r3, [pc, #20]	; (8004f64 <pvTaskIncrementMutexHeldCount+0x24>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f52:	3201      	adds	r2, #1
 8004f54:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
 8004f56:	4b03      	ldr	r3, [pc, #12]	; (8004f64 <pvTaskIncrementMutexHeldCount+0x24>)
 8004f58:	681b      	ldr	r3, [r3, #0]
	}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr
 8004f64:	20000030 	.word	0x20000030

08004f68 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f72:	4b29      	ldr	r3, [pc, #164]	; (8005018 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f78:	4b28      	ldr	r3, [pc, #160]	; (800501c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	3304      	adds	r3, #4
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fe fa1e 	bl	80033c0 <uxListRemove>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10b      	bne.n	8004fa2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004f8a:	4b24      	ldr	r3, [pc, #144]	; (800501c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f90:	2201      	movs	r2, #1
 8004f92:	fa02 f303 	lsl.w	r3, r2, r3
 8004f96:	43da      	mvns	r2, r3
 8004f98:	4b21      	ldr	r3, [pc, #132]	; (8005020 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	4a20      	ldr	r2, [pc, #128]	; (8005020 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004fa0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa8:	d10a      	bne.n	8004fc0 <prvAddCurrentTaskToDelayedList+0x58>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d007      	beq.n	8004fc0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fb0:	4b1a      	ldr	r3, [pc, #104]	; (800501c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	481a      	ldr	r0, [pc, #104]	; (8005024 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004fba:	f7fe f9a4 	bl	8003306 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004fbe:	e026      	b.n	800500e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004fc8:	4b14      	ldr	r3, [pc, #80]	; (800501c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68ba      	ldr	r2, [r7, #8]
 8004fce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d209      	bcs.n	8004fec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fd8:	4b13      	ldr	r3, [pc, #76]	; (8005028 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	4b0f      	ldr	r3, [pc, #60]	; (800501c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	3304      	adds	r3, #4
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	4610      	mov	r0, r2
 8004fe6:	f7fe f9b2 	bl	800334e <vListInsert>
}
 8004fea:	e010      	b.n	800500e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fec:	4b0f      	ldr	r3, [pc, #60]	; (800502c <prvAddCurrentTaskToDelayedList+0xc4>)
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	4b0a      	ldr	r3, [pc, #40]	; (800501c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	4610      	mov	r0, r2
 8004ffa:	f7fe f9a8 	bl	800334e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ffe:	4b0c      	ldr	r3, [pc, #48]	; (8005030 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	429a      	cmp	r2, r3
 8005006:	d202      	bcs.n	800500e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005008:	4a09      	ldr	r2, [pc, #36]	; (8005030 <prvAddCurrentTaskToDelayedList+0xc8>)
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	6013      	str	r3, [r2, #0]
}
 800500e:	bf00      	nop
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	200001d4 	.word	0x200001d4
 800501c:	20000030 	.word	0x20000030
 8005020:	200001d8 	.word	0x200001d8
 8005024:	200001bc 	.word	0x200001bc
 8005028:	2000018c 	.word	0x2000018c
 800502c:	20000188 	.word	0x20000188
 8005030:	200001f0 	.word	0x200001f0

08005034 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800503a:	2300      	movs	r3, #0
 800503c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800503e:	f000 fad5 	bl	80055ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005042:	4b11      	ldr	r3, [pc, #68]	; (8005088 <xTimerCreateTimerTask+0x54>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00b      	beq.n	8005062 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800504a:	4b10      	ldr	r3, [pc, #64]	; (800508c <xTimerCreateTimerTask+0x58>)
 800504c:	9301      	str	r3, [sp, #4]
 800504e:	2302      	movs	r3, #2
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	2300      	movs	r3, #0
 8005054:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005058:	490d      	ldr	r1, [pc, #52]	; (8005090 <xTimerCreateTimerTask+0x5c>)
 800505a:	480e      	ldr	r0, [pc, #56]	; (8005094 <xTimerCreateTimerTask+0x60>)
 800505c:	f7ff f838 	bl	80040d0 <xTaskCreate>
 8005060:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d10a      	bne.n	800507e <xTimerCreateTimerTask+0x4a>
	__asm volatile
 8005068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506c:	f383 8811 	msr	BASEPRI, r3
 8005070:	f3bf 8f6f 	isb	sy
 8005074:	f3bf 8f4f 	dsb	sy
 8005078:	603b      	str	r3, [r7, #0]
}
 800507a:	bf00      	nop
 800507c:	e7fe      	b.n	800507c <xTimerCreateTimerTask+0x48>
	return xReturn;
 800507e:	687b      	ldr	r3, [r7, #4]
}
 8005080:	4618      	mov	r0, r3
 8005082:	3708      	adds	r7, #8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	2000022c 	.word	0x2000022c
 800508c:	20000230 	.word	0x20000230
 8005090:	08006014 	.word	0x08006014
 8005094:	080051cd 	.word	0x080051cd

08005098 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b08a      	sub	sp, #40	; 0x28
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
 80050a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80050a6:	2300      	movs	r3, #0
 80050a8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10a      	bne.n	80050c6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80050b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b4:	f383 8811 	msr	BASEPRI, r3
 80050b8:	f3bf 8f6f 	isb	sy
 80050bc:	f3bf 8f4f 	dsb	sy
 80050c0:	623b      	str	r3, [r7, #32]
}
 80050c2:	bf00      	nop
 80050c4:	e7fe      	b.n	80050c4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80050c6:	4b1a      	ldr	r3, [pc, #104]	; (8005130 <xTimerGenericCommand+0x98>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d02a      	beq.n	8005124 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	2b05      	cmp	r3, #5
 80050de:	dc18      	bgt.n	8005112 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80050e0:	f7ff fd70 	bl	8004bc4 <xTaskGetSchedulerState>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d109      	bne.n	80050fe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80050ea:	4b11      	ldr	r3, [pc, #68]	; (8005130 <xTimerGenericCommand+0x98>)
 80050ec:	6818      	ldr	r0, [r3, #0]
 80050ee:	f107 0114 	add.w	r1, r7, #20
 80050f2:	2300      	movs	r3, #0
 80050f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050f6:	f7fe fa55 	bl	80035a4 <xQueueGenericSend>
 80050fa:	6278      	str	r0, [r7, #36]	; 0x24
 80050fc:	e012      	b.n	8005124 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80050fe:	4b0c      	ldr	r3, [pc, #48]	; (8005130 <xTimerGenericCommand+0x98>)
 8005100:	6818      	ldr	r0, [r3, #0]
 8005102:	f107 0114 	add.w	r1, r7, #20
 8005106:	2300      	movs	r3, #0
 8005108:	2200      	movs	r2, #0
 800510a:	f7fe fa4b 	bl	80035a4 <xQueueGenericSend>
 800510e:	6278      	str	r0, [r7, #36]	; 0x24
 8005110:	e008      	b.n	8005124 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005112:	4b07      	ldr	r3, [pc, #28]	; (8005130 <xTimerGenericCommand+0x98>)
 8005114:	6818      	ldr	r0, [r3, #0]
 8005116:	f107 0114 	add.w	r1, r7, #20
 800511a:	2300      	movs	r3, #0
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	f7fe fb3f 	bl	80037a0 <xQueueGenericSendFromISR>
 8005122:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005126:	4618      	mov	r0, r3
 8005128:	3728      	adds	r7, #40	; 0x28
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	2000022c 	.word	0x2000022c

08005134 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b088      	sub	sp, #32
 8005138:	af02      	add	r7, sp, #8
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800513e:	4b22      	ldr	r3, [pc, #136]	; (80051c8 <prvProcessExpiredTimer+0x94>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	3304      	adds	r3, #4
 800514c:	4618      	mov	r0, r3
 800514e:	f7fe f937 	bl	80033c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b00      	cmp	r3, #0
 800515e:	d022      	beq.n	80051a6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	699a      	ldr	r2, [r3, #24]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	18d1      	adds	r1, r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	6978      	ldr	r0, [r7, #20]
 800516e:	f000 f8d1 	bl	8005314 <prvInsertTimerInActiveList>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d01f      	beq.n	80051b8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005178:	2300      	movs	r3, #0
 800517a:	9300      	str	r3, [sp, #0]
 800517c:	2300      	movs	r3, #0
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	2100      	movs	r1, #0
 8005182:	6978      	ldr	r0, [r7, #20]
 8005184:	f7ff ff88 	bl	8005098 <xTimerGenericCommand>
 8005188:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d113      	bne.n	80051b8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	60fb      	str	r3, [r7, #12]
}
 80051a2:	bf00      	nop
 80051a4:	e7fe      	b.n	80051a4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051ac:	f023 0301 	bic.w	r3, r3, #1
 80051b0:	b2da      	uxtb	r2, r3
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	6978      	ldr	r0, [r7, #20]
 80051be:	4798      	blx	r3
}
 80051c0:	bf00      	nop
 80051c2:	3718      	adds	r7, #24
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	20000224 	.word	0x20000224

080051cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80051d4:	f107 0308 	add.w	r3, r7, #8
 80051d8:	4618      	mov	r0, r3
 80051da:	f000 f857 	bl	800528c <prvGetNextExpireTime>
 80051de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	4619      	mov	r1, r3
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f000 f803 	bl	80051f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80051ea:	f000 f8d5 	bl	8005398 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80051ee:	e7f1      	b.n	80051d4 <prvTimerTask+0x8>

080051f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80051fa:	f7ff f929 	bl	8004450 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80051fe:	f107 0308 	add.w	r3, r7, #8
 8005202:	4618      	mov	r0, r3
 8005204:	f000 f866 	bl	80052d4 <prvSampleTimeNow>
 8005208:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d130      	bne.n	8005272 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10a      	bne.n	800522c <prvProcessTimerOrBlockTask+0x3c>
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	429a      	cmp	r2, r3
 800521c:	d806      	bhi.n	800522c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800521e:	f7ff f925 	bl	800446c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005222:	68f9      	ldr	r1, [r7, #12]
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f7ff ff85 	bl	8005134 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800522a:	e024      	b.n	8005276 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d008      	beq.n	8005244 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005232:	4b13      	ldr	r3, [pc, #76]	; (8005280 <prvProcessTimerOrBlockTask+0x90>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d101      	bne.n	8005240 <prvProcessTimerOrBlockTask+0x50>
 800523c:	2301      	movs	r3, #1
 800523e:	e000      	b.n	8005242 <prvProcessTimerOrBlockTask+0x52>
 8005240:	2300      	movs	r3, #0
 8005242:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005244:	4b0f      	ldr	r3, [pc, #60]	; (8005284 <prvProcessTimerOrBlockTask+0x94>)
 8005246:	6818      	ldr	r0, [r3, #0]
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	683a      	ldr	r2, [r7, #0]
 8005250:	4619      	mov	r1, r3
 8005252:	f7fe ff09 	bl	8004068 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005256:	f7ff f909 	bl	800446c <xTaskResumeAll>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d10a      	bne.n	8005276 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005260:	4b09      	ldr	r3, [pc, #36]	; (8005288 <prvProcessTimerOrBlockTask+0x98>)
 8005262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005266:	601a      	str	r2, [r3, #0]
 8005268:	f3bf 8f4f 	dsb	sy
 800526c:	f3bf 8f6f 	isb	sy
}
 8005270:	e001      	b.n	8005276 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005272:	f7ff f8fb 	bl	800446c <xTaskResumeAll>
}
 8005276:	bf00      	nop
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	20000228 	.word	0x20000228
 8005284:	2000022c 	.word	0x2000022c
 8005288:	e000ed04 	.word	0xe000ed04

0800528c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005294:	4b0e      	ldr	r3, [pc, #56]	; (80052d0 <prvGetNextExpireTime+0x44>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <prvGetNextExpireTime+0x16>
 800529e:	2201      	movs	r2, #1
 80052a0:	e000      	b.n	80052a4 <prvGetNextExpireTime+0x18>
 80052a2:	2200      	movs	r2, #0
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d105      	bne.n	80052bc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052b0:	4b07      	ldr	r3, [pc, #28]	; (80052d0 <prvGetNextExpireTime+0x44>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	60fb      	str	r3, [r7, #12]
 80052ba:	e001      	b.n	80052c0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80052bc:	2300      	movs	r3, #0
 80052be:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80052c0:	68fb      	ldr	r3, [r7, #12]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	20000224 	.word	0x20000224

080052d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80052dc:	f7ff f962 	bl	80045a4 <xTaskGetTickCount>
 80052e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80052e2:	4b0b      	ldr	r3, [pc, #44]	; (8005310 <prvSampleTimeNow+0x3c>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d205      	bcs.n	80052f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80052ec:	f000 f91a 	bl	8005524 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	601a      	str	r2, [r3, #0]
 80052f6:	e002      	b.n	80052fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80052fe:	4a04      	ldr	r2, [pc, #16]	; (8005310 <prvSampleTimeNow+0x3c>)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005304:	68fb      	ldr	r3, [r7, #12]
}
 8005306:	4618      	mov	r0, r3
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	20000234 	.word	0x20000234

08005314 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
 8005320:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005322:	2300      	movs	r3, #0
 8005324:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	68ba      	ldr	r2, [r7, #8]
 800532a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	429a      	cmp	r2, r3
 8005338:	d812      	bhi.n	8005360 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	1ad2      	subs	r2, r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	429a      	cmp	r2, r3
 8005346:	d302      	bcc.n	800534e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005348:	2301      	movs	r3, #1
 800534a:	617b      	str	r3, [r7, #20]
 800534c:	e01b      	b.n	8005386 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800534e:	4b10      	ldr	r3, [pc, #64]	; (8005390 <prvInsertTimerInActiveList+0x7c>)
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	3304      	adds	r3, #4
 8005356:	4619      	mov	r1, r3
 8005358:	4610      	mov	r0, r2
 800535a:	f7fd fff8 	bl	800334e <vListInsert>
 800535e:	e012      	b.n	8005386 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	429a      	cmp	r2, r3
 8005366:	d206      	bcs.n	8005376 <prvInsertTimerInActiveList+0x62>
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	429a      	cmp	r2, r3
 800536e:	d302      	bcc.n	8005376 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005370:	2301      	movs	r3, #1
 8005372:	617b      	str	r3, [r7, #20]
 8005374:	e007      	b.n	8005386 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005376:	4b07      	ldr	r3, [pc, #28]	; (8005394 <prvInsertTimerInActiveList+0x80>)
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	3304      	adds	r3, #4
 800537e:	4619      	mov	r1, r3
 8005380:	4610      	mov	r0, r2
 8005382:	f7fd ffe4 	bl	800334e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005386:	697b      	ldr	r3, [r7, #20]
}
 8005388:	4618      	mov	r0, r3
 800538a:	3718      	adds	r7, #24
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	20000228 	.word	0x20000228
 8005394:	20000224 	.word	0x20000224

08005398 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b08c      	sub	sp, #48	; 0x30
 800539c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800539e:	e0ae      	b.n	80054fe <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f2c0 80aa 	blt.w	80054fc <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ae:	695b      	ldr	r3, [r3, #20]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d004      	beq.n	80053be <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b6:	3304      	adds	r3, #4
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7fe f801 	bl	80033c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80053be:	1d3b      	adds	r3, r7, #4
 80053c0:	4618      	mov	r0, r3
 80053c2:	f7ff ff87 	bl	80052d4 <prvSampleTimeNow>
 80053c6:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	2b09      	cmp	r3, #9
 80053cc:	f200 8097 	bhi.w	80054fe <prvProcessReceivedCommands+0x166>
 80053d0:	a201      	add	r2, pc, #4	; (adr r2, 80053d8 <prvProcessReceivedCommands+0x40>)
 80053d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d6:	bf00      	nop
 80053d8:	08005401 	.word	0x08005401
 80053dc:	08005401 	.word	0x08005401
 80053e0:	08005401 	.word	0x08005401
 80053e4:	08005475 	.word	0x08005475
 80053e8:	08005489 	.word	0x08005489
 80053ec:	080054d3 	.word	0x080054d3
 80053f0:	08005401 	.word	0x08005401
 80053f4:	08005401 	.word	0x08005401
 80053f8:	08005475 	.word	0x08005475
 80053fc:	08005489 	.word	0x08005489
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005402:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005406:	f043 0301 	orr.w	r3, r3, #1
 800540a:	b2da      	uxtb	r2, r3
 800540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	18d1      	adds	r1, r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6a3a      	ldr	r2, [r7, #32]
 800541e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005420:	f7ff ff78 	bl	8005314 <prvInsertTimerInActiveList>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d069      	beq.n	80054fe <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	6a1b      	ldr	r3, [r3, #32]
 800542e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005430:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005434:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005438:	f003 0304 	and.w	r3, r3, #4
 800543c:	2b00      	cmp	r3, #0
 800543e:	d05e      	beq.n	80054fe <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	441a      	add	r2, r3
 8005448:	2300      	movs	r3, #0
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	2300      	movs	r3, #0
 800544e:	2100      	movs	r1, #0
 8005450:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005452:	f7ff fe21 	bl	8005098 <xTimerGenericCommand>
 8005456:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d14f      	bne.n	80054fe <prvProcessReceivedCommands+0x166>
	__asm volatile
 800545e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005462:	f383 8811 	msr	BASEPRI, r3
 8005466:	f3bf 8f6f 	isb	sy
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	61bb      	str	r3, [r7, #24]
}
 8005470:	bf00      	nop
 8005472:	e7fe      	b.n	8005472 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005476:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800547a:	f023 0301 	bic.w	r3, r3, #1
 800547e:	b2da      	uxtb	r2, r3
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005486:	e03a      	b.n	80054fe <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800548e:	f043 0301 	orr.w	r3, r3, #1
 8005492:	b2da      	uxtb	r2, r3
 8005494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005496:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10a      	bne.n	80054be <prvProcessReceivedCommands+0x126>
	__asm volatile
 80054a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ac:	f383 8811 	msr	BASEPRI, r3
 80054b0:	f3bf 8f6f 	isb	sy
 80054b4:	f3bf 8f4f 	dsb	sy
 80054b8:	617b      	str	r3, [r7, #20]
}
 80054ba:	bf00      	nop
 80054bc:	e7fe      	b.n	80054bc <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80054be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c0:	699a      	ldr	r2, [r3, #24]
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	18d1      	adds	r1, r2, r3
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	6a3a      	ldr	r2, [r7, #32]
 80054ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80054cc:	f7ff ff22 	bl	8005314 <prvInsertTimerInActiveList>
					break;
 80054d0:	e015      	b.n	80054fe <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054d8:	f003 0302 	and.w	r3, r3, #2
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d103      	bne.n	80054e8 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 80054e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80054e2:	f000 fbdd 	bl	8005ca0 <vPortFree>
 80054e6:	e00a      	b.n	80054fe <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80054e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054ee:	f023 0301 	bic.w	r3, r3, #1
 80054f2:	b2da      	uxtb	r2, r3
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80054fa:	e000      	b.n	80054fe <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80054fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80054fe:	4b08      	ldr	r3, [pc, #32]	; (8005520 <prvProcessReceivedCommands+0x188>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f107 0108 	add.w	r1, r7, #8
 8005506:	2200      	movs	r2, #0
 8005508:	4618      	mov	r0, r3
 800550a:	f7fe fa6f 	bl	80039ec <xQueueReceive>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	f47f af45 	bne.w	80053a0 <prvProcessReceivedCommands+0x8>
	}
}
 8005516:	bf00      	nop
 8005518:	bf00      	nop
 800551a:	3728      	adds	r7, #40	; 0x28
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	2000022c 	.word	0x2000022c

08005524 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b088      	sub	sp, #32
 8005528:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800552a:	e048      	b.n	80055be <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800552c:	4b2d      	ldr	r3, [pc, #180]	; (80055e4 <prvSwitchTimerLists+0xc0>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005536:	4b2b      	ldr	r3, [pc, #172]	; (80055e4 <prvSwitchTimerLists+0xc0>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	3304      	adds	r3, #4
 8005544:	4618      	mov	r0, r3
 8005546:	f7fd ff3b 	bl	80033c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005558:	f003 0304 	and.w	r3, r3, #4
 800555c:	2b00      	cmp	r3, #0
 800555e:	d02e      	beq.n	80055be <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	4413      	add	r3, r2
 8005568:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	429a      	cmp	r2, r3
 8005570:	d90e      	bls.n	8005590 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800557e:	4b19      	ldr	r3, [pc, #100]	; (80055e4 <prvSwitchTimerLists+0xc0>)
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	3304      	adds	r3, #4
 8005586:	4619      	mov	r1, r3
 8005588:	4610      	mov	r0, r2
 800558a:	f7fd fee0 	bl	800334e <vListInsert>
 800558e:	e016      	b.n	80055be <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005590:	2300      	movs	r3, #0
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	2300      	movs	r3, #0
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	2100      	movs	r1, #0
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f7ff fd7c 	bl	8005098 <xTimerGenericCommand>
 80055a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d10a      	bne.n	80055be <prvSwitchTimerLists+0x9a>
	__asm volatile
 80055a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ac:	f383 8811 	msr	BASEPRI, r3
 80055b0:	f3bf 8f6f 	isb	sy
 80055b4:	f3bf 8f4f 	dsb	sy
 80055b8:	603b      	str	r3, [r7, #0]
}
 80055ba:	bf00      	nop
 80055bc:	e7fe      	b.n	80055bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80055be:	4b09      	ldr	r3, [pc, #36]	; (80055e4 <prvSwitchTimerLists+0xc0>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1b1      	bne.n	800552c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80055c8:	4b06      	ldr	r3, [pc, #24]	; (80055e4 <prvSwitchTimerLists+0xc0>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80055ce:	4b06      	ldr	r3, [pc, #24]	; (80055e8 <prvSwitchTimerLists+0xc4>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a04      	ldr	r2, [pc, #16]	; (80055e4 <prvSwitchTimerLists+0xc0>)
 80055d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80055d6:	4a04      	ldr	r2, [pc, #16]	; (80055e8 <prvSwitchTimerLists+0xc4>)
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	6013      	str	r3, [r2, #0]
}
 80055dc:	bf00      	nop
 80055de:	3718      	adds	r7, #24
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	20000224 	.word	0x20000224
 80055e8:	20000228 	.word	0x20000228

080055ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80055f0:	f000 f970 	bl	80058d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80055f4:	4b12      	ldr	r3, [pc, #72]	; (8005640 <prvCheckForValidListAndQueue+0x54>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d11d      	bne.n	8005638 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 80055fc:	4811      	ldr	r0, [pc, #68]	; (8005644 <prvCheckForValidListAndQueue+0x58>)
 80055fe:	f7fd fe55 	bl	80032ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005602:	4811      	ldr	r0, [pc, #68]	; (8005648 <prvCheckForValidListAndQueue+0x5c>)
 8005604:	f7fd fe52 	bl	80032ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005608:	4b10      	ldr	r3, [pc, #64]	; (800564c <prvCheckForValidListAndQueue+0x60>)
 800560a:	4a0e      	ldr	r2, [pc, #56]	; (8005644 <prvCheckForValidListAndQueue+0x58>)
 800560c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800560e:	4b10      	ldr	r3, [pc, #64]	; (8005650 <prvCheckForValidListAndQueue+0x64>)
 8005610:	4a0d      	ldr	r2, [pc, #52]	; (8005648 <prvCheckForValidListAndQueue+0x5c>)
 8005612:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005614:	2200      	movs	r2, #0
 8005616:	210c      	movs	r1, #12
 8005618:	200a      	movs	r0, #10
 800561a:	f7fd ff63 	bl	80034e4 <xQueueGenericCreate>
 800561e:	4603      	mov	r3, r0
 8005620:	4a07      	ldr	r2, [pc, #28]	; (8005640 <prvCheckForValidListAndQueue+0x54>)
 8005622:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005624:	4b06      	ldr	r3, [pc, #24]	; (8005640 <prvCheckForValidListAndQueue+0x54>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d005      	beq.n	8005638 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800562c:	4b04      	ldr	r3, [pc, #16]	; (8005640 <prvCheckForValidListAndQueue+0x54>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4908      	ldr	r1, [pc, #32]	; (8005654 <prvCheckForValidListAndQueue+0x68>)
 8005632:	4618      	mov	r0, r3
 8005634:	f7fe fcee 	bl	8004014 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005638:	f000 f97c 	bl	8005934 <vPortExitCritical>
}
 800563c:	bf00      	nop
 800563e:	bd80      	pop	{r7, pc}
 8005640:	2000022c 	.word	0x2000022c
 8005644:	200001fc 	.word	0x200001fc
 8005648:	20000210 	.word	0x20000210
 800564c:	20000224 	.word	0x20000224
 8005650:	20000228 	.word	0x20000228
 8005654:	0800601c 	.word	0x0800601c

08005658 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	3b04      	subs	r3, #4
 8005668:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005670:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	3b04      	subs	r3, #4
 8005676:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	f023 0201 	bic.w	r2, r3, #1
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	3b04      	subs	r3, #4
 8005686:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005688:	4a0c      	ldr	r2, [pc, #48]	; (80056bc <pxPortInitialiseStack+0x64>)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	3b14      	subs	r3, #20
 8005692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	3b04      	subs	r3, #4
 800569e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f06f 0202 	mvn.w	r2, #2
 80056a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	3b20      	subs	r3, #32
 80056ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80056ae:	68fb      	ldr	r3, [r7, #12]
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3714      	adds	r7, #20
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr
 80056bc:	080056c1 	.word	0x080056c1

080056c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80056c6:	2300      	movs	r3, #0
 80056c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80056ca:	4b12      	ldr	r3, [pc, #72]	; (8005714 <prvTaskExitError+0x54>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d2:	d00a      	beq.n	80056ea <prvTaskExitError+0x2a>
	__asm volatile
 80056d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d8:	f383 8811 	msr	BASEPRI, r3
 80056dc:	f3bf 8f6f 	isb	sy
 80056e0:	f3bf 8f4f 	dsb	sy
 80056e4:	60fb      	str	r3, [r7, #12]
}
 80056e6:	bf00      	nop
 80056e8:	e7fe      	b.n	80056e8 <prvTaskExitError+0x28>
	__asm volatile
 80056ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ee:	f383 8811 	msr	BASEPRI, r3
 80056f2:	f3bf 8f6f 	isb	sy
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	60bb      	str	r3, [r7, #8]
}
 80056fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80056fe:	bf00      	nop
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d0fc      	beq.n	8005700 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005706:	bf00      	nop
 8005708:	bf00      	nop
 800570a:	3714      	adds	r7, #20
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr
 8005714:	2000000c 	.word	0x2000000c
	...

08005720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005720:	4b07      	ldr	r3, [pc, #28]	; (8005740 <pxCurrentTCBConst2>)
 8005722:	6819      	ldr	r1, [r3, #0]
 8005724:	6808      	ldr	r0, [r1, #0]
 8005726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800572a:	f380 8809 	msr	PSP, r0
 800572e:	f3bf 8f6f 	isb	sy
 8005732:	f04f 0000 	mov.w	r0, #0
 8005736:	f380 8811 	msr	BASEPRI, r0
 800573a:	4770      	bx	lr
 800573c:	f3af 8000 	nop.w

08005740 <pxCurrentTCBConst2>:
 8005740:	20000030 	.word	0x20000030
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005744:	bf00      	nop
 8005746:	bf00      	nop

08005748 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005748:	4808      	ldr	r0, [pc, #32]	; (800576c <prvPortStartFirstTask+0x24>)
 800574a:	6800      	ldr	r0, [r0, #0]
 800574c:	6800      	ldr	r0, [r0, #0]
 800574e:	f380 8808 	msr	MSP, r0
 8005752:	f04f 0000 	mov.w	r0, #0
 8005756:	f380 8814 	msr	CONTROL, r0
 800575a:	b662      	cpsie	i
 800575c:	b661      	cpsie	f
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	df00      	svc	0
 8005768:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800576a:	bf00      	nop
 800576c:	e000ed08 	.word	0xe000ed08

08005770 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b088      	sub	sp, #32
 8005774:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005776:	4b4e      	ldr	r3, [pc, #312]	; (80058b0 <xPortStartScheduler+0x140>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a4e      	ldr	r2, [pc, #312]	; (80058b4 <xPortStartScheduler+0x144>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d10a      	bne.n	8005796 <xPortStartScheduler+0x26>
	__asm volatile
 8005780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005784:	f383 8811 	msr	BASEPRI, r3
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	61bb      	str	r3, [r7, #24]
}
 8005792:	bf00      	nop
 8005794:	e7fe      	b.n	8005794 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005796:	4b46      	ldr	r3, [pc, #280]	; (80058b0 <xPortStartScheduler+0x140>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a47      	ldr	r2, [pc, #284]	; (80058b8 <xPortStartScheduler+0x148>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d10a      	bne.n	80057b6 <xPortStartScheduler+0x46>
	__asm volatile
 80057a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a4:	f383 8811 	msr	BASEPRI, r3
 80057a8:	f3bf 8f6f 	isb	sy
 80057ac:	f3bf 8f4f 	dsb	sy
 80057b0:	617b      	str	r3, [r7, #20]
}
 80057b2:	bf00      	nop
 80057b4:	e7fe      	b.n	80057b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80057b6:	4b41      	ldr	r3, [pc, #260]	; (80058bc <xPortStartScheduler+0x14c>)
 80057b8:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	22ff      	movs	r2, #255	; 0xff
 80057c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80057d0:	79fb      	ldrb	r3, [r7, #7]
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	4b39      	ldr	r3, [pc, #228]	; (80058c0 <xPortStartScheduler+0x150>)
 80057dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80057de:	4b39      	ldr	r3, [pc, #228]	; (80058c4 <xPortStartScheduler+0x154>)
 80057e0:	2207      	movs	r2, #7
 80057e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057e4:	e009      	b.n	80057fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80057e6:	4b37      	ldr	r3, [pc, #220]	; (80058c4 <xPortStartScheduler+0x154>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	3b01      	subs	r3, #1
 80057ec:	4a35      	ldr	r2, [pc, #212]	; (80058c4 <xPortStartScheduler+0x154>)
 80057ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80057f0:	79fb      	ldrb	r3, [r7, #7]
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	005b      	lsls	r3, r3, #1
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057fa:	79fb      	ldrb	r3, [r7, #7]
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005802:	2b80      	cmp	r3, #128	; 0x80
 8005804:	d0ef      	beq.n	80057e6 <xPortStartScheduler+0x76>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8005806:	4b2f      	ldr	r3, [pc, #188]	; (80058c4 <xPortStartScheduler+0x154>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f1c3 0307 	rsb	r3, r3, #7
 800580e:	2b04      	cmp	r3, #4
 8005810:	d00a      	beq.n	8005828 <xPortStartScheduler+0xb8>
	__asm volatile
 8005812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005816:	f383 8811 	msr	BASEPRI, r3
 800581a:	f3bf 8f6f 	isb	sy
 800581e:	f3bf 8f4f 	dsb	sy
 8005822:	613b      	str	r3, [r7, #16]
}
 8005824:	bf00      	nop
 8005826:	e7fe      	b.n	8005826 <xPortStartScheduler+0xb6>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005828:	4b26      	ldr	r3, [pc, #152]	; (80058c4 <xPortStartScheduler+0x154>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f1c3 0307 	rsb	r3, r3, #7
 8005830:	2b04      	cmp	r3, #4
 8005832:	d00a      	beq.n	800584a <xPortStartScheduler+0xda>
	__asm volatile
 8005834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005838:	f383 8811 	msr	BASEPRI, r3
 800583c:	f3bf 8f6f 	isb	sy
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	60fb      	str	r3, [r7, #12]
}
 8005846:	bf00      	nop
 8005848:	e7fe      	b.n	8005848 <xPortStartScheduler+0xd8>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800584a:	4b1e      	ldr	r3, [pc, #120]	; (80058c4 <xPortStartScheduler+0x154>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	021b      	lsls	r3, r3, #8
 8005850:	4a1c      	ldr	r2, [pc, #112]	; (80058c4 <xPortStartScheduler+0x154>)
 8005852:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005854:	4b1b      	ldr	r3, [pc, #108]	; (80058c4 <xPortStartScheduler+0x154>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800585c:	4a19      	ldr	r2, [pc, #100]	; (80058c4 <xPortStartScheduler+0x154>)
 800585e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	b2da      	uxtb	r2, r3
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005868:	4b17      	ldr	r3, [pc, #92]	; (80058c8 <xPortStartScheduler+0x158>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a16      	ldr	r2, [pc, #88]	; (80058c8 <xPortStartScheduler+0x158>)
 800586e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005872:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005874:	4b14      	ldr	r3, [pc, #80]	; (80058c8 <xPortStartScheduler+0x158>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a13      	ldr	r2, [pc, #76]	; (80058c8 <xPortStartScheduler+0x158>)
 800587a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800587e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005880:	f000 f8dc 	bl	8005a3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005884:	4b11      	ldr	r3, [pc, #68]	; (80058cc <xPortStartScheduler+0x15c>)
 8005886:	2200      	movs	r2, #0
 8005888:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800588a:	f000 f8fb 	bl	8005a84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800588e:	4b10      	ldr	r3, [pc, #64]	; (80058d0 <xPortStartScheduler+0x160>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a0f      	ldr	r2, [pc, #60]	; (80058d0 <xPortStartScheduler+0x160>)
 8005894:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005898:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800589a:	f7ff ff55 	bl	8005748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800589e:	f7fe ff49 	bl	8004734 <vTaskSwitchContext>
	prvTaskExitError();
 80058a2:	f7ff ff0d 	bl	80056c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3720      	adds	r7, #32
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	e000ed00 	.word	0xe000ed00
 80058b4:	410fc271 	.word	0x410fc271
 80058b8:	410fc270 	.word	0x410fc270
 80058bc:	e000e400 	.word	0xe000e400
 80058c0:	20000238 	.word	0x20000238
 80058c4:	2000023c 	.word	0x2000023c
 80058c8:	e000ed20 	.word	0xe000ed20
 80058cc:	2000000c 	.word	0x2000000c
 80058d0:	e000ef34 	.word	0xe000ef34

080058d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
	__asm volatile
 80058da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058de:	f383 8811 	msr	BASEPRI, r3
 80058e2:	f3bf 8f6f 	isb	sy
 80058e6:	f3bf 8f4f 	dsb	sy
 80058ea:	607b      	str	r3, [r7, #4]
}
 80058ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80058ee:	4b0f      	ldr	r3, [pc, #60]	; (800592c <vPortEnterCritical+0x58>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	3301      	adds	r3, #1
 80058f4:	4a0d      	ldr	r2, [pc, #52]	; (800592c <vPortEnterCritical+0x58>)
 80058f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80058f8:	4b0c      	ldr	r3, [pc, #48]	; (800592c <vPortEnterCritical+0x58>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d10f      	bne.n	8005920 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005900:	4b0b      	ldr	r3, [pc, #44]	; (8005930 <vPortEnterCritical+0x5c>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00a      	beq.n	8005920 <vPortEnterCritical+0x4c>
	__asm volatile
 800590a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590e:	f383 8811 	msr	BASEPRI, r3
 8005912:	f3bf 8f6f 	isb	sy
 8005916:	f3bf 8f4f 	dsb	sy
 800591a:	603b      	str	r3, [r7, #0]
}
 800591c:	bf00      	nop
 800591e:	e7fe      	b.n	800591e <vPortEnterCritical+0x4a>
	}
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr
 800592c:	2000000c 	.word	0x2000000c
 8005930:	e000ed04 	.word	0xe000ed04

08005934 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800593a:	4b12      	ldr	r3, [pc, #72]	; (8005984 <vPortExitCritical+0x50>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d10a      	bne.n	8005958 <vPortExitCritical+0x24>
	__asm volatile
 8005942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005946:	f383 8811 	msr	BASEPRI, r3
 800594a:	f3bf 8f6f 	isb	sy
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	607b      	str	r3, [r7, #4]
}
 8005954:	bf00      	nop
 8005956:	e7fe      	b.n	8005956 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005958:	4b0a      	ldr	r3, [pc, #40]	; (8005984 <vPortExitCritical+0x50>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	3b01      	subs	r3, #1
 800595e:	4a09      	ldr	r2, [pc, #36]	; (8005984 <vPortExitCritical+0x50>)
 8005960:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005962:	4b08      	ldr	r3, [pc, #32]	; (8005984 <vPortExitCritical+0x50>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d105      	bne.n	8005976 <vPortExitCritical+0x42>
 800596a:	2300      	movs	r3, #0
 800596c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	f383 8811 	msr	BASEPRI, r3
}
 8005974:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005976:	bf00      	nop
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	2000000c 	.word	0x2000000c
	...

08005990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005990:	f3ef 8009 	mrs	r0, PSP
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	4b15      	ldr	r3, [pc, #84]	; (80059f0 <pxCurrentTCBConst>)
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	f01e 0f10 	tst.w	lr, #16
 80059a0:	bf08      	it	eq
 80059a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80059a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059aa:	6010      	str	r0, [r2, #0]
 80059ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80059b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80059b4:	f380 8811 	msr	BASEPRI, r0
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	f3bf 8f6f 	isb	sy
 80059c0:	f7fe feb8 	bl	8004734 <vTaskSwitchContext>
 80059c4:	f04f 0000 	mov.w	r0, #0
 80059c8:	f380 8811 	msr	BASEPRI, r0
 80059cc:	bc09      	pop	{r0, r3}
 80059ce:	6819      	ldr	r1, [r3, #0]
 80059d0:	6808      	ldr	r0, [r1, #0]
 80059d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059d6:	f01e 0f10 	tst.w	lr, #16
 80059da:	bf08      	it	eq
 80059dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80059e0:	f380 8809 	msr	PSP, r0
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	f3af 8000 	nop.w

080059f0 <pxCurrentTCBConst>:
 80059f0:	20000030 	.word	0x20000030
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80059f4:	bf00      	nop
 80059f6:	bf00      	nop

080059f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
	__asm volatile
 80059fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	607b      	str	r3, [r7, #4]
}
 8005a10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a12:	f7fe fdd7 	bl	80045c4 <xTaskIncrementTick>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d003      	beq.n	8005a24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a1c:	4b06      	ldr	r3, [pc, #24]	; (8005a38 <SysTick_Handler+0x40>)
 8005a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a22:	601a      	str	r2, [r3, #0]
 8005a24:	2300      	movs	r3, #0
 8005a26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	f383 8811 	msr	BASEPRI, r3
}
 8005a2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a30:	bf00      	nop
 8005a32:	3708      	adds	r7, #8
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	e000ed04 	.word	0xe000ed04

08005a3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a40:	4b0b      	ldr	r3, [pc, #44]	; (8005a70 <vPortSetupTimerInterrupt+0x34>)
 8005a42:	2200      	movs	r2, #0
 8005a44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a46:	4b0b      	ldr	r3, [pc, #44]	; (8005a74 <vPortSetupTimerInterrupt+0x38>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a4c:	4b0a      	ldr	r3, [pc, #40]	; (8005a78 <vPortSetupTimerInterrupt+0x3c>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a0a      	ldr	r2, [pc, #40]	; (8005a7c <vPortSetupTimerInterrupt+0x40>)
 8005a52:	fba2 2303 	umull	r2, r3, r2, r3
 8005a56:	099b      	lsrs	r3, r3, #6
 8005a58:	4a09      	ldr	r2, [pc, #36]	; (8005a80 <vPortSetupTimerInterrupt+0x44>)
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a5e:	4b04      	ldr	r3, [pc, #16]	; (8005a70 <vPortSetupTimerInterrupt+0x34>)
 8005a60:	2207      	movs	r2, #7
 8005a62:	601a      	str	r2, [r3, #0]
}
 8005a64:	bf00      	nop
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	e000e010 	.word	0xe000e010
 8005a74:	e000e018 	.word	0xe000e018
 8005a78:	20000000 	.word	0x20000000
 8005a7c:	10624dd3 	.word	0x10624dd3
 8005a80:	e000e014 	.word	0xe000e014

08005a84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005a84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005a94 <vPortEnableVFP+0x10>
 8005a88:	6801      	ldr	r1, [r0, #0]
 8005a8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005a8e:	6001      	str	r1, [r0, #0]
 8005a90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005a92:	bf00      	nop
 8005a94:	e000ed88 	.word	0xe000ed88

08005a98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005a9e:	f3ef 8305 	mrs	r3, IPSR
 8005aa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2b0f      	cmp	r3, #15
 8005aa8:	d914      	bls.n	8005ad4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005aaa:	4a17      	ldr	r2, [pc, #92]	; (8005b08 <vPortValidateInterruptPriority+0x70>)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	4413      	add	r3, r2
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005ab4:	4b15      	ldr	r3, [pc, #84]	; (8005b0c <vPortValidateInterruptPriority+0x74>)
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	7afa      	ldrb	r2, [r7, #11]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d20a      	bcs.n	8005ad4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac2:	f383 8811 	msr	BASEPRI, r3
 8005ac6:	f3bf 8f6f 	isb	sy
 8005aca:	f3bf 8f4f 	dsb	sy
 8005ace:	607b      	str	r3, [r7, #4]
}
 8005ad0:	bf00      	nop
 8005ad2:	e7fe      	b.n	8005ad2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005ad4:	4b0e      	ldr	r3, [pc, #56]	; (8005b10 <vPortValidateInterruptPriority+0x78>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005adc:	4b0d      	ldr	r3, [pc, #52]	; (8005b14 <vPortValidateInterruptPriority+0x7c>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d90a      	bls.n	8005afa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae8:	f383 8811 	msr	BASEPRI, r3
 8005aec:	f3bf 8f6f 	isb	sy
 8005af0:	f3bf 8f4f 	dsb	sy
 8005af4:	603b      	str	r3, [r7, #0]
}
 8005af6:	bf00      	nop
 8005af8:	e7fe      	b.n	8005af8 <vPortValidateInterruptPriority+0x60>
	}
 8005afa:	bf00      	nop
 8005afc:	3714      	adds	r7, #20
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	e000e3f0 	.word	0xe000e3f0
 8005b0c:	20000238 	.word	0x20000238
 8005b10:	e000ed0c 	.word	0xe000ed0c
 8005b14:	2000023c 	.word	0x2000023c

08005b18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b08a      	sub	sp, #40	; 0x28
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b20:	2300      	movs	r3, #0
 8005b22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b24:	f7fe fc94 	bl	8004450 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b28:	4b58      	ldr	r3, [pc, #352]	; (8005c8c <pvPortMalloc+0x174>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b30:	f000 f910 	bl	8005d54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b34:	4b56      	ldr	r3, [pc, #344]	; (8005c90 <pvPortMalloc+0x178>)
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f040 808e 	bne.w	8005c5e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d01d      	beq.n	8005b84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005b48:	2208      	movs	r2, #8
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f003 0307 	and.w	r3, r3, #7
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d014      	beq.n	8005b84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f023 0307 	bic.w	r3, r3, #7
 8005b60:	3308      	adds	r3, #8
 8005b62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f003 0307 	and.w	r3, r3, #7
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00a      	beq.n	8005b84 <pvPortMalloc+0x6c>
	__asm volatile
 8005b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	617b      	str	r3, [r7, #20]
}
 8005b80:	bf00      	nop
 8005b82:	e7fe      	b.n	8005b82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d069      	beq.n	8005c5e <pvPortMalloc+0x146>
 8005b8a:	4b42      	ldr	r3, [pc, #264]	; (8005c94 <pvPortMalloc+0x17c>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d864      	bhi.n	8005c5e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005b94:	4b40      	ldr	r3, [pc, #256]	; (8005c98 <pvPortMalloc+0x180>)
 8005b96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005b98:	4b3f      	ldr	r3, [pc, #252]	; (8005c98 <pvPortMalloc+0x180>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b9e:	e004      	b.n	8005baa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d903      	bls.n	8005bbc <pvPortMalloc+0xa4>
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1f1      	bne.n	8005ba0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005bbc:	4b33      	ldr	r3, [pc, #204]	; (8005c8c <pvPortMalloc+0x174>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d04b      	beq.n	8005c5e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005bc6:	6a3b      	ldr	r3, [r7, #32]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2208      	movs	r2, #8
 8005bcc:	4413      	add	r3, r2
 8005bce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	6a3b      	ldr	r3, [r7, #32]
 8005bd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	1ad2      	subs	r2, r2, r3
 8005be0:	2308      	movs	r3, #8
 8005be2:	005b      	lsls	r3, r3, #1
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d91f      	bls.n	8005c28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4413      	add	r3, r2
 8005bee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	f003 0307 	and.w	r3, r3, #7
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00a      	beq.n	8005c10 <pvPortMalloc+0xf8>
	__asm volatile
 8005bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfe:	f383 8811 	msr	BASEPRI, r3
 8005c02:	f3bf 8f6f 	isb	sy
 8005c06:	f3bf 8f4f 	dsb	sy
 8005c0a:	613b      	str	r3, [r7, #16]
}
 8005c0c:	bf00      	nop
 8005c0e:	e7fe      	b.n	8005c0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c12:	685a      	ldr	r2, [r3, #4]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	1ad2      	subs	r2, r2, r3
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c22:	69b8      	ldr	r0, [r7, #24]
 8005c24:	f000 f8f8 	bl	8005e18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c28:	4b1a      	ldr	r3, [pc, #104]	; (8005c94 <pvPortMalloc+0x17c>)
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	4a18      	ldr	r2, [pc, #96]	; (8005c94 <pvPortMalloc+0x17c>)
 8005c34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c36:	4b17      	ldr	r3, [pc, #92]	; (8005c94 <pvPortMalloc+0x17c>)
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	4b18      	ldr	r3, [pc, #96]	; (8005c9c <pvPortMalloc+0x184>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d203      	bcs.n	8005c4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c42:	4b14      	ldr	r3, [pc, #80]	; (8005c94 <pvPortMalloc+0x17c>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a15      	ldr	r2, [pc, #84]	; (8005c9c <pvPortMalloc+0x184>)
 8005c48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	4b10      	ldr	r3, [pc, #64]	; (8005c90 <pvPortMalloc+0x178>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	431a      	orrs	r2, r3
 8005c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005c5e:	f7fe fc05 	bl	800446c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	f003 0307 	and.w	r3, r3, #7
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00a      	beq.n	8005c82 <pvPortMalloc+0x16a>
	__asm volatile
 8005c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c70:	f383 8811 	msr	BASEPRI, r3
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	60fb      	str	r3, [r7, #12]
}
 8005c7e:	bf00      	nop
 8005c80:	e7fe      	b.n	8005c80 <pvPortMalloc+0x168>
	return pvReturn;
 8005c82:	69fb      	ldr	r3, [r7, #28]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3728      	adds	r7, #40	; 0x28
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	20012e48 	.word	0x20012e48
 8005c90:	20012e54 	.word	0x20012e54
 8005c94:	20012e4c 	.word	0x20012e4c
 8005c98:	20012e40 	.word	0x20012e40
 8005c9c:	20012e50 	.word	0x20012e50

08005ca0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d048      	beq.n	8005d44 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005cb2:	2308      	movs	r3, #8
 8005cb4:	425b      	negs	r3, r3
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	4413      	add	r3, r2
 8005cba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	685a      	ldr	r2, [r3, #4]
 8005cc4:	4b21      	ldr	r3, [pc, #132]	; (8005d4c <vPortFree+0xac>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4013      	ands	r3, r2
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10a      	bne.n	8005ce4 <vPortFree+0x44>
	__asm volatile
 8005cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	60fb      	str	r3, [r7, #12]
}
 8005ce0:	bf00      	nop
 8005ce2:	e7fe      	b.n	8005ce2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00a      	beq.n	8005d02 <vPortFree+0x62>
	__asm volatile
 8005cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf0:	f383 8811 	msr	BASEPRI, r3
 8005cf4:	f3bf 8f6f 	isb	sy
 8005cf8:	f3bf 8f4f 	dsb	sy
 8005cfc:	60bb      	str	r3, [r7, #8]
}
 8005cfe:	bf00      	nop
 8005d00:	e7fe      	b.n	8005d00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	685a      	ldr	r2, [r3, #4]
 8005d06:	4b11      	ldr	r3, [pc, #68]	; (8005d4c <vPortFree+0xac>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d019      	beq.n	8005d44 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d115      	bne.n	8005d44 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	4b0b      	ldr	r3, [pc, #44]	; (8005d4c <vPortFree+0xac>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	43db      	mvns	r3, r3
 8005d22:	401a      	ands	r2, r3
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d28:	f7fe fb92 	bl	8004450 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	4b07      	ldr	r3, [pc, #28]	; (8005d50 <vPortFree+0xb0>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4413      	add	r3, r2
 8005d36:	4a06      	ldr	r2, [pc, #24]	; (8005d50 <vPortFree+0xb0>)
 8005d38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d3a:	6938      	ldr	r0, [r7, #16]
 8005d3c:	f000 f86c 	bl	8005e18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005d40:	f7fe fb94 	bl	800446c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005d44:	bf00      	nop
 8005d46:	3718      	adds	r7, #24
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	20012e54 	.word	0x20012e54
 8005d50:	20012e4c 	.word	0x20012e4c

08005d54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005d5a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8005d5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005d60:	4b27      	ldr	r3, [pc, #156]	; (8005e00 <prvHeapInit+0xac>)
 8005d62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f003 0307 	and.w	r3, r3, #7
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00c      	beq.n	8005d88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	3307      	adds	r3, #7
 8005d72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f023 0307 	bic.w	r3, r3, #7
 8005d7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	4a1f      	ldr	r2, [pc, #124]	; (8005e00 <prvHeapInit+0xac>)
 8005d84:	4413      	add	r3, r2
 8005d86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005d8c:	4a1d      	ldr	r2, [pc, #116]	; (8005e04 <prvHeapInit+0xb0>)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005d92:	4b1c      	ldr	r3, [pc, #112]	; (8005e04 <prvHeapInit+0xb0>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005da0:	2208      	movs	r2, #8
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	1a9b      	subs	r3, r3, r2
 8005da6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f023 0307 	bic.w	r3, r3, #7
 8005dae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	4a15      	ldr	r2, [pc, #84]	; (8005e08 <prvHeapInit+0xb4>)
 8005db4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005db6:	4b14      	ldr	r3, [pc, #80]	; (8005e08 <prvHeapInit+0xb4>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005dbe:	4b12      	ldr	r3, [pc, #72]	; (8005e08 <prvHeapInit+0xb4>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	1ad2      	subs	r2, r2, r3
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005dd4:	4b0c      	ldr	r3, [pc, #48]	; (8005e08 <prvHeapInit+0xb4>)
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	4a0a      	ldr	r2, [pc, #40]	; (8005e0c <prvHeapInit+0xb8>)
 8005de2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	4a09      	ldr	r2, [pc, #36]	; (8005e10 <prvHeapInit+0xbc>)
 8005dea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005dec:	4b09      	ldr	r3, [pc, #36]	; (8005e14 <prvHeapInit+0xc0>)
 8005dee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005df2:	601a      	str	r2, [r3, #0]
}
 8005df4:	bf00      	nop
 8005df6:	3714      	adds	r7, #20
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	20000240 	.word	0x20000240
 8005e04:	20012e40 	.word	0x20012e40
 8005e08:	20012e48 	.word	0x20012e48
 8005e0c:	20012e50 	.word	0x20012e50
 8005e10:	20012e4c 	.word	0x20012e4c
 8005e14:	20012e54 	.word	0x20012e54

08005e18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e20:	4b28      	ldr	r3, [pc, #160]	; (8005ec4 <prvInsertBlockIntoFreeList+0xac>)
 8005e22:	60fb      	str	r3, [r7, #12]
 8005e24:	e002      	b.n	8005e2c <prvInsertBlockIntoFreeList+0x14>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	60fb      	str	r3, [r7, #12]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d8f7      	bhi.n	8005e26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	4413      	add	r3, r2
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d108      	bne.n	8005e5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	685a      	ldr	r2, [r3, #4]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	441a      	add	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	68ba      	ldr	r2, [r7, #8]
 8005e64:	441a      	add	r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d118      	bne.n	8005ea0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	4b15      	ldr	r3, [pc, #84]	; (8005ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d00d      	beq.n	8005e96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685a      	ldr	r2, [r3, #4]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	441a      	add	r2, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	601a      	str	r2, [r3, #0]
 8005e94:	e008      	b.n	8005ea8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005e96:	4b0c      	ldr	r3, [pc, #48]	; (8005ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	601a      	str	r2, [r3, #0]
 8005e9e:	e003      	b.n	8005ea8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d002      	beq.n	8005eb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005eb6:	bf00      	nop
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	20012e40 	.word	0x20012e40
 8005ec8:	20012e48 	.word	0x20012e48

08005ecc <__libc_init_array>:
 8005ecc:	b570      	push	{r4, r5, r6, lr}
 8005ece:	4d0d      	ldr	r5, [pc, #52]	; (8005f04 <__libc_init_array+0x38>)
 8005ed0:	4c0d      	ldr	r4, [pc, #52]	; (8005f08 <__libc_init_array+0x3c>)
 8005ed2:	1b64      	subs	r4, r4, r5
 8005ed4:	10a4      	asrs	r4, r4, #2
 8005ed6:	2600      	movs	r6, #0
 8005ed8:	42a6      	cmp	r6, r4
 8005eda:	d109      	bne.n	8005ef0 <__libc_init_array+0x24>
 8005edc:	4d0b      	ldr	r5, [pc, #44]	; (8005f0c <__libc_init_array+0x40>)
 8005ede:	4c0c      	ldr	r4, [pc, #48]	; (8005f10 <__libc_init_array+0x44>)
 8005ee0:	f000 f82e 	bl	8005f40 <_init>
 8005ee4:	1b64      	subs	r4, r4, r5
 8005ee6:	10a4      	asrs	r4, r4, #2
 8005ee8:	2600      	movs	r6, #0
 8005eea:	42a6      	cmp	r6, r4
 8005eec:	d105      	bne.n	8005efa <__libc_init_array+0x2e>
 8005eee:	bd70      	pop	{r4, r5, r6, pc}
 8005ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ef4:	4798      	blx	r3
 8005ef6:	3601      	adds	r6, #1
 8005ef8:	e7ee      	b.n	8005ed8 <__libc_init_array+0xc>
 8005efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005efe:	4798      	blx	r3
 8005f00:	3601      	adds	r6, #1
 8005f02:	e7f2      	b.n	8005eea <__libc_init_array+0x1e>
 8005f04:	08006044 	.word	0x08006044
 8005f08:	08006044 	.word	0x08006044
 8005f0c:	08006044 	.word	0x08006044
 8005f10:	08006048 	.word	0x08006048

08005f14 <memcpy>:
 8005f14:	440a      	add	r2, r1
 8005f16:	4291      	cmp	r1, r2
 8005f18:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f1c:	d100      	bne.n	8005f20 <memcpy+0xc>
 8005f1e:	4770      	bx	lr
 8005f20:	b510      	push	{r4, lr}
 8005f22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f2a:	4291      	cmp	r1, r2
 8005f2c:	d1f9      	bne.n	8005f22 <memcpy+0xe>
 8005f2e:	bd10      	pop	{r4, pc}

08005f30 <memset>:
 8005f30:	4402      	add	r2, r0
 8005f32:	4603      	mov	r3, r0
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d100      	bne.n	8005f3a <memset+0xa>
 8005f38:	4770      	bx	lr
 8005f3a:	f803 1b01 	strb.w	r1, [r3], #1
 8005f3e:	e7f9      	b.n	8005f34 <memset+0x4>

08005f40 <_init>:
 8005f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f42:	bf00      	nop
 8005f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f46:	bc08      	pop	{r3}
 8005f48:	469e      	mov	lr, r3
 8005f4a:	4770      	bx	lr

08005f4c <_fini>:
 8005f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f4e:	bf00      	nop
 8005f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f52:	bc08      	pop	{r3}
 8005f54:	469e      	mov	lr, r3
 8005f56:	4770      	bx	lr
