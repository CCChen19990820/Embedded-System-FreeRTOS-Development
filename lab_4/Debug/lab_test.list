
lab_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004400  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08004590  08004590  00014590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046ec  080046ec  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080046ec  080046ec  000146ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046f4  080046f4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046f4  080046f4  000146f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046f8  080046f8  000146f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080046fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000015e8  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001660  20001660  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   000132ec  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026dc  00000000  00000000  00033394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ea0  00000000  00000000  00035a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000db8  00000000  00000000  00036910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021c7c  00000000  00000000  000376c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000111ac  00000000  00000000  00059344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2016  00000000  00000000  0006a4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013c506  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000040a8  00000000  00000000  0013c55c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004578 	.word	0x08004578

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08004578 	.word	0x08004578

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <red_LED_task>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void red_LED_task(void *pvParameters)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	while (1) {
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000580:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000584:	4803      	ldr	r0, [pc, #12]	; (8000594 <red_LED_task+0x1c>)
 8000586:	f000 fe08 	bl	800119a <HAL_GPIO_TogglePin>
		vTaskDelay(500);
 800058a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800058e:	f002 fb33 	bl	8002bf8 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000592:	e7f5      	b.n	8000580 <red_LED_task+0x8>
 8000594:	40020c00 	.word	0x40020c00

08000598 <green_LED_task>:
	}
}

void green_LED_task(void *pvParameters)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	while (1) {
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80005a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <green_LED_task+0x1c>)
 80005a6:	f000 fdf8 	bl	800119a <HAL_GPIO_TogglePin>
		vTaskDelay(1000);
 80005aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ae:	f002 fb23 	bl	8002bf8 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80005b2:	e7f5      	b.n	80005a0 <green_LED_task+0x8>
 80005b4:	40020c00 	.word	0x40020c00

080005b8 <task1>:
	}
}

void task1(void *pvParameters)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
    while (1) {
        vTaskDelete(NULL);
 80005c0:	2000      	movs	r0, #0
 80005c2:	f002 fa89 	bl	8002ad8 <vTaskDelete>
 80005c6:	e7fb      	b.n	80005c0 <task1+0x8>

080005c8 <task2>:
    }
}

void task2(void *pvParameters)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
    while (1) {
        vTaskDelete(NULL);
 80005d0:	2000      	movs	r0, #0
 80005d2:	f002 fa81 	bl	8002ad8 <vTaskDelete>
 80005d6:	e7fb      	b.n	80005d0 <task2+0x8>

080005d8 <task3>:
    }
}

void task3(void *pvParameters)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
    while (1) {
        vTaskDelete(NULL);
 80005e0:	2000      	movs	r0, #0
 80005e2:	f002 fa79 	bl	8002ad8 <vTaskDelete>
 80005e6:	e7fb      	b.n	80005e0 <task3+0x8>

080005e8 <print_task>:
    }
}

void print_task(void *pvParameters)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
    while (1) {
		vPrintFreeList();
 80005f0:	f003 fab8 	bl	8003b64 <vPrintFreeList>
		vTaskDelay(3000);
 80005f4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005f8:	f002 fafe 	bl	8002bf8 <vTaskDelay>
		vPrintFreeList();
 80005fc:	e7f8      	b.n	80005f0 <print_task+0x8>
	...

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000606:	f000 faef 	bl	8000be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060a:	f000 f85b 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060e:	f000 f8ed 	bl	80007ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000612:	f000 f8c1 	bl	8000798 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(red_LED_task, "RED_LED", 100, NULL, 0, NULL);
 8000616:	2300      	movs	r3, #0
 8000618:	9301      	str	r3, [sp, #4]
 800061a:	2300      	movs	r3, #0
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	2300      	movs	r3, #0
 8000620:	2264      	movs	r2, #100	; 0x64
 8000622:	491c      	ldr	r1, [pc, #112]	; (8000694 <main+0x94>)
 8000624:	481c      	ldr	r0, [pc, #112]	; (8000698 <main+0x98>)
 8000626:	f002 f8f1 	bl	800280c <xTaskCreate>
  xTaskCreate(task1, "TASK1", 50, NULL, 0, NULL);
 800062a:	2300      	movs	r3, #0
 800062c:	9301      	str	r3, [sp, #4]
 800062e:	2300      	movs	r3, #0
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2300      	movs	r3, #0
 8000634:	2232      	movs	r2, #50	; 0x32
 8000636:	4919      	ldr	r1, [pc, #100]	; (800069c <main+0x9c>)
 8000638:	4819      	ldr	r0, [pc, #100]	; (80006a0 <main+0xa0>)
 800063a:	f002 f8e7 	bl	800280c <xTaskCreate>
  xTaskCreate(task2, "TASK2", 30, NULL, 0, NULL);
 800063e:	2300      	movs	r3, #0
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	2300      	movs	r3, #0
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2300      	movs	r3, #0
 8000648:	221e      	movs	r2, #30
 800064a:	4916      	ldr	r1, [pc, #88]	; (80006a4 <main+0xa4>)
 800064c:	4816      	ldr	r0, [pc, #88]	; (80006a8 <main+0xa8>)
 800064e:	f002 f8dd 	bl	800280c <xTaskCreate>
  xTaskCreate(green_LED_task, "GREEN_LED", 130, NULL, 0, NULL);
 8000652:	2300      	movs	r3, #0
 8000654:	9301      	str	r3, [sp, #4]
 8000656:	2300      	movs	r3, #0
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	2300      	movs	r3, #0
 800065c:	2282      	movs	r2, #130	; 0x82
 800065e:	4913      	ldr	r1, [pc, #76]	; (80006ac <main+0xac>)
 8000660:	4813      	ldr	r0, [pc, #76]	; (80006b0 <main+0xb0>)
 8000662:	f002 f8d3 	bl	800280c <xTaskCreate>
  xTaskCreate(task3, "TASK3", 40, NULL, 0, NULL);
 8000666:	2300      	movs	r3, #0
 8000668:	9301      	str	r3, [sp, #4]
 800066a:	2300      	movs	r3, #0
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	2300      	movs	r3, #0
 8000670:	2228      	movs	r2, #40	; 0x28
 8000672:	4910      	ldr	r1, [pc, #64]	; (80006b4 <main+0xb4>)
 8000674:	4810      	ldr	r0, [pc, #64]	; (80006b8 <main+0xb8>)
 8000676:	f002 f8c9 	bl	800280c <xTaskCreate>
  xTaskCreate(print_task, "PRINT", 130, NULL, 0, NULL);
 800067a:	2300      	movs	r3, #0
 800067c:	9301      	str	r3, [sp, #4]
 800067e:	2300      	movs	r3, #0
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	2300      	movs	r3, #0
 8000684:	2282      	movs	r2, #130	; 0x82
 8000686:	490d      	ldr	r1, [pc, #52]	; (80006bc <main+0xbc>)
 8000688:	480d      	ldr	r0, [pc, #52]	; (80006c0 <main+0xc0>)
 800068a:	f002 f8bf 	bl	800280c <xTaskCreate>
  vTaskStartScheduler();
 800068e:	f002 fae7 	bl	8002c60 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000692:	e7fe      	b.n	8000692 <main+0x92>
 8000694:	08004590 	.word	0x08004590
 8000698:	08000579 	.word	0x08000579
 800069c:	08004598 	.word	0x08004598
 80006a0:	080005b9 	.word	0x080005b9
 80006a4:	080045a0 	.word	0x080045a0
 80006a8:	080005c9 	.word	0x080005c9
 80006ac:	080045a8 	.word	0x080045a8
 80006b0:	08000599 	.word	0x08000599
 80006b4:	080045b4 	.word	0x080045b4
 80006b8:	080005d9 	.word	0x080005d9
 80006bc:	080045bc 	.word	0x080045bc
 80006c0:	080005e9 	.word	0x080005e9

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	; 0x50
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	2230      	movs	r2, #48	; 0x30
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 fb20 	bl	8003d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	4b28      	ldr	r3, [pc, #160]	; (8000790 <SystemClock_Config+0xcc>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	4a27      	ldr	r2, [pc, #156]	; (8000790 <SystemClock_Config+0xcc>)
 80006f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f6:	6413      	str	r3, [r2, #64]	; 0x40
 80006f8:	4b25      	ldr	r3, [pc, #148]	; (8000790 <SystemClock_Config+0xcc>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	4b22      	ldr	r3, [pc, #136]	; (8000794 <SystemClock_Config+0xd0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a21      	ldr	r2, [pc, #132]	; (8000794 <SystemClock_Config+0xd0>)
 800070e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <SystemClock_Config+0xd0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000720:	2302      	movs	r3, #2
 8000722:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000724:	2301      	movs	r3, #1
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000728:	2310      	movs	r3, #16
 800072a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072c:	2302      	movs	r3, #2
 800072e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000730:	2300      	movs	r3, #0
 8000732:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000734:	2308      	movs	r3, #8
 8000736:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000738:	2332      	movs	r3, #50	; 0x32
 800073a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800073c:	2304      	movs	r3, #4
 800073e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000740:	2307      	movs	r3, #7
 8000742:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000744:	f107 0320 	add.w	r3, r7, #32
 8000748:	4618      	mov	r0, r3
 800074a:	f000 fd41 	bl	80011d0 <HAL_RCC_OscConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000754:	f000 f8e6 	bl	8000924 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000758:	230f      	movs	r3, #15
 800075a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075c:	2302      	movs	r3, #2
 800075e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000764:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000768:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f000 ffa2 	bl	80016c0 <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000782:	f000 f8cf 	bl	8000924 <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3750      	adds	r7, #80	; 0x50
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 800079e:	4a12      	ldr	r2, [pc, #72]	; (80007e8 <MX_USART2_UART_Init+0x50>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007d0:	f001 fc52 	bl	8002078 <HAL_UART_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007da:	f000 f8a3 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200015c0 	.word	0x200015c0
 80007e8:	40004400 	.word	0x40004400

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08c      	sub	sp, #48	; 0x30
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	61bb      	str	r3, [r7, #24]
 8000806:	4b3a      	ldr	r3, [pc, #232]	; (80008f0 <MX_GPIO_Init+0x104>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a39      	ldr	r2, [pc, #228]	; (80008f0 <MX_GPIO_Init+0x104>)
 800080c:	f043 0310 	orr.w	r3, r3, #16
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b37      	ldr	r3, [pc, #220]	; (80008f0 <MX_GPIO_Init+0x104>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0310 	and.w	r3, r3, #16
 800081a:	61bb      	str	r3, [r7, #24]
 800081c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
 8000822:	4b33      	ldr	r3, [pc, #204]	; (80008f0 <MX_GPIO_Init+0x104>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a32      	ldr	r2, [pc, #200]	; (80008f0 <MX_GPIO_Init+0x104>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b30      	ldr	r3, [pc, #192]	; (80008f0 <MX_GPIO_Init+0x104>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	617b      	str	r3, [r7, #20]
 8000838:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
 800083e:	4b2c      	ldr	r3, [pc, #176]	; (80008f0 <MX_GPIO_Init+0x104>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a2b      	ldr	r2, [pc, #172]	; (80008f0 <MX_GPIO_Init+0x104>)
 8000844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b29      	ldr	r3, [pc, #164]	; (80008f0 <MX_GPIO_Init+0x104>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	4b25      	ldr	r3, [pc, #148]	; (80008f0 <MX_GPIO_Init+0x104>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a24      	ldr	r2, [pc, #144]	; (80008f0 <MX_GPIO_Init+0x104>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b22      	ldr	r3, [pc, #136]	; (80008f0 <MX_GPIO_Init+0x104>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <MX_GPIO_Init+0x104>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a1d      	ldr	r2, [pc, #116]	; (80008f0 <MX_GPIO_Init+0x104>)
 800087c:	f043 0302 	orr.w	r3, r3, #2
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <MX_GPIO_Init+0x104>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <MX_GPIO_Init+0x104>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a16      	ldr	r2, [pc, #88]	; (80008f0 <MX_GPIO_Init+0x104>)
 8000898:	f043 0308 	orr.w	r3, r3, #8
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_GPIO_Init+0x104>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0308 	and.w	r3, r3, #8
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2108      	movs	r1, #8
 80008ae:	4811      	ldr	r0, [pc, #68]	; (80008f4 <MX_GPIO_Init+0x108>)
 80008b0:	f000 fc5a 	bl	8001168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008b4:	2201      	movs	r2, #1
 80008b6:	2101      	movs	r1, #1
 80008b8:	480f      	ldr	r0, [pc, #60]	; (80008f8 <MX_GPIO_Init+0x10c>)
 80008ba:	f000 fc55 	bl	8001168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, led_green_Pin|led_orange_Pin|led_red_Pin|led_blue_Pin
 80008be:	2200      	movs	r2, #0
 80008c0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008c4:	480d      	ldr	r0, [pc, #52]	; (80008fc <MX_GPIO_Init+0x110>)
 80008c6:	f000 fc4f 	bl	8001168 <HAL_GPIO_WritePin>
//  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
//  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = led_green_Pin|led_orange_Pin|led_red_Pin|led_blue_Pin
 80008ca:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008ce:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	2301      	movs	r3, #1
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	4806      	ldr	r0, [pc, #24]	; (80008fc <MX_GPIO_Init+0x110>)
 80008e4:	f000 faa4 	bl	8000e30 <HAL_GPIO_Init>
//  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
//  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
//  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);

}
 80008e8:	bf00      	nop
 80008ea:	3730      	adds	r7, #48	; 0x30
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40021000 	.word	0x40021000
 80008f8:	40020800 	.word	0x40020800
 80008fc:	40020c00 	.word	0x40020c00

08000900 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a04      	ldr	r2, [pc, #16]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d101      	bne.n	8000916 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000912:	f000 f98b 	bl	8000c2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40001400 	.word	0x40001400

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092c:	e7fe      	b.n	800092c <Error_Handler+0x8>
	...

08000930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <HAL_MspInit+0x4c>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	4a0f      	ldr	r2, [pc, #60]	; (800097c <HAL_MspInit+0x4c>)
 8000940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000944:	6453      	str	r3, [r2, #68]	; 0x44
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <HAL_MspInit+0x4c>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <HAL_MspInit+0x4c>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	4a08      	ldr	r2, [pc, #32]	; (800097c <HAL_MspInit+0x4c>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000960:	6413      	str	r3, [r2, #64]	; 0x40
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_MspInit+0x4c>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800

08000980 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	; 0x28
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a19      	ldr	r2, [pc, #100]	; (8000a04 <HAL_UART_MspInit+0x84>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d12b      	bne.n	80009fa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <HAL_UART_MspInit+0x88>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	4a17      	ldr	r2, [pc, #92]	; (8000a08 <HAL_UART_MspInit+0x88>)
 80009ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b0:	6413      	str	r3, [r2, #64]	; 0x40
 80009b2:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <HAL_UART_MspInit+0x88>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <HAL_UART_MspInit+0x88>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a10      	ldr	r2, [pc, #64]	; (8000a08 <HAL_UART_MspInit+0x88>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <HAL_UART_MspInit+0x88>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009da:	230c      	movs	r3, #12
 80009dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e6:	2303      	movs	r3, #3
 80009e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009ea:	2307      	movs	r3, #7
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	4619      	mov	r1, r3
 80009f4:	4805      	ldr	r0, [pc, #20]	; (8000a0c <HAL_UART_MspInit+0x8c>)
 80009f6:	f000 fa1b 	bl	8000e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009fa:	bf00      	nop
 80009fc:	3728      	adds	r7, #40	; 0x28
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40004400 	.word	0x40004400
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020000 	.word	0x40020000

08000a10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08c      	sub	sp, #48	; 0x30
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000a20:	2200      	movs	r2, #0
 8000a22:	6879      	ldr	r1, [r7, #4]
 8000a24:	2037      	movs	r0, #55	; 0x37
 8000a26:	f000 f9d9 	bl	8000ddc <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000a2a:	2037      	movs	r0, #55	; 0x37
 8000a2c:	f000 f9f2 	bl	8000e14 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000a30:	2300      	movs	r3, #0
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <HAL_InitTick+0xa4>)
 8000a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a38:	4a1e      	ldr	r2, [pc, #120]	; (8000ab4 <HAL_InitTick+0xa4>)
 8000a3a:	f043 0320 	orr.w	r3, r3, #32
 8000a3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a40:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <HAL_InitTick+0xa4>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a44:	f003 0320 	and.w	r3, r3, #32
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a4c:	f107 0210 	add.w	r2, r7, #16
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4611      	mov	r1, r2
 8000a56:	4618      	mov	r0, r3
 8000a58:	f001 f82e 	bl	8001ab8 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a5c:	f001 f804 	bl	8001a68 <HAL_RCC_GetPCLK1Freq>
 8000a60:	4603      	mov	r3, r0
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a68:	4a13      	ldr	r2, [pc, #76]	; (8000ab8 <HAL_InitTick+0xa8>)
 8000a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6e:	0c9b      	lsrs	r3, r3, #18
 8000a70:	3b01      	subs	r3, #1
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <HAL_InitTick+0xac>)
 8000a76:	4a12      	ldr	r2, [pc, #72]	; (8000ac0 <HAL_InitTick+0xb0>)
 8000a78:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000a7a:	4b10      	ldr	r3, [pc, #64]	; (8000abc <HAL_InitTick+0xac>)
 8000a7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a80:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000a82:	4a0e      	ldr	r2, [pc, #56]	; (8000abc <HAL_InitTick+0xac>)
 8000a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a86:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <HAL_InitTick+0xac>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <HAL_InitTick+0xac>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000a94:	4809      	ldr	r0, [pc, #36]	; (8000abc <HAL_InitTick+0xac>)
 8000a96:	f001 f841 	bl	8001b1c <HAL_TIM_Base_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d104      	bne.n	8000aaa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000aa0:	4806      	ldr	r0, [pc, #24]	; (8000abc <HAL_InitTick+0xac>)
 8000aa2:	f001 f895 	bl	8001bd0 <HAL_TIM_Base_Start_IT>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	e000      	b.n	8000aac <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3730      	adds	r7, #48	; 0x30
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	431bde83 	.word	0x431bde83
 8000abc:	20001604 	.word	0x20001604
 8000ac0:	40001400 	.word	0x40001400

08000ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <NMI_Handler+0x4>

08000aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <HardFault_Handler+0x4>

08000ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <MemManage_Handler+0x4>

08000ad6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ada:	e7fe      	b.n	8000ada <BusFault_Handler+0x4>

08000adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <UsageFault_Handler+0x4>

08000ae2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000af4:	4802      	ldr	r0, [pc, #8]	; (8000b00 <TIM7_IRQHandler+0x10>)
 8000af6:	f001 f8db 	bl	8001cb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20001604 	.word	0x20001604

08000b04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b0c:	4a14      	ldr	r2, [pc, #80]	; (8000b60 <_sbrk+0x5c>)
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <_sbrk+0x60>)
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <_sbrk+0x64>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d102      	bne.n	8000b26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <_sbrk+0x64>)
 8000b22:	4a12      	ldr	r2, [pc, #72]	; (8000b6c <_sbrk+0x68>)
 8000b24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <_sbrk+0x64>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d207      	bcs.n	8000b44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b34:	f003 f8b8 	bl	8003ca8 <__errno>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	220c      	movs	r2, #12
 8000b3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b42:	e009      	b.n	8000b58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b44:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <_sbrk+0x64>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b4a:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <_sbrk+0x64>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	4a05      	ldr	r2, [pc, #20]	; (8000b68 <_sbrk+0x64>)
 8000b54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b56:	68fb      	ldr	r3, [r7, #12]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3718      	adds	r7, #24
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20020000 	.word	0x20020000
 8000b64:	00000400 	.word	0x00000400
 8000b68:	20000094 	.word	0x20000094
 8000b6c:	20001660 	.word	0x20001660

08000b70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <SystemInit+0x20>)
 8000b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7a:	4a05      	ldr	r2, [pc, #20]	; (8000b90 <SystemInit+0x20>)
 8000b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b98:	480d      	ldr	r0, [pc, #52]	; (8000bd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b9a:	490e      	ldr	r1, [pc, #56]	; (8000bd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b9c:	4a0e      	ldr	r2, [pc, #56]	; (8000bd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba0:	e002      	b.n	8000ba8 <LoopCopyDataInit>

08000ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba6:	3304      	adds	r3, #4

08000ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bac:	d3f9      	bcc.n	8000ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bae:	4a0b      	ldr	r2, [pc, #44]	; (8000bdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bb0:	4c0b      	ldr	r4, [pc, #44]	; (8000be0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb4:	e001      	b.n	8000bba <LoopFillZerobss>

08000bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb8:	3204      	adds	r2, #4

08000bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bbc:	d3fb      	bcc.n	8000bb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bbe:	f7ff ffd7 	bl	8000b70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bc2:	f003 f877 	bl	8003cb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bc6:	f7ff fd1b 	bl	8000600 <main>
  bx  lr    
 8000bca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000bd8:	080046fc 	.word	0x080046fc
  ldr r2, =_sbss
 8000bdc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000be0:	20001660 	.word	0x20001660

08000be4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000be4:	e7fe      	b.n	8000be4 <ADC_IRQHandler>
	...

08000be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bec:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <HAL_Init+0x40>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a0d      	ldr	r2, [pc, #52]	; (8000c28 <HAL_Init+0x40>)
 8000bf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <HAL_Init+0x40>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a0a      	ldr	r2, [pc, #40]	; (8000c28 <HAL_Init+0x40>)
 8000bfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <HAL_Init+0x40>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a07      	ldr	r2, [pc, #28]	; (8000c28 <HAL_Init+0x40>)
 8000c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c10:	2003      	movs	r0, #3
 8000c12:	f000 f8d8 	bl	8000dc6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c16:	2000      	movs	r0, #0
 8000c18:	f7ff fefa 	bl	8000a10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c1c:	f7ff fe88 	bl	8000930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40023c00 	.word	0x40023c00

08000c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_IncTick+0x20>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	461a      	mov	r2, r3
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_IncTick+0x24>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <HAL_IncTick+0x24>)
 8000c3e:	6013      	str	r3, [r2, #0]
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	20000008 	.word	0x20000008
 8000c50:	2000164c 	.word	0x2000164c

08000c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return uwTick;
 8000c58:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <HAL_GetTick+0x14>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	2000164c 	.word	0x2000164c

08000c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9e:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	60d3      	str	r3, [r2, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <__NVIC_GetPriorityGrouping+0x18>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	0a1b      	lsrs	r3, r3, #8
 8000cbe:	f003 0307 	and.w	r3, r3, #7
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	db0b      	blt.n	8000cfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	f003 021f 	and.w	r2, r3, #31
 8000ce8:	4907      	ldr	r1, [pc, #28]	; (8000d08 <__NVIC_EnableIRQ+0x38>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	095b      	lsrs	r3, r3, #5
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000e100 	.word	0xe000e100

08000d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	6039      	str	r1, [r7, #0]
 8000d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	db0a      	blt.n	8000d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	490c      	ldr	r1, [pc, #48]	; (8000d58 <__NVIC_SetPriority+0x4c>)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	0112      	lsls	r2, r2, #4
 8000d2c:	b2d2      	uxtb	r2, r2
 8000d2e:	440b      	add	r3, r1
 8000d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d34:	e00a      	b.n	8000d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4908      	ldr	r1, [pc, #32]	; (8000d5c <__NVIC_SetPriority+0x50>)
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	f003 030f 	and.w	r3, r3, #15
 8000d42:	3b04      	subs	r3, #4
 8000d44:	0112      	lsls	r2, r2, #4
 8000d46:	b2d2      	uxtb	r2, r2
 8000d48:	440b      	add	r3, r1
 8000d4a:	761a      	strb	r2, [r3, #24]
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000e100 	.word	0xe000e100
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b089      	sub	sp, #36	; 0x24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	f1c3 0307 	rsb	r3, r3, #7
 8000d7a:	2b04      	cmp	r3, #4
 8000d7c:	bf28      	it	cs
 8000d7e:	2304      	movcs	r3, #4
 8000d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3304      	adds	r3, #4
 8000d86:	2b06      	cmp	r3, #6
 8000d88:	d902      	bls.n	8000d90 <NVIC_EncodePriority+0x30>
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3b03      	subs	r3, #3
 8000d8e:	e000      	b.n	8000d92 <NVIC_EncodePriority+0x32>
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d94:	f04f 32ff 	mov.w	r2, #4294967295
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43da      	mvns	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	401a      	ands	r2, r3
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	fa01 f303 	lsl.w	r3, r1, r3
 8000db2:	43d9      	mvns	r1, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db8:	4313      	orrs	r3, r2
         );
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3724      	adds	r7, #36	; 0x24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff ff4c 	bl	8000c6c <__NVIC_SetPriorityGrouping>
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
 8000de8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dee:	f7ff ff61 	bl	8000cb4 <__NVIC_GetPriorityGrouping>
 8000df2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	68b9      	ldr	r1, [r7, #8]
 8000df8:	6978      	ldr	r0, [r7, #20]
 8000dfa:	f7ff ffb1 	bl	8000d60 <NVIC_EncodePriority>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e04:	4611      	mov	r1, r2
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff ff80 	bl	8000d0c <__NVIC_SetPriority>
}
 8000e0c:	bf00      	nop
 8000e0e:	3718      	adds	r7, #24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff ff54 	bl	8000cd0 <__NVIC_EnableIRQ>
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b089      	sub	sp, #36	; 0x24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
 8000e4a:	e16b      	b.n	8001124 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	697a      	ldr	r2, [r7, #20]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	f040 815a 	bne.w	800111e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 0303 	and.w	r3, r3, #3
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d005      	beq.n	8000e82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d130      	bne.n	8000ee4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4013      	ands	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	68da      	ldr	r2, [r3, #12]
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eb8:	2201      	movs	r2, #1
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	091b      	lsrs	r3, r3, #4
 8000ece:	f003 0201 	and.w	r2, r3, #1
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0303 	and.w	r3, r3, #3
 8000eec:	2b03      	cmp	r3, #3
 8000eee:	d017      	beq.n	8000f20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	2203      	movs	r2, #3
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	689a      	ldr	r2, [r3, #8]
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 0303 	and.w	r3, r3, #3
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d123      	bne.n	8000f74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	08da      	lsrs	r2, r3, #3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3208      	adds	r2, #8
 8000f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	f003 0307 	and.w	r3, r3, #7
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	220f      	movs	r2, #15
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	691a      	ldr	r2, [r3, #16]
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	08da      	lsrs	r2, r3, #3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3208      	adds	r2, #8
 8000f6e:	69b9      	ldr	r1, [r7, #24]
 8000f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	2203      	movs	r2, #3
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0203 	and.w	r2, r3, #3
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	f000 80b4 	beq.w	800111e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b60      	ldr	r3, [pc, #384]	; (800113c <HAL_GPIO_Init+0x30c>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	4a5f      	ldr	r2, [pc, #380]	; (800113c <HAL_GPIO_Init+0x30c>)
 8000fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc6:	4b5d      	ldr	r3, [pc, #372]	; (800113c <HAL_GPIO_Init+0x30c>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fd2:	4a5b      	ldr	r2, [pc, #364]	; (8001140 <HAL_GPIO_Init+0x310>)
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	089b      	lsrs	r3, r3, #2
 8000fd8:	3302      	adds	r3, #2
 8000fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	220f      	movs	r2, #15
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a52      	ldr	r2, [pc, #328]	; (8001144 <HAL_GPIO_Init+0x314>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d02b      	beq.n	8001056 <HAL_GPIO_Init+0x226>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a51      	ldr	r2, [pc, #324]	; (8001148 <HAL_GPIO_Init+0x318>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d025      	beq.n	8001052 <HAL_GPIO_Init+0x222>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a50      	ldr	r2, [pc, #320]	; (800114c <HAL_GPIO_Init+0x31c>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d01f      	beq.n	800104e <HAL_GPIO_Init+0x21e>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4f      	ldr	r2, [pc, #316]	; (8001150 <HAL_GPIO_Init+0x320>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d019      	beq.n	800104a <HAL_GPIO_Init+0x21a>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4e      	ldr	r2, [pc, #312]	; (8001154 <HAL_GPIO_Init+0x324>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d013      	beq.n	8001046 <HAL_GPIO_Init+0x216>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4d      	ldr	r2, [pc, #308]	; (8001158 <HAL_GPIO_Init+0x328>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d00d      	beq.n	8001042 <HAL_GPIO_Init+0x212>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4c      	ldr	r2, [pc, #304]	; (800115c <HAL_GPIO_Init+0x32c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d007      	beq.n	800103e <HAL_GPIO_Init+0x20e>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a4b      	ldr	r2, [pc, #300]	; (8001160 <HAL_GPIO_Init+0x330>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d101      	bne.n	800103a <HAL_GPIO_Init+0x20a>
 8001036:	2307      	movs	r3, #7
 8001038:	e00e      	b.n	8001058 <HAL_GPIO_Init+0x228>
 800103a:	2308      	movs	r3, #8
 800103c:	e00c      	b.n	8001058 <HAL_GPIO_Init+0x228>
 800103e:	2306      	movs	r3, #6
 8001040:	e00a      	b.n	8001058 <HAL_GPIO_Init+0x228>
 8001042:	2305      	movs	r3, #5
 8001044:	e008      	b.n	8001058 <HAL_GPIO_Init+0x228>
 8001046:	2304      	movs	r3, #4
 8001048:	e006      	b.n	8001058 <HAL_GPIO_Init+0x228>
 800104a:	2303      	movs	r3, #3
 800104c:	e004      	b.n	8001058 <HAL_GPIO_Init+0x228>
 800104e:	2302      	movs	r3, #2
 8001050:	e002      	b.n	8001058 <HAL_GPIO_Init+0x228>
 8001052:	2301      	movs	r3, #1
 8001054:	e000      	b.n	8001058 <HAL_GPIO_Init+0x228>
 8001056:	2300      	movs	r3, #0
 8001058:	69fa      	ldr	r2, [r7, #28]
 800105a:	f002 0203 	and.w	r2, r2, #3
 800105e:	0092      	lsls	r2, r2, #2
 8001060:	4093      	lsls	r3, r2
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4313      	orrs	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001068:	4935      	ldr	r1, [pc, #212]	; (8001140 <HAL_GPIO_Init+0x310>)
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	089b      	lsrs	r3, r3, #2
 800106e:	3302      	adds	r3, #2
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001076:	4b3b      	ldr	r3, [pc, #236]	; (8001164 <HAL_GPIO_Init+0x334>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800109a:	4a32      	ldr	r2, [pc, #200]	; (8001164 <HAL_GPIO_Init+0x334>)
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010a0:	4b30      	ldr	r3, [pc, #192]	; (8001164 <HAL_GPIO_Init+0x334>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010c4:	4a27      	ldr	r2, [pc, #156]	; (8001164 <HAL_GPIO_Init+0x334>)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ca:	4b26      	ldr	r3, [pc, #152]	; (8001164 <HAL_GPIO_Init+0x334>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	43db      	mvns	r3, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4013      	ands	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ee:	4a1d      	ldr	r2, [pc, #116]	; (8001164 <HAL_GPIO_Init+0x334>)
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010f4:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <HAL_GPIO_Init+0x334>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001118:	4a12      	ldr	r2, [pc, #72]	; (8001164 <HAL_GPIO_Init+0x334>)
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3301      	adds	r3, #1
 8001122:	61fb      	str	r3, [r7, #28]
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	2b0f      	cmp	r3, #15
 8001128:	f67f ae90 	bls.w	8000e4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3724      	adds	r7, #36	; 0x24
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800
 8001140:	40013800 	.word	0x40013800
 8001144:	40020000 	.word	0x40020000
 8001148:	40020400 	.word	0x40020400
 800114c:	40020800 	.word	0x40020800
 8001150:	40020c00 	.word	0x40020c00
 8001154:	40021000 	.word	0x40021000
 8001158:	40021400 	.word	0x40021400
 800115c:	40021800 	.word	0x40021800
 8001160:	40021c00 	.word	0x40021c00
 8001164:	40013c00 	.word	0x40013c00

08001168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	807b      	strh	r3, [r7, #2]
 8001174:	4613      	mov	r3, r2
 8001176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001178:	787b      	ldrb	r3, [r7, #1]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800117e:	887a      	ldrh	r2, [r7, #2]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001184:	e003      	b.n	800118e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001186:	887b      	ldrh	r3, [r7, #2]
 8001188:	041a      	lsls	r2, r3, #16
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	619a      	str	r2, [r3, #24]
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800119a:	b480      	push	{r7}
 800119c:	b085      	sub	sp, #20
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
 80011a2:	460b      	mov	r3, r1
 80011a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011ac:	887a      	ldrh	r2, [r7, #2]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	4013      	ands	r3, r2
 80011b2:	041a      	lsls	r2, r3, #16
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	43d9      	mvns	r1, r3
 80011b8:	887b      	ldrh	r3, [r7, #2]
 80011ba:	400b      	ands	r3, r1
 80011bc:	431a      	orrs	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	619a      	str	r2, [r3, #24]
}
 80011c2:	bf00      	nop
 80011c4:	3714      	adds	r7, #20
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e264      	b.n	80016ac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d075      	beq.n	80012da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011ee:	4ba3      	ldr	r3, [pc, #652]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f003 030c 	and.w	r3, r3, #12
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	d00c      	beq.n	8001214 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011fa:	4ba0      	ldr	r3, [pc, #640]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001202:	2b08      	cmp	r3, #8
 8001204:	d112      	bne.n	800122c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001206:	4b9d      	ldr	r3, [pc, #628]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800120e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001212:	d10b      	bne.n	800122c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001214:	4b99      	ldr	r3, [pc, #612]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d05b      	beq.n	80012d8 <HAL_RCC_OscConfig+0x108>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d157      	bne.n	80012d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e23f      	b.n	80016ac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001234:	d106      	bne.n	8001244 <HAL_RCC_OscConfig+0x74>
 8001236:	4b91      	ldr	r3, [pc, #580]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a90      	ldr	r2, [pc, #576]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 800123c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	e01d      	b.n	8001280 <HAL_RCC_OscConfig+0xb0>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800124c:	d10c      	bne.n	8001268 <HAL_RCC_OscConfig+0x98>
 800124e:	4b8b      	ldr	r3, [pc, #556]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a8a      	ldr	r2, [pc, #552]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	4b88      	ldr	r3, [pc, #544]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a87      	ldr	r2, [pc, #540]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	e00b      	b.n	8001280 <HAL_RCC_OscConfig+0xb0>
 8001268:	4b84      	ldr	r3, [pc, #528]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a83      	ldr	r2, [pc, #524]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 800126e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	4b81      	ldr	r3, [pc, #516]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a80      	ldr	r2, [pc, #512]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 800127a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800127e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d013      	beq.n	80012b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001288:	f7ff fce4 	bl	8000c54 <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001290:	f7ff fce0 	bl	8000c54 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b64      	cmp	r3, #100	; 0x64
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e204      	b.n	80016ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a2:	4b76      	ldr	r3, [pc, #472]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0f0      	beq.n	8001290 <HAL_RCC_OscConfig+0xc0>
 80012ae:	e014      	b.n	80012da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b0:	f7ff fcd0 	bl	8000c54 <HAL_GetTick>
 80012b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b6:	e008      	b.n	80012ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012b8:	f7ff fccc 	bl	8000c54 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b64      	cmp	r3, #100	; 0x64
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e1f0      	b.n	80016ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ca:	4b6c      	ldr	r3, [pc, #432]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1f0      	bne.n	80012b8 <HAL_RCC_OscConfig+0xe8>
 80012d6:	e000      	b.n	80012da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d063      	beq.n	80013ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012e6:	4b65      	ldr	r3, [pc, #404]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 030c 	and.w	r3, r3, #12
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d00b      	beq.n	800130a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012f2:	4b62      	ldr	r3, [pc, #392]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012fa:	2b08      	cmp	r3, #8
 80012fc:	d11c      	bne.n	8001338 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012fe:	4b5f      	ldr	r3, [pc, #380]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d116      	bne.n	8001338 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800130a:	4b5c      	ldr	r3, [pc, #368]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d005      	beq.n	8001322 <HAL_RCC_OscConfig+0x152>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d001      	beq.n	8001322 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e1c4      	b.n	80016ac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001322:	4b56      	ldr	r3, [pc, #344]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	4952      	ldr	r1, [pc, #328]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001332:	4313      	orrs	r3, r2
 8001334:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001336:	e03a      	b.n	80013ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d020      	beq.n	8001382 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001340:	4b4f      	ldr	r3, [pc, #316]	; (8001480 <HAL_RCC_OscConfig+0x2b0>)
 8001342:	2201      	movs	r2, #1
 8001344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001346:	f7ff fc85 	bl	8000c54 <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800134e:	f7ff fc81 	bl	8000c54 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e1a5      	b.n	80016ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001360:	4b46      	ldr	r3, [pc, #280]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0f0      	beq.n	800134e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800136c:	4b43      	ldr	r3, [pc, #268]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	691b      	ldr	r3, [r3, #16]
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	4940      	ldr	r1, [pc, #256]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 800137c:	4313      	orrs	r3, r2
 800137e:	600b      	str	r3, [r1, #0]
 8001380:	e015      	b.n	80013ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001382:	4b3f      	ldr	r3, [pc, #252]	; (8001480 <HAL_RCC_OscConfig+0x2b0>)
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001388:	f7ff fc64 	bl	8000c54 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001390:	f7ff fc60 	bl	8000c54 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e184      	b.n	80016ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a2:	4b36      	ldr	r3, [pc, #216]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f0      	bne.n	8001390 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d030      	beq.n	800141c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d016      	beq.n	80013f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013c2:	4b30      	ldr	r3, [pc, #192]	; (8001484 <HAL_RCC_OscConfig+0x2b4>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c8:	f7ff fc44 	bl	8000c54 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013d0:	f7ff fc40 	bl	8000c54 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e164      	b.n	80016ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e2:	4b26      	ldr	r3, [pc, #152]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 80013e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0f0      	beq.n	80013d0 <HAL_RCC_OscConfig+0x200>
 80013ee:	e015      	b.n	800141c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013f0:	4b24      	ldr	r3, [pc, #144]	; (8001484 <HAL_RCC_OscConfig+0x2b4>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f6:	f7ff fc2d 	bl	8000c54 <HAL_GetTick>
 80013fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013fe:	f7ff fc29 	bl	8000c54 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e14d      	b.n	80016ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001410:	4b1a      	ldr	r3, [pc, #104]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1f0      	bne.n	80013fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	2b00      	cmp	r3, #0
 8001426:	f000 80a0 	beq.w	800156a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800142a:	2300      	movs	r3, #0
 800142c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800142e:	4b13      	ldr	r3, [pc, #76]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d10f      	bne.n	800145a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	4b0f      	ldr	r3, [pc, #60]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	4a0e      	ldr	r2, [pc, #56]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001448:	6413      	str	r3, [r2, #64]	; 0x40
 800144a:	4b0c      	ldr	r3, [pc, #48]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001456:	2301      	movs	r3, #1
 8001458:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800145a:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <HAL_RCC_OscConfig+0x2b8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001462:	2b00      	cmp	r3, #0
 8001464:	d121      	bne.n	80014aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001466:	4b08      	ldr	r3, [pc, #32]	; (8001488 <HAL_RCC_OscConfig+0x2b8>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a07      	ldr	r2, [pc, #28]	; (8001488 <HAL_RCC_OscConfig+0x2b8>)
 800146c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001472:	f7ff fbef 	bl	8000c54 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001478:	e011      	b.n	800149e <HAL_RCC_OscConfig+0x2ce>
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800
 8001480:	42470000 	.word	0x42470000
 8001484:	42470e80 	.word	0x42470e80
 8001488:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800148c:	f7ff fbe2 	bl	8000c54 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e106      	b.n	80016ac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149e:	4b85      	ldr	r3, [pc, #532]	; (80016b4 <HAL_RCC_OscConfig+0x4e4>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0f0      	beq.n	800148c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d106      	bne.n	80014c0 <HAL_RCC_OscConfig+0x2f0>
 80014b2:	4b81      	ldr	r3, [pc, #516]	; (80016b8 <HAL_RCC_OscConfig+0x4e8>)
 80014b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b6:	4a80      	ldr	r2, [pc, #512]	; (80016b8 <HAL_RCC_OscConfig+0x4e8>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6713      	str	r3, [r2, #112]	; 0x70
 80014be:	e01c      	b.n	80014fa <HAL_RCC_OscConfig+0x32a>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	2b05      	cmp	r3, #5
 80014c6:	d10c      	bne.n	80014e2 <HAL_RCC_OscConfig+0x312>
 80014c8:	4b7b      	ldr	r3, [pc, #492]	; (80016b8 <HAL_RCC_OscConfig+0x4e8>)
 80014ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014cc:	4a7a      	ldr	r2, [pc, #488]	; (80016b8 <HAL_RCC_OscConfig+0x4e8>)
 80014ce:	f043 0304 	orr.w	r3, r3, #4
 80014d2:	6713      	str	r3, [r2, #112]	; 0x70
 80014d4:	4b78      	ldr	r3, [pc, #480]	; (80016b8 <HAL_RCC_OscConfig+0x4e8>)
 80014d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d8:	4a77      	ldr	r2, [pc, #476]	; (80016b8 <HAL_RCC_OscConfig+0x4e8>)
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	6713      	str	r3, [r2, #112]	; 0x70
 80014e0:	e00b      	b.n	80014fa <HAL_RCC_OscConfig+0x32a>
 80014e2:	4b75      	ldr	r3, [pc, #468]	; (80016b8 <HAL_RCC_OscConfig+0x4e8>)
 80014e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e6:	4a74      	ldr	r2, [pc, #464]	; (80016b8 <HAL_RCC_OscConfig+0x4e8>)
 80014e8:	f023 0301 	bic.w	r3, r3, #1
 80014ec:	6713      	str	r3, [r2, #112]	; 0x70
 80014ee:	4b72      	ldr	r3, [pc, #456]	; (80016b8 <HAL_RCC_OscConfig+0x4e8>)
 80014f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f2:	4a71      	ldr	r2, [pc, #452]	; (80016b8 <HAL_RCC_OscConfig+0x4e8>)
 80014f4:	f023 0304 	bic.w	r3, r3, #4
 80014f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d015      	beq.n	800152e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001502:	f7ff fba7 	bl	8000c54 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001508:	e00a      	b.n	8001520 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800150a:	f7ff fba3 	bl	8000c54 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	f241 3288 	movw	r2, #5000	; 0x1388
 8001518:	4293      	cmp	r3, r2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e0c5      	b.n	80016ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001520:	4b65      	ldr	r3, [pc, #404]	; (80016b8 <HAL_RCC_OscConfig+0x4e8>)
 8001522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d0ee      	beq.n	800150a <HAL_RCC_OscConfig+0x33a>
 800152c:	e014      	b.n	8001558 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800152e:	f7ff fb91 	bl	8000c54 <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001534:	e00a      	b.n	800154c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001536:	f7ff fb8d 	bl	8000c54 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	f241 3288 	movw	r2, #5000	; 0x1388
 8001544:	4293      	cmp	r3, r2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e0af      	b.n	80016ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800154c:	4b5a      	ldr	r3, [pc, #360]	; (80016b8 <HAL_RCC_OscConfig+0x4e8>)
 800154e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1ee      	bne.n	8001536 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001558:	7dfb      	ldrb	r3, [r7, #23]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d105      	bne.n	800156a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800155e:	4b56      	ldr	r3, [pc, #344]	; (80016b8 <HAL_RCC_OscConfig+0x4e8>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	4a55      	ldr	r2, [pc, #340]	; (80016b8 <HAL_RCC_OscConfig+0x4e8>)
 8001564:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001568:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 809b 	beq.w	80016aa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001574:	4b50      	ldr	r3, [pc, #320]	; (80016b8 <HAL_RCC_OscConfig+0x4e8>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f003 030c 	and.w	r3, r3, #12
 800157c:	2b08      	cmp	r3, #8
 800157e:	d05c      	beq.n	800163a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	2b02      	cmp	r3, #2
 8001586:	d141      	bne.n	800160c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001588:	4b4c      	ldr	r3, [pc, #304]	; (80016bc <HAL_RCC_OscConfig+0x4ec>)
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158e:	f7ff fb61 	bl	8000c54 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001596:	f7ff fb5d 	bl	8000c54 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e081      	b.n	80016ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a8:	4b43      	ldr	r3, [pc, #268]	; (80016b8 <HAL_RCC_OscConfig+0x4e8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1f0      	bne.n	8001596 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	69da      	ldr	r2, [r3, #28]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a1b      	ldr	r3, [r3, #32]
 80015bc:	431a      	orrs	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c2:	019b      	lsls	r3, r3, #6
 80015c4:	431a      	orrs	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ca:	085b      	lsrs	r3, r3, #1
 80015cc:	3b01      	subs	r3, #1
 80015ce:	041b      	lsls	r3, r3, #16
 80015d0:	431a      	orrs	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d6:	061b      	lsls	r3, r3, #24
 80015d8:	4937      	ldr	r1, [pc, #220]	; (80016b8 <HAL_RCC_OscConfig+0x4e8>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015de:	4b37      	ldr	r3, [pc, #220]	; (80016bc <HAL_RCC_OscConfig+0x4ec>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e4:	f7ff fb36 	bl	8000c54 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ec:	f7ff fb32 	bl	8000c54 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e056      	b.n	80016ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015fe:	4b2e      	ldr	r3, [pc, #184]	; (80016b8 <HAL_RCC_OscConfig+0x4e8>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0f0      	beq.n	80015ec <HAL_RCC_OscConfig+0x41c>
 800160a:	e04e      	b.n	80016aa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800160c:	4b2b      	ldr	r3, [pc, #172]	; (80016bc <HAL_RCC_OscConfig+0x4ec>)
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001612:	f7ff fb1f 	bl	8000c54 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800161a:	f7ff fb1b 	bl	8000c54 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e03f      	b.n	80016ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800162c:	4b22      	ldr	r3, [pc, #136]	; (80016b8 <HAL_RCC_OscConfig+0x4e8>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1f0      	bne.n	800161a <HAL_RCC_OscConfig+0x44a>
 8001638:	e037      	b.n	80016aa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d101      	bne.n	8001646 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e032      	b.n	80016ac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001646:	4b1c      	ldr	r3, [pc, #112]	; (80016b8 <HAL_RCC_OscConfig+0x4e8>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d028      	beq.n	80016a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800165e:	429a      	cmp	r2, r3
 8001660:	d121      	bne.n	80016a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800166c:	429a      	cmp	r2, r3
 800166e:	d11a      	bne.n	80016a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001676:	4013      	ands	r3, r2
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800167c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800167e:	4293      	cmp	r3, r2
 8001680:	d111      	bne.n	80016a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168c:	085b      	lsrs	r3, r3, #1
 800168e:	3b01      	subs	r3, #1
 8001690:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001692:	429a      	cmp	r2, r3
 8001694:	d107      	bne.n	80016a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d001      	beq.n	80016aa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e000      	b.n	80016ac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40007000 	.word	0x40007000
 80016b8:	40023800 	.word	0x40023800
 80016bc:	42470060 	.word	0x42470060

080016c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e0cc      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016d4:	4b68      	ldr	r3, [pc, #416]	; (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d90c      	bls.n	80016fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e2:	4b65      	ldr	r3, [pc, #404]	; (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	b2d2      	uxtb	r2, r2
 80016e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ea:	4b63      	ldr	r3, [pc, #396]	; (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d001      	beq.n	80016fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0b8      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d020      	beq.n	800174a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001714:	4b59      	ldr	r3, [pc, #356]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	4a58      	ldr	r2, [pc, #352]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800171e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0308 	and.w	r3, r3, #8
 8001728:	2b00      	cmp	r3, #0
 800172a:	d005      	beq.n	8001738 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800172c:	4b53      	ldr	r3, [pc, #332]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	4a52      	ldr	r2, [pc, #328]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001736:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001738:	4b50      	ldr	r3, [pc, #320]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	494d      	ldr	r1, [pc, #308]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	4313      	orrs	r3, r2
 8001748:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b00      	cmp	r3, #0
 8001754:	d044      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d107      	bne.n	800176e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175e:	4b47      	ldr	r3, [pc, #284]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d119      	bne.n	800179e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e07f      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b02      	cmp	r3, #2
 8001774:	d003      	beq.n	800177e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800177a:	2b03      	cmp	r3, #3
 800177c:	d107      	bne.n	800178e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800177e:	4b3f      	ldr	r3, [pc, #252]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d109      	bne.n	800179e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e06f      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178e:	4b3b      	ldr	r3, [pc, #236]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e067      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800179e:	4b37      	ldr	r3, [pc, #220]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f023 0203 	bic.w	r2, r3, #3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	4934      	ldr	r1, [pc, #208]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017b0:	f7ff fa50 	bl	8000c54 <HAL_GetTick>
 80017b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b6:	e00a      	b.n	80017ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b8:	f7ff fa4c 	bl	8000c54 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e04f      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ce:	4b2b      	ldr	r3, [pc, #172]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 020c 	and.w	r2, r3, #12
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	429a      	cmp	r2, r3
 80017de:	d1eb      	bne.n	80017b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017e0:	4b25      	ldr	r3, [pc, #148]	; (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d20c      	bcs.n	8001808 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ee:	4b22      	ldr	r3, [pc, #136]	; (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f6:	4b20      	ldr	r3, [pc, #128]	; (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	429a      	cmp	r2, r3
 8001802:	d001      	beq.n	8001808 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e032      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	d008      	beq.n	8001826 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001814:	4b19      	ldr	r3, [pc, #100]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	4916      	ldr	r1, [pc, #88]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	4313      	orrs	r3, r2
 8001824:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	2b00      	cmp	r3, #0
 8001830:	d009      	beq.n	8001846 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001832:	4b12      	ldr	r3, [pc, #72]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	490e      	ldr	r1, [pc, #56]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	4313      	orrs	r3, r2
 8001844:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001846:	f000 f821 	bl	800188c <HAL_RCC_GetSysClockFreq>
 800184a:	4602      	mov	r2, r0
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	091b      	lsrs	r3, r3, #4
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	490a      	ldr	r1, [pc, #40]	; (8001880 <HAL_RCC_ClockConfig+0x1c0>)
 8001858:	5ccb      	ldrb	r3, [r1, r3]
 800185a:	fa22 f303 	lsr.w	r3, r2, r3
 800185e:	4a09      	ldr	r2, [pc, #36]	; (8001884 <HAL_RCC_ClockConfig+0x1c4>)
 8001860:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001862:	4b09      	ldr	r3, [pc, #36]	; (8001888 <HAL_RCC_ClockConfig+0x1c8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff f8d2 	bl	8000a10 <HAL_InitTick>

  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40023c00 	.word	0x40023c00
 800187c:	40023800 	.word	0x40023800
 8001880:	080046a0 	.word	0x080046a0
 8001884:	20000000 	.word	0x20000000
 8001888:	20000004 	.word	0x20000004

0800188c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800188c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001890:	b084      	sub	sp, #16
 8001892:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001894:	2300      	movs	r3, #0
 8001896:	607b      	str	r3, [r7, #4]
 8001898:	2300      	movs	r3, #0
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	2300      	movs	r3, #0
 800189e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018a4:	4b67      	ldr	r3, [pc, #412]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 030c 	and.w	r3, r3, #12
 80018ac:	2b08      	cmp	r3, #8
 80018ae:	d00d      	beq.n	80018cc <HAL_RCC_GetSysClockFreq+0x40>
 80018b0:	2b08      	cmp	r3, #8
 80018b2:	f200 80bd 	bhi.w	8001a30 <HAL_RCC_GetSysClockFreq+0x1a4>
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d002      	beq.n	80018c0 <HAL_RCC_GetSysClockFreq+0x34>
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	d003      	beq.n	80018c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80018be:	e0b7      	b.n	8001a30 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018c0:	4b61      	ldr	r3, [pc, #388]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80018c2:	60bb      	str	r3, [r7, #8]
       break;
 80018c4:	e0b7      	b.n	8001a36 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018c6:	4b61      	ldr	r3, [pc, #388]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80018c8:	60bb      	str	r3, [r7, #8]
      break;
 80018ca:	e0b4      	b.n	8001a36 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018cc:	4b5d      	ldr	r3, [pc, #372]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018d6:	4b5b      	ldr	r3, [pc, #364]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d04d      	beq.n	800197e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018e2:	4b58      	ldr	r3, [pc, #352]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	099b      	lsrs	r3, r3, #6
 80018e8:	461a      	mov	r2, r3
 80018ea:	f04f 0300 	mov.w	r3, #0
 80018ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80018f2:	f04f 0100 	mov.w	r1, #0
 80018f6:	ea02 0800 	and.w	r8, r2, r0
 80018fa:	ea03 0901 	and.w	r9, r3, r1
 80018fe:	4640      	mov	r0, r8
 8001900:	4649      	mov	r1, r9
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	f04f 0300 	mov.w	r3, #0
 800190a:	014b      	lsls	r3, r1, #5
 800190c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001910:	0142      	lsls	r2, r0, #5
 8001912:	4610      	mov	r0, r2
 8001914:	4619      	mov	r1, r3
 8001916:	ebb0 0008 	subs.w	r0, r0, r8
 800191a:	eb61 0109 	sbc.w	r1, r1, r9
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	f04f 0300 	mov.w	r3, #0
 8001926:	018b      	lsls	r3, r1, #6
 8001928:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800192c:	0182      	lsls	r2, r0, #6
 800192e:	1a12      	subs	r2, r2, r0
 8001930:	eb63 0301 	sbc.w	r3, r3, r1
 8001934:	f04f 0000 	mov.w	r0, #0
 8001938:	f04f 0100 	mov.w	r1, #0
 800193c:	00d9      	lsls	r1, r3, #3
 800193e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001942:	00d0      	lsls	r0, r2, #3
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	eb12 0208 	adds.w	r2, r2, r8
 800194c:	eb43 0309 	adc.w	r3, r3, r9
 8001950:	f04f 0000 	mov.w	r0, #0
 8001954:	f04f 0100 	mov.w	r1, #0
 8001958:	0259      	lsls	r1, r3, #9
 800195a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800195e:	0250      	lsls	r0, r2, #9
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4610      	mov	r0, r2
 8001966:	4619      	mov	r1, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	461a      	mov	r2, r3
 800196c:	f04f 0300 	mov.w	r3, #0
 8001970:	f7fe fc86 	bl	8000280 <__aeabi_uldivmod>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4613      	mov	r3, r2
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	e04a      	b.n	8001a14 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800197e:	4b31      	ldr	r3, [pc, #196]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	099b      	lsrs	r3, r3, #6
 8001984:	461a      	mov	r2, r3
 8001986:	f04f 0300 	mov.w	r3, #0
 800198a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800198e:	f04f 0100 	mov.w	r1, #0
 8001992:	ea02 0400 	and.w	r4, r2, r0
 8001996:	ea03 0501 	and.w	r5, r3, r1
 800199a:	4620      	mov	r0, r4
 800199c:	4629      	mov	r1, r5
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	f04f 0300 	mov.w	r3, #0
 80019a6:	014b      	lsls	r3, r1, #5
 80019a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019ac:	0142      	lsls	r2, r0, #5
 80019ae:	4610      	mov	r0, r2
 80019b0:	4619      	mov	r1, r3
 80019b2:	1b00      	subs	r0, r0, r4
 80019b4:	eb61 0105 	sbc.w	r1, r1, r5
 80019b8:	f04f 0200 	mov.w	r2, #0
 80019bc:	f04f 0300 	mov.w	r3, #0
 80019c0:	018b      	lsls	r3, r1, #6
 80019c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019c6:	0182      	lsls	r2, r0, #6
 80019c8:	1a12      	subs	r2, r2, r0
 80019ca:	eb63 0301 	sbc.w	r3, r3, r1
 80019ce:	f04f 0000 	mov.w	r0, #0
 80019d2:	f04f 0100 	mov.w	r1, #0
 80019d6:	00d9      	lsls	r1, r3, #3
 80019d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019dc:	00d0      	lsls	r0, r2, #3
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	1912      	adds	r2, r2, r4
 80019e4:	eb45 0303 	adc.w	r3, r5, r3
 80019e8:	f04f 0000 	mov.w	r0, #0
 80019ec:	f04f 0100 	mov.w	r1, #0
 80019f0:	0299      	lsls	r1, r3, #10
 80019f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80019f6:	0290      	lsls	r0, r2, #10
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4610      	mov	r0, r2
 80019fe:	4619      	mov	r1, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	461a      	mov	r2, r3
 8001a04:	f04f 0300 	mov.w	r3, #0
 8001a08:	f7fe fc3a 	bl	8000280 <__aeabi_uldivmod>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4613      	mov	r3, r2
 8001a12:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	0c1b      	lsrs	r3, r3, #16
 8001a1a:	f003 0303 	and.w	r3, r3, #3
 8001a1e:	3301      	adds	r3, #1
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2c:	60bb      	str	r3, [r7, #8]
      break;
 8001a2e:	e002      	b.n	8001a36 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a32:	60bb      	str	r3, [r7, #8]
      break;
 8001a34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a36:	68bb      	ldr	r3, [r7, #8]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a42:	bf00      	nop
 8001a44:	40023800 	.word	0x40023800
 8001a48:	00f42400 	.word	0x00f42400
 8001a4c:	007a1200 	.word	0x007a1200

08001a50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a54:	4b03      	ldr	r3, [pc, #12]	; (8001a64 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a56:	681b      	ldr	r3, [r3, #0]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	20000000 	.word	0x20000000

08001a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a6c:	f7ff fff0 	bl	8001a50 <HAL_RCC_GetHCLKFreq>
 8001a70:	4602      	mov	r2, r0
 8001a72:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	0a9b      	lsrs	r3, r3, #10
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	4903      	ldr	r1, [pc, #12]	; (8001a8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a7e:	5ccb      	ldrb	r3, [r1, r3]
 8001a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	080046b0 	.word	0x080046b0

08001a90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a94:	f7ff ffdc 	bl	8001a50 <HAL_RCC_GetHCLKFreq>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	0b5b      	lsrs	r3, r3, #13
 8001aa0:	f003 0307 	and.w	r3, r3, #7
 8001aa4:	4903      	ldr	r1, [pc, #12]	; (8001ab4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aa6:	5ccb      	ldrb	r3, [r1, r3]
 8001aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	080046b0 	.word	0x080046b0

08001ab8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	220f      	movs	r2, #15
 8001ac6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ac8:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <HAL_RCC_GetClockConfig+0x5c>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 0203 	and.w	r2, r3, #3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ad4:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <HAL_RCC_GetClockConfig+0x5c>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <HAL_RCC_GetClockConfig+0x5c>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001aec:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <HAL_RCC_GetClockConfig+0x5c>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	08db      	lsrs	r3, r3, #3
 8001af2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001afa:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <HAL_RCC_GetClockConfig+0x60>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0207 	and.w	r2, r3, #7
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	601a      	str	r2, [r3, #0]
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40023c00 	.word	0x40023c00

08001b1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e041      	b.n	8001bb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d106      	bne.n	8001b48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 f839 	bl	8001bba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3304      	adds	r3, #4
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4610      	mov	r0, r2
 8001b5c:	f000 f9d8 	bl	8001f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
	...

08001bd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d001      	beq.n	8001be8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e04e      	b.n	8001c86 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2202      	movs	r2, #2
 8001bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68da      	ldr	r2, [r3, #12]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f042 0201 	orr.w	r2, r2, #1
 8001bfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a23      	ldr	r2, [pc, #140]	; (8001c94 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d022      	beq.n	8001c50 <HAL_TIM_Base_Start_IT+0x80>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c12:	d01d      	beq.n	8001c50 <HAL_TIM_Base_Start_IT+0x80>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a1f      	ldr	r2, [pc, #124]	; (8001c98 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d018      	beq.n	8001c50 <HAL_TIM_Base_Start_IT+0x80>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a1e      	ldr	r2, [pc, #120]	; (8001c9c <HAL_TIM_Base_Start_IT+0xcc>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d013      	beq.n	8001c50 <HAL_TIM_Base_Start_IT+0x80>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a1c      	ldr	r2, [pc, #112]	; (8001ca0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d00e      	beq.n	8001c50 <HAL_TIM_Base_Start_IT+0x80>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a1b      	ldr	r2, [pc, #108]	; (8001ca4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d009      	beq.n	8001c50 <HAL_TIM_Base_Start_IT+0x80>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a19      	ldr	r2, [pc, #100]	; (8001ca8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d004      	beq.n	8001c50 <HAL_TIM_Base_Start_IT+0x80>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a18      	ldr	r2, [pc, #96]	; (8001cac <HAL_TIM_Base_Start_IT+0xdc>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d111      	bne.n	8001c74 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2b06      	cmp	r3, #6
 8001c60:	d010      	beq.n	8001c84 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f042 0201 	orr.w	r2, r2, #1
 8001c70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c72:	e007      	b.n	8001c84 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f042 0201 	orr.w	r2, r2, #1
 8001c82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	40010000 	.word	0x40010000
 8001c98:	40000400 	.word	0x40000400
 8001c9c:	40000800 	.word	0x40000800
 8001ca0:	40000c00 	.word	0x40000c00
 8001ca4:	40010400 	.word	0x40010400
 8001ca8:	40014000 	.word	0x40014000
 8001cac:	40001800 	.word	0x40001800

08001cb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d122      	bne.n	8001d0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d11b      	bne.n	8001d0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f06f 0202 	mvn.w	r2, #2
 8001cdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f8ee 	bl	8001ed4 <HAL_TIM_IC_CaptureCallback>
 8001cf8:	e005      	b.n	8001d06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f8e0 	bl	8001ec0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f8f1 	bl	8001ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	f003 0304 	and.w	r3, r3, #4
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	d122      	bne.n	8001d60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	d11b      	bne.n	8001d60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f06f 0204 	mvn.w	r2, #4
 8001d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2202      	movs	r2, #2
 8001d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f8c4 	bl	8001ed4 <HAL_TIM_IC_CaptureCallback>
 8001d4c:	e005      	b.n	8001d5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f8b6 	bl	8001ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 f8c7 	bl	8001ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d122      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	f003 0308 	and.w	r3, r3, #8
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d11b      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f06f 0208 	mvn.w	r2, #8
 8001d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2204      	movs	r2, #4
 8001d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f89a 	bl	8001ed4 <HAL_TIM_IC_CaptureCallback>
 8001da0:	e005      	b.n	8001dae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f88c 	bl	8001ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 f89d 	bl	8001ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	f003 0310 	and.w	r3, r3, #16
 8001dbe:	2b10      	cmp	r3, #16
 8001dc0:	d122      	bne.n	8001e08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	f003 0310 	and.w	r3, r3, #16
 8001dcc:	2b10      	cmp	r3, #16
 8001dce:	d11b      	bne.n	8001e08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f06f 0210 	mvn.w	r2, #16
 8001dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2208      	movs	r2, #8
 8001dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f870 	bl	8001ed4 <HAL_TIM_IC_CaptureCallback>
 8001df4:	e005      	b.n	8001e02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f862 	bl	8001ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 f873 	bl	8001ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d10e      	bne.n	8001e34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d107      	bne.n	8001e34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f06f 0201 	mvn.w	r2, #1
 8001e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7fe fd66 	bl	8000900 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e3e:	2b80      	cmp	r3, #128	; 0x80
 8001e40:	d10e      	bne.n	8001e60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e4c:	2b80      	cmp	r3, #128	; 0x80
 8001e4e:	d107      	bne.n	8001e60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f902 	bl	8002064 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e6a:	2b40      	cmp	r3, #64	; 0x40
 8001e6c:	d10e      	bne.n	8001e8c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e78:	2b40      	cmp	r3, #64	; 0x40
 8001e7a:	d107      	bne.n	8001e8c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f838 	bl	8001efc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	f003 0320 	and.w	r3, r3, #32
 8001e96:	2b20      	cmp	r3, #32
 8001e98:	d10e      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	f003 0320 	and.w	r3, r3, #32
 8001ea4:	2b20      	cmp	r3, #32
 8001ea6:	d107      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f06f 0220 	mvn.w	r2, #32
 8001eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f8cc 	bl	8002050 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001eb8:	bf00      	nop
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a40      	ldr	r2, [pc, #256]	; (8002024 <TIM_Base_SetConfig+0x114>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d013      	beq.n	8001f50 <TIM_Base_SetConfig+0x40>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f2e:	d00f      	beq.n	8001f50 <TIM_Base_SetConfig+0x40>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a3d      	ldr	r2, [pc, #244]	; (8002028 <TIM_Base_SetConfig+0x118>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d00b      	beq.n	8001f50 <TIM_Base_SetConfig+0x40>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a3c      	ldr	r2, [pc, #240]	; (800202c <TIM_Base_SetConfig+0x11c>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d007      	beq.n	8001f50 <TIM_Base_SetConfig+0x40>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a3b      	ldr	r2, [pc, #236]	; (8002030 <TIM_Base_SetConfig+0x120>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d003      	beq.n	8001f50 <TIM_Base_SetConfig+0x40>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a3a      	ldr	r2, [pc, #232]	; (8002034 <TIM_Base_SetConfig+0x124>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d108      	bne.n	8001f62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a2f      	ldr	r2, [pc, #188]	; (8002024 <TIM_Base_SetConfig+0x114>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d02b      	beq.n	8001fc2 <TIM_Base_SetConfig+0xb2>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f70:	d027      	beq.n	8001fc2 <TIM_Base_SetConfig+0xb2>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a2c      	ldr	r2, [pc, #176]	; (8002028 <TIM_Base_SetConfig+0x118>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d023      	beq.n	8001fc2 <TIM_Base_SetConfig+0xb2>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a2b      	ldr	r2, [pc, #172]	; (800202c <TIM_Base_SetConfig+0x11c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d01f      	beq.n	8001fc2 <TIM_Base_SetConfig+0xb2>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a2a      	ldr	r2, [pc, #168]	; (8002030 <TIM_Base_SetConfig+0x120>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d01b      	beq.n	8001fc2 <TIM_Base_SetConfig+0xb2>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a29      	ldr	r2, [pc, #164]	; (8002034 <TIM_Base_SetConfig+0x124>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d017      	beq.n	8001fc2 <TIM_Base_SetConfig+0xb2>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a28      	ldr	r2, [pc, #160]	; (8002038 <TIM_Base_SetConfig+0x128>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d013      	beq.n	8001fc2 <TIM_Base_SetConfig+0xb2>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a27      	ldr	r2, [pc, #156]	; (800203c <TIM_Base_SetConfig+0x12c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d00f      	beq.n	8001fc2 <TIM_Base_SetConfig+0xb2>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a26      	ldr	r2, [pc, #152]	; (8002040 <TIM_Base_SetConfig+0x130>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d00b      	beq.n	8001fc2 <TIM_Base_SetConfig+0xb2>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a25      	ldr	r2, [pc, #148]	; (8002044 <TIM_Base_SetConfig+0x134>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d007      	beq.n	8001fc2 <TIM_Base_SetConfig+0xb2>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a24      	ldr	r2, [pc, #144]	; (8002048 <TIM_Base_SetConfig+0x138>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d003      	beq.n	8001fc2 <TIM_Base_SetConfig+0xb2>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a23      	ldr	r2, [pc, #140]	; (800204c <TIM_Base_SetConfig+0x13c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d108      	bne.n	8001fd4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <TIM_Base_SetConfig+0x114>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d003      	beq.n	8002008 <TIM_Base_SetConfig+0xf8>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a0c      	ldr	r2, [pc, #48]	; (8002034 <TIM_Base_SetConfig+0x124>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d103      	bne.n	8002010 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	691a      	ldr	r2, [r3, #16]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	615a      	str	r2, [r3, #20]
}
 8002016:	bf00      	nop
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	40010000 	.word	0x40010000
 8002028:	40000400 	.word	0x40000400
 800202c:	40000800 	.word	0x40000800
 8002030:	40000c00 	.word	0x40000c00
 8002034:	40010400 	.word	0x40010400
 8002038:	40014000 	.word	0x40014000
 800203c:	40014400 	.word	0x40014400
 8002040:	40014800 	.word	0x40014800
 8002044:	40001800 	.word	0x40001800
 8002048:	40001c00 	.word	0x40001c00
 800204c:	40002000 	.word	0x40002000

08002050 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e03f      	b.n	800210a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d106      	bne.n	80020a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7fe fc6e 	bl	8000980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2224      	movs	r2, #36	; 0x24
 80020a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68da      	ldr	r2, [r3, #12]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 f929 	bl	8002314 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	691a      	ldr	r2, [r3, #16]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	695a      	ldr	r2, [r3, #20]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68da      	ldr	r2, [r3, #12]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2220      	movs	r2, #32
 80020fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2220      	movs	r2, #32
 8002104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b08a      	sub	sp, #40	; 0x28
 8002116:	af02      	add	r7, sp, #8
 8002118:	60f8      	str	r0, [r7, #12]
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	603b      	str	r3, [r7, #0]
 800211e:	4613      	mov	r3, r2
 8002120:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b20      	cmp	r3, #32
 8002130:	d17c      	bne.n	800222c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d002      	beq.n	800213e <HAL_UART_Transmit+0x2c>
 8002138:	88fb      	ldrh	r3, [r7, #6]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e075      	b.n	800222e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002148:	2b01      	cmp	r3, #1
 800214a:	d101      	bne.n	8002150 <HAL_UART_Transmit+0x3e>
 800214c:	2302      	movs	r3, #2
 800214e:	e06e      	b.n	800222e <HAL_UART_Transmit+0x11c>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2221      	movs	r2, #33	; 0x21
 8002162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002166:	f7fe fd75 	bl	8000c54 <HAL_GetTick>
 800216a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	88fa      	ldrh	r2, [r7, #6]
 8002170:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	88fa      	ldrh	r2, [r7, #6]
 8002176:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002180:	d108      	bne.n	8002194 <HAL_UART_Transmit+0x82>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d104      	bne.n	8002194 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800218a:	2300      	movs	r3, #0
 800218c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	61bb      	str	r3, [r7, #24]
 8002192:	e003      	b.n	800219c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002198:	2300      	movs	r3, #0
 800219a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80021a4:	e02a      	b.n	80021fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	2200      	movs	r2, #0
 80021ae:	2180      	movs	r1, #128	; 0x80
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f000 f840 	bl	8002236 <UART_WaitOnFlagUntilTimeout>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e036      	b.n	800222e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10b      	bne.n	80021de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	461a      	mov	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	3302      	adds	r3, #2
 80021da:	61bb      	str	r3, [r7, #24]
 80021dc:	e007      	b.n	80021ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	781a      	ldrb	r2, [r3, #0]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	3301      	adds	r3, #1
 80021ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	3b01      	subs	r3, #1
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002200:	b29b      	uxth	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1cf      	bne.n	80021a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	2200      	movs	r2, #0
 800220e:	2140      	movs	r1, #64	; 0x40
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f000 f810 	bl	8002236 <UART_WaitOnFlagUntilTimeout>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e006      	b.n	800222e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2220      	movs	r2, #32
 8002224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002228:	2300      	movs	r3, #0
 800222a:	e000      	b.n	800222e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800222c:	2302      	movs	r3, #2
  }
}
 800222e:	4618      	mov	r0, r3
 8002230:	3720      	adds	r7, #32
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b090      	sub	sp, #64	; 0x40
 800223a:	af00      	add	r7, sp, #0
 800223c:	60f8      	str	r0, [r7, #12]
 800223e:	60b9      	str	r1, [r7, #8]
 8002240:	603b      	str	r3, [r7, #0]
 8002242:	4613      	mov	r3, r2
 8002244:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002246:	e050      	b.n	80022ea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002248:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800224a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800224e:	d04c      	beq.n	80022ea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002252:	2b00      	cmp	r3, #0
 8002254:	d007      	beq.n	8002266 <UART_WaitOnFlagUntilTimeout+0x30>
 8002256:	f7fe fcfd 	bl	8000c54 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002262:	429a      	cmp	r2, r3
 8002264:	d241      	bcs.n	80022ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	330c      	adds	r3, #12
 800226c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800226e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002270:	e853 3f00 	ldrex	r3, [r3]
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800227c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	330c      	adds	r3, #12
 8002284:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002286:	637a      	str	r2, [r7, #52]	; 0x34
 8002288:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800228a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800228c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800228e:	e841 2300 	strex	r3, r2, [r1]
 8002292:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1e5      	bne.n	8002266 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	3314      	adds	r3, #20
 80022a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	e853 3f00 	ldrex	r3, [r3]
 80022a8:	613b      	str	r3, [r7, #16]
   return(result);
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	f023 0301 	bic.w	r3, r3, #1
 80022b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	3314      	adds	r3, #20
 80022b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022ba:	623a      	str	r2, [r7, #32]
 80022bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022be:	69f9      	ldr	r1, [r7, #28]
 80022c0:	6a3a      	ldr	r2, [r7, #32]
 80022c2:	e841 2300 	strex	r3, r2, [r1]
 80022c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1e5      	bne.n	800229a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2220      	movs	r2, #32
 80022d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2220      	movs	r2, #32
 80022da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e00f      	b.n	800230a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	4013      	ands	r3, r2
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	bf0c      	ite	eq
 80022fa:	2301      	moveq	r3, #1
 80022fc:	2300      	movne	r3, #0
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	461a      	mov	r2, r3
 8002302:	79fb      	ldrb	r3, [r7, #7]
 8002304:	429a      	cmp	r2, r3
 8002306:	d09f      	beq.n	8002248 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3740      	adds	r7, #64	; 0x40
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
	...

08002314 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002318:	b09f      	sub	sp, #124	; 0x7c
 800231a:	af00      	add	r7, sp, #0
 800231c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800231e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800232a:	68d9      	ldr	r1, [r3, #12]
 800232c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	ea40 0301 	orr.w	r3, r0, r1
 8002334:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	431a      	orrs	r2, r3
 8002340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	431a      	orrs	r2, r3
 8002346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	4313      	orrs	r3, r2
 800234c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800234e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002358:	f021 010c 	bic.w	r1, r1, #12
 800235c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002362:	430b      	orrs	r3, r1
 8002364:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002372:	6999      	ldr	r1, [r3, #24]
 8002374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	ea40 0301 	orr.w	r3, r0, r1
 800237c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800237e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	4bc5      	ldr	r3, [pc, #788]	; (8002698 <UART_SetConfig+0x384>)
 8002384:	429a      	cmp	r2, r3
 8002386:	d004      	beq.n	8002392 <UART_SetConfig+0x7e>
 8002388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	4bc3      	ldr	r3, [pc, #780]	; (800269c <UART_SetConfig+0x388>)
 800238e:	429a      	cmp	r2, r3
 8002390:	d103      	bne.n	800239a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002392:	f7ff fb7d 	bl	8001a90 <HAL_RCC_GetPCLK2Freq>
 8002396:	6778      	str	r0, [r7, #116]	; 0x74
 8002398:	e002      	b.n	80023a0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800239a:	f7ff fb65 	bl	8001a68 <HAL_RCC_GetPCLK1Freq>
 800239e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023a2:	69db      	ldr	r3, [r3, #28]
 80023a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023a8:	f040 80b6 	bne.w	8002518 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023ae:	461c      	mov	r4, r3
 80023b0:	f04f 0500 	mov.w	r5, #0
 80023b4:	4622      	mov	r2, r4
 80023b6:	462b      	mov	r3, r5
 80023b8:	1891      	adds	r1, r2, r2
 80023ba:	6439      	str	r1, [r7, #64]	; 0x40
 80023bc:	415b      	adcs	r3, r3
 80023be:	647b      	str	r3, [r7, #68]	; 0x44
 80023c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80023c4:	1912      	adds	r2, r2, r4
 80023c6:	eb45 0303 	adc.w	r3, r5, r3
 80023ca:	f04f 0000 	mov.w	r0, #0
 80023ce:	f04f 0100 	mov.w	r1, #0
 80023d2:	00d9      	lsls	r1, r3, #3
 80023d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80023d8:	00d0      	lsls	r0, r2, #3
 80023da:	4602      	mov	r2, r0
 80023dc:	460b      	mov	r3, r1
 80023de:	1911      	adds	r1, r2, r4
 80023e0:	6639      	str	r1, [r7, #96]	; 0x60
 80023e2:	416b      	adcs	r3, r5
 80023e4:	667b      	str	r3, [r7, #100]	; 0x64
 80023e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	461a      	mov	r2, r3
 80023ec:	f04f 0300 	mov.w	r3, #0
 80023f0:	1891      	adds	r1, r2, r2
 80023f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80023f4:	415b      	adcs	r3, r3
 80023f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80023fc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002400:	f7fd ff3e 	bl	8000280 <__aeabi_uldivmod>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	4ba5      	ldr	r3, [pc, #660]	; (80026a0 <UART_SetConfig+0x38c>)
 800240a:	fba3 2302 	umull	r2, r3, r3, r2
 800240e:	095b      	lsrs	r3, r3, #5
 8002410:	011e      	lsls	r6, r3, #4
 8002412:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002414:	461c      	mov	r4, r3
 8002416:	f04f 0500 	mov.w	r5, #0
 800241a:	4622      	mov	r2, r4
 800241c:	462b      	mov	r3, r5
 800241e:	1891      	adds	r1, r2, r2
 8002420:	6339      	str	r1, [r7, #48]	; 0x30
 8002422:	415b      	adcs	r3, r3
 8002424:	637b      	str	r3, [r7, #52]	; 0x34
 8002426:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800242a:	1912      	adds	r2, r2, r4
 800242c:	eb45 0303 	adc.w	r3, r5, r3
 8002430:	f04f 0000 	mov.w	r0, #0
 8002434:	f04f 0100 	mov.w	r1, #0
 8002438:	00d9      	lsls	r1, r3, #3
 800243a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800243e:	00d0      	lsls	r0, r2, #3
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	1911      	adds	r1, r2, r4
 8002446:	65b9      	str	r1, [r7, #88]	; 0x58
 8002448:	416b      	adcs	r3, r5
 800244a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800244c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	461a      	mov	r2, r3
 8002452:	f04f 0300 	mov.w	r3, #0
 8002456:	1891      	adds	r1, r2, r2
 8002458:	62b9      	str	r1, [r7, #40]	; 0x28
 800245a:	415b      	adcs	r3, r3
 800245c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800245e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002462:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002466:	f7fd ff0b 	bl	8000280 <__aeabi_uldivmod>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	4b8c      	ldr	r3, [pc, #560]	; (80026a0 <UART_SetConfig+0x38c>)
 8002470:	fba3 1302 	umull	r1, r3, r3, r2
 8002474:	095b      	lsrs	r3, r3, #5
 8002476:	2164      	movs	r1, #100	; 0x64
 8002478:	fb01 f303 	mul.w	r3, r1, r3
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	3332      	adds	r3, #50	; 0x32
 8002482:	4a87      	ldr	r2, [pc, #540]	; (80026a0 <UART_SetConfig+0x38c>)
 8002484:	fba2 2303 	umull	r2, r3, r2, r3
 8002488:	095b      	lsrs	r3, r3, #5
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002490:	441e      	add	r6, r3
 8002492:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002494:	4618      	mov	r0, r3
 8002496:	f04f 0100 	mov.w	r1, #0
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	1894      	adds	r4, r2, r2
 80024a0:	623c      	str	r4, [r7, #32]
 80024a2:	415b      	adcs	r3, r3
 80024a4:	627b      	str	r3, [r7, #36]	; 0x24
 80024a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024aa:	1812      	adds	r2, r2, r0
 80024ac:	eb41 0303 	adc.w	r3, r1, r3
 80024b0:	f04f 0400 	mov.w	r4, #0
 80024b4:	f04f 0500 	mov.w	r5, #0
 80024b8:	00dd      	lsls	r5, r3, #3
 80024ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80024be:	00d4      	lsls	r4, r2, #3
 80024c0:	4622      	mov	r2, r4
 80024c2:	462b      	mov	r3, r5
 80024c4:	1814      	adds	r4, r2, r0
 80024c6:	653c      	str	r4, [r7, #80]	; 0x50
 80024c8:	414b      	adcs	r3, r1
 80024ca:	657b      	str	r3, [r7, #84]	; 0x54
 80024cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	461a      	mov	r2, r3
 80024d2:	f04f 0300 	mov.w	r3, #0
 80024d6:	1891      	adds	r1, r2, r2
 80024d8:	61b9      	str	r1, [r7, #24]
 80024da:	415b      	adcs	r3, r3
 80024dc:	61fb      	str	r3, [r7, #28]
 80024de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024e2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80024e6:	f7fd fecb 	bl	8000280 <__aeabi_uldivmod>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	4b6c      	ldr	r3, [pc, #432]	; (80026a0 <UART_SetConfig+0x38c>)
 80024f0:	fba3 1302 	umull	r1, r3, r3, r2
 80024f4:	095b      	lsrs	r3, r3, #5
 80024f6:	2164      	movs	r1, #100	; 0x64
 80024f8:	fb01 f303 	mul.w	r3, r1, r3
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	3332      	adds	r3, #50	; 0x32
 8002502:	4a67      	ldr	r2, [pc, #412]	; (80026a0 <UART_SetConfig+0x38c>)
 8002504:	fba2 2303 	umull	r2, r3, r2, r3
 8002508:	095b      	lsrs	r3, r3, #5
 800250a:	f003 0207 	and.w	r2, r3, #7
 800250e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4432      	add	r2, r6
 8002514:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002516:	e0b9      	b.n	800268c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002518:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800251a:	461c      	mov	r4, r3
 800251c:	f04f 0500 	mov.w	r5, #0
 8002520:	4622      	mov	r2, r4
 8002522:	462b      	mov	r3, r5
 8002524:	1891      	adds	r1, r2, r2
 8002526:	6139      	str	r1, [r7, #16]
 8002528:	415b      	adcs	r3, r3
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002530:	1912      	adds	r2, r2, r4
 8002532:	eb45 0303 	adc.w	r3, r5, r3
 8002536:	f04f 0000 	mov.w	r0, #0
 800253a:	f04f 0100 	mov.w	r1, #0
 800253e:	00d9      	lsls	r1, r3, #3
 8002540:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002544:	00d0      	lsls	r0, r2, #3
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	eb12 0804 	adds.w	r8, r2, r4
 800254e:	eb43 0905 	adc.w	r9, r3, r5
 8002552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	4618      	mov	r0, r3
 8002558:	f04f 0100 	mov.w	r1, #0
 800255c:	f04f 0200 	mov.w	r2, #0
 8002560:	f04f 0300 	mov.w	r3, #0
 8002564:	008b      	lsls	r3, r1, #2
 8002566:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800256a:	0082      	lsls	r2, r0, #2
 800256c:	4640      	mov	r0, r8
 800256e:	4649      	mov	r1, r9
 8002570:	f7fd fe86 	bl	8000280 <__aeabi_uldivmod>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	4b49      	ldr	r3, [pc, #292]	; (80026a0 <UART_SetConfig+0x38c>)
 800257a:	fba3 2302 	umull	r2, r3, r3, r2
 800257e:	095b      	lsrs	r3, r3, #5
 8002580:	011e      	lsls	r6, r3, #4
 8002582:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002584:	4618      	mov	r0, r3
 8002586:	f04f 0100 	mov.w	r1, #0
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	1894      	adds	r4, r2, r2
 8002590:	60bc      	str	r4, [r7, #8]
 8002592:	415b      	adcs	r3, r3
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800259a:	1812      	adds	r2, r2, r0
 800259c:	eb41 0303 	adc.w	r3, r1, r3
 80025a0:	f04f 0400 	mov.w	r4, #0
 80025a4:	f04f 0500 	mov.w	r5, #0
 80025a8:	00dd      	lsls	r5, r3, #3
 80025aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80025ae:	00d4      	lsls	r4, r2, #3
 80025b0:	4622      	mov	r2, r4
 80025b2:	462b      	mov	r3, r5
 80025b4:	1814      	adds	r4, r2, r0
 80025b6:	64bc      	str	r4, [r7, #72]	; 0x48
 80025b8:	414b      	adcs	r3, r1
 80025ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f04f 0100 	mov.w	r1, #0
 80025c6:	f04f 0200 	mov.w	r2, #0
 80025ca:	f04f 0300 	mov.w	r3, #0
 80025ce:	008b      	lsls	r3, r1, #2
 80025d0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80025d4:	0082      	lsls	r2, r0, #2
 80025d6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80025da:	f7fd fe51 	bl	8000280 <__aeabi_uldivmod>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	4b2f      	ldr	r3, [pc, #188]	; (80026a0 <UART_SetConfig+0x38c>)
 80025e4:	fba3 1302 	umull	r1, r3, r3, r2
 80025e8:	095b      	lsrs	r3, r3, #5
 80025ea:	2164      	movs	r1, #100	; 0x64
 80025ec:	fb01 f303 	mul.w	r3, r1, r3
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	011b      	lsls	r3, r3, #4
 80025f4:	3332      	adds	r3, #50	; 0x32
 80025f6:	4a2a      	ldr	r2, [pc, #168]	; (80026a0 <UART_SetConfig+0x38c>)
 80025f8:	fba2 2303 	umull	r2, r3, r2, r3
 80025fc:	095b      	lsrs	r3, r3, #5
 80025fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002602:	441e      	add	r6, r3
 8002604:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002606:	4618      	mov	r0, r3
 8002608:	f04f 0100 	mov.w	r1, #0
 800260c:	4602      	mov	r2, r0
 800260e:	460b      	mov	r3, r1
 8002610:	1894      	adds	r4, r2, r2
 8002612:	603c      	str	r4, [r7, #0]
 8002614:	415b      	adcs	r3, r3
 8002616:	607b      	str	r3, [r7, #4]
 8002618:	e9d7 2300 	ldrd	r2, r3, [r7]
 800261c:	1812      	adds	r2, r2, r0
 800261e:	eb41 0303 	adc.w	r3, r1, r3
 8002622:	f04f 0400 	mov.w	r4, #0
 8002626:	f04f 0500 	mov.w	r5, #0
 800262a:	00dd      	lsls	r5, r3, #3
 800262c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002630:	00d4      	lsls	r4, r2, #3
 8002632:	4622      	mov	r2, r4
 8002634:	462b      	mov	r3, r5
 8002636:	eb12 0a00 	adds.w	sl, r2, r0
 800263a:	eb43 0b01 	adc.w	fp, r3, r1
 800263e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	4618      	mov	r0, r3
 8002644:	f04f 0100 	mov.w	r1, #0
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	f04f 0300 	mov.w	r3, #0
 8002650:	008b      	lsls	r3, r1, #2
 8002652:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002656:	0082      	lsls	r2, r0, #2
 8002658:	4650      	mov	r0, sl
 800265a:	4659      	mov	r1, fp
 800265c:	f7fd fe10 	bl	8000280 <__aeabi_uldivmod>
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <UART_SetConfig+0x38c>)
 8002666:	fba3 1302 	umull	r1, r3, r3, r2
 800266a:	095b      	lsrs	r3, r3, #5
 800266c:	2164      	movs	r1, #100	; 0x64
 800266e:	fb01 f303 	mul.w	r3, r1, r3
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	011b      	lsls	r3, r3, #4
 8002676:	3332      	adds	r3, #50	; 0x32
 8002678:	4a09      	ldr	r2, [pc, #36]	; (80026a0 <UART_SetConfig+0x38c>)
 800267a:	fba2 2303 	umull	r2, r3, r2, r3
 800267e:	095b      	lsrs	r3, r3, #5
 8002680:	f003 020f 	and.w	r2, r3, #15
 8002684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4432      	add	r2, r6
 800268a:	609a      	str	r2, [r3, #8]
}
 800268c:	bf00      	nop
 800268e:	377c      	adds	r7, #124	; 0x7c
 8002690:	46bd      	mov	sp, r7
 8002692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002696:	bf00      	nop
 8002698:	40011000 	.word	0x40011000
 800269c:	40011400 	.word	0x40011400
 80026a0:	51eb851f 	.word	0x51eb851f

080026a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f103 0208 	add.w	r2, r3, #8
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f04f 32ff 	mov.w	r2, #4294967295
 80026bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f103 0208 	add.w	r2, r3, #8
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f103 0208 	add.w	r2, r3, #8
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026fe:	b480      	push	{r7}
 8002700:	b085      	sub	sp, #20
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
 8002706:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	1c5a      	adds	r2, r3, #1
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	601a      	str	r2, [r3, #0]
}
 800273a:	bf00      	nop
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002746:	b480      	push	{r7}
 8002748:	b085      	sub	sp, #20
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
 800274e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275c:	d103      	bne.n	8002766 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	e00c      	b.n	8002780 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	3308      	adds	r3, #8
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	e002      	b.n	8002774 <vListInsert+0x2e>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	429a      	cmp	r2, r3
 800277e:	d2f6      	bcs.n	800276e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	1c5a      	adds	r2, r3, #1
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	601a      	str	r2, [r3, #0]
}
 80027ac:	bf00      	nop
 80027ae:	3714      	adds	r7, #20
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	6892      	ldr	r2, [r2, #8]
 80027ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6852      	ldr	r2, [r2, #4]
 80027d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d103      	bne.n	80027ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	1e5a      	subs	r2, r3, #1
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800280c:	b580      	push	{r7, lr}
 800280e:	b090      	sub	sp, #64	; 0x40
 8002810:	af04      	add	r7, sp, #16
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	603b      	str	r3, [r7, #0]
 8002818:	4613      	mov	r3, r2
 800281a:	80fb      	strh	r3, [r7, #6]
	TCB_t *pxNewTCB;
	BaseType_t xReturn;
    char name[20];
    strcpy(name, pcName);
 800281c:	f107 0310 	add.w	r3, r7, #16
 8002820:	68b9      	ldr	r1, [r7, #8]
 8002822:	4618      	mov	r0, r3
 8002824:	f001 faa0 	bl	8003d68 <strcpy>
    strcat(name, "\n\r");
 8002828:	f107 0310 	add.w	r3, r7, #16
 800282c:	4618      	mov	r0, r3
 800282e:	f7fd fccf 	bl	80001d0 <strlen>
 8002832:	4603      	mov	r3, r0
 8002834:	461a      	mov	r2, r3
 8002836:	f107 0310 	add.w	r3, r7, #16
 800283a:	4413      	add	r3, r2
 800283c:	4a25      	ldr	r2, [pc, #148]	; (80028d4 <xTaskCreate+0xc8>)
 800283e:	8811      	ldrh	r1, [r2, #0]
 8002840:	7892      	ldrb	r2, [r2, #2]
 8002842:	8019      	strh	r1, [r3, #0]
 8002844:	709a      	strb	r2, [r3, #2]
    HAL_UART_Transmit(&huart2, (uint8_t *)name, strlen(name), 0xffff);
 8002846:	f107 0310 	add.w	r3, r7, #16
 800284a:	4618      	mov	r0, r3
 800284c:	f7fd fcc0 	bl	80001d0 <strlen>
 8002850:	4603      	mov	r3, r0
 8002852:	b29a      	uxth	r2, r3
 8002854:	f107 0110 	add.w	r1, r7, #16
 8002858:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800285c:	481e      	ldr	r0, [pc, #120]	; (80028d8 <xTaskCreate+0xcc>)
 800285e:	f7ff fc58 	bl	8002112 <HAL_UART_Transmit>
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002862:	88fb      	ldrh	r3, [r7, #6]
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4618      	mov	r0, r3
 8002868:	f000 ffae 	bl	80037c8 <pvPortMalloc>
 800286c:	6278      	str	r0, [r7, #36]	; 0x24

			if( pxStack != NULL )
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00e      	beq.n	8002892 <xTaskCreate+0x86>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002874:	2058      	movs	r0, #88	; 0x58
 8002876:	f000 ffa7 	bl	80037c8 <pvPortMalloc>
 800287a:	62f8      	str	r0, [r7, #44]	; 0x2c

				if( pxNewTCB != NULL )
 800287c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <xTaskCreate+0x7e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002886:	631a      	str	r2, [r3, #48]	; 0x30
 8002888:	e005      	b.n	8002896 <xTaskCreate+0x8a>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800288a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800288c:	f001 f8ba 	bl	8003a04 <vPortFree>
 8002890:	e001      	b.n	8002896 <xTaskCreate+0x8a>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002892:	2300      	movs	r3, #0
 8002894:	62fb      	str	r3, [r7, #44]	; 0x2c
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002898:	2b00      	cmp	r3, #0
 800289a:	d013      	beq.n	80028c4 <xTaskCreate+0xb8>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800289c:	88fa      	ldrh	r2, [r7, #6]
 800289e:	2300      	movs	r3, #0
 80028a0:	9303      	str	r3, [sp, #12]
 80028a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a4:	9302      	str	r3, [sp, #8]
 80028a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028a8:	9301      	str	r3, [sp, #4]
 80028aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	68b9      	ldr	r1, [r7, #8]
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f000 f812 	bl	80028dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80028b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80028ba:	f000 f89f 	bl	80029fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80028be:	2301      	movs	r3, #1
 80028c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80028c2:	e002      	b.n	80028ca <xTaskCreate+0xbe>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80028c4:	f04f 33ff 	mov.w	r3, #4294967295
 80028c8:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		return xReturn;
 80028ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
	}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3730      	adds	r7, #48	; 0x30
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	080045c4 	.word	0x080045c4
 80028d8:	200015c0 	.word	0x200015c0

080028dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b088      	sub	sp, #32
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
 80028e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80028ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	461a      	mov	r2, r3
 80028f4:	21a5      	movs	r1, #165	; 0xa5
 80028f6:	f001 fa0f 	bl	8003d18 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80028fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002904:	3b01      	subs	r3, #1
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	f023 0307 	bic.w	r3, r3, #7
 8002912:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00a      	beq.n	8002934 <prvInitialiseNewTask+0x58>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800291e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002922:	f383 8811 	msr	BASEPRI, r3
 8002926:	f3bf 8f6f 	isb	sy
 800292a:	f3bf 8f4f 	dsb	sy
 800292e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002930:	bf00      	nop
 8002932:	e7fe      	b.n	8002932 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d01f      	beq.n	800297a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800293a:	2300      	movs	r3, #0
 800293c:	61fb      	str	r3, [r7, #28]
 800293e:	e012      	b.n	8002966 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	4413      	add	r3, r2
 8002946:	7819      	ldrb	r1, [r3, #0]
 8002948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	4413      	add	r3, r2
 800294e:	3334      	adds	r3, #52	; 0x34
 8002950:	460a      	mov	r2, r1
 8002952:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	4413      	add	r3, r2
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d006      	beq.n	800296e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	3301      	adds	r3, #1
 8002964:	61fb      	str	r3, [r7, #28]
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	2b09      	cmp	r3, #9
 800296a:	d9e9      	bls.n	8002940 <prvInitialiseNewTask+0x64>
 800296c:	e000      	b.n	8002970 <prvInitialiseNewTask+0x94>
			{
				break;
 800296e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002972:	2200      	movs	r2, #0
 8002974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002978:	e003      	b.n	8002982 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800297a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002984:	2b04      	cmp	r3, #4
 8002986:	d901      	bls.n	800298c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002988:	2304      	movs	r3, #4
 800298a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800298c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002990:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002994:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002996:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8002998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299a:	2200      	movs	r2, #0
 800299c:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800299e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a0:	3304      	adds	r3, #4
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff fe9e 	bl	80026e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80029a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029aa:	3318      	adds	r3, #24
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff fe99 	bl	80026e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80029b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ba:	f1c3 0205 	rsb	r2, r3, #5
 80029be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80029c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80029c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ca:	2200      	movs	r2, #0
 80029cc:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80029ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	68f9      	ldr	r1, [r7, #12]
 80029da:	69b8      	ldr	r0, [r7, #24]
 80029dc:	f000 fcd6 	bl	800338c <pxPortInitialiseStack>
 80029e0:	4602      	mov	r2, r0
 80029e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80029e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80029ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80029f2:	bf00      	nop
 80029f4:	3720      	adds	r7, #32
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
	...

080029fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002a04:	f000 fdfe 	bl	8003604 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002a08:	4b2c      	ldr	r3, [pc, #176]	; (8002abc <prvAddNewTaskToReadyList+0xc0>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	4a2b      	ldr	r2, [pc, #172]	; (8002abc <prvAddNewTaskToReadyList+0xc0>)
 8002a10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002a12:	4b2b      	ldr	r3, [pc, #172]	; (8002ac0 <prvAddNewTaskToReadyList+0xc4>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d109      	bne.n	8002a2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002a1a:	4a29      	ldr	r2, [pc, #164]	; (8002ac0 <prvAddNewTaskToReadyList+0xc4>)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002a20:	4b26      	ldr	r3, [pc, #152]	; (8002abc <prvAddNewTaskToReadyList+0xc0>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d110      	bne.n	8002a4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002a28:	f000 fb38 	bl	800309c <prvInitialiseTaskLists>
 8002a2c:	e00d      	b.n	8002a4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002a2e:	4b25      	ldr	r3, [pc, #148]	; (8002ac4 <prvAddNewTaskToReadyList+0xc8>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d109      	bne.n	8002a4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002a36:	4b22      	ldr	r3, [pc, #136]	; (8002ac0 <prvAddNewTaskToReadyList+0xc4>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d802      	bhi.n	8002a4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002a44:	4a1e      	ldr	r2, [pc, #120]	; (8002ac0 <prvAddNewTaskToReadyList+0xc4>)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002a4a:	4b1f      	ldr	r3, [pc, #124]	; (8002ac8 <prvAddNewTaskToReadyList+0xcc>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	4a1d      	ldr	r2, [pc, #116]	; (8002ac8 <prvAddNewTaskToReadyList+0xcc>)
 8002a52:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002a54:	4b1c      	ldr	r3, [pc, #112]	; (8002ac8 <prvAddNewTaskToReadyList+0xcc>)
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a60:	2201      	movs	r2, #1
 8002a62:	409a      	lsls	r2, r3
 8002a64:	4b19      	ldr	r3, [pc, #100]	; (8002acc <prvAddNewTaskToReadyList+0xd0>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	4a18      	ldr	r2, [pc, #96]	; (8002acc <prvAddNewTaskToReadyList+0xd0>)
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a72:	4613      	mov	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4a15      	ldr	r2, [pc, #84]	; (8002ad0 <prvAddNewTaskToReadyList+0xd4>)
 8002a7c:	441a      	add	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3304      	adds	r3, #4
 8002a82:	4619      	mov	r1, r3
 8002a84:	4610      	mov	r0, r2
 8002a86:	f7ff fe3a 	bl	80026fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002a8a:	f000 fdeb 	bl	8003664 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002a8e:	4b0d      	ldr	r3, [pc, #52]	; (8002ac4 <prvAddNewTaskToReadyList+0xc8>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00e      	beq.n	8002ab4 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a96:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <prvAddNewTaskToReadyList+0xc4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d207      	bcs.n	8002ab4 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <prvAddNewTaskToReadyList+0xd8>)
 8002aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	f3bf 8f4f 	dsb	sy
 8002ab0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ab4:	bf00      	nop
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	20000170 	.word	0x20000170
 8002ac0:	20000098 	.word	0x20000098
 8002ac4:	2000017c 	.word	0x2000017c
 8002ac8:	2000018c 	.word	0x2000018c
 8002acc:	20000178 	.word	0x20000178
 8002ad0:	2000009c 	.word	0x2000009c
 8002ad4:	e000ed04 	.word	0xe000ed04

08002ad8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002ae0:	f000 fd90 	bl	8003604 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d102      	bne.n	8002af0 <vTaskDelete+0x18>
 8002aea:	4b39      	ldr	r3, [pc, #228]	; (8002bd0 <vTaskDelete+0xf8>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	e000      	b.n	8002af2 <vTaskDelete+0x1a>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	3304      	adds	r3, #4
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff fe5d 	bl	80027b8 <uxListRemove>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d115      	bne.n	8002b30 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b08:	4932      	ldr	r1, [pc, #200]	; (8002bd4 <vTaskDelete+0xfc>)
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	440b      	add	r3, r1
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10a      	bne.n	8002b30 <vTaskDelete+0x58>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1e:	2201      	movs	r2, #1
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	43da      	mvns	r2, r3
 8002b26:	4b2c      	ldr	r3, [pc, #176]	; (8002bd8 <vTaskDelete+0x100>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	4a2a      	ldr	r2, [pc, #168]	; (8002bd8 <vTaskDelete+0x100>)
 8002b2e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d004      	beq.n	8002b42 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	3318      	adds	r3, #24
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff fe3b 	bl	80027b8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8002b42:	4b26      	ldr	r3, [pc, #152]	; (8002bdc <vTaskDelete+0x104>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	3301      	adds	r3, #1
 8002b48:	4a24      	ldr	r2, [pc, #144]	; (8002bdc <vTaskDelete+0x104>)
 8002b4a:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8002b4c:	4b20      	ldr	r3, [pc, #128]	; (8002bd0 <vTaskDelete+0xf8>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d10b      	bne.n	8002b6e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	3304      	adds	r3, #4
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4820      	ldr	r0, [pc, #128]	; (8002be0 <vTaskDelete+0x108>)
 8002b5e:	f7ff fdce 	bl	80026fe <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8002b62:	4b20      	ldr	r3, [pc, #128]	; (8002be4 <vTaskDelete+0x10c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	3301      	adds	r3, #1
 8002b68:	4a1e      	ldr	r2, [pc, #120]	; (8002be4 <vTaskDelete+0x10c>)
 8002b6a:	6013      	str	r3, [r2, #0]
 8002b6c:	e009      	b.n	8002b82 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8002b6e:	4b1e      	ldr	r3, [pc, #120]	; (8002be8 <vTaskDelete+0x110>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	4a1c      	ldr	r2, [pc, #112]	; (8002be8 <vTaskDelete+0x110>)
 8002b76:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 fafd 	bl	8003178 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8002b7e:	f000 fb0b 	bl	8003198 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8002b82:	f000 fd6f 	bl	8003664 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8002b86:	4b19      	ldr	r3, [pc, #100]	; (8002bec <vTaskDelete+0x114>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d01b      	beq.n	8002bc6 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8002b8e:	4b10      	ldr	r3, [pc, #64]	; (8002bd0 <vTaskDelete+0xf8>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d116      	bne.n	8002bc6 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8002b98:	4b15      	ldr	r3, [pc, #84]	; (8002bf0 <vTaskDelete+0x118>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00a      	beq.n	8002bb6 <vTaskDelete+0xde>
	__asm volatile
 8002ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba4:	f383 8811 	msr	BASEPRI, r3
 8002ba8:	f3bf 8f6f 	isb	sy
 8002bac:	f3bf 8f4f 	dsb	sy
 8002bb0:	60bb      	str	r3, [r7, #8]
}
 8002bb2:	bf00      	nop
 8002bb4:	e7fe      	b.n	8002bb4 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8002bb6:	4b0f      	ldr	r3, [pc, #60]	; (8002bf4 <vTaskDelete+0x11c>)
 8002bb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	f3bf 8f4f 	dsb	sy
 8002bc2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002bc6:	bf00      	nop
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	20000098 	.word	0x20000098
 8002bd4:	2000009c 	.word	0x2000009c
 8002bd8:	20000178 	.word	0x20000178
 8002bdc:	2000018c 	.word	0x2000018c
 8002be0:	20000144 	.word	0x20000144
 8002be4:	20000158 	.word	0x20000158
 8002be8:	20000170 	.word	0x20000170
 8002bec:	2000017c 	.word	0x2000017c
 8002bf0:	20000198 	.word	0x20000198
 8002bf4:	e000ed04 	.word	0xe000ed04

08002bf8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002c00:	2300      	movs	r3, #0
 8002c02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d017      	beq.n	8002c3a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002c0a:	4b13      	ldr	r3, [pc, #76]	; (8002c58 <vTaskDelay+0x60>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00a      	beq.n	8002c28 <vTaskDelay+0x30>
	__asm volatile
 8002c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c16:	f383 8811 	msr	BASEPRI, r3
 8002c1a:	f3bf 8f6f 	isb	sy
 8002c1e:	f3bf 8f4f 	dsb	sy
 8002c22:	60bb      	str	r3, [r7, #8]
}
 8002c24:	bf00      	nop
 8002c26:	e7fe      	b.n	8002c26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002c28:	f000 f862 	bl	8002cf0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 fb46 	bl	80032c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002c34:	f000 f86a 	bl	8002d0c <xTaskResumeAll>
 8002c38:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d107      	bne.n	8002c50 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002c40:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <vTaskDelay+0x64>)
 8002c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	f3bf 8f4f 	dsb	sy
 8002c4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002c50:	bf00      	nop
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	20000198 	.word	0x20000198
 8002c5c:	e000ed04 	.word	0xe000ed04

08002c60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8002c66:	4b1c      	ldr	r3, [pc, #112]	; (8002cd8 <vTaskStartScheduler+0x78>)
 8002c68:	9301      	str	r3, [sp, #4]
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	2300      	movs	r3, #0
 8002c70:	2282      	movs	r2, #130	; 0x82
 8002c72:	491a      	ldr	r1, [pc, #104]	; (8002cdc <vTaskStartScheduler+0x7c>)
 8002c74:	481a      	ldr	r0, [pc, #104]	; (8002ce0 <vTaskStartScheduler+0x80>)
 8002c76:	f7ff fdc9 	bl	800280c <xTaskCreate>
 8002c7a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d116      	bne.n	8002cb0 <vTaskStartScheduler+0x50>
	__asm volatile
 8002c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c86:	f383 8811 	msr	BASEPRI, r3
 8002c8a:	f3bf 8f6f 	isb	sy
 8002c8e:	f3bf 8f4f 	dsb	sy
 8002c92:	60bb      	str	r3, [r7, #8]
}
 8002c94:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002c96:	4b13      	ldr	r3, [pc, #76]	; (8002ce4 <vTaskStartScheduler+0x84>)
 8002c98:	f04f 32ff 	mov.w	r2, #4294967295
 8002c9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002c9e:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <vTaskStartScheduler+0x88>)
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002ca4:	4b11      	ldr	r3, [pc, #68]	; (8002cec <vTaskStartScheduler+0x8c>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002caa:	f000 fbf9 	bl	80034a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002cae:	e00e      	b.n	8002cce <vTaskStartScheduler+0x6e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb6:	d10a      	bne.n	8002cce <vTaskStartScheduler+0x6e>
	__asm volatile
 8002cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cbc:	f383 8811 	msr	BASEPRI, r3
 8002cc0:	f3bf 8f6f 	isb	sy
 8002cc4:	f3bf 8f4f 	dsb	sy
 8002cc8:	607b      	str	r3, [r7, #4]
}
 8002cca:	bf00      	nop
 8002ccc:	e7fe      	b.n	8002ccc <vTaskStartScheduler+0x6c>
}
 8002cce:	bf00      	nop
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	20000194 	.word	0x20000194
 8002cdc:	080045c8 	.word	0x080045c8
 8002ce0:	0800306d 	.word	0x0800306d
 8002ce4:	20000190 	.word	0x20000190
 8002ce8:	2000017c 	.word	0x2000017c
 8002cec:	20000174 	.word	0x20000174

08002cf0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002cf4:	4b04      	ldr	r3, [pc, #16]	; (8002d08 <vTaskSuspendAll+0x18>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	4a03      	ldr	r2, [pc, #12]	; (8002d08 <vTaskSuspendAll+0x18>)
 8002cfc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8002cfe:	bf00      	nop
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	20000198 	.word	0x20000198

08002d0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002d12:	2300      	movs	r3, #0
 8002d14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002d16:	2300      	movs	r3, #0
 8002d18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002d1a:	4b41      	ldr	r3, [pc, #260]	; (8002e20 <xTaskResumeAll+0x114>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10a      	bne.n	8002d38 <xTaskResumeAll+0x2c>
	__asm volatile
 8002d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d26:	f383 8811 	msr	BASEPRI, r3
 8002d2a:	f3bf 8f6f 	isb	sy
 8002d2e:	f3bf 8f4f 	dsb	sy
 8002d32:	603b      	str	r3, [r7, #0]
}
 8002d34:	bf00      	nop
 8002d36:	e7fe      	b.n	8002d36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002d38:	f000 fc64 	bl	8003604 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002d3c:	4b38      	ldr	r3, [pc, #224]	; (8002e20 <xTaskResumeAll+0x114>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	3b01      	subs	r3, #1
 8002d42:	4a37      	ldr	r2, [pc, #220]	; (8002e20 <xTaskResumeAll+0x114>)
 8002d44:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d46:	4b36      	ldr	r3, [pc, #216]	; (8002e20 <xTaskResumeAll+0x114>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d161      	bne.n	8002e12 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002d4e:	4b35      	ldr	r3, [pc, #212]	; (8002e24 <xTaskResumeAll+0x118>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d05d      	beq.n	8002e12 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d56:	e02e      	b.n	8002db6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d58:	4b33      	ldr	r3, [pc, #204]	; (8002e28 <xTaskResumeAll+0x11c>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	3318      	adds	r3, #24
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff fd27 	bl	80027b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff fd22 	bl	80027b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d78:	2201      	movs	r2, #1
 8002d7a:	409a      	lsls	r2, r3
 8002d7c:	4b2b      	ldr	r3, [pc, #172]	; (8002e2c <xTaskResumeAll+0x120>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	4a2a      	ldr	r2, [pc, #168]	; (8002e2c <xTaskResumeAll+0x120>)
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4a27      	ldr	r2, [pc, #156]	; (8002e30 <xTaskResumeAll+0x124>)
 8002d94:	441a      	add	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	3304      	adds	r3, #4
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4610      	mov	r0, r2
 8002d9e:	f7ff fcae 	bl	80026fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002da6:	4b23      	ldr	r3, [pc, #140]	; (8002e34 <xTaskResumeAll+0x128>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d302      	bcc.n	8002db6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002db0:	4b21      	ldr	r3, [pc, #132]	; (8002e38 <xTaskResumeAll+0x12c>)
 8002db2:	2201      	movs	r2, #1
 8002db4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002db6:	4b1c      	ldr	r3, [pc, #112]	; (8002e28 <xTaskResumeAll+0x11c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1cc      	bne.n	8002d58 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002dc4:	f000 f9e8 	bl	8003198 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002dc8:	4b1c      	ldr	r3, [pc, #112]	; (8002e3c <xTaskResumeAll+0x130>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d010      	beq.n	8002df6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002dd4:	f000 f836 	bl	8002e44 <xTaskIncrementTick>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d002      	beq.n	8002de4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002dde:	4b16      	ldr	r3, [pc, #88]	; (8002e38 <xTaskResumeAll+0x12c>)
 8002de0:	2201      	movs	r2, #1
 8002de2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3b01      	subs	r3, #1
 8002de8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1f1      	bne.n	8002dd4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002df0:	4b12      	ldr	r3, [pc, #72]	; (8002e3c <xTaskResumeAll+0x130>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002df6:	4b10      	ldr	r3, [pc, #64]	; (8002e38 <xTaskResumeAll+0x12c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d009      	beq.n	8002e12 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002e02:	4b0f      	ldr	r3, [pc, #60]	; (8002e40 <xTaskResumeAll+0x134>)
 8002e04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	f3bf 8f4f 	dsb	sy
 8002e0e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002e12:	f000 fc27 	bl	8003664 <vPortExitCritical>

	return xAlreadyYielded;
 8002e16:	68bb      	ldr	r3, [r7, #8]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	20000198 	.word	0x20000198
 8002e24:	20000170 	.word	0x20000170
 8002e28:	20000130 	.word	0x20000130
 8002e2c:	20000178 	.word	0x20000178
 8002e30:	2000009c 	.word	0x2000009c
 8002e34:	20000098 	.word	0x20000098
 8002e38:	20000184 	.word	0x20000184
 8002e3c:	20000180 	.word	0x20000180
 8002e40:	e000ed04 	.word	0xe000ed04

08002e44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e4e:	4b4e      	ldr	r3, [pc, #312]	; (8002f88 <xTaskIncrementTick+0x144>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f040 8088 	bne.w	8002f68 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002e58:	4b4c      	ldr	r3, [pc, #304]	; (8002f8c <xTaskIncrementTick+0x148>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002e60:	4a4a      	ldr	r2, [pc, #296]	; (8002f8c <xTaskIncrementTick+0x148>)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d120      	bne.n	8002eae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002e6c:	4b48      	ldr	r3, [pc, #288]	; (8002f90 <xTaskIncrementTick+0x14c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00a      	beq.n	8002e8c <xTaskIncrementTick+0x48>
	__asm volatile
 8002e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7a:	f383 8811 	msr	BASEPRI, r3
 8002e7e:	f3bf 8f6f 	isb	sy
 8002e82:	f3bf 8f4f 	dsb	sy
 8002e86:	603b      	str	r3, [r7, #0]
}
 8002e88:	bf00      	nop
 8002e8a:	e7fe      	b.n	8002e8a <xTaskIncrementTick+0x46>
 8002e8c:	4b40      	ldr	r3, [pc, #256]	; (8002f90 <xTaskIncrementTick+0x14c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	4b40      	ldr	r3, [pc, #256]	; (8002f94 <xTaskIncrementTick+0x150>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a3e      	ldr	r2, [pc, #248]	; (8002f90 <xTaskIncrementTick+0x14c>)
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	4a3e      	ldr	r2, [pc, #248]	; (8002f94 <xTaskIncrementTick+0x150>)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6013      	str	r3, [r2, #0]
 8002ea0:	4b3d      	ldr	r3, [pc, #244]	; (8002f98 <xTaskIncrementTick+0x154>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	4a3c      	ldr	r2, [pc, #240]	; (8002f98 <xTaskIncrementTick+0x154>)
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	f000 f975 	bl	8003198 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002eae:	4b3b      	ldr	r3, [pc, #236]	; (8002f9c <xTaskIncrementTick+0x158>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d348      	bcc.n	8002f4a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002eb8:	4b35      	ldr	r3, [pc, #212]	; (8002f90 <xTaskIncrementTick+0x14c>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d104      	bne.n	8002ecc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ec2:	4b36      	ldr	r3, [pc, #216]	; (8002f9c <xTaskIncrementTick+0x158>)
 8002ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec8:	601a      	str	r2, [r3, #0]
					break;
 8002eca:	e03e      	b.n	8002f4a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ecc:	4b30      	ldr	r3, [pc, #192]	; (8002f90 <xTaskIncrementTick+0x14c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d203      	bcs.n	8002eec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002ee4:	4a2d      	ldr	r2, [pc, #180]	; (8002f9c <xTaskIncrementTick+0x158>)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002eea:	e02e      	b.n	8002f4a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	3304      	adds	r3, #4
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff fc61 	bl	80027b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d004      	beq.n	8002f08 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	3318      	adds	r3, #24
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff fc58 	bl	80027b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	409a      	lsls	r2, r3
 8002f10:	4b23      	ldr	r3, [pc, #140]	; (8002fa0 <xTaskIncrementTick+0x15c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	4a22      	ldr	r2, [pc, #136]	; (8002fa0 <xTaskIncrementTick+0x15c>)
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f1e:	4613      	mov	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4a1f      	ldr	r2, [pc, #124]	; (8002fa4 <xTaskIncrementTick+0x160>)
 8002f28:	441a      	add	r2, r3
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4610      	mov	r0, r2
 8002f32:	f7ff fbe4 	bl	80026fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f3a:	4b1b      	ldr	r3, [pc, #108]	; (8002fa8 <xTaskIncrementTick+0x164>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d3b9      	bcc.n	8002eb8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002f44:	2301      	movs	r3, #1
 8002f46:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f48:	e7b6      	b.n	8002eb8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002f4a:	4b17      	ldr	r3, [pc, #92]	; (8002fa8 <xTaskIncrementTick+0x164>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f50:	4914      	ldr	r1, [pc, #80]	; (8002fa4 <xTaskIncrementTick+0x160>)
 8002f52:	4613      	mov	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d907      	bls.n	8002f72 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8002f62:	2301      	movs	r3, #1
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	e004      	b.n	8002f72 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002f68:	4b10      	ldr	r3, [pc, #64]	; (8002fac <xTaskIncrementTick+0x168>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	4a0f      	ldr	r2, [pc, #60]	; (8002fac <xTaskIncrementTick+0x168>)
 8002f70:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002f72:	4b0f      	ldr	r3, [pc, #60]	; (8002fb0 <xTaskIncrementTick+0x16c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002f7e:	697b      	ldr	r3, [r7, #20]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	20000198 	.word	0x20000198
 8002f8c:	20000174 	.word	0x20000174
 8002f90:	20000128 	.word	0x20000128
 8002f94:	2000012c 	.word	0x2000012c
 8002f98:	20000188 	.word	0x20000188
 8002f9c:	20000190 	.word	0x20000190
 8002fa0:	20000178 	.word	0x20000178
 8002fa4:	2000009c 	.word	0x2000009c
 8002fa8:	20000098 	.word	0x20000098
 8002fac:	20000180 	.word	0x20000180
 8002fb0:	20000184 	.word	0x20000184

08002fb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b087      	sub	sp, #28
 8002fb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002fba:	4b27      	ldr	r3, [pc, #156]	; (8003058 <vTaskSwitchContext+0xa4>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002fc2:	4b26      	ldr	r3, [pc, #152]	; (800305c <vTaskSwitchContext+0xa8>)
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002fc8:	e03f      	b.n	800304a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8002fca:	4b24      	ldr	r3, [pc, #144]	; (800305c <vTaskSwitchContext+0xa8>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fd0:	4b23      	ldr	r3, [pc, #140]	; (8003060 <vTaskSwitchContext+0xac>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	fab3 f383 	clz	r3, r3
 8002fdc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002fde:	7afb      	ldrb	r3, [r7, #11]
 8002fe0:	f1c3 031f 	rsb	r3, r3, #31
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	491f      	ldr	r1, [pc, #124]	; (8003064 <vTaskSwitchContext+0xb0>)
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	4613      	mov	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10a      	bne.n	8003010 <vTaskSwitchContext+0x5c>
	__asm volatile
 8002ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffe:	f383 8811 	msr	BASEPRI, r3
 8003002:	f3bf 8f6f 	isb	sy
 8003006:	f3bf 8f4f 	dsb	sy
 800300a:	607b      	str	r3, [r7, #4]
}
 800300c:	bf00      	nop
 800300e:	e7fe      	b.n	800300e <vTaskSwitchContext+0x5a>
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	4613      	mov	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4413      	add	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4a12      	ldr	r2, [pc, #72]	; (8003064 <vTaskSwitchContext+0xb0>)
 800301c:	4413      	add	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	605a      	str	r2, [r3, #4]
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	3308      	adds	r3, #8
 8003032:	429a      	cmp	r2, r3
 8003034:	d104      	bne.n	8003040 <vTaskSwitchContext+0x8c>
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	605a      	str	r2, [r3, #4]
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	4a08      	ldr	r2, [pc, #32]	; (8003068 <vTaskSwitchContext+0xb4>)
 8003048:	6013      	str	r3, [r2, #0]
}
 800304a:	bf00      	nop
 800304c:	371c      	adds	r7, #28
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	20000198 	.word	0x20000198
 800305c:	20000184 	.word	0x20000184
 8003060:	20000178 	.word	0x20000178
 8003064:	2000009c 	.word	0x2000009c
 8003068:	20000098 	.word	0x20000098

0800306c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003074:	f000 f852 	bl	800311c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003078:	4b06      	ldr	r3, [pc, #24]	; (8003094 <prvIdleTask+0x28>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d9f9      	bls.n	8003074 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003080:	4b05      	ldr	r3, [pc, #20]	; (8003098 <prvIdleTask+0x2c>)
 8003082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	f3bf 8f4f 	dsb	sy
 800308c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003090:	e7f0      	b.n	8003074 <prvIdleTask+0x8>
 8003092:	bf00      	nop
 8003094:	2000009c 	.word	0x2000009c
 8003098:	e000ed04 	.word	0xe000ed04

0800309c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030a2:	2300      	movs	r3, #0
 80030a4:	607b      	str	r3, [r7, #4]
 80030a6:	e00c      	b.n	80030c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4a12      	ldr	r2, [pc, #72]	; (80030fc <prvInitialiseTaskLists+0x60>)
 80030b4:	4413      	add	r3, r2
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7ff faf4 	bl	80026a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3301      	adds	r3, #1
 80030c0:	607b      	str	r3, [r7, #4]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d9ef      	bls.n	80030a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80030c8:	480d      	ldr	r0, [pc, #52]	; (8003100 <prvInitialiseTaskLists+0x64>)
 80030ca:	f7ff faeb 	bl	80026a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80030ce:	480d      	ldr	r0, [pc, #52]	; (8003104 <prvInitialiseTaskLists+0x68>)
 80030d0:	f7ff fae8 	bl	80026a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80030d4:	480c      	ldr	r0, [pc, #48]	; (8003108 <prvInitialiseTaskLists+0x6c>)
 80030d6:	f7ff fae5 	bl	80026a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80030da:	480c      	ldr	r0, [pc, #48]	; (800310c <prvInitialiseTaskLists+0x70>)
 80030dc:	f7ff fae2 	bl	80026a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80030e0:	480b      	ldr	r0, [pc, #44]	; (8003110 <prvInitialiseTaskLists+0x74>)
 80030e2:	f7ff fadf 	bl	80026a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80030e6:	4b0b      	ldr	r3, [pc, #44]	; (8003114 <prvInitialiseTaskLists+0x78>)
 80030e8:	4a05      	ldr	r2, [pc, #20]	; (8003100 <prvInitialiseTaskLists+0x64>)
 80030ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80030ec:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <prvInitialiseTaskLists+0x7c>)
 80030ee:	4a05      	ldr	r2, [pc, #20]	; (8003104 <prvInitialiseTaskLists+0x68>)
 80030f0:	601a      	str	r2, [r3, #0]
}
 80030f2:	bf00      	nop
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	2000009c 	.word	0x2000009c
 8003100:	20000100 	.word	0x20000100
 8003104:	20000114 	.word	0x20000114
 8003108:	20000130 	.word	0x20000130
 800310c:	20000144 	.word	0x20000144
 8003110:	2000015c 	.word	0x2000015c
 8003114:	20000128 	.word	0x20000128
 8003118:	2000012c 	.word	0x2000012c

0800311c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003122:	e019      	b.n	8003158 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003124:	f000 fa6e 	bl	8003604 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003128:	4b10      	ldr	r3, [pc, #64]	; (800316c <prvCheckTasksWaitingTermination+0x50>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3304      	adds	r3, #4
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff fb3f 	bl	80027b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800313a:	4b0d      	ldr	r3, [pc, #52]	; (8003170 <prvCheckTasksWaitingTermination+0x54>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	3b01      	subs	r3, #1
 8003140:	4a0b      	ldr	r2, [pc, #44]	; (8003170 <prvCheckTasksWaitingTermination+0x54>)
 8003142:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003144:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <prvCheckTasksWaitingTermination+0x58>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	3b01      	subs	r3, #1
 800314a:	4a0a      	ldr	r2, [pc, #40]	; (8003174 <prvCheckTasksWaitingTermination+0x58>)
 800314c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800314e:	f000 fa89 	bl	8003664 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f810 	bl	8003178 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003158:	4b06      	ldr	r3, [pc, #24]	; (8003174 <prvCheckTasksWaitingTermination+0x58>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1e1      	bne.n	8003124 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003160:	bf00      	nop
 8003162:	bf00      	nop
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	20000144 	.word	0x20000144
 8003170:	20000170 	.word	0x20000170
 8003174:	20000158 	.word	0x20000158

08003178 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003184:	4618      	mov	r0, r3
 8003186:	f000 fc3d 	bl	8003a04 <vPortFree>
			vPortFree( pxTCB );
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 fc3a 	bl	8003a04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003190:	bf00      	nop
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800319e:	4b0c      	ldr	r3, [pc, #48]	; (80031d0 <prvResetNextTaskUnblockTime+0x38>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d104      	bne.n	80031b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80031a8:	4b0a      	ldr	r3, [pc, #40]	; (80031d4 <prvResetNextTaskUnblockTime+0x3c>)
 80031aa:	f04f 32ff 	mov.w	r2, #4294967295
 80031ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80031b0:	e008      	b.n	80031c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031b2:	4b07      	ldr	r3, [pc, #28]	; (80031d0 <prvResetNextTaskUnblockTime+0x38>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	4a04      	ldr	r2, [pc, #16]	; (80031d4 <prvResetNextTaskUnblockTime+0x3c>)
 80031c2:	6013      	str	r3, [r2, #0]
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	20000128 	.word	0x20000128
 80031d4:	20000190 	.word	0x20000190

080031d8 <Uint32ConvertHex>:
		return xIdleTaskHandle->ulRunTimeCounter;
	}
#endif
/*-----------------------------------------------------------*/

void Uint32ConvertHex(uint32_t pStack, char *charTxScanTaskStack){
 80031d8:	b480      	push	{r7}
 80031da:	b089      	sub	sp, #36	; 0x24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
	uint32_t remainder,quotient;
		int j =  0;
 80031e2:	2300      	movs	r3, #0
 80031e4:	61bb      	str	r3, [r7, #24]
		int reversal = 2,end = 0;
 80031e6:	2302      	movs	r3, #2
 80031e8:	617b      	str	r3, [r7, #20]
 80031ea:	2300      	movs	r3, #0
 80031ec:	613b      	str	r3, [r7, #16]
		char reversalChar;

		quotient = pStack;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	61fb      	str	r3, [r7, #28]
		charTxScanTaskStack[j++] = 48; // ascii  number 0
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	1c5a      	adds	r2, r3, #1
 80031f6:	61ba      	str	r2, [r7, #24]
 80031f8:	461a      	mov	r2, r3
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	4413      	add	r3, r2
 80031fe:	2230      	movs	r2, #48	; 0x30
 8003200:	701a      	strb	r2, [r3, #0]
		charTxScanTaskStack[j++] = 88;//ascii alphabet X
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	1c5a      	adds	r2, r3, #1
 8003206:	61ba      	str	r2, [r7, #24]
 8003208:	461a      	mov	r2, r3
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	4413      	add	r3, r2
 800320e:	2258      	movs	r2, #88	; 0x58
 8003210:	701a      	strb	r2, [r3, #0]
		while (quotient != 0)
 8003212:	e020      	b.n	8003256 <Uint32ConvertHex+0x7e>
		{
			remainder = quotient % 16;
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	60bb      	str	r3, [r7, #8]
			if (remainder < 10)
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	2b09      	cmp	r3, #9
 8003220:	d80b      	bhi.n	800323a <Uint32ConvertHex+0x62>
				charTxScanTaskStack[j++] = '0' + remainder;
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	b2da      	uxtb	r2, r3
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	1c59      	adds	r1, r3, #1
 800322a:	61b9      	str	r1, [r7, #24]
 800322c:	4619      	mov	r1, r3
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	440b      	add	r3, r1
 8003232:	3230      	adds	r2, #48	; 0x30
 8003234:	b2d2      	uxtb	r2, r2
 8003236:	701a      	strb	r2, [r3, #0]
 8003238:	e00a      	b.n	8003250 <Uint32ConvertHex+0x78>
			else
				charTxScanTaskStack[j++] = 55 + remainder; // A = 65;
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	b2da      	uxtb	r2, r3
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	1c59      	adds	r1, r3, #1
 8003242:	61b9      	str	r1, [r7, #24]
 8003244:	4619      	mov	r1, r3
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	440b      	add	r3, r1
 800324a:	3237      	adds	r2, #55	; 0x37
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	701a      	strb	r2, [r3, #0]
			quotient = quotient / 16;
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	091b      	lsrs	r3, r3, #4
 8003254:	61fb      	str	r3, [r7, #28]
		while (quotient != 0)
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1db      	bne.n	8003214 <Uint32ConvertHex+0x3c>
		}
		end = j-1;
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	3b01      	subs	r3, #1
 8003260:	613b      	str	r3, [r7, #16]
		for(reversal;reversal<=(end/2)+1;reversal++){
 8003262:	e017      	b.n	8003294 <Uint32ConvertHex+0xbc>
			reversalChar = charTxScanTaskStack[reversal];
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	4413      	add	r3, r2
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	73fb      	strb	r3, [r7, #15]
			charTxScanTaskStack[reversal] = charTxScanTaskStack[end];
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	441a      	add	r2, r3
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	6839      	ldr	r1, [r7, #0]
 8003278:	440b      	add	r3, r1
 800327a:	7812      	ldrb	r2, [r2, #0]
 800327c:	701a      	strb	r2, [r3, #0]
			charTxScanTaskStack[end] = reversalChar;
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	4413      	add	r3, r2
 8003284:	7bfa      	ldrb	r2, [r7, #15]
 8003286:	701a      	strb	r2, [r3, #0]
			end--;
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	3b01      	subs	r3, #1
 800328c:	613b      	str	r3, [r7, #16]
		for(reversal;reversal<=(end/2)+1;reversal++){
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	3301      	adds	r3, #1
 8003292:	617b      	str	r3, [r7, #20]
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	0fda      	lsrs	r2, r3, #31
 8003298:	4413      	add	r3, r2
 800329a:	105b      	asrs	r3, r3, #1
 800329c:	3301      	adds	r3, #1
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	dddf      	ble.n	8003264 <Uint32ConvertHex+0x8c>
		}
		charTxScanTaskStack[j++] = 0;
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	1c5a      	adds	r2, r3, #1
 80032a8:	61ba      	str	r2, [r7, #24]
 80032aa:	461a      	mov	r2, r3
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	4413      	add	r3, r2
 80032b0:	2200      	movs	r2, #0
 80032b2:	701a      	strb	r2, [r3, #0]
	}
 80032b4:	bf00      	nop
 80032b6:	3724      	adds	r7, #36	; 0x24
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <prvAddCurrentTaskToDelayedList>:


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80032ca:	4b29      	ldr	r3, [pc, #164]	; (8003370 <prvAddCurrentTaskToDelayedList+0xb0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032d0:	4b28      	ldr	r3, [pc, #160]	; (8003374 <prvAddCurrentTaskToDelayedList+0xb4>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	3304      	adds	r3, #4
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff fa6e 	bl	80027b8 <uxListRemove>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10b      	bne.n	80032fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80032e2:	4b24      	ldr	r3, [pc, #144]	; (8003374 <prvAddCurrentTaskToDelayedList+0xb4>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e8:	2201      	movs	r2, #1
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	43da      	mvns	r2, r3
 80032f0:	4b21      	ldr	r3, [pc, #132]	; (8003378 <prvAddCurrentTaskToDelayedList+0xb8>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4013      	ands	r3, r2
 80032f6:	4a20      	ldr	r2, [pc, #128]	; (8003378 <prvAddCurrentTaskToDelayedList+0xb8>)
 80032f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003300:	d10a      	bne.n	8003318 <prvAddCurrentTaskToDelayedList+0x58>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d007      	beq.n	8003318 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003308:	4b1a      	ldr	r3, [pc, #104]	; (8003374 <prvAddCurrentTaskToDelayedList+0xb4>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	3304      	adds	r3, #4
 800330e:	4619      	mov	r1, r3
 8003310:	481a      	ldr	r0, [pc, #104]	; (800337c <prvAddCurrentTaskToDelayedList+0xbc>)
 8003312:	f7ff f9f4 	bl	80026fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003316:	e026      	b.n	8003366 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4413      	add	r3, r2
 800331e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003320:	4b14      	ldr	r3, [pc, #80]	; (8003374 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68ba      	ldr	r2, [r7, #8]
 8003326:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003328:	68ba      	ldr	r2, [r7, #8]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	429a      	cmp	r2, r3
 800332e:	d209      	bcs.n	8003344 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003330:	4b13      	ldr	r3, [pc, #76]	; (8003380 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	4b0f      	ldr	r3, [pc, #60]	; (8003374 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	3304      	adds	r3, #4
 800333a:	4619      	mov	r1, r3
 800333c:	4610      	mov	r0, r2
 800333e:	f7ff fa02 	bl	8002746 <vListInsert>
}
 8003342:	e010      	b.n	8003366 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003344:	4b0f      	ldr	r3, [pc, #60]	; (8003384 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <prvAddCurrentTaskToDelayedList+0xb4>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	3304      	adds	r3, #4
 800334e:	4619      	mov	r1, r3
 8003350:	4610      	mov	r0, r2
 8003352:	f7ff f9f8 	bl	8002746 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003356:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	429a      	cmp	r2, r3
 800335e:	d202      	bcs.n	8003366 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003360:	4a09      	ldr	r2, [pc, #36]	; (8003388 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	6013      	str	r3, [r2, #0]
}
 8003366:	bf00      	nop
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	20000174 	.word	0x20000174
 8003374:	20000098 	.word	0x20000098
 8003378:	20000178 	.word	0x20000178
 800337c:	2000015c 	.word	0x2000015c
 8003380:	2000012c 	.word	0x2000012c
 8003384:	20000128 	.word	0x20000128
 8003388:	20000190 	.word	0x20000190

0800338c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	3b04      	subs	r3, #4
 800339c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	3b04      	subs	r3, #4
 80033aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	f023 0201 	bic.w	r2, r3, #1
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	3b04      	subs	r3, #4
 80033ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80033bc:	4a0c      	ldr	r2, [pc, #48]	; (80033f0 <pxPortInitialiseStack+0x64>)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	3b14      	subs	r3, #20
 80033c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	3b04      	subs	r3, #4
 80033d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f06f 0202 	mvn.w	r2, #2
 80033da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	3b20      	subs	r3, #32
 80033e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80033e2:	68fb      	ldr	r3, [r7, #12]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3714      	adds	r7, #20
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	080033f5 	.word	0x080033f5

080033f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80033fa:	2300      	movs	r3, #0
 80033fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80033fe:	4b12      	ldr	r3, [pc, #72]	; (8003448 <prvTaskExitError+0x54>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003406:	d00a      	beq.n	800341e <prvTaskExitError+0x2a>
	__asm volatile
 8003408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340c:	f383 8811 	msr	BASEPRI, r3
 8003410:	f3bf 8f6f 	isb	sy
 8003414:	f3bf 8f4f 	dsb	sy
 8003418:	60fb      	str	r3, [r7, #12]
}
 800341a:	bf00      	nop
 800341c:	e7fe      	b.n	800341c <prvTaskExitError+0x28>
	__asm volatile
 800341e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003422:	f383 8811 	msr	BASEPRI, r3
 8003426:	f3bf 8f6f 	isb	sy
 800342a:	f3bf 8f4f 	dsb	sy
 800342e:	60bb      	str	r3, [r7, #8]
}
 8003430:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003432:	bf00      	nop
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0fc      	beq.n	8003434 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800343a:	bf00      	nop
 800343c:	bf00      	nop
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	2000000c 	.word	0x2000000c
 800344c:	00000000 	.word	0x00000000

08003450 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003450:	4b07      	ldr	r3, [pc, #28]	; (8003470 <pxCurrentTCBConst2>)
 8003452:	6819      	ldr	r1, [r3, #0]
 8003454:	6808      	ldr	r0, [r1, #0]
 8003456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800345a:	f380 8809 	msr	PSP, r0
 800345e:	f3bf 8f6f 	isb	sy
 8003462:	f04f 0000 	mov.w	r0, #0
 8003466:	f380 8811 	msr	BASEPRI, r0
 800346a:	4770      	bx	lr
 800346c:	f3af 8000 	nop.w

08003470 <pxCurrentTCBConst2>:
 8003470:	20000098 	.word	0x20000098
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003474:	bf00      	nop
 8003476:	bf00      	nop

08003478 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003478:	4808      	ldr	r0, [pc, #32]	; (800349c <prvPortStartFirstTask+0x24>)
 800347a:	6800      	ldr	r0, [r0, #0]
 800347c:	6800      	ldr	r0, [r0, #0]
 800347e:	f380 8808 	msr	MSP, r0
 8003482:	f04f 0000 	mov.w	r0, #0
 8003486:	f380 8814 	msr	CONTROL, r0
 800348a:	b662      	cpsie	i
 800348c:	b661      	cpsie	f
 800348e:	f3bf 8f4f 	dsb	sy
 8003492:	f3bf 8f6f 	isb	sy
 8003496:	df00      	svc	0
 8003498:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800349a:	bf00      	nop
 800349c:	e000ed08 	.word	0xe000ed08

080034a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80034a6:	4b4e      	ldr	r3, [pc, #312]	; (80035e0 <xPortStartScheduler+0x140>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a4e      	ldr	r2, [pc, #312]	; (80035e4 <xPortStartScheduler+0x144>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d10a      	bne.n	80034c6 <xPortStartScheduler+0x26>
	__asm volatile
 80034b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b4:	f383 8811 	msr	BASEPRI, r3
 80034b8:	f3bf 8f6f 	isb	sy
 80034bc:	f3bf 8f4f 	dsb	sy
 80034c0:	61bb      	str	r3, [r7, #24]
}
 80034c2:	bf00      	nop
 80034c4:	e7fe      	b.n	80034c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80034c6:	4b46      	ldr	r3, [pc, #280]	; (80035e0 <xPortStartScheduler+0x140>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a47      	ldr	r2, [pc, #284]	; (80035e8 <xPortStartScheduler+0x148>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d10a      	bne.n	80034e6 <xPortStartScheduler+0x46>
	__asm volatile
 80034d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d4:	f383 8811 	msr	BASEPRI, r3
 80034d8:	f3bf 8f6f 	isb	sy
 80034dc:	f3bf 8f4f 	dsb	sy
 80034e0:	617b      	str	r3, [r7, #20]
}
 80034e2:	bf00      	nop
 80034e4:	e7fe      	b.n	80034e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80034e6:	4b41      	ldr	r3, [pc, #260]	; (80035ec <xPortStartScheduler+0x14c>)
 80034e8:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	22ff      	movs	r2, #255	; 0xff
 80034f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003500:	79fb      	ldrb	r3, [r7, #7]
 8003502:	b2db      	uxtb	r3, r3
 8003504:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003508:	b2da      	uxtb	r2, r3
 800350a:	4b39      	ldr	r3, [pc, #228]	; (80035f0 <xPortStartScheduler+0x150>)
 800350c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800350e:	4b39      	ldr	r3, [pc, #228]	; (80035f4 <xPortStartScheduler+0x154>)
 8003510:	2207      	movs	r2, #7
 8003512:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003514:	e009      	b.n	800352a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003516:	4b37      	ldr	r3, [pc, #220]	; (80035f4 <xPortStartScheduler+0x154>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	3b01      	subs	r3, #1
 800351c:	4a35      	ldr	r2, [pc, #212]	; (80035f4 <xPortStartScheduler+0x154>)
 800351e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003520:	79fb      	ldrb	r3, [r7, #7]
 8003522:	b2db      	uxtb	r3, r3
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	b2db      	uxtb	r3, r3
 8003528:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800352a:	79fb      	ldrb	r3, [r7, #7]
 800352c:	b2db      	uxtb	r3, r3
 800352e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003532:	2b80      	cmp	r3, #128	; 0x80
 8003534:	d0ef      	beq.n	8003516 <xPortStartScheduler+0x76>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8003536:	4b2f      	ldr	r3, [pc, #188]	; (80035f4 <xPortStartScheduler+0x154>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f1c3 0307 	rsb	r3, r3, #7
 800353e:	2b04      	cmp	r3, #4
 8003540:	d00a      	beq.n	8003558 <xPortStartScheduler+0xb8>
	__asm volatile
 8003542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003546:	f383 8811 	msr	BASEPRI, r3
 800354a:	f3bf 8f6f 	isb	sy
 800354e:	f3bf 8f4f 	dsb	sy
 8003552:	613b      	str	r3, [r7, #16]
}
 8003554:	bf00      	nop
 8003556:	e7fe      	b.n	8003556 <xPortStartScheduler+0xb6>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003558:	4b26      	ldr	r3, [pc, #152]	; (80035f4 <xPortStartScheduler+0x154>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f1c3 0307 	rsb	r3, r3, #7
 8003560:	2b04      	cmp	r3, #4
 8003562:	d00a      	beq.n	800357a <xPortStartScheduler+0xda>
	__asm volatile
 8003564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003568:	f383 8811 	msr	BASEPRI, r3
 800356c:	f3bf 8f6f 	isb	sy
 8003570:	f3bf 8f4f 	dsb	sy
 8003574:	60fb      	str	r3, [r7, #12]
}
 8003576:	bf00      	nop
 8003578:	e7fe      	b.n	8003578 <xPortStartScheduler+0xd8>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800357a:	4b1e      	ldr	r3, [pc, #120]	; (80035f4 <xPortStartScheduler+0x154>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	021b      	lsls	r3, r3, #8
 8003580:	4a1c      	ldr	r2, [pc, #112]	; (80035f4 <xPortStartScheduler+0x154>)
 8003582:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003584:	4b1b      	ldr	r3, [pc, #108]	; (80035f4 <xPortStartScheduler+0x154>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800358c:	4a19      	ldr	r2, [pc, #100]	; (80035f4 <xPortStartScheduler+0x154>)
 800358e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	b2da      	uxtb	r2, r3
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003598:	4b17      	ldr	r3, [pc, #92]	; (80035f8 <xPortStartScheduler+0x158>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a16      	ldr	r2, [pc, #88]	; (80035f8 <xPortStartScheduler+0x158>)
 800359e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035a2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80035a4:	4b14      	ldr	r3, [pc, #80]	; (80035f8 <xPortStartScheduler+0x158>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a13      	ldr	r2, [pc, #76]	; (80035f8 <xPortStartScheduler+0x158>)
 80035aa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80035ae:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80035b0:	f000 f8dc 	bl	800376c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80035b4:	4b11      	ldr	r3, [pc, #68]	; (80035fc <xPortStartScheduler+0x15c>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80035ba:	f000 f8fb 	bl	80037b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80035be:	4b10      	ldr	r3, [pc, #64]	; (8003600 <xPortStartScheduler+0x160>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a0f      	ldr	r2, [pc, #60]	; (8003600 <xPortStartScheduler+0x160>)
 80035c4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80035c8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80035ca:	f7ff ff55 	bl	8003478 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80035ce:	f7ff fcf1 	bl	8002fb4 <vTaskSwitchContext>
	prvTaskExitError();
 80035d2:	f7ff ff0f 	bl	80033f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3720      	adds	r7, #32
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	e000ed00 	.word	0xe000ed00
 80035e4:	410fc271 	.word	0x410fc271
 80035e8:	410fc270 	.word	0x410fc270
 80035ec:	e000e400 	.word	0xe000e400
 80035f0:	2000019c 	.word	0x2000019c
 80035f4:	200001a0 	.word	0x200001a0
 80035f8:	e000ed20 	.word	0xe000ed20
 80035fc:	2000000c 	.word	0x2000000c
 8003600:	e000ef34 	.word	0xe000ef34

08003604 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
	__asm volatile
 800360a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360e:	f383 8811 	msr	BASEPRI, r3
 8003612:	f3bf 8f6f 	isb	sy
 8003616:	f3bf 8f4f 	dsb	sy
 800361a:	607b      	str	r3, [r7, #4]
}
 800361c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800361e:	4b0f      	ldr	r3, [pc, #60]	; (800365c <vPortEnterCritical+0x58>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	3301      	adds	r3, #1
 8003624:	4a0d      	ldr	r2, [pc, #52]	; (800365c <vPortEnterCritical+0x58>)
 8003626:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003628:	4b0c      	ldr	r3, [pc, #48]	; (800365c <vPortEnterCritical+0x58>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d10f      	bne.n	8003650 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003630:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <vPortEnterCritical+0x5c>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00a      	beq.n	8003650 <vPortEnterCritical+0x4c>
	__asm volatile
 800363a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363e:	f383 8811 	msr	BASEPRI, r3
 8003642:	f3bf 8f6f 	isb	sy
 8003646:	f3bf 8f4f 	dsb	sy
 800364a:	603b      	str	r3, [r7, #0]
}
 800364c:	bf00      	nop
 800364e:	e7fe      	b.n	800364e <vPortEnterCritical+0x4a>
	}
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	2000000c 	.word	0x2000000c
 8003660:	e000ed04 	.word	0xe000ed04

08003664 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800366a:	4b12      	ldr	r3, [pc, #72]	; (80036b4 <vPortExitCritical+0x50>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10a      	bne.n	8003688 <vPortExitCritical+0x24>
	__asm volatile
 8003672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003676:	f383 8811 	msr	BASEPRI, r3
 800367a:	f3bf 8f6f 	isb	sy
 800367e:	f3bf 8f4f 	dsb	sy
 8003682:	607b      	str	r3, [r7, #4]
}
 8003684:	bf00      	nop
 8003686:	e7fe      	b.n	8003686 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003688:	4b0a      	ldr	r3, [pc, #40]	; (80036b4 <vPortExitCritical+0x50>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	3b01      	subs	r3, #1
 800368e:	4a09      	ldr	r2, [pc, #36]	; (80036b4 <vPortExitCritical+0x50>)
 8003690:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003692:	4b08      	ldr	r3, [pc, #32]	; (80036b4 <vPortExitCritical+0x50>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d105      	bne.n	80036a6 <vPortExitCritical+0x42>
 800369a:	2300      	movs	r3, #0
 800369c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80036a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80036a6:	bf00      	nop
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	2000000c 	.word	0x2000000c
	...

080036c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80036c0:	f3ef 8009 	mrs	r0, PSP
 80036c4:	f3bf 8f6f 	isb	sy
 80036c8:	4b15      	ldr	r3, [pc, #84]	; (8003720 <pxCurrentTCBConst>)
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	f01e 0f10 	tst.w	lr, #16
 80036d0:	bf08      	it	eq
 80036d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80036d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036da:	6010      	str	r0, [r2, #0]
 80036dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80036e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80036e4:	f380 8811 	msr	BASEPRI, r0
 80036e8:	f3bf 8f4f 	dsb	sy
 80036ec:	f3bf 8f6f 	isb	sy
 80036f0:	f7ff fc60 	bl	8002fb4 <vTaskSwitchContext>
 80036f4:	f04f 0000 	mov.w	r0, #0
 80036f8:	f380 8811 	msr	BASEPRI, r0
 80036fc:	bc09      	pop	{r0, r3}
 80036fe:	6819      	ldr	r1, [r3, #0]
 8003700:	6808      	ldr	r0, [r1, #0]
 8003702:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003706:	f01e 0f10 	tst.w	lr, #16
 800370a:	bf08      	it	eq
 800370c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003710:	f380 8809 	msr	PSP, r0
 8003714:	f3bf 8f6f 	isb	sy
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	f3af 8000 	nop.w

08003720 <pxCurrentTCBConst>:
 8003720:	20000098 	.word	0x20000098
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003724:	bf00      	nop
 8003726:	bf00      	nop

08003728 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
	__asm volatile
 800372e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003732:	f383 8811 	msr	BASEPRI, r3
 8003736:	f3bf 8f6f 	isb	sy
 800373a:	f3bf 8f4f 	dsb	sy
 800373e:	607b      	str	r3, [r7, #4]
}
 8003740:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003742:	f7ff fb7f 	bl	8002e44 <xTaskIncrementTick>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d003      	beq.n	8003754 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800374c:	4b06      	ldr	r3, [pc, #24]	; (8003768 <SysTick_Handler+0x40>)
 800374e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	2300      	movs	r3, #0
 8003756:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	f383 8811 	msr	BASEPRI, r3
}
 800375e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003760:	bf00      	nop
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	e000ed04 	.word	0xe000ed04

0800376c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003770:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <vPortSetupTimerInterrupt+0x34>)
 8003772:	2200      	movs	r2, #0
 8003774:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003776:	4b0b      	ldr	r3, [pc, #44]	; (80037a4 <vPortSetupTimerInterrupt+0x38>)
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800377c:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <vPortSetupTimerInterrupt+0x3c>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a0a      	ldr	r2, [pc, #40]	; (80037ac <vPortSetupTimerInterrupt+0x40>)
 8003782:	fba2 2303 	umull	r2, r3, r2, r3
 8003786:	099b      	lsrs	r3, r3, #6
 8003788:	4a09      	ldr	r2, [pc, #36]	; (80037b0 <vPortSetupTimerInterrupt+0x44>)
 800378a:	3b01      	subs	r3, #1
 800378c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800378e:	4b04      	ldr	r3, [pc, #16]	; (80037a0 <vPortSetupTimerInterrupt+0x34>)
 8003790:	2207      	movs	r2, #7
 8003792:	601a      	str	r2, [r3, #0]
}
 8003794:	bf00      	nop
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	e000e010 	.word	0xe000e010
 80037a4:	e000e018 	.word	0xe000e018
 80037a8:	20000000 	.word	0x20000000
 80037ac:	10624dd3 	.word	0x10624dd3
 80037b0:	e000e014 	.word	0xe000e014

080037b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80037b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80037c4 <vPortEnableVFP+0x10>
 80037b8:	6801      	ldr	r1, [r0, #0]
 80037ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80037be:	6001      	str	r1, [r0, #0]
 80037c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80037c2:	bf00      	nop
 80037c4:	e000ed88 	.word	0xe000ed88

080037c8 <pvPortMalloc>:
	    }                                                                 	\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b0a6      	sub	sp, #152	; 0x98
 80037cc:	af02      	add	r7, sp, #8
 80037ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 80037d0:	2300      	movs	r3, #0
 80037d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
size_t BlockSize, WantedSize;
char data[80];
WantedSize = xWantedSize;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	67bb      	str	r3, [r7, #120]	; 0x78

	vTaskSuspendAll();
 80037da:	f7ff fa89 	bl	8002cf0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 80037de:	4b83      	ldr	r3, [pc, #524]	; (80039ec <pvPortMalloc+0x224>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d104      	bne.n	80037f0 <pvPortMalloc+0x28>
		{
			prvHeapInit();
 80037e6:	f000 f993 	bl	8003b10 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 80037ea:	4b80      	ldr	r3, [pc, #512]	; (80039ec <pvPortMalloc+0x224>)
 80037ec:	2201      	movs	r2, #1
 80037ee:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00e      	beq.n	8003814 <pvPortMalloc+0x4c>
		{
			xWantedSize += heapSTRUCT_SIZE;
 80037f6:	2308      	movs	r3, #8
 80037f8:	461a      	mov	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4413      	add	r3, r2
 80037fe:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	2b00      	cmp	r3, #0
 8003808:	d004      	beq.n	8003814 <pvPortMalloc+0x4c>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f023 0307 	bic.w	r3, r3, #7
 8003810:	3308      	adds	r3, #8
 8003812:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 80c2 	beq.w	80039a0 <pvPortMalloc+0x1d8>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f241 32f7 	movw	r2, #5111	; 0x13f7
 8003822:	4293      	cmp	r3, r2
 8003824:	f200 80bc 	bhi.w	80039a0 <pvPortMalloc+0x1d8>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 8003828:	4b71      	ldr	r3, [pc, #452]	; (80039f0 <pvPortMalloc+0x228>)
 800382a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			pxBlock = xStart.pxNextFreeBlock;
 800382e:	4b70      	ldr	r3, [pc, #448]	; (80039f0 <pvPortMalloc+0x228>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003836:	e008      	b.n	800384a <pvPortMalloc+0x82>
			{
				pxPreviousBlock = pxBlock;
 8003838:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800383c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				pxBlock = pxBlock->pxNextFreeBlock;
 8003840:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800384a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	429a      	cmp	r2, r3
 8003854:	d904      	bls.n	8003860 <pvPortMalloc+0x98>
 8003856:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1eb      	bne.n	8003838 <pvPortMalloc+0x70>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 8003860:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003864:	4a63      	ldr	r2, [pc, #396]	; (80039f4 <pvPortMalloc+0x22c>)
 8003866:	4293      	cmp	r3, r2
 8003868:	f000 809a 	beq.w	80039a0 <pvPortMalloc+0x1d8>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 800386c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2208      	movs	r2, #8
 8003874:	4413      	add	r3, r2
 8003876:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800387a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003884:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003886:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2208      	movs	r2, #8
 8003892:	0052      	lsls	r2, r2, #1
 8003894:	4293      	cmp	r3, r2
 8003896:	d97b      	bls.n	8003990 <pvPortMalloc+0x1c8>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003898:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4413      	add	r3, r2
 80038a0:	677b      	str	r3, [r7, #116]	; 0x74

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80038a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	1ad2      	subs	r2, r2, r3
 80038ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038ae:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 80038b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 80038b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	673b      	str	r3, [r7, #112]	; 0x70
 80038be:	2300      	movs	r3, #0
 80038c0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80038c4:	4b4a      	ldr	r3, [pc, #296]	; (80039f0 <pvPortMalloc+0x228>)
 80038c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80038ca:	e03b      	b.n	8003944 <pvPortMalloc+0x17c>
 80038cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038d6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80038d8:	4413      	add	r3, r2
 80038da:	66bb      	str	r3, [r7, #104]	; 0x68
 80038dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038de:	667b      	str	r3, [r7, #100]	; 0x64
 80038e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80038e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d112      	bne.n	800390e <pvPortMalloc+0x146>
 80038e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	441a      	add	r2, r3
 80038fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038fc:	605a      	str	r2, [r3, #4]
 80038fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003902:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003904:	601a      	str	r2, [r3, #0]
 8003906:	2301      	movs	r3, #1
 8003908:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800390c:	e020      	b.n	8003950 <pvPortMalloc+0x188>
 800390e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003910:	663b      	str	r3, [r7, #96]	; 0x60
 8003912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003918:	4413      	add	r3, r2
 800391a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800391c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800391e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003920:	429a      	cmp	r2, r3
 8003922:	d10a      	bne.n	800393a <pvPortMalloc+0x172>
 8003924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	441a      	add	r2, r3
 800392e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003930:	605a      	str	r2, [r3, #4]
 8003932:	2301      	movs	r3, #1
 8003934:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003938:	e00a      	b.n	8003950 <pvPortMalloc+0x188>
 800393a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003944:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a2a      	ldr	r2, [pc, #168]	; (80039f4 <pvPortMalloc+0x22c>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d1bd      	bne.n	80038cc <pvPortMalloc+0x104>
 8003950:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003954:	f083 0301 	eor.w	r3, r3, #1
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d018      	beq.n	8003990 <pvPortMalloc+0x1c8>
 800395e:	4b24      	ldr	r3, [pc, #144]	; (80039f0 <pvPortMalloc+0x228>)
 8003960:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003964:	e004      	b.n	8003970 <pvPortMalloc+0x1a8>
 8003966:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003970:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800397a:	429a      	cmp	r2, r3
 800397c:	d8f3      	bhi.n	8003966 <pvPortMalloc+0x19e>
 800397e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800398c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800398e:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003990:	4b19      	ldr	r3, [pc, #100]	; (80039f8 <pvPortMalloc+0x230>)
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	4a16      	ldr	r2, [pc, #88]	; (80039f8 <pvPortMalloc+0x230>)
 800399e:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80039a0:	f7ff f9b4 	bl	8002d0c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

    BlockSize = xWantedSize;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	65bb      	str	r3, [r7, #88]	; 0x58
    sprintf(data, "pvReturn: %p | heapSTRUCT_SIZE: %0d | WantedSize: %3d | BlockSize: %3d\n\r", pvReturn, heapSTRUCT_SIZE, WantedSize, BlockSize);
 80039a8:	2308      	movs	r3, #8
 80039aa:	461a      	mov	r2, r3
 80039ac:	f107 0008 	add.w	r0, r7, #8
 80039b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039b2:	9301      	str	r3, [sp, #4]
 80039b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	4613      	mov	r3, r2
 80039ba:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80039be:	490f      	ldr	r1, [pc, #60]	; (80039fc <pvPortMalloc+0x234>)
 80039c0:	f000 f9b2 	bl	8003d28 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)data, strlen(data), 0xffff);
 80039c4:	f107 0308 	add.w	r3, r7, #8
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7fc fc01 	bl	80001d0 <strlen>
 80039ce:	4603      	mov	r3, r0
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	f107 0108 	add.w	r1, r7, #8
 80039d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039da:	4809      	ldr	r0, [pc, #36]	; (8003a00 <pvPortMalloc+0x238>)
 80039dc:	f7fe fb99 	bl	8002112 <HAL_UART_Transmit>

	return pvReturn;
 80039e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3790      	adds	r7, #144	; 0x90
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	200015b4 	.word	0x200015b4
 80039f0:	200015a4 	.word	0x200015a4
 80039f4:	200015ac 	.word	0x200015ac
 80039f8:	20000010 	.word	0x20000010
 80039fc:	080045d0 	.word	0x080045d0
 8003a00:	200015c0 	.word	0x200015c0

08003a04 <vPortFree>:
//        str[j] = tmp;
//    }
//}

void vPortFree( void *pv )
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b08c      	sub	sp, #48	; 0x30
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	627b      	str	r3, [r7, #36]	; 0x24
BlockLink_t *pxLink;

	if( pv != NULL )
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d071      	beq.n	8003afa <vPortFree+0xf6>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 8003a16:	2308      	movs	r3, #8
 8003a18:	425b      	negs	r3, r3
 8003a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a1c:	4413      	add	r3, r2
 8003a1e:	627b      	str	r3, [r7, #36]	; 0x24

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	623b      	str	r3, [r7, #32]

		vTaskSuspendAll();
 8003a24:	f7ff f964 	bl	8002cf0 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003a28:	6a3b      	ldr	r3, [r7, #32]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	61fb      	str	r3, [r7, #28]
 8003a2e:	2300      	movs	r3, #0
 8003a30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a34:	4b33      	ldr	r3, [pc, #204]	; (8003b04 <vPortFree+0x100>)
 8003a36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a38:	e037      	b.n	8003aaa <vPortFree+0xa6>
 8003a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	61bb      	str	r3, [r7, #24]
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	69fa      	ldr	r2, [r7, #28]
 8003a44:	4413      	add	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	613b      	str	r3, [r7, #16]
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d111      	bne.n	8003a78 <vPortFree+0x74>
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	601a      	str	r2, [r3, #0]
 8003a5c:	6a3b      	ldr	r3, [r7, #32]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	441a      	add	r2, r3
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	605a      	str	r2, [r3, #4]
 8003a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6c:	6a3a      	ldr	r2, [r7, #32]
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	2301      	movs	r3, #1
 8003a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a76:	e01d      	b.n	8003ab4 <vPortFree+0xb0>
 8003a78:	6a3b      	ldr	r3, [r7, #32]
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	4413      	add	r3, r2
 8003a84:	60bb      	str	r3, [r7, #8]
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d10a      	bne.n	8003aa4 <vPortFree+0xa0>
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	6a3b      	ldr	r3, [r7, #32]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	441a      	add	r2, r3
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	605a      	str	r2, [r3, #4]
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003aa2:	e007      	b.n	8003ab4 <vPortFree+0xb0>
 8003aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a16      	ldr	r2, [pc, #88]	; (8003b08 <vPortFree+0x104>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d1c2      	bne.n	8003a3a <vPortFree+0x36>
 8003ab4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ab8:	f083 0301 	eor.w	r3, r3, #1
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d012      	beq.n	8003ae8 <vPortFree+0xe4>
 8003ac2:	4b10      	ldr	r3, [pc, #64]	; (8003b04 <vPortFree+0x100>)
 8003ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ac6:	e002      	b.n	8003ace <vPortFree+0xca>
 8003ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	69fa      	ldr	r2, [r7, #28]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d8f6      	bhi.n	8003ac8 <vPortFree+0xc4>
 8003ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	6a3b      	ldr	r3, [r7, #32]
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae4:	6a3a      	ldr	r2, [r7, #32]
 8003ae6:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	4b07      	ldr	r3, [pc, #28]	; (8003b0c <vPortFree+0x108>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4413      	add	r3, r2
 8003af2:	4a06      	ldr	r2, [pc, #24]	; (8003b0c <vPortFree+0x108>)
 8003af4:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 8003af6:	f7ff f909 	bl	8002d0c <xTaskResumeAll>
	}
}
 8003afa:	bf00      	nop
 8003afc:	3730      	adds	r7, #48	; 0x30
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	200015a4 	.word	0x200015a4
 8003b08:	200015ac 	.word	0x200015ac
 8003b0c:	20000010 	.word	0x20000010

08003b10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8003b16:	4b10      	ldr	r3, [pc, #64]	; (8003b58 <prvHeapInit+0x48>)
 8003b18:	f023 0307 	bic.w	r3, r3, #7
 8003b1c:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003b1e:	4a0f      	ldr	r2, [pc, #60]	; (8003b5c <prvHeapInit+0x4c>)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003b24:	4b0d      	ldr	r3, [pc, #52]	; (8003b5c <prvHeapInit+0x4c>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8003b2a:	4b0d      	ldr	r3, [pc, #52]	; (8003b60 <prvHeapInit+0x50>)
 8003b2c:	f241 32f8 	movw	r2, #5112	; 0x13f8
 8003b30:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 8003b32:	4b0b      	ldr	r3, [pc, #44]	; (8003b60 <prvHeapInit+0x50>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	f241 32f8 	movw	r2, #5112	; 0x13f8
 8003b42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	4a06      	ldr	r2, [pc, #24]	; (8003b60 <prvHeapInit+0x50>)
 8003b48:	601a      	str	r2, [r3, #0]
}
 8003b4a:	bf00      	nop
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	200001ac 	.word	0x200001ac
 8003b5c:	200015a4 	.word	0x200015a4
 8003b60:	200015ac 	.word	0x200015ac

08003b64 <vPrintFreeList>:
/*-----------------------------------------------------------*/

void vPrintFreeList(void)
{
 8003b64:	b590      	push	{r4, r7, lr}
 8003b66:	b09d      	sub	sp, #116	; 0x74
 8003b68:	af02      	add	r7, sp, #8
     * Reference format
     * > sprintf(data, "StartAddress heapSTRUCT_SIZE xBlockSize EndAddress\n\r");
     * > sprintf(data, "%p         %d           %4d         %p\n\r", ...);
     * > sprintf(data, "configADJUSTED_HEAP_SIZE: %0d xFreeBytesRemaining: %0d\n\r", ...);
     */
	char *TITLE = "StartAddress\t|heapSTRUCT_SIZE\t|xBlockSize\t|EndAddress\r\n";
 8003b6a:	4b48      	ldr	r3, [pc, #288]	; (8003c8c <vPrintFreeList+0x128>)
 8003b6c:	663b      	str	r3, [r7, #96]	; 0x60
	char buf[64], start_addr[16], end_addr[16];
	memset(buf, '\0', sizeof(buf));
 8003b6e:	f107 0320 	add.w	r3, r7, #32
 8003b72:	2240      	movs	r2, #64	; 0x40
 8003b74:	2100      	movs	r1, #0
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 f8ce 	bl	8003d18 <memset>
	memset(start_addr, '\0', sizeof(start_addr));
 8003b7c:	f107 0310 	add.w	r3, r7, #16
 8003b80:	2210      	movs	r2, #16
 8003b82:	2100      	movs	r1, #0
 8003b84:	4618      	mov	r0, r3
 8003b86:	f000 f8c7 	bl	8003d18 <memset>
	memset(end_addr, '\0', sizeof(end_addr));
 8003b8a:	463b      	mov	r3, r7
 8003b8c:	2210      	movs	r2, #16
 8003b8e:	2100      	movs	r1, #0
 8003b90:	4618      	mov	r0, r3
 8003b92:	f000 f8c1 	bl	8003d18 <memset>

	HAL_UART_Transmit(&huart2, (uint8_t *)TITLE, strlen(TITLE), 0xffff);
 8003b96:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003b98:	f7fc fb1a 	bl	80001d0 <strlen>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ba4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003ba6:	483a      	ldr	r0, [pc, #232]	; (8003c90 <vPrintFreeList+0x12c>)
 8003ba8:	f7fe fab3 	bl	8002112 <HAL_UART_Transmit>
	BlockLink_t *pBlock = xStart.pxNextFreeBlock;
 8003bac:	4b39      	ldr	r3, [pc, #228]	; (8003c94 <vPrintFreeList+0x130>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	667b      	str	r3, [r7, #100]	; 0x64
	while (pBlock != &xEnd) {
 8003bb2:	e044      	b.n	8003c3e <vPrintFreeList+0xda>
		memset(buf, '\0', sizeof(buf));
 8003bb4:	f107 0320 	add.w	r3, r7, #32
 8003bb8:	2240      	movs	r2, #64	; 0x40
 8003bba:	2100      	movs	r1, #0
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 f8ab 	bl	8003d18 <memset>
		memset(start_addr, '\0', sizeof(start_addr));
 8003bc2:	f107 0310 	add.w	r3, r7, #16
 8003bc6:	2210      	movs	r2, #16
 8003bc8:	2100      	movs	r1, #0
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 f8a4 	bl	8003d18 <memset>
		memset(end_addr, '\0', sizeof(end_addr));
 8003bd0:	463b      	mov	r3, r7
 8003bd2:	2210      	movs	r2, #16
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 f89e 	bl	8003d18 <memset>
		Uint32ConvertHex((uint32_t)pBlock, start_addr);
 8003bdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bde:	f107 0210 	add.w	r2, r7, #16
 8003be2:	4611      	mov	r1, r2
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7ff faf7 	bl	80031d8 <Uint32ConvertHex>
		Uint32ConvertHex((uint32_t)pBlock + (uint32_t)(pBlock->xBlockSize), end_addr);
 8003bea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bf0:	4413      	add	r3, r2
 8003bf2:	463a      	mov	r2, r7
 8003bf4:	4611      	mov	r1, r2
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7ff faee 	bl	80031d8 <Uint32ConvertHex>
		sprintf(buf, "%s\t%d\t%d\t%s\r\n", start_addr, heapSTRUCT_SIZE,
 8003bfc:	2308      	movs	r3, #8
 8003bfe:	461c      	mov	r4, r3
 8003c00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f107 0110 	add.w	r1, r7, #16
 8003c08:	f107 0020 	add.w	r0, r7, #32
 8003c0c:	463a      	mov	r2, r7
 8003c0e:	9201      	str	r2, [sp, #4]
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	4623      	mov	r3, r4
 8003c14:	460a      	mov	r2, r1
 8003c16:	4920      	ldr	r1, [pc, #128]	; (8003c98 <vPrintFreeList+0x134>)
 8003c18:	f000 f886 	bl	8003d28 <siprintf>
										   pBlock->xBlockSize, end_addr);
		HAL_UART_Transmit(&huart2, (uint8_t *)buf, strlen(buf), 0xffff);
 8003c1c:	f107 0320 	add.w	r3, r7, #32
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fc fad5 	bl	80001d0 <strlen>
 8003c26:	4603      	mov	r3, r0
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	f107 0120 	add.w	r1, r7, #32
 8003c2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c32:	4817      	ldr	r0, [pc, #92]	; (8003c90 <vPrintFreeList+0x12c>)
 8003c34:	f7fe fa6d 	bl	8002112 <HAL_UART_Transmit>
		pBlock = pBlock->pxNextFreeBlock;
 8003c38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	667b      	str	r3, [r7, #100]	; 0x64
	while (pBlock != &xEnd) {
 8003c3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c40:	4a16      	ldr	r2, [pc, #88]	; (8003c9c <vPrintFreeList+0x138>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d1b6      	bne.n	8003bb4 <vPrintFreeList+0x50>
	}
	memset(buf,'\0',sizeof(buf));
 8003c46:	f107 0320 	add.w	r3, r7, #32
 8003c4a:	2240      	movs	r2, #64	; 0x40
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 f862 	bl	8003d18 <memset>
	sprintf(buf," configADJUSTED_HEAP_SIZE:%0d   xFreeBytesRemaining:%d \n\r",configADJUSTED_HEAP_SIZE, xFreeBytesRemaining );
 8003c54:	4b12      	ldr	r3, [pc, #72]	; (8003ca0 <vPrintFreeList+0x13c>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f107 0020 	add.w	r0, r7, #32
 8003c5c:	f241 32f8 	movw	r2, #5112	; 0x13f8
 8003c60:	4910      	ldr	r1, [pc, #64]	; (8003ca4 <vPrintFreeList+0x140>)
 8003c62:	f000 f861 	bl	8003d28 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)buf,strlen(buf),0xffff);
 8003c66:	f107 0320 	add.w	r3, r7, #32
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7fc fab0 	bl	80001d0 <strlen>
 8003c70:	4603      	mov	r3, r0
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	f107 0120 	add.w	r1, r7, #32
 8003c78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c7c:	4804      	ldr	r0, [pc, #16]	; (8003c90 <vPrintFreeList+0x12c>)
 8003c7e:	f7fe fa48 	bl	8002112 <HAL_UART_Transmit>

}
 8003c82:	bf00      	nop
 8003c84:	376c      	adds	r7, #108	; 0x6c
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd90      	pop	{r4, r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	0800461c 	.word	0x0800461c
 8003c90:	200015c0 	.word	0x200015c0
 8003c94:	200015a4 	.word	0x200015a4
 8003c98:	08004654 	.word	0x08004654
 8003c9c:	200015ac 	.word	0x200015ac
 8003ca0:	20000010 	.word	0x20000010
 8003ca4:	08004664 	.word	0x08004664

08003ca8 <__errno>:
 8003ca8:	4b01      	ldr	r3, [pc, #4]	; (8003cb0 <__errno+0x8>)
 8003caa:	6818      	ldr	r0, [r3, #0]
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	20000014 	.word	0x20000014

08003cb4 <__libc_init_array>:
 8003cb4:	b570      	push	{r4, r5, r6, lr}
 8003cb6:	4d0d      	ldr	r5, [pc, #52]	; (8003cec <__libc_init_array+0x38>)
 8003cb8:	4c0d      	ldr	r4, [pc, #52]	; (8003cf0 <__libc_init_array+0x3c>)
 8003cba:	1b64      	subs	r4, r4, r5
 8003cbc:	10a4      	asrs	r4, r4, #2
 8003cbe:	2600      	movs	r6, #0
 8003cc0:	42a6      	cmp	r6, r4
 8003cc2:	d109      	bne.n	8003cd8 <__libc_init_array+0x24>
 8003cc4:	4d0b      	ldr	r5, [pc, #44]	; (8003cf4 <__libc_init_array+0x40>)
 8003cc6:	4c0c      	ldr	r4, [pc, #48]	; (8003cf8 <__libc_init_array+0x44>)
 8003cc8:	f000 fc56 	bl	8004578 <_init>
 8003ccc:	1b64      	subs	r4, r4, r5
 8003cce:	10a4      	asrs	r4, r4, #2
 8003cd0:	2600      	movs	r6, #0
 8003cd2:	42a6      	cmp	r6, r4
 8003cd4:	d105      	bne.n	8003ce2 <__libc_init_array+0x2e>
 8003cd6:	bd70      	pop	{r4, r5, r6, pc}
 8003cd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cdc:	4798      	blx	r3
 8003cde:	3601      	adds	r6, #1
 8003ce0:	e7ee      	b.n	8003cc0 <__libc_init_array+0xc>
 8003ce2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ce6:	4798      	blx	r3
 8003ce8:	3601      	adds	r6, #1
 8003cea:	e7f2      	b.n	8003cd2 <__libc_init_array+0x1e>
 8003cec:	080046f4 	.word	0x080046f4
 8003cf0:	080046f4 	.word	0x080046f4
 8003cf4:	080046f4 	.word	0x080046f4
 8003cf8:	080046f8 	.word	0x080046f8

08003cfc <memcpy>:
 8003cfc:	440a      	add	r2, r1
 8003cfe:	4291      	cmp	r1, r2
 8003d00:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d04:	d100      	bne.n	8003d08 <memcpy+0xc>
 8003d06:	4770      	bx	lr
 8003d08:	b510      	push	{r4, lr}
 8003d0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d12:	4291      	cmp	r1, r2
 8003d14:	d1f9      	bne.n	8003d0a <memcpy+0xe>
 8003d16:	bd10      	pop	{r4, pc}

08003d18 <memset>:
 8003d18:	4402      	add	r2, r0
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d100      	bne.n	8003d22 <memset+0xa>
 8003d20:	4770      	bx	lr
 8003d22:	f803 1b01 	strb.w	r1, [r3], #1
 8003d26:	e7f9      	b.n	8003d1c <memset+0x4>

08003d28 <siprintf>:
 8003d28:	b40e      	push	{r1, r2, r3}
 8003d2a:	b500      	push	{lr}
 8003d2c:	b09c      	sub	sp, #112	; 0x70
 8003d2e:	ab1d      	add	r3, sp, #116	; 0x74
 8003d30:	9002      	str	r0, [sp, #8]
 8003d32:	9006      	str	r0, [sp, #24]
 8003d34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d38:	4809      	ldr	r0, [pc, #36]	; (8003d60 <siprintf+0x38>)
 8003d3a:	9107      	str	r1, [sp, #28]
 8003d3c:	9104      	str	r1, [sp, #16]
 8003d3e:	4909      	ldr	r1, [pc, #36]	; (8003d64 <siprintf+0x3c>)
 8003d40:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d44:	9105      	str	r1, [sp, #20]
 8003d46:	6800      	ldr	r0, [r0, #0]
 8003d48:	9301      	str	r3, [sp, #4]
 8003d4a:	a902      	add	r1, sp, #8
 8003d4c:	f000 f870 	bl	8003e30 <_svfiprintf_r>
 8003d50:	9b02      	ldr	r3, [sp, #8]
 8003d52:	2200      	movs	r2, #0
 8003d54:	701a      	strb	r2, [r3, #0]
 8003d56:	b01c      	add	sp, #112	; 0x70
 8003d58:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d5c:	b003      	add	sp, #12
 8003d5e:	4770      	bx	lr
 8003d60:	20000014 	.word	0x20000014
 8003d64:	ffff0208 	.word	0xffff0208

08003d68 <strcpy>:
 8003d68:	4603      	mov	r3, r0
 8003d6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d6e:	f803 2b01 	strb.w	r2, [r3], #1
 8003d72:	2a00      	cmp	r2, #0
 8003d74:	d1f9      	bne.n	8003d6a <strcpy+0x2>
 8003d76:	4770      	bx	lr

08003d78 <__ssputs_r>:
 8003d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d7c:	688e      	ldr	r6, [r1, #8]
 8003d7e:	429e      	cmp	r6, r3
 8003d80:	4682      	mov	sl, r0
 8003d82:	460c      	mov	r4, r1
 8003d84:	4690      	mov	r8, r2
 8003d86:	461f      	mov	r7, r3
 8003d88:	d838      	bhi.n	8003dfc <__ssputs_r+0x84>
 8003d8a:	898a      	ldrh	r2, [r1, #12]
 8003d8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d90:	d032      	beq.n	8003df8 <__ssputs_r+0x80>
 8003d92:	6825      	ldr	r5, [r4, #0]
 8003d94:	6909      	ldr	r1, [r1, #16]
 8003d96:	eba5 0901 	sub.w	r9, r5, r1
 8003d9a:	6965      	ldr	r5, [r4, #20]
 8003d9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003da0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003da4:	3301      	adds	r3, #1
 8003da6:	444b      	add	r3, r9
 8003da8:	106d      	asrs	r5, r5, #1
 8003daa:	429d      	cmp	r5, r3
 8003dac:	bf38      	it	cc
 8003dae:	461d      	movcc	r5, r3
 8003db0:	0553      	lsls	r3, r2, #21
 8003db2:	d531      	bpl.n	8003e18 <__ssputs_r+0xa0>
 8003db4:	4629      	mov	r1, r5
 8003db6:	f000 fb39 	bl	800442c <_malloc_r>
 8003dba:	4606      	mov	r6, r0
 8003dbc:	b950      	cbnz	r0, 8003dd4 <__ssputs_r+0x5c>
 8003dbe:	230c      	movs	r3, #12
 8003dc0:	f8ca 3000 	str.w	r3, [sl]
 8003dc4:	89a3      	ldrh	r3, [r4, #12]
 8003dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dca:	81a3      	strh	r3, [r4, #12]
 8003dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dd4:	6921      	ldr	r1, [r4, #16]
 8003dd6:	464a      	mov	r2, r9
 8003dd8:	f7ff ff90 	bl	8003cfc <memcpy>
 8003ddc:	89a3      	ldrh	r3, [r4, #12]
 8003dde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003de6:	81a3      	strh	r3, [r4, #12]
 8003de8:	6126      	str	r6, [r4, #16]
 8003dea:	6165      	str	r5, [r4, #20]
 8003dec:	444e      	add	r6, r9
 8003dee:	eba5 0509 	sub.w	r5, r5, r9
 8003df2:	6026      	str	r6, [r4, #0]
 8003df4:	60a5      	str	r5, [r4, #8]
 8003df6:	463e      	mov	r6, r7
 8003df8:	42be      	cmp	r6, r7
 8003dfa:	d900      	bls.n	8003dfe <__ssputs_r+0x86>
 8003dfc:	463e      	mov	r6, r7
 8003dfe:	4632      	mov	r2, r6
 8003e00:	6820      	ldr	r0, [r4, #0]
 8003e02:	4641      	mov	r1, r8
 8003e04:	f000 faa8 	bl	8004358 <memmove>
 8003e08:	68a3      	ldr	r3, [r4, #8]
 8003e0a:	6822      	ldr	r2, [r4, #0]
 8003e0c:	1b9b      	subs	r3, r3, r6
 8003e0e:	4432      	add	r2, r6
 8003e10:	60a3      	str	r3, [r4, #8]
 8003e12:	6022      	str	r2, [r4, #0]
 8003e14:	2000      	movs	r0, #0
 8003e16:	e7db      	b.n	8003dd0 <__ssputs_r+0x58>
 8003e18:	462a      	mov	r2, r5
 8003e1a:	f000 fb61 	bl	80044e0 <_realloc_r>
 8003e1e:	4606      	mov	r6, r0
 8003e20:	2800      	cmp	r0, #0
 8003e22:	d1e1      	bne.n	8003de8 <__ssputs_r+0x70>
 8003e24:	6921      	ldr	r1, [r4, #16]
 8003e26:	4650      	mov	r0, sl
 8003e28:	f000 fab0 	bl	800438c <_free_r>
 8003e2c:	e7c7      	b.n	8003dbe <__ssputs_r+0x46>
	...

08003e30 <_svfiprintf_r>:
 8003e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e34:	4698      	mov	r8, r3
 8003e36:	898b      	ldrh	r3, [r1, #12]
 8003e38:	061b      	lsls	r3, r3, #24
 8003e3a:	b09d      	sub	sp, #116	; 0x74
 8003e3c:	4607      	mov	r7, r0
 8003e3e:	460d      	mov	r5, r1
 8003e40:	4614      	mov	r4, r2
 8003e42:	d50e      	bpl.n	8003e62 <_svfiprintf_r+0x32>
 8003e44:	690b      	ldr	r3, [r1, #16]
 8003e46:	b963      	cbnz	r3, 8003e62 <_svfiprintf_r+0x32>
 8003e48:	2140      	movs	r1, #64	; 0x40
 8003e4a:	f000 faef 	bl	800442c <_malloc_r>
 8003e4e:	6028      	str	r0, [r5, #0]
 8003e50:	6128      	str	r0, [r5, #16]
 8003e52:	b920      	cbnz	r0, 8003e5e <_svfiprintf_r+0x2e>
 8003e54:	230c      	movs	r3, #12
 8003e56:	603b      	str	r3, [r7, #0]
 8003e58:	f04f 30ff 	mov.w	r0, #4294967295
 8003e5c:	e0d1      	b.n	8004002 <_svfiprintf_r+0x1d2>
 8003e5e:	2340      	movs	r3, #64	; 0x40
 8003e60:	616b      	str	r3, [r5, #20]
 8003e62:	2300      	movs	r3, #0
 8003e64:	9309      	str	r3, [sp, #36]	; 0x24
 8003e66:	2320      	movs	r3, #32
 8003e68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e70:	2330      	movs	r3, #48	; 0x30
 8003e72:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800401c <_svfiprintf_r+0x1ec>
 8003e76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e7a:	f04f 0901 	mov.w	r9, #1
 8003e7e:	4623      	mov	r3, r4
 8003e80:	469a      	mov	sl, r3
 8003e82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e86:	b10a      	cbz	r2, 8003e8c <_svfiprintf_r+0x5c>
 8003e88:	2a25      	cmp	r2, #37	; 0x25
 8003e8a:	d1f9      	bne.n	8003e80 <_svfiprintf_r+0x50>
 8003e8c:	ebba 0b04 	subs.w	fp, sl, r4
 8003e90:	d00b      	beq.n	8003eaa <_svfiprintf_r+0x7a>
 8003e92:	465b      	mov	r3, fp
 8003e94:	4622      	mov	r2, r4
 8003e96:	4629      	mov	r1, r5
 8003e98:	4638      	mov	r0, r7
 8003e9a:	f7ff ff6d 	bl	8003d78 <__ssputs_r>
 8003e9e:	3001      	adds	r0, #1
 8003ea0:	f000 80aa 	beq.w	8003ff8 <_svfiprintf_r+0x1c8>
 8003ea4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ea6:	445a      	add	r2, fp
 8003ea8:	9209      	str	r2, [sp, #36]	; 0x24
 8003eaa:	f89a 3000 	ldrb.w	r3, [sl]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 80a2 	beq.w	8003ff8 <_svfiprintf_r+0x1c8>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8003eba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ebe:	f10a 0a01 	add.w	sl, sl, #1
 8003ec2:	9304      	str	r3, [sp, #16]
 8003ec4:	9307      	str	r3, [sp, #28]
 8003ec6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003eca:	931a      	str	r3, [sp, #104]	; 0x68
 8003ecc:	4654      	mov	r4, sl
 8003ece:	2205      	movs	r2, #5
 8003ed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ed4:	4851      	ldr	r0, [pc, #324]	; (800401c <_svfiprintf_r+0x1ec>)
 8003ed6:	f7fc f983 	bl	80001e0 <memchr>
 8003eda:	9a04      	ldr	r2, [sp, #16]
 8003edc:	b9d8      	cbnz	r0, 8003f16 <_svfiprintf_r+0xe6>
 8003ede:	06d0      	lsls	r0, r2, #27
 8003ee0:	bf44      	itt	mi
 8003ee2:	2320      	movmi	r3, #32
 8003ee4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ee8:	0711      	lsls	r1, r2, #28
 8003eea:	bf44      	itt	mi
 8003eec:	232b      	movmi	r3, #43	; 0x2b
 8003eee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ef2:	f89a 3000 	ldrb.w	r3, [sl]
 8003ef6:	2b2a      	cmp	r3, #42	; 0x2a
 8003ef8:	d015      	beq.n	8003f26 <_svfiprintf_r+0xf6>
 8003efa:	9a07      	ldr	r2, [sp, #28]
 8003efc:	4654      	mov	r4, sl
 8003efe:	2000      	movs	r0, #0
 8003f00:	f04f 0c0a 	mov.w	ip, #10
 8003f04:	4621      	mov	r1, r4
 8003f06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f0a:	3b30      	subs	r3, #48	; 0x30
 8003f0c:	2b09      	cmp	r3, #9
 8003f0e:	d94e      	bls.n	8003fae <_svfiprintf_r+0x17e>
 8003f10:	b1b0      	cbz	r0, 8003f40 <_svfiprintf_r+0x110>
 8003f12:	9207      	str	r2, [sp, #28]
 8003f14:	e014      	b.n	8003f40 <_svfiprintf_r+0x110>
 8003f16:	eba0 0308 	sub.w	r3, r0, r8
 8003f1a:	fa09 f303 	lsl.w	r3, r9, r3
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	9304      	str	r3, [sp, #16]
 8003f22:	46a2      	mov	sl, r4
 8003f24:	e7d2      	b.n	8003ecc <_svfiprintf_r+0x9c>
 8003f26:	9b03      	ldr	r3, [sp, #12]
 8003f28:	1d19      	adds	r1, r3, #4
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	9103      	str	r1, [sp, #12]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	bfbb      	ittet	lt
 8003f32:	425b      	neglt	r3, r3
 8003f34:	f042 0202 	orrlt.w	r2, r2, #2
 8003f38:	9307      	strge	r3, [sp, #28]
 8003f3a:	9307      	strlt	r3, [sp, #28]
 8003f3c:	bfb8      	it	lt
 8003f3e:	9204      	strlt	r2, [sp, #16]
 8003f40:	7823      	ldrb	r3, [r4, #0]
 8003f42:	2b2e      	cmp	r3, #46	; 0x2e
 8003f44:	d10c      	bne.n	8003f60 <_svfiprintf_r+0x130>
 8003f46:	7863      	ldrb	r3, [r4, #1]
 8003f48:	2b2a      	cmp	r3, #42	; 0x2a
 8003f4a:	d135      	bne.n	8003fb8 <_svfiprintf_r+0x188>
 8003f4c:	9b03      	ldr	r3, [sp, #12]
 8003f4e:	1d1a      	adds	r2, r3, #4
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	9203      	str	r2, [sp, #12]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	bfb8      	it	lt
 8003f58:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f5c:	3402      	adds	r4, #2
 8003f5e:	9305      	str	r3, [sp, #20]
 8003f60:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800402c <_svfiprintf_r+0x1fc>
 8003f64:	7821      	ldrb	r1, [r4, #0]
 8003f66:	2203      	movs	r2, #3
 8003f68:	4650      	mov	r0, sl
 8003f6a:	f7fc f939 	bl	80001e0 <memchr>
 8003f6e:	b140      	cbz	r0, 8003f82 <_svfiprintf_r+0x152>
 8003f70:	2340      	movs	r3, #64	; 0x40
 8003f72:	eba0 000a 	sub.w	r0, r0, sl
 8003f76:	fa03 f000 	lsl.w	r0, r3, r0
 8003f7a:	9b04      	ldr	r3, [sp, #16]
 8003f7c:	4303      	orrs	r3, r0
 8003f7e:	3401      	adds	r4, #1
 8003f80:	9304      	str	r3, [sp, #16]
 8003f82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f86:	4826      	ldr	r0, [pc, #152]	; (8004020 <_svfiprintf_r+0x1f0>)
 8003f88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f8c:	2206      	movs	r2, #6
 8003f8e:	f7fc f927 	bl	80001e0 <memchr>
 8003f92:	2800      	cmp	r0, #0
 8003f94:	d038      	beq.n	8004008 <_svfiprintf_r+0x1d8>
 8003f96:	4b23      	ldr	r3, [pc, #140]	; (8004024 <_svfiprintf_r+0x1f4>)
 8003f98:	bb1b      	cbnz	r3, 8003fe2 <_svfiprintf_r+0x1b2>
 8003f9a:	9b03      	ldr	r3, [sp, #12]
 8003f9c:	3307      	adds	r3, #7
 8003f9e:	f023 0307 	bic.w	r3, r3, #7
 8003fa2:	3308      	adds	r3, #8
 8003fa4:	9303      	str	r3, [sp, #12]
 8003fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fa8:	4433      	add	r3, r6
 8003faa:	9309      	str	r3, [sp, #36]	; 0x24
 8003fac:	e767      	b.n	8003e7e <_svfiprintf_r+0x4e>
 8003fae:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fb2:	460c      	mov	r4, r1
 8003fb4:	2001      	movs	r0, #1
 8003fb6:	e7a5      	b.n	8003f04 <_svfiprintf_r+0xd4>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	3401      	adds	r4, #1
 8003fbc:	9305      	str	r3, [sp, #20]
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	f04f 0c0a 	mov.w	ip, #10
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fca:	3a30      	subs	r2, #48	; 0x30
 8003fcc:	2a09      	cmp	r2, #9
 8003fce:	d903      	bls.n	8003fd8 <_svfiprintf_r+0x1a8>
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d0c5      	beq.n	8003f60 <_svfiprintf_r+0x130>
 8003fd4:	9105      	str	r1, [sp, #20]
 8003fd6:	e7c3      	b.n	8003f60 <_svfiprintf_r+0x130>
 8003fd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fdc:	4604      	mov	r4, r0
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e7f0      	b.n	8003fc4 <_svfiprintf_r+0x194>
 8003fe2:	ab03      	add	r3, sp, #12
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	462a      	mov	r2, r5
 8003fe8:	4b0f      	ldr	r3, [pc, #60]	; (8004028 <_svfiprintf_r+0x1f8>)
 8003fea:	a904      	add	r1, sp, #16
 8003fec:	4638      	mov	r0, r7
 8003fee:	f3af 8000 	nop.w
 8003ff2:	1c42      	adds	r2, r0, #1
 8003ff4:	4606      	mov	r6, r0
 8003ff6:	d1d6      	bne.n	8003fa6 <_svfiprintf_r+0x176>
 8003ff8:	89ab      	ldrh	r3, [r5, #12]
 8003ffa:	065b      	lsls	r3, r3, #25
 8003ffc:	f53f af2c 	bmi.w	8003e58 <_svfiprintf_r+0x28>
 8004000:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004002:	b01d      	add	sp, #116	; 0x74
 8004004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004008:	ab03      	add	r3, sp, #12
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	462a      	mov	r2, r5
 800400e:	4b06      	ldr	r3, [pc, #24]	; (8004028 <_svfiprintf_r+0x1f8>)
 8004010:	a904      	add	r1, sp, #16
 8004012:	4638      	mov	r0, r7
 8004014:	f000 f87a 	bl	800410c <_printf_i>
 8004018:	e7eb      	b.n	8003ff2 <_svfiprintf_r+0x1c2>
 800401a:	bf00      	nop
 800401c:	080046b8 	.word	0x080046b8
 8004020:	080046c2 	.word	0x080046c2
 8004024:	00000000 	.word	0x00000000
 8004028:	08003d79 	.word	0x08003d79
 800402c:	080046be 	.word	0x080046be

08004030 <_printf_common>:
 8004030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004034:	4616      	mov	r6, r2
 8004036:	4699      	mov	r9, r3
 8004038:	688a      	ldr	r2, [r1, #8]
 800403a:	690b      	ldr	r3, [r1, #16]
 800403c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004040:	4293      	cmp	r3, r2
 8004042:	bfb8      	it	lt
 8004044:	4613      	movlt	r3, r2
 8004046:	6033      	str	r3, [r6, #0]
 8004048:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800404c:	4607      	mov	r7, r0
 800404e:	460c      	mov	r4, r1
 8004050:	b10a      	cbz	r2, 8004056 <_printf_common+0x26>
 8004052:	3301      	adds	r3, #1
 8004054:	6033      	str	r3, [r6, #0]
 8004056:	6823      	ldr	r3, [r4, #0]
 8004058:	0699      	lsls	r1, r3, #26
 800405a:	bf42      	ittt	mi
 800405c:	6833      	ldrmi	r3, [r6, #0]
 800405e:	3302      	addmi	r3, #2
 8004060:	6033      	strmi	r3, [r6, #0]
 8004062:	6825      	ldr	r5, [r4, #0]
 8004064:	f015 0506 	ands.w	r5, r5, #6
 8004068:	d106      	bne.n	8004078 <_printf_common+0x48>
 800406a:	f104 0a19 	add.w	sl, r4, #25
 800406e:	68e3      	ldr	r3, [r4, #12]
 8004070:	6832      	ldr	r2, [r6, #0]
 8004072:	1a9b      	subs	r3, r3, r2
 8004074:	42ab      	cmp	r3, r5
 8004076:	dc26      	bgt.n	80040c6 <_printf_common+0x96>
 8004078:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800407c:	1e13      	subs	r3, r2, #0
 800407e:	6822      	ldr	r2, [r4, #0]
 8004080:	bf18      	it	ne
 8004082:	2301      	movne	r3, #1
 8004084:	0692      	lsls	r2, r2, #26
 8004086:	d42b      	bmi.n	80040e0 <_printf_common+0xb0>
 8004088:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800408c:	4649      	mov	r1, r9
 800408e:	4638      	mov	r0, r7
 8004090:	47c0      	blx	r8
 8004092:	3001      	adds	r0, #1
 8004094:	d01e      	beq.n	80040d4 <_printf_common+0xa4>
 8004096:	6823      	ldr	r3, [r4, #0]
 8004098:	68e5      	ldr	r5, [r4, #12]
 800409a:	6832      	ldr	r2, [r6, #0]
 800409c:	f003 0306 	and.w	r3, r3, #6
 80040a0:	2b04      	cmp	r3, #4
 80040a2:	bf08      	it	eq
 80040a4:	1aad      	subeq	r5, r5, r2
 80040a6:	68a3      	ldr	r3, [r4, #8]
 80040a8:	6922      	ldr	r2, [r4, #16]
 80040aa:	bf0c      	ite	eq
 80040ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040b0:	2500      	movne	r5, #0
 80040b2:	4293      	cmp	r3, r2
 80040b4:	bfc4      	itt	gt
 80040b6:	1a9b      	subgt	r3, r3, r2
 80040b8:	18ed      	addgt	r5, r5, r3
 80040ba:	2600      	movs	r6, #0
 80040bc:	341a      	adds	r4, #26
 80040be:	42b5      	cmp	r5, r6
 80040c0:	d11a      	bne.n	80040f8 <_printf_common+0xc8>
 80040c2:	2000      	movs	r0, #0
 80040c4:	e008      	b.n	80040d8 <_printf_common+0xa8>
 80040c6:	2301      	movs	r3, #1
 80040c8:	4652      	mov	r2, sl
 80040ca:	4649      	mov	r1, r9
 80040cc:	4638      	mov	r0, r7
 80040ce:	47c0      	blx	r8
 80040d0:	3001      	adds	r0, #1
 80040d2:	d103      	bne.n	80040dc <_printf_common+0xac>
 80040d4:	f04f 30ff 	mov.w	r0, #4294967295
 80040d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040dc:	3501      	adds	r5, #1
 80040de:	e7c6      	b.n	800406e <_printf_common+0x3e>
 80040e0:	18e1      	adds	r1, r4, r3
 80040e2:	1c5a      	adds	r2, r3, #1
 80040e4:	2030      	movs	r0, #48	; 0x30
 80040e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040ea:	4422      	add	r2, r4
 80040ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040f4:	3302      	adds	r3, #2
 80040f6:	e7c7      	b.n	8004088 <_printf_common+0x58>
 80040f8:	2301      	movs	r3, #1
 80040fa:	4622      	mov	r2, r4
 80040fc:	4649      	mov	r1, r9
 80040fe:	4638      	mov	r0, r7
 8004100:	47c0      	blx	r8
 8004102:	3001      	adds	r0, #1
 8004104:	d0e6      	beq.n	80040d4 <_printf_common+0xa4>
 8004106:	3601      	adds	r6, #1
 8004108:	e7d9      	b.n	80040be <_printf_common+0x8e>
	...

0800410c <_printf_i>:
 800410c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004110:	460c      	mov	r4, r1
 8004112:	4691      	mov	r9, r2
 8004114:	7e27      	ldrb	r7, [r4, #24]
 8004116:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004118:	2f78      	cmp	r7, #120	; 0x78
 800411a:	4680      	mov	r8, r0
 800411c:	469a      	mov	sl, r3
 800411e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004122:	d807      	bhi.n	8004134 <_printf_i+0x28>
 8004124:	2f62      	cmp	r7, #98	; 0x62
 8004126:	d80a      	bhi.n	800413e <_printf_i+0x32>
 8004128:	2f00      	cmp	r7, #0
 800412a:	f000 80d8 	beq.w	80042de <_printf_i+0x1d2>
 800412e:	2f58      	cmp	r7, #88	; 0x58
 8004130:	f000 80a3 	beq.w	800427a <_printf_i+0x16e>
 8004134:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004138:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800413c:	e03a      	b.n	80041b4 <_printf_i+0xa8>
 800413e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004142:	2b15      	cmp	r3, #21
 8004144:	d8f6      	bhi.n	8004134 <_printf_i+0x28>
 8004146:	a001      	add	r0, pc, #4	; (adr r0, 800414c <_printf_i+0x40>)
 8004148:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800414c:	080041a5 	.word	0x080041a5
 8004150:	080041b9 	.word	0x080041b9
 8004154:	08004135 	.word	0x08004135
 8004158:	08004135 	.word	0x08004135
 800415c:	08004135 	.word	0x08004135
 8004160:	08004135 	.word	0x08004135
 8004164:	080041b9 	.word	0x080041b9
 8004168:	08004135 	.word	0x08004135
 800416c:	08004135 	.word	0x08004135
 8004170:	08004135 	.word	0x08004135
 8004174:	08004135 	.word	0x08004135
 8004178:	080042c5 	.word	0x080042c5
 800417c:	080041e9 	.word	0x080041e9
 8004180:	080042a7 	.word	0x080042a7
 8004184:	08004135 	.word	0x08004135
 8004188:	08004135 	.word	0x08004135
 800418c:	080042e7 	.word	0x080042e7
 8004190:	08004135 	.word	0x08004135
 8004194:	080041e9 	.word	0x080041e9
 8004198:	08004135 	.word	0x08004135
 800419c:	08004135 	.word	0x08004135
 80041a0:	080042af 	.word	0x080042af
 80041a4:	680b      	ldr	r3, [r1, #0]
 80041a6:	1d1a      	adds	r2, r3, #4
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	600a      	str	r2, [r1, #0]
 80041ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80041b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041b4:	2301      	movs	r3, #1
 80041b6:	e0a3      	b.n	8004300 <_printf_i+0x1f4>
 80041b8:	6825      	ldr	r5, [r4, #0]
 80041ba:	6808      	ldr	r0, [r1, #0]
 80041bc:	062e      	lsls	r6, r5, #24
 80041be:	f100 0304 	add.w	r3, r0, #4
 80041c2:	d50a      	bpl.n	80041da <_printf_i+0xce>
 80041c4:	6805      	ldr	r5, [r0, #0]
 80041c6:	600b      	str	r3, [r1, #0]
 80041c8:	2d00      	cmp	r5, #0
 80041ca:	da03      	bge.n	80041d4 <_printf_i+0xc8>
 80041cc:	232d      	movs	r3, #45	; 0x2d
 80041ce:	426d      	negs	r5, r5
 80041d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041d4:	485e      	ldr	r0, [pc, #376]	; (8004350 <_printf_i+0x244>)
 80041d6:	230a      	movs	r3, #10
 80041d8:	e019      	b.n	800420e <_printf_i+0x102>
 80041da:	f015 0f40 	tst.w	r5, #64	; 0x40
 80041de:	6805      	ldr	r5, [r0, #0]
 80041e0:	600b      	str	r3, [r1, #0]
 80041e2:	bf18      	it	ne
 80041e4:	b22d      	sxthne	r5, r5
 80041e6:	e7ef      	b.n	80041c8 <_printf_i+0xbc>
 80041e8:	680b      	ldr	r3, [r1, #0]
 80041ea:	6825      	ldr	r5, [r4, #0]
 80041ec:	1d18      	adds	r0, r3, #4
 80041ee:	6008      	str	r0, [r1, #0]
 80041f0:	0628      	lsls	r0, r5, #24
 80041f2:	d501      	bpl.n	80041f8 <_printf_i+0xec>
 80041f4:	681d      	ldr	r5, [r3, #0]
 80041f6:	e002      	b.n	80041fe <_printf_i+0xf2>
 80041f8:	0669      	lsls	r1, r5, #25
 80041fa:	d5fb      	bpl.n	80041f4 <_printf_i+0xe8>
 80041fc:	881d      	ldrh	r5, [r3, #0]
 80041fe:	4854      	ldr	r0, [pc, #336]	; (8004350 <_printf_i+0x244>)
 8004200:	2f6f      	cmp	r7, #111	; 0x6f
 8004202:	bf0c      	ite	eq
 8004204:	2308      	moveq	r3, #8
 8004206:	230a      	movne	r3, #10
 8004208:	2100      	movs	r1, #0
 800420a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800420e:	6866      	ldr	r6, [r4, #4]
 8004210:	60a6      	str	r6, [r4, #8]
 8004212:	2e00      	cmp	r6, #0
 8004214:	bfa2      	ittt	ge
 8004216:	6821      	ldrge	r1, [r4, #0]
 8004218:	f021 0104 	bicge.w	r1, r1, #4
 800421c:	6021      	strge	r1, [r4, #0]
 800421e:	b90d      	cbnz	r5, 8004224 <_printf_i+0x118>
 8004220:	2e00      	cmp	r6, #0
 8004222:	d04d      	beq.n	80042c0 <_printf_i+0x1b4>
 8004224:	4616      	mov	r6, r2
 8004226:	fbb5 f1f3 	udiv	r1, r5, r3
 800422a:	fb03 5711 	mls	r7, r3, r1, r5
 800422e:	5dc7      	ldrb	r7, [r0, r7]
 8004230:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004234:	462f      	mov	r7, r5
 8004236:	42bb      	cmp	r3, r7
 8004238:	460d      	mov	r5, r1
 800423a:	d9f4      	bls.n	8004226 <_printf_i+0x11a>
 800423c:	2b08      	cmp	r3, #8
 800423e:	d10b      	bne.n	8004258 <_printf_i+0x14c>
 8004240:	6823      	ldr	r3, [r4, #0]
 8004242:	07df      	lsls	r7, r3, #31
 8004244:	d508      	bpl.n	8004258 <_printf_i+0x14c>
 8004246:	6923      	ldr	r3, [r4, #16]
 8004248:	6861      	ldr	r1, [r4, #4]
 800424a:	4299      	cmp	r1, r3
 800424c:	bfde      	ittt	le
 800424e:	2330      	movle	r3, #48	; 0x30
 8004250:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004254:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004258:	1b92      	subs	r2, r2, r6
 800425a:	6122      	str	r2, [r4, #16]
 800425c:	f8cd a000 	str.w	sl, [sp]
 8004260:	464b      	mov	r3, r9
 8004262:	aa03      	add	r2, sp, #12
 8004264:	4621      	mov	r1, r4
 8004266:	4640      	mov	r0, r8
 8004268:	f7ff fee2 	bl	8004030 <_printf_common>
 800426c:	3001      	adds	r0, #1
 800426e:	d14c      	bne.n	800430a <_printf_i+0x1fe>
 8004270:	f04f 30ff 	mov.w	r0, #4294967295
 8004274:	b004      	add	sp, #16
 8004276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800427a:	4835      	ldr	r0, [pc, #212]	; (8004350 <_printf_i+0x244>)
 800427c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004280:	6823      	ldr	r3, [r4, #0]
 8004282:	680e      	ldr	r6, [r1, #0]
 8004284:	061f      	lsls	r7, r3, #24
 8004286:	f856 5b04 	ldr.w	r5, [r6], #4
 800428a:	600e      	str	r6, [r1, #0]
 800428c:	d514      	bpl.n	80042b8 <_printf_i+0x1ac>
 800428e:	07d9      	lsls	r1, r3, #31
 8004290:	bf44      	itt	mi
 8004292:	f043 0320 	orrmi.w	r3, r3, #32
 8004296:	6023      	strmi	r3, [r4, #0]
 8004298:	b91d      	cbnz	r5, 80042a2 <_printf_i+0x196>
 800429a:	6823      	ldr	r3, [r4, #0]
 800429c:	f023 0320 	bic.w	r3, r3, #32
 80042a0:	6023      	str	r3, [r4, #0]
 80042a2:	2310      	movs	r3, #16
 80042a4:	e7b0      	b.n	8004208 <_printf_i+0xfc>
 80042a6:	6823      	ldr	r3, [r4, #0]
 80042a8:	f043 0320 	orr.w	r3, r3, #32
 80042ac:	6023      	str	r3, [r4, #0]
 80042ae:	2378      	movs	r3, #120	; 0x78
 80042b0:	4828      	ldr	r0, [pc, #160]	; (8004354 <_printf_i+0x248>)
 80042b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042b6:	e7e3      	b.n	8004280 <_printf_i+0x174>
 80042b8:	065e      	lsls	r6, r3, #25
 80042ba:	bf48      	it	mi
 80042bc:	b2ad      	uxthmi	r5, r5
 80042be:	e7e6      	b.n	800428e <_printf_i+0x182>
 80042c0:	4616      	mov	r6, r2
 80042c2:	e7bb      	b.n	800423c <_printf_i+0x130>
 80042c4:	680b      	ldr	r3, [r1, #0]
 80042c6:	6826      	ldr	r6, [r4, #0]
 80042c8:	6960      	ldr	r0, [r4, #20]
 80042ca:	1d1d      	adds	r5, r3, #4
 80042cc:	600d      	str	r5, [r1, #0]
 80042ce:	0635      	lsls	r5, r6, #24
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	d501      	bpl.n	80042d8 <_printf_i+0x1cc>
 80042d4:	6018      	str	r0, [r3, #0]
 80042d6:	e002      	b.n	80042de <_printf_i+0x1d2>
 80042d8:	0671      	lsls	r1, r6, #25
 80042da:	d5fb      	bpl.n	80042d4 <_printf_i+0x1c8>
 80042dc:	8018      	strh	r0, [r3, #0]
 80042de:	2300      	movs	r3, #0
 80042e0:	6123      	str	r3, [r4, #16]
 80042e2:	4616      	mov	r6, r2
 80042e4:	e7ba      	b.n	800425c <_printf_i+0x150>
 80042e6:	680b      	ldr	r3, [r1, #0]
 80042e8:	1d1a      	adds	r2, r3, #4
 80042ea:	600a      	str	r2, [r1, #0]
 80042ec:	681e      	ldr	r6, [r3, #0]
 80042ee:	6862      	ldr	r2, [r4, #4]
 80042f0:	2100      	movs	r1, #0
 80042f2:	4630      	mov	r0, r6
 80042f4:	f7fb ff74 	bl	80001e0 <memchr>
 80042f8:	b108      	cbz	r0, 80042fe <_printf_i+0x1f2>
 80042fa:	1b80      	subs	r0, r0, r6
 80042fc:	6060      	str	r0, [r4, #4]
 80042fe:	6863      	ldr	r3, [r4, #4]
 8004300:	6123      	str	r3, [r4, #16]
 8004302:	2300      	movs	r3, #0
 8004304:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004308:	e7a8      	b.n	800425c <_printf_i+0x150>
 800430a:	6923      	ldr	r3, [r4, #16]
 800430c:	4632      	mov	r2, r6
 800430e:	4649      	mov	r1, r9
 8004310:	4640      	mov	r0, r8
 8004312:	47d0      	blx	sl
 8004314:	3001      	adds	r0, #1
 8004316:	d0ab      	beq.n	8004270 <_printf_i+0x164>
 8004318:	6823      	ldr	r3, [r4, #0]
 800431a:	079b      	lsls	r3, r3, #30
 800431c:	d413      	bmi.n	8004346 <_printf_i+0x23a>
 800431e:	68e0      	ldr	r0, [r4, #12]
 8004320:	9b03      	ldr	r3, [sp, #12]
 8004322:	4298      	cmp	r0, r3
 8004324:	bfb8      	it	lt
 8004326:	4618      	movlt	r0, r3
 8004328:	e7a4      	b.n	8004274 <_printf_i+0x168>
 800432a:	2301      	movs	r3, #1
 800432c:	4632      	mov	r2, r6
 800432e:	4649      	mov	r1, r9
 8004330:	4640      	mov	r0, r8
 8004332:	47d0      	blx	sl
 8004334:	3001      	adds	r0, #1
 8004336:	d09b      	beq.n	8004270 <_printf_i+0x164>
 8004338:	3501      	adds	r5, #1
 800433a:	68e3      	ldr	r3, [r4, #12]
 800433c:	9903      	ldr	r1, [sp, #12]
 800433e:	1a5b      	subs	r3, r3, r1
 8004340:	42ab      	cmp	r3, r5
 8004342:	dcf2      	bgt.n	800432a <_printf_i+0x21e>
 8004344:	e7eb      	b.n	800431e <_printf_i+0x212>
 8004346:	2500      	movs	r5, #0
 8004348:	f104 0619 	add.w	r6, r4, #25
 800434c:	e7f5      	b.n	800433a <_printf_i+0x22e>
 800434e:	bf00      	nop
 8004350:	080046c9 	.word	0x080046c9
 8004354:	080046da 	.word	0x080046da

08004358 <memmove>:
 8004358:	4288      	cmp	r0, r1
 800435a:	b510      	push	{r4, lr}
 800435c:	eb01 0402 	add.w	r4, r1, r2
 8004360:	d902      	bls.n	8004368 <memmove+0x10>
 8004362:	4284      	cmp	r4, r0
 8004364:	4623      	mov	r3, r4
 8004366:	d807      	bhi.n	8004378 <memmove+0x20>
 8004368:	1e43      	subs	r3, r0, #1
 800436a:	42a1      	cmp	r1, r4
 800436c:	d008      	beq.n	8004380 <memmove+0x28>
 800436e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004372:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004376:	e7f8      	b.n	800436a <memmove+0x12>
 8004378:	4402      	add	r2, r0
 800437a:	4601      	mov	r1, r0
 800437c:	428a      	cmp	r2, r1
 800437e:	d100      	bne.n	8004382 <memmove+0x2a>
 8004380:	bd10      	pop	{r4, pc}
 8004382:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004386:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800438a:	e7f7      	b.n	800437c <memmove+0x24>

0800438c <_free_r>:
 800438c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800438e:	2900      	cmp	r1, #0
 8004390:	d048      	beq.n	8004424 <_free_r+0x98>
 8004392:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004396:	9001      	str	r0, [sp, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	f1a1 0404 	sub.w	r4, r1, #4
 800439e:	bfb8      	it	lt
 80043a0:	18e4      	addlt	r4, r4, r3
 80043a2:	f000 f8d3 	bl	800454c <__malloc_lock>
 80043a6:	4a20      	ldr	r2, [pc, #128]	; (8004428 <_free_r+0x9c>)
 80043a8:	9801      	ldr	r0, [sp, #4]
 80043aa:	6813      	ldr	r3, [r2, #0]
 80043ac:	4615      	mov	r5, r2
 80043ae:	b933      	cbnz	r3, 80043be <_free_r+0x32>
 80043b0:	6063      	str	r3, [r4, #4]
 80043b2:	6014      	str	r4, [r2, #0]
 80043b4:	b003      	add	sp, #12
 80043b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80043ba:	f000 b8cd 	b.w	8004558 <__malloc_unlock>
 80043be:	42a3      	cmp	r3, r4
 80043c0:	d90b      	bls.n	80043da <_free_r+0x4e>
 80043c2:	6821      	ldr	r1, [r4, #0]
 80043c4:	1862      	adds	r2, r4, r1
 80043c6:	4293      	cmp	r3, r2
 80043c8:	bf04      	itt	eq
 80043ca:	681a      	ldreq	r2, [r3, #0]
 80043cc:	685b      	ldreq	r3, [r3, #4]
 80043ce:	6063      	str	r3, [r4, #4]
 80043d0:	bf04      	itt	eq
 80043d2:	1852      	addeq	r2, r2, r1
 80043d4:	6022      	streq	r2, [r4, #0]
 80043d6:	602c      	str	r4, [r5, #0]
 80043d8:	e7ec      	b.n	80043b4 <_free_r+0x28>
 80043da:	461a      	mov	r2, r3
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	b10b      	cbz	r3, 80043e4 <_free_r+0x58>
 80043e0:	42a3      	cmp	r3, r4
 80043e2:	d9fa      	bls.n	80043da <_free_r+0x4e>
 80043e4:	6811      	ldr	r1, [r2, #0]
 80043e6:	1855      	adds	r5, r2, r1
 80043e8:	42a5      	cmp	r5, r4
 80043ea:	d10b      	bne.n	8004404 <_free_r+0x78>
 80043ec:	6824      	ldr	r4, [r4, #0]
 80043ee:	4421      	add	r1, r4
 80043f0:	1854      	adds	r4, r2, r1
 80043f2:	42a3      	cmp	r3, r4
 80043f4:	6011      	str	r1, [r2, #0]
 80043f6:	d1dd      	bne.n	80043b4 <_free_r+0x28>
 80043f8:	681c      	ldr	r4, [r3, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	6053      	str	r3, [r2, #4]
 80043fe:	4421      	add	r1, r4
 8004400:	6011      	str	r1, [r2, #0]
 8004402:	e7d7      	b.n	80043b4 <_free_r+0x28>
 8004404:	d902      	bls.n	800440c <_free_r+0x80>
 8004406:	230c      	movs	r3, #12
 8004408:	6003      	str	r3, [r0, #0]
 800440a:	e7d3      	b.n	80043b4 <_free_r+0x28>
 800440c:	6825      	ldr	r5, [r4, #0]
 800440e:	1961      	adds	r1, r4, r5
 8004410:	428b      	cmp	r3, r1
 8004412:	bf04      	itt	eq
 8004414:	6819      	ldreq	r1, [r3, #0]
 8004416:	685b      	ldreq	r3, [r3, #4]
 8004418:	6063      	str	r3, [r4, #4]
 800441a:	bf04      	itt	eq
 800441c:	1949      	addeq	r1, r1, r5
 800441e:	6021      	streq	r1, [r4, #0]
 8004420:	6054      	str	r4, [r2, #4]
 8004422:	e7c7      	b.n	80043b4 <_free_r+0x28>
 8004424:	b003      	add	sp, #12
 8004426:	bd30      	pop	{r4, r5, pc}
 8004428:	200015b8 	.word	0x200015b8

0800442c <_malloc_r>:
 800442c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800442e:	1ccd      	adds	r5, r1, #3
 8004430:	f025 0503 	bic.w	r5, r5, #3
 8004434:	3508      	adds	r5, #8
 8004436:	2d0c      	cmp	r5, #12
 8004438:	bf38      	it	cc
 800443a:	250c      	movcc	r5, #12
 800443c:	2d00      	cmp	r5, #0
 800443e:	4606      	mov	r6, r0
 8004440:	db01      	blt.n	8004446 <_malloc_r+0x1a>
 8004442:	42a9      	cmp	r1, r5
 8004444:	d903      	bls.n	800444e <_malloc_r+0x22>
 8004446:	230c      	movs	r3, #12
 8004448:	6033      	str	r3, [r6, #0]
 800444a:	2000      	movs	r0, #0
 800444c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800444e:	f000 f87d 	bl	800454c <__malloc_lock>
 8004452:	4921      	ldr	r1, [pc, #132]	; (80044d8 <_malloc_r+0xac>)
 8004454:	680a      	ldr	r2, [r1, #0]
 8004456:	4614      	mov	r4, r2
 8004458:	b99c      	cbnz	r4, 8004482 <_malloc_r+0x56>
 800445a:	4f20      	ldr	r7, [pc, #128]	; (80044dc <_malloc_r+0xb0>)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	b923      	cbnz	r3, 800446a <_malloc_r+0x3e>
 8004460:	4621      	mov	r1, r4
 8004462:	4630      	mov	r0, r6
 8004464:	f000 f862 	bl	800452c <_sbrk_r>
 8004468:	6038      	str	r0, [r7, #0]
 800446a:	4629      	mov	r1, r5
 800446c:	4630      	mov	r0, r6
 800446e:	f000 f85d 	bl	800452c <_sbrk_r>
 8004472:	1c43      	adds	r3, r0, #1
 8004474:	d123      	bne.n	80044be <_malloc_r+0x92>
 8004476:	230c      	movs	r3, #12
 8004478:	6033      	str	r3, [r6, #0]
 800447a:	4630      	mov	r0, r6
 800447c:	f000 f86c 	bl	8004558 <__malloc_unlock>
 8004480:	e7e3      	b.n	800444a <_malloc_r+0x1e>
 8004482:	6823      	ldr	r3, [r4, #0]
 8004484:	1b5b      	subs	r3, r3, r5
 8004486:	d417      	bmi.n	80044b8 <_malloc_r+0x8c>
 8004488:	2b0b      	cmp	r3, #11
 800448a:	d903      	bls.n	8004494 <_malloc_r+0x68>
 800448c:	6023      	str	r3, [r4, #0]
 800448e:	441c      	add	r4, r3
 8004490:	6025      	str	r5, [r4, #0]
 8004492:	e004      	b.n	800449e <_malloc_r+0x72>
 8004494:	6863      	ldr	r3, [r4, #4]
 8004496:	42a2      	cmp	r2, r4
 8004498:	bf0c      	ite	eq
 800449a:	600b      	streq	r3, [r1, #0]
 800449c:	6053      	strne	r3, [r2, #4]
 800449e:	4630      	mov	r0, r6
 80044a0:	f000 f85a 	bl	8004558 <__malloc_unlock>
 80044a4:	f104 000b 	add.w	r0, r4, #11
 80044a8:	1d23      	adds	r3, r4, #4
 80044aa:	f020 0007 	bic.w	r0, r0, #7
 80044ae:	1ac2      	subs	r2, r0, r3
 80044b0:	d0cc      	beq.n	800444c <_malloc_r+0x20>
 80044b2:	1a1b      	subs	r3, r3, r0
 80044b4:	50a3      	str	r3, [r4, r2]
 80044b6:	e7c9      	b.n	800444c <_malloc_r+0x20>
 80044b8:	4622      	mov	r2, r4
 80044ba:	6864      	ldr	r4, [r4, #4]
 80044bc:	e7cc      	b.n	8004458 <_malloc_r+0x2c>
 80044be:	1cc4      	adds	r4, r0, #3
 80044c0:	f024 0403 	bic.w	r4, r4, #3
 80044c4:	42a0      	cmp	r0, r4
 80044c6:	d0e3      	beq.n	8004490 <_malloc_r+0x64>
 80044c8:	1a21      	subs	r1, r4, r0
 80044ca:	4630      	mov	r0, r6
 80044cc:	f000 f82e 	bl	800452c <_sbrk_r>
 80044d0:	3001      	adds	r0, #1
 80044d2:	d1dd      	bne.n	8004490 <_malloc_r+0x64>
 80044d4:	e7cf      	b.n	8004476 <_malloc_r+0x4a>
 80044d6:	bf00      	nop
 80044d8:	200015b8 	.word	0x200015b8
 80044dc:	200015bc 	.word	0x200015bc

080044e0 <_realloc_r>:
 80044e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e2:	4607      	mov	r7, r0
 80044e4:	4614      	mov	r4, r2
 80044e6:	460e      	mov	r6, r1
 80044e8:	b921      	cbnz	r1, 80044f4 <_realloc_r+0x14>
 80044ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80044ee:	4611      	mov	r1, r2
 80044f0:	f7ff bf9c 	b.w	800442c <_malloc_r>
 80044f4:	b922      	cbnz	r2, 8004500 <_realloc_r+0x20>
 80044f6:	f7ff ff49 	bl	800438c <_free_r>
 80044fa:	4625      	mov	r5, r4
 80044fc:	4628      	mov	r0, r5
 80044fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004500:	f000 f830 	bl	8004564 <_malloc_usable_size_r>
 8004504:	42a0      	cmp	r0, r4
 8004506:	d20f      	bcs.n	8004528 <_realloc_r+0x48>
 8004508:	4621      	mov	r1, r4
 800450a:	4638      	mov	r0, r7
 800450c:	f7ff ff8e 	bl	800442c <_malloc_r>
 8004510:	4605      	mov	r5, r0
 8004512:	2800      	cmp	r0, #0
 8004514:	d0f2      	beq.n	80044fc <_realloc_r+0x1c>
 8004516:	4631      	mov	r1, r6
 8004518:	4622      	mov	r2, r4
 800451a:	f7ff fbef 	bl	8003cfc <memcpy>
 800451e:	4631      	mov	r1, r6
 8004520:	4638      	mov	r0, r7
 8004522:	f7ff ff33 	bl	800438c <_free_r>
 8004526:	e7e9      	b.n	80044fc <_realloc_r+0x1c>
 8004528:	4635      	mov	r5, r6
 800452a:	e7e7      	b.n	80044fc <_realloc_r+0x1c>

0800452c <_sbrk_r>:
 800452c:	b538      	push	{r3, r4, r5, lr}
 800452e:	4d06      	ldr	r5, [pc, #24]	; (8004548 <_sbrk_r+0x1c>)
 8004530:	2300      	movs	r3, #0
 8004532:	4604      	mov	r4, r0
 8004534:	4608      	mov	r0, r1
 8004536:	602b      	str	r3, [r5, #0]
 8004538:	f7fc fae4 	bl	8000b04 <_sbrk>
 800453c:	1c43      	adds	r3, r0, #1
 800453e:	d102      	bne.n	8004546 <_sbrk_r+0x1a>
 8004540:	682b      	ldr	r3, [r5, #0]
 8004542:	b103      	cbz	r3, 8004546 <_sbrk_r+0x1a>
 8004544:	6023      	str	r3, [r4, #0]
 8004546:	bd38      	pop	{r3, r4, r5, pc}
 8004548:	20001650 	.word	0x20001650

0800454c <__malloc_lock>:
 800454c:	4801      	ldr	r0, [pc, #4]	; (8004554 <__malloc_lock+0x8>)
 800454e:	f000 b811 	b.w	8004574 <__retarget_lock_acquire_recursive>
 8004552:	bf00      	nop
 8004554:	20001658 	.word	0x20001658

08004558 <__malloc_unlock>:
 8004558:	4801      	ldr	r0, [pc, #4]	; (8004560 <__malloc_unlock+0x8>)
 800455a:	f000 b80c 	b.w	8004576 <__retarget_lock_release_recursive>
 800455e:	bf00      	nop
 8004560:	20001658 	.word	0x20001658

08004564 <_malloc_usable_size_r>:
 8004564:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004568:	1f18      	subs	r0, r3, #4
 800456a:	2b00      	cmp	r3, #0
 800456c:	bfbc      	itt	lt
 800456e:	580b      	ldrlt	r3, [r1, r0]
 8004570:	18c0      	addlt	r0, r0, r3
 8004572:	4770      	bx	lr

08004574 <__retarget_lock_acquire_recursive>:
 8004574:	4770      	bx	lr

08004576 <__retarget_lock_release_recursive>:
 8004576:	4770      	bx	lr

08004578 <_init>:
 8004578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800457a:	bf00      	nop
 800457c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800457e:	bc08      	pop	{r3}
 8004580:	469e      	mov	lr, r3
 8004582:	4770      	bx	lr

08004584 <_fini>:
 8004584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004586:	bf00      	nop
 8004588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800458a:	bc08      	pop	{r3}
 800458c:	469e      	mov	lr, r3
 800458e:	4770      	bx	lr
