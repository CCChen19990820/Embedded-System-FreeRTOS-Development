
final_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08007dd4  08007dd4  00017dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e88  08007e88  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007e88  08007e88  00017e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e90  08007e90  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e90  08007e90  00017e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e94  08007e94  00017e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007e98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00012ee0  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012f54  20012f54  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001630b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f09  00000000  00000000  000363af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d0  00000000  00000000  000392b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010b0  00000000  00000000  0003a488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022c08  00000000  00000000  0003b538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014692  00000000  00000000  0005e140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3101  00000000  00000000  000727d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001458d3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004fb4  00000000  00000000  00145928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007dbc 	.word	0x08007dbc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007dbc 	.word	0x08007dbc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96e 	b.w	8000d50 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468c      	mov	ip, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f040 8083 	bne.w	8000ba2 <__udivmoddi4+0x116>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4617      	mov	r7, r2
 8000aa0:	d947      	bls.n	8000b32 <__udivmoddi4+0xa6>
 8000aa2:	fab2 f282 	clz	r2, r2
 8000aa6:	b142      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	f1c2 0020 	rsb	r0, r2, #32
 8000aac:	fa24 f000 	lsr.w	r0, r4, r0
 8000ab0:	4091      	lsls	r1, r2
 8000ab2:	4097      	lsls	r7, r2
 8000ab4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ac4:	fa1f fe87 	uxth.w	lr, r7
 8000ac8:	fb08 c116 	mls	r1, r8, r6, ip
 8000acc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18fb      	adds	r3, r7, r3
 8000ada:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ade:	f080 8119 	bcs.w	8000d14 <__udivmoddi4+0x288>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8116 	bls.w	8000d14 <__udivmoddi4+0x288>
 8000ae8:	3e02      	subs	r6, #2
 8000aea:	443b      	add	r3, r7
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af4:	fb08 3310 	mls	r3, r8, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b00:	45a6      	cmp	lr, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	193c      	adds	r4, r7, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b0a:	f080 8105 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000b0e:	45a6      	cmp	lr, r4
 8000b10:	f240 8102 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000b14:	3802      	subs	r0, #2
 8000b16:	443c      	add	r4, r7
 8000b18:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1c:	eba4 040e 	sub.w	r4, r4, lr
 8000b20:	2600      	movs	r6, #0
 8000b22:	b11d      	cbz	r5, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c5 4300 	strd	r4, r3, [r5]
 8000b2c:	4631      	mov	r1, r6
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	b902      	cbnz	r2, 8000b36 <__udivmoddi4+0xaa>
 8000b34:	deff      	udf	#255	; 0xff
 8000b36:	fab2 f282 	clz	r2, r2
 8000b3a:	2a00      	cmp	r2, #0
 8000b3c:	d150      	bne.n	8000be0 <__udivmoddi4+0x154>
 8000b3e:	1bcb      	subs	r3, r1, r7
 8000b40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b44:	fa1f f887 	uxth.w	r8, r7
 8000b48:	2601      	movs	r6, #1
 8000b4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b4e:	0c21      	lsrs	r1, r4, #16
 8000b50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b58:	fb08 f30c 	mul.w	r3, r8, ip
 8000b5c:	428b      	cmp	r3, r1
 8000b5e:	d907      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000b60:	1879      	adds	r1, r7, r1
 8000b62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0xe2>
 8000b68:	428b      	cmp	r3, r1
 8000b6a:	f200 80e9 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000b6e:	4684      	mov	ip, r0
 8000b70:	1ac9      	subs	r1, r1, r3
 8000b72:	b2a3      	uxth	r3, r4
 8000b74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b78:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b7c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b80:	fb08 f800 	mul.w	r8, r8, r0
 8000b84:	45a0      	cmp	r8, r4
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x10c>
 8000b88:	193c      	adds	r4, r7, r4
 8000b8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x10a>
 8000b90:	45a0      	cmp	r8, r4
 8000b92:	f200 80d9 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000b96:	4618      	mov	r0, r3
 8000b98:	eba4 0408 	sub.w	r4, r4, r8
 8000b9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ba0:	e7bf      	b.n	8000b22 <__udivmoddi4+0x96>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0x12e>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	f000 80b1 	beq.w	8000d0e <__udivmoddi4+0x282>
 8000bac:	2600      	movs	r6, #0
 8000bae:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	4631      	mov	r1, r6
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	fab3 f683 	clz	r6, r3
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d14a      	bne.n	8000c58 <__udivmoddi4+0x1cc>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d302      	bcc.n	8000bcc <__udivmoddi4+0x140>
 8000bc6:	4282      	cmp	r2, r0
 8000bc8:	f200 80b8 	bhi.w	8000d3c <__udivmoddi4+0x2b0>
 8000bcc:	1a84      	subs	r4, r0, r2
 8000bce:	eb61 0103 	sbc.w	r1, r1, r3
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d0a8      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000bda:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bde:	e7a5      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000be0:	f1c2 0320 	rsb	r3, r2, #32
 8000be4:	fa20 f603 	lsr.w	r6, r0, r3
 8000be8:	4097      	lsls	r7, r2
 8000bea:	fa01 f002 	lsl.w	r0, r1, r2
 8000bee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf2:	40d9      	lsrs	r1, r3
 8000bf4:	4330      	orrs	r0, r6
 8000bf6:	0c03      	lsrs	r3, r0, #16
 8000bf8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bfc:	fa1f f887 	uxth.w	r8, r7
 8000c00:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c08:	fb06 f108 	mul.w	r1, r6, r8
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x19c>
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c1a:	f080 808d 	bcs.w	8000d38 <__udivmoddi4+0x2ac>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 808a 	bls.w	8000d38 <__udivmoddi4+0x2ac>
 8000c24:	3e02      	subs	r6, #2
 8000c26:	443b      	add	r3, r7
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b281      	uxth	r1, r0
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c38:	fb00 f308 	mul.w	r3, r0, r8
 8000c3c:	428b      	cmp	r3, r1
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x1c4>
 8000c40:	1879      	adds	r1, r7, r1
 8000c42:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c46:	d273      	bcs.n	8000d30 <__udivmoddi4+0x2a4>
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d971      	bls.n	8000d30 <__udivmoddi4+0x2a4>
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	4439      	add	r1, r7
 8000c50:	1acb      	subs	r3, r1, r3
 8000c52:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c56:	e778      	b.n	8000b4a <__udivmoddi4+0xbe>
 8000c58:	f1c6 0c20 	rsb	ip, r6, #32
 8000c5c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c60:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c64:	431c      	orrs	r4, r3
 8000c66:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c6e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c72:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c76:	431f      	orrs	r7, r3
 8000c78:	0c3b      	lsrs	r3, r7, #16
 8000c7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c7e:	fa1f f884 	uxth.w	r8, r4
 8000c82:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c8a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c8e:	458a      	cmp	sl, r1
 8000c90:	fa02 f206 	lsl.w	r2, r2, r6
 8000c94:	fa00 f306 	lsl.w	r3, r0, r6
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x220>
 8000c9a:	1861      	adds	r1, r4, r1
 8000c9c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ca0:	d248      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca2:	458a      	cmp	sl, r1
 8000ca4:	d946      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca6:	f1a9 0902 	sub.w	r9, r9, #2
 8000caa:	4421      	add	r1, r4
 8000cac:	eba1 010a 	sub.w	r1, r1, sl
 8000cb0:	b2bf      	uxth	r7, r7
 8000cb2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cbe:	fb00 f808 	mul.w	r8, r0, r8
 8000cc2:	45b8      	cmp	r8, r7
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0x24a>
 8000cc6:	19e7      	adds	r7, r4, r7
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ccc:	d22e      	bcs.n	8000d2c <__udivmoddi4+0x2a0>
 8000cce:	45b8      	cmp	r8, r7
 8000cd0:	d92c      	bls.n	8000d2c <__udivmoddi4+0x2a0>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4427      	add	r7, r4
 8000cd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cda:	eba7 0708 	sub.w	r7, r7, r8
 8000cde:	fba0 8902 	umull	r8, r9, r0, r2
 8000ce2:	454f      	cmp	r7, r9
 8000ce4:	46c6      	mov	lr, r8
 8000ce6:	4649      	mov	r1, r9
 8000ce8:	d31a      	bcc.n	8000d20 <__udivmoddi4+0x294>
 8000cea:	d017      	beq.n	8000d1c <__udivmoddi4+0x290>
 8000cec:	b15d      	cbz	r5, 8000d06 <__udivmoddi4+0x27a>
 8000cee:	ebb3 020e 	subs.w	r2, r3, lr
 8000cf2:	eb67 0701 	sbc.w	r7, r7, r1
 8000cf6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000cfa:	40f2      	lsrs	r2, r6
 8000cfc:	ea4c 0202 	orr.w	r2, ip, r2
 8000d00:	40f7      	lsrs	r7, r6
 8000d02:	e9c5 2700 	strd	r2, r7, [r5]
 8000d06:	2600      	movs	r6, #0
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	462e      	mov	r6, r5
 8000d10:	4628      	mov	r0, r5
 8000d12:	e70b      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d14:	4606      	mov	r6, r0
 8000d16:	e6e9      	b.n	8000aec <__udivmoddi4+0x60>
 8000d18:	4618      	mov	r0, r3
 8000d1a:	e6fd      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d1c:	4543      	cmp	r3, r8
 8000d1e:	d2e5      	bcs.n	8000cec <__udivmoddi4+0x260>
 8000d20:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d24:	eb69 0104 	sbc.w	r1, r9, r4
 8000d28:	3801      	subs	r0, #1
 8000d2a:	e7df      	b.n	8000cec <__udivmoddi4+0x260>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	e7d2      	b.n	8000cd6 <__udivmoddi4+0x24a>
 8000d30:	4660      	mov	r0, ip
 8000d32:	e78d      	b.n	8000c50 <__udivmoddi4+0x1c4>
 8000d34:	4681      	mov	r9, r0
 8000d36:	e7b9      	b.n	8000cac <__udivmoddi4+0x220>
 8000d38:	4666      	mov	r6, ip
 8000d3a:	e775      	b.n	8000c28 <__udivmoddi4+0x19c>
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	e74a      	b.n	8000bd6 <__udivmoddi4+0x14a>
 8000d40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d44:	4439      	add	r1, r7
 8000d46:	e713      	b.n	8000b70 <__udivmoddi4+0xe4>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	443c      	add	r4, r7
 8000d4c:	e724      	b.n	8000b98 <__udivmoddi4+0x10c>
 8000d4e:	bf00      	nop

08000d50 <__aeabi_idiv0>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af02      	add	r7, sp, #8
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	f023 030f 	bic.w	r3, r3, #15
 8000d64:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	011b      	lsls	r3, r3, #4
 8000d6a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
 8000d6e:	f043 030c 	orr.w	r3, r3, #12
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	f043 0308 	orr.w	r3, r3, #8
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000d80:	7bbb      	ldrb	r3, [r7, #14]
 8000d82:	f043 030c 	orr.w	r3, r3, #12
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000d8a:	7bbb      	ldrb	r3, [r7, #14]
 8000d8c:	f043 0308 	orr.w	r3, r3, #8
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000d94:	f107 0208 	add.w	r2, r7, #8
 8000d98:	2364      	movs	r3, #100	; 0x64
 8000d9a:	9300      	str	r3, [sp, #0]
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	214e      	movs	r1, #78	; 0x4e
 8000da0:	4803      	ldr	r0, [pc, #12]	; (8000db0 <lcd_send_cmd+0x5c>)
 8000da2:	f001 fbf7 	bl	8002594 <HAL_I2C_Master_Transmit>
}
 8000da6:	bf00      	nop
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20012e00 	.word	0x20012e00

08000db4 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af02      	add	r7, sp, #8
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	f023 030f 	bic.w	r3, r3, #15
 8000dc4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	011b      	lsls	r3, r3, #4
 8000dca:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
 8000dce:	f043 030d 	orr.w	r3, r3, #13
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8000dd6:	7bfb      	ldrb	r3, [r7, #15]
 8000dd8:	f043 0309 	orr.w	r3, r3, #9
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8000de0:	7bbb      	ldrb	r3, [r7, #14]
 8000de2:	f043 030d 	orr.w	r3, r3, #13
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8000dea:	7bbb      	ldrb	r3, [r7, #14]
 8000dec:	f043 0309 	orr.w	r3, r3, #9
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000df4:	f107 0208 	add.w	r2, r7, #8
 8000df8:	2364      	movs	r3, #100	; 0x64
 8000dfa:	9300      	str	r3, [sp, #0]
 8000dfc:	2304      	movs	r3, #4
 8000dfe:	214e      	movs	r1, #78	; 0x4e
 8000e00:	4803      	ldr	r0, [pc, #12]	; (8000e10 <lcd_send_data+0x5c>)
 8000e02:	f001 fbc7 	bl	8002594 <HAL_I2C_Master_Transmit>
}
 8000e06:	bf00      	nop
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20012e00 	.word	0x20012e00

08000e14 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
    switch (row)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d003      	beq.n	8000e2c <lcd_put_cur+0x18>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d005      	beq.n	8000e36 <lcd_put_cur+0x22>
 8000e2a:	e009      	b.n	8000e40 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e32:	603b      	str	r3, [r7, #0]
            break;
 8000e34:	e004      	b.n	8000e40 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000e3c:	603b      	str	r3, [r7, #0]
            break;
 8000e3e:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff ff85 	bl	8000d54 <lcd_send_cmd>
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <lcd_init>:


void lcd_init (void)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000e56:	2032      	movs	r0, #50	; 0x32
 8000e58:	f000 ff84 	bl	8001d64 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000e5c:	2030      	movs	r0, #48	; 0x30
 8000e5e:	f7ff ff79 	bl	8000d54 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000e62:	2005      	movs	r0, #5
 8000e64:	f000 ff7e 	bl	8001d64 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000e68:	2030      	movs	r0, #48	; 0x30
 8000e6a:	f7ff ff73 	bl	8000d54 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000e6e:	2001      	movs	r0, #1
 8000e70:	f000 ff78 	bl	8001d64 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000e74:	2030      	movs	r0, #48	; 0x30
 8000e76:	f7ff ff6d 	bl	8000d54 <lcd_send_cmd>
	HAL_Delay(10);
 8000e7a:	200a      	movs	r0, #10
 8000e7c:	f000 ff72 	bl	8001d64 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000e80:	2020      	movs	r0, #32
 8000e82:	f7ff ff67 	bl	8000d54 <lcd_send_cmd>
	HAL_Delay(10);
 8000e86:	200a      	movs	r0, #10
 8000e88:	f000 ff6c 	bl	8001d64 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000e8c:	2028      	movs	r0, #40	; 0x28
 8000e8e:	f7ff ff61 	bl	8000d54 <lcd_send_cmd>
	HAL_Delay(1);
 8000e92:	2001      	movs	r0, #1
 8000e94:	f000 ff66 	bl	8001d64 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000e98:	2008      	movs	r0, #8
 8000e9a:	f7ff ff5b 	bl	8000d54 <lcd_send_cmd>
	HAL_Delay(1);
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	f000 ff60 	bl	8001d64 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	f7ff ff55 	bl	8000d54 <lcd_send_cmd>
	HAL_Delay(1);
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f000 ff5a 	bl	8001d64 <HAL_Delay>
	HAL_Delay(1);
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f000 ff57 	bl	8001d64 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000eb6:	2006      	movs	r0, #6
 8000eb8:	f7ff ff4c 	bl	8000d54 <lcd_send_cmd>
	HAL_Delay(1);
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	f000 ff51 	bl	8001d64 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000ec2:	200c      	movs	r0, #12
 8000ec4:	f7ff ff46 	bl	8000d54 <lcd_send_cmd>
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000ed4:	e006      	b.n	8000ee4 <lcd_send_string+0x18>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	1c5a      	adds	r2, r3, #1
 8000eda:	607a      	str	r2, [r7, #4]
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff ff68 	bl	8000db4 <lcd_send_data>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d1f4      	bne.n	8000ed6 <lcd_send_string+0xa>
}
 8000eec:	bf00      	nop
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <decToBcd>:

#define DS3231_ADDRESS 0xD0
QueueHandle_t MsgQueue = NULL;
// Convert normal decimal numbers to binary coded decimal
uint8_t decToBcd(int val)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a0f      	ldr	r2, [pc, #60]	; (8000f40 <decToBcd+0x48>)
 8000f04:	fb82 1203 	smull	r1, r2, r2, r3
 8000f08:	1092      	asrs	r2, r2, #2
 8000f0a:	17db      	asrs	r3, r3, #31
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	011b      	lsls	r3, r3, #4
 8000f12:	b2d8      	uxtb	r0, r3
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <decToBcd+0x48>)
 8000f18:	fb83 1302 	smull	r1, r3, r3, r2
 8000f1c:	1099      	asrs	r1, r3, #2
 8000f1e:	17d3      	asrs	r3, r2, #31
 8000f20:	1ac9      	subs	r1, r1, r3
 8000f22:	460b      	mov	r3, r1
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	440b      	add	r3, r1
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	1ad1      	subs	r1, r2, r3
 8000f2c:	b2cb      	uxtb	r3, r1
 8000f2e:	4403      	add	r3, r0
 8000f30:	b2db      	uxtb	r3, r3
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	66666667 	.word	0x66666667

08000f44 <bcdToDec>:
// Convert binary coded decimal to normal decimal numbers
int bcdToDec(uint8_t val)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	091b      	lsrs	r3, r3, #4
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	461a      	mov	r2, r3
 8000f56:	4613      	mov	r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	4413      	add	r3, r2
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	461a      	mov	r2, r3
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	f003 030f 	and.w	r3, r3, #15
 8000f66:	4413      	add	r3, r2
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <Set_Time>:
TIME time;

// function to set time

void Set_Time (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 8000f74:	b590      	push	{r4, r7, lr}
 8000f76:	b089      	sub	sp, #36	; 0x24
 8000f78:	af04      	add	r7, sp, #16
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	4608      	mov	r0, r1
 8000f7e:	4611      	mov	r1, r2
 8000f80:	461a      	mov	r2, r3
 8000f82:	4623      	mov	r3, r4
 8000f84:	71fb      	strb	r3, [r7, #7]
 8000f86:	4603      	mov	r3, r0
 8000f88:	71bb      	strb	r3, [r7, #6]
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	717b      	strb	r3, [r7, #5]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	713b      	strb	r3, [r7, #4]
	uint8_t set_time[7];
	set_time[0] = decToBcd(sec);
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ffaf 	bl	8000ef8 <decToBcd>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	723b      	strb	r3, [r7, #8]
	set_time[1] = decToBcd(min);
 8000f9e:	79bb      	ldrb	r3, [r7, #6]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ffa9 	bl	8000ef8 <decToBcd>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	727b      	strb	r3, [r7, #9]
	set_time[2] = decToBcd(hour);
 8000faa:	797b      	ldrb	r3, [r7, #5]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ffa3 	bl	8000ef8 <decToBcd>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	72bb      	strb	r3, [r7, #10]
	set_time[3] = decToBcd(dow);
 8000fb6:	793b      	ldrb	r3, [r7, #4]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff9d 	bl	8000ef8 <decToBcd>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	72fb      	strb	r3, [r7, #11]
	set_time[4] = decToBcd(dom);
 8000fc2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff ff96 	bl	8000ef8 <decToBcd>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	733b      	strb	r3, [r7, #12]
	set_time[5] = decToBcd(month);
 8000fd0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff8f 	bl	8000ef8 <decToBcd>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	737b      	strb	r3, [r7, #13]
	set_time[6] = decToBcd(year);
 8000fde:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ff88 	bl	8000ef8 <decToBcd>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
 8000fec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff0:	9302      	str	r3, [sp, #8]
 8000ff2:	2307      	movs	r3, #7
 8000ff4:	9301      	str	r3, [sp, #4]
 8000ff6:	f107 0308 	add.w	r3, r7, #8
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	2200      	movs	r2, #0
 8001000:	21d0      	movs	r1, #208	; 0xd0
 8001002:	4803      	ldr	r0, [pc, #12]	; (8001010 <Set_Time+0x9c>)
 8001004:	f001 fbc4 	bl	8002790 <HAL_I2C_Mem_Write>
}
 8001008:	bf00      	nop
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	bd90      	pop	{r4, r7, pc}
 8001010:	20012e00 	.word	0x20012e00

08001014 <Get_Time>:

void Get_Time (void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 800101a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101e:	9302      	str	r3, [sp, #8]
 8001020:	2307      	movs	r3, #7
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	463b      	mov	r3, r7
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	2301      	movs	r3, #1
 800102a:	2200      	movs	r2, #0
 800102c:	21d0      	movs	r1, #208	; 0xd0
 800102e:	481f      	ldr	r0, [pc, #124]	; (80010ac <Get_Time+0x98>)
 8001030:	f001 fca8 	bl	8002984 <HAL_I2C_Mem_Read>
	time.seconds = bcdToDec(get_time[0]);
 8001034:	783b      	ldrb	r3, [r7, #0]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff ff84 	bl	8000f44 <bcdToDec>
 800103c:	4603      	mov	r3, r0
 800103e:	b2da      	uxtb	r2, r3
 8001040:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <Get_Time+0x9c>)
 8001042:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 8001044:	787b      	ldrb	r3, [r7, #1]
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff ff7c 	bl	8000f44 <bcdToDec>
 800104c:	4603      	mov	r3, r0
 800104e:	b2da      	uxtb	r2, r3
 8001050:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <Get_Time+0x9c>)
 8001052:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 8001054:	78bb      	ldrb	r3, [r7, #2]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff ff74 	bl	8000f44 <bcdToDec>
 800105c:	4603      	mov	r3, r0
 800105e:	b2da      	uxtb	r2, r3
 8001060:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <Get_Time+0x9c>)
 8001062:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 8001064:	78fb      	ldrb	r3, [r7, #3]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff ff6c 	bl	8000f44 <bcdToDec>
 800106c:	4603      	mov	r3, r0
 800106e:	b2da      	uxtb	r2, r3
 8001070:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <Get_Time+0x9c>)
 8001072:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 8001074:	793b      	ldrb	r3, [r7, #4]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff ff64 	bl	8000f44 <bcdToDec>
 800107c:	4603      	mov	r3, r0
 800107e:	b2da      	uxtb	r2, r3
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <Get_Time+0x9c>)
 8001082:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 8001084:	797b      	ldrb	r3, [r7, #5]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ff5c 	bl	8000f44 <bcdToDec>
 800108c:	4603      	mov	r3, r0
 800108e:	b2da      	uxtb	r2, r3
 8001090:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <Get_Time+0x9c>)
 8001092:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 8001094:	79bb      	ldrb	r3, [r7, #6]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ff54 	bl	8000f44 <bcdToDec>
 800109c:	4603      	mov	r3, r0
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	4b03      	ldr	r3, [pc, #12]	; (80010b0 <Get_Time+0x9c>)
 80010a2:	719a      	strb	r2, [r3, #6]
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20012e00 	.word	0x20012e00
 80010b0:	20012e68 	.word	0x20012e68

080010b4 <Get_Temp>:

int Get_Temp (void)
{
 80010b4:	b5b0      	push	{r4, r5, r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af04      	add	r7, sp, #16
	uint8_t temp[2];

	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x11, 1, temp, 2, 1000);
 80010ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010be:	9302      	str	r3, [sp, #8]
 80010c0:	2302      	movs	r3, #2
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2301      	movs	r3, #1
 80010ca:	2211      	movs	r2, #17
 80010cc:	21d0      	movs	r1, #208	; 0xd0
 80010ce:	4812      	ldr	r0, [pc, #72]	; (8001118 <Get_Temp+0x64>)
 80010d0:	f001 fc58 	bl	8002984 <HAL_I2C_Mem_Read>
	return ((temp[0])+(temp[1]>>6)/4.0);
 80010d4:	793b      	ldrb	r3, [r7, #4]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fa1c 	bl	8000514 <__aeabi_i2d>
 80010dc:	4604      	mov	r4, r0
 80010de:	460d      	mov	r5, r1
 80010e0:	797b      	ldrb	r3, [r7, #5]
 80010e2:	099b      	lsrs	r3, r3, #6
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fa14 	bl	8000514 <__aeabi_i2d>
 80010ec:	f04f 0200 	mov.w	r2, #0
 80010f0:	4b0a      	ldr	r3, [pc, #40]	; (800111c <Get_Temp+0x68>)
 80010f2:	f7ff fba3 	bl	800083c <__aeabi_ddiv>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4620      	mov	r0, r4
 80010fc:	4629      	mov	r1, r5
 80010fe:	f7ff f8bd 	bl	800027c <__adddf3>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	4610      	mov	r0, r2
 8001108:	4619      	mov	r1, r3
 800110a:	f7ff fc7f 	bl	8000a0c <__aeabi_d2iz>
 800110e:	4603      	mov	r3, r0
}
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bdb0      	pop	{r4, r5, r7, pc}
 8001118:	20012e00 	.word	0x20012e00
 800111c:	40100000 	.word	0x40100000

08001120 <force_temp_conv>:

void force_temp_conv (void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af04      	add	r7, sp, #16
	uint8_t status=0;
 8001126:	2300      	movs	r3, #0
 8001128:	71fb      	strb	r3, [r7, #7]
	uint8_t control=0;
 800112a:	2300      	movs	r3, #0
 800112c:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x0F, 1, &status, 1, 100);  // read status register
 800112e:	2364      	movs	r3, #100	; 0x64
 8001130:	9302      	str	r3, [sp, #8]
 8001132:	2301      	movs	r3, #1
 8001134:	9301      	str	r3, [sp, #4]
 8001136:	1dfb      	adds	r3, r7, #7
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	2301      	movs	r3, #1
 800113c:	220f      	movs	r2, #15
 800113e:	21d0      	movs	r1, #208	; 0xd0
 8001140:	4813      	ldr	r0, [pc, #76]	; (8001190 <force_temp_conv+0x70>)
 8001142:	f001 fc1f 	bl	8002984 <HAL_I2C_Mem_Read>
	if (!(status&0x04))
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	f003 0304 	and.w	r3, r3, #4
 800114c:	2b00      	cmp	r3, #0
 800114e:	d11b      	bne.n	8001188 <force_temp_conv+0x68>
	{
		HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x0E, 1, &control, 1, 100);  // read control register
 8001150:	2364      	movs	r3, #100	; 0x64
 8001152:	9302      	str	r3, [sp, #8]
 8001154:	2301      	movs	r3, #1
 8001156:	9301      	str	r3, [sp, #4]
 8001158:	1dbb      	adds	r3, r7, #6
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2301      	movs	r3, #1
 800115e:	220e      	movs	r2, #14
 8001160:	21d0      	movs	r1, #208	; 0xd0
 8001162:	480b      	ldr	r0, [pc, #44]	; (8001190 <force_temp_conv+0x70>)
 8001164:	f001 fc0e 	bl	8002984 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x0E, 1, (uint8_t *)(control|(0x20)), 1, 100);
 8001168:	79bb      	ldrb	r3, [r7, #6]
 800116a:	f043 0320 	orr.w	r3, r3, #32
 800116e:	b2db      	uxtb	r3, r3
 8001170:	461a      	mov	r2, r3
 8001172:	2364      	movs	r3, #100	; 0x64
 8001174:	9302      	str	r3, [sp, #8]
 8001176:	2301      	movs	r3, #1
 8001178:	9301      	str	r3, [sp, #4]
 800117a:	9200      	str	r2, [sp, #0]
 800117c:	2301      	movs	r3, #1
 800117e:	220e      	movs	r2, #14
 8001180:	21d0      	movs	r1, #208	; 0xd0
 8001182:	4803      	ldr	r0, [pc, #12]	; (8001190 <force_temp_conv+0x70>)
 8001184:	f001 fb04 	bl	8002790 <HAL_I2C_Mem_Write>
	}
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20012e00 	.word	0x20012e00

08001194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800119a:	f000 fda1 	bl	8001ce0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800119e:	f000 f855 	bl	800124c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a2:	f000 f95f 	bl	8001464 <MX_GPIO_Init>
  MX_I2C1_Init();
 80011a6:	f000 f8bb 	bl	8001320 <MX_I2C1_Init>
  MX_TIM2_Init();
 80011aa:	f000 f8e7 	bl	800137c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80011ae:	2104      	movs	r1, #4
 80011b0:	481e      	ldr	r0, [pc, #120]	; (800122c <main+0x98>)
 80011b2:	f002 ff97 	bl	80040e4 <HAL_TIM_PWM_Start>
  lcd_init ();
 80011b6:	f7ff fe4c 	bl	8000e52 <lcd_init>

  Set_Time(55, 59, 7, 5, 6, 6, 23);
 80011ba:	2317      	movs	r3, #23
 80011bc:	9302      	str	r3, [sp, #8]
 80011be:	2306      	movs	r3, #6
 80011c0:	9301      	str	r3, [sp, #4]
 80011c2:	2306      	movs	r3, #6
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	2305      	movs	r3, #5
 80011c8:	2207      	movs	r2, #7
 80011ca:	213b      	movs	r1, #59	; 0x3b
 80011cc:	2037      	movs	r0, #55	; 0x37
 80011ce:	f7ff fed1 	bl	8000f74 <Set_Time>
  MsgQueue = xQueueCreate(1, sizeof(unsigned int));
 80011d2:	2200      	movs	r2, #0
 80011d4:	2104      	movs	r1, #4
 80011d6:	2001      	movs	r0, #1
 80011d8:	f003 ffc2 	bl	8005160 <xQueueGenericCreate>
 80011dc:	4603      	mov	r3, r0
 80011de:	4a14      	ldr	r2, [pc, #80]	; (8001230 <main+0x9c>)
 80011e0:	6013      	str	r3, [r2, #0]

  xTaskCreate(Time_show, "Time_show", 1000, NULL, 1, NULL);
 80011e2:	2300      	movs	r3, #0
 80011e4:	9301      	str	r3, [sp, #4]
 80011e6:	2301      	movs	r3, #1
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	2300      	movs	r3, #0
 80011ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011f0:	4910      	ldr	r1, [pc, #64]	; (8001234 <main+0xa0>)
 80011f2:	4811      	ldr	r0, [pc, #68]	; (8001238 <main+0xa4>)
 80011f4:	f004 fbf8 	bl	80059e8 <xTaskCreate>
  xTaskCreate(Buzzer_ring, "Buzzer_ring", 1000, NULL, 1, NULL);
 80011f8:	2300      	movs	r3, #0
 80011fa:	9301      	str	r3, [sp, #4]
 80011fc:	2301      	movs	r3, #1
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	2300      	movs	r3, #0
 8001202:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001206:	490d      	ldr	r1, [pc, #52]	; (800123c <main+0xa8>)
 8001208:	480d      	ldr	r0, [pc, #52]	; (8001240 <main+0xac>)
 800120a:	f004 fbed 	bl	80059e8 <xTaskCreate>
  xTaskCreate(Button_click, "Button_click", 1000, NULL, 1, NULL);
 800120e:	2300      	movs	r3, #0
 8001210:	9301      	str	r3, [sp, #4]
 8001212:	2301      	movs	r3, #1
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	2300      	movs	r3, #0
 8001218:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800121c:	4909      	ldr	r1, [pc, #36]	; (8001244 <main+0xb0>)
 800121e:	480a      	ldr	r0, [pc, #40]	; (8001248 <main+0xb4>)
 8001220:	f004 fbe2 	bl	80059e8 <xTaskCreate>
  vTaskStartScheduler();
 8001224:	f004 fd1e 	bl	8005c64 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001228:	e7fe      	b.n	8001228 <main+0x94>
 800122a:	bf00      	nop
 800122c:	20012e70 	.word	0x20012e70
 8001230:	20000090 	.word	0x20000090
 8001234:	08007dd4 	.word	0x08007dd4
 8001238:	080016fd 	.word	0x080016fd
 800123c:	08007de0 	.word	0x08007de0
 8001240:	080017fd 	.word	0x080017fd
 8001244:	08007dec 	.word	0x08007dec
 8001248:	080018b1 	.word	0x080018b1

0800124c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b094      	sub	sp, #80	; 0x50
 8001250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001252:	f107 0320 	add.w	r3, r7, #32
 8001256:	2230      	movs	r2, #48	; 0x30
 8001258:	2100      	movs	r1, #0
 800125a:	4618      	mov	r0, r3
 800125c:	f006 f986 	bl	800756c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001260:	f107 030c 	add.w	r3, r7, #12
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001270:	2300      	movs	r3, #0
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	4b28      	ldr	r3, [pc, #160]	; (8001318 <SystemClock_Config+0xcc>)
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	4a27      	ldr	r2, [pc, #156]	; (8001318 <SystemClock_Config+0xcc>)
 800127a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800127e:	6413      	str	r3, [r2, #64]	; 0x40
 8001280:	4b25      	ldr	r3, [pc, #148]	; (8001318 <SystemClock_Config+0xcc>)
 8001282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800128c:	2300      	movs	r3, #0
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	4b22      	ldr	r3, [pc, #136]	; (800131c <SystemClock_Config+0xd0>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a21      	ldr	r2, [pc, #132]	; (800131c <SystemClock_Config+0xd0>)
 8001296:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800129a:	6013      	str	r3, [r2, #0]
 800129c:	4b1f      	ldr	r3, [pc, #124]	; (800131c <SystemClock_Config+0xd0>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012a8:	2301      	movs	r3, #1
 80012aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012b2:	2302      	movs	r3, #2
 80012b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012bc:	2304      	movs	r3, #4
 80012be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80012c0:	2348      	movs	r3, #72	; 0x48
 80012c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012c4:	2302      	movs	r3, #2
 80012c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012c8:	2307      	movs	r3, #7
 80012ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012cc:	f107 0320 	add.w	r3, r7, #32
 80012d0:	4618      	mov	r0, r3
 80012d2:	f002 f95b 	bl	800358c <HAL_RCC_OscConfig>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012dc:	f000 fb36 	bl	800194c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e0:	230f      	movs	r3, #15
 80012e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012e4:	2302      	movs	r3, #2
 80012e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012f8:	f107 030c 	add.w	r3, r7, #12
 80012fc:	2102      	movs	r1, #2
 80012fe:	4618      	mov	r0, r3
 8001300:	f002 fbbc 	bl	8003a7c <HAL_RCC_ClockConfig>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800130a:	f000 fb1f 	bl	800194c <Error_Handler>
  }
}
 800130e:	bf00      	nop
 8001310:	3750      	adds	r7, #80	; 0x50
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800
 800131c:	40007000 	.word	0x40007000

08001320 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <MX_I2C1_Init+0x50>)
 8001326:	4a13      	ldr	r2, [pc, #76]	; (8001374 <MX_I2C1_Init+0x54>)
 8001328:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800132a:	4b11      	ldr	r3, [pc, #68]	; (8001370 <MX_I2C1_Init+0x50>)
 800132c:	4a12      	ldr	r2, [pc, #72]	; (8001378 <MX_I2C1_Init+0x58>)
 800132e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001330:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <MX_I2C1_Init+0x50>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001336:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <MX_I2C1_Init+0x50>)
 8001338:	2200      	movs	r2, #0
 800133a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <MX_I2C1_Init+0x50>)
 800133e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001342:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001344:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <MX_I2C1_Init+0x50>)
 8001346:	2200      	movs	r2, #0
 8001348:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <MX_I2C1_Init+0x50>)
 800134c:	2200      	movs	r2, #0
 800134e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001350:	4b07      	ldr	r3, [pc, #28]	; (8001370 <MX_I2C1_Init+0x50>)
 8001352:	2200      	movs	r2, #0
 8001354:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <MX_I2C1_Init+0x50>)
 8001358:	2200      	movs	r2, #0
 800135a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800135c:	4804      	ldr	r0, [pc, #16]	; (8001370 <MX_I2C1_Init+0x50>)
 800135e:	f000 ffd5 	bl	800230c <HAL_I2C_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001368:	f000 faf0 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20012e00 	.word	0x20012e00
 8001374:	40005400 	.word	0x40005400
 8001378:	000186a0 	.word	0x000186a0

0800137c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08e      	sub	sp, #56	; 0x38
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001382:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001390:	f107 0320 	add.w	r3, r7, #32
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
 80013a8:	615a      	str	r2, [r3, #20]
 80013aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013ac:	4b2c      	ldr	r3, [pc, #176]	; (8001460 <MX_TIM2_Init+0xe4>)
 80013ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 80013b4:	4b2a      	ldr	r3, [pc, #168]	; (8001460 <MX_TIM2_Init+0xe4>)
 80013b6:	227f      	movs	r2, #127	; 0x7f
 80013b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ba:	4b29      	ldr	r3, [pc, #164]	; (8001460 <MX_TIM2_Init+0xe4>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80013c0:	4b27      	ldr	r3, [pc, #156]	; (8001460 <MX_TIM2_Init+0xe4>)
 80013c2:	2264      	movs	r2, #100	; 0x64
 80013c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c6:	4b26      	ldr	r3, [pc, #152]	; (8001460 <MX_TIM2_Init+0xe4>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013cc:	4b24      	ldr	r3, [pc, #144]	; (8001460 <MX_TIM2_Init+0xe4>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013d2:	4823      	ldr	r0, [pc, #140]	; (8001460 <MX_TIM2_Init+0xe4>)
 80013d4:	f002 fd6c 	bl	8003eb0 <HAL_TIM_Base_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80013de:	f000 fab5 	bl	800194c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ec:	4619      	mov	r1, r3
 80013ee:	481c      	ldr	r0, [pc, #112]	; (8001460 <MX_TIM2_Init+0xe4>)
 80013f0:	f003 f90a 	bl	8004608 <HAL_TIM_ConfigClockSource>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80013fa:	f000 faa7 	bl	800194c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013fe:	4818      	ldr	r0, [pc, #96]	; (8001460 <MX_TIM2_Init+0xe4>)
 8001400:	f002 fe16 	bl	8004030 <HAL_TIM_PWM_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800140a:	f000 fa9f 	bl	800194c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140e:	2300      	movs	r3, #0
 8001410:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001412:	2300      	movs	r3, #0
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001416:	f107 0320 	add.w	r3, r7, #32
 800141a:	4619      	mov	r1, r3
 800141c:	4810      	ldr	r0, [pc, #64]	; (8001460 <MX_TIM2_Init+0xe4>)
 800141e:	f003 fcf3 	bl	8004e08 <HAL_TIMEx_MasterConfigSynchronization>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001428:	f000 fa90 	bl	800194c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800142c:	2360      	movs	r3, #96	; 0x60
 800142e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	2204      	movs	r2, #4
 8001440:	4619      	mov	r1, r3
 8001442:	4807      	ldr	r0, [pc, #28]	; (8001460 <MX_TIM2_Init+0xe4>)
 8001444:	f003 f81e 	bl	8004484 <HAL_TIM_PWM_ConfigChannel>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800144e:	f000 fa7d 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001452:	4803      	ldr	r0, [pc, #12]	; (8001460 <MX_TIM2_Init+0xe4>)
 8001454:	f000 fb20 	bl	8001a98 <HAL_TIM_MspPostInit>

}
 8001458:	bf00      	nop
 800145a:	3738      	adds	r7, #56	; 0x38
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20012e70 	.word	0x20012e70

08001464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08c      	sub	sp, #48	; 0x30
 8001468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146a:	f107 031c 	add.w	r3, r7, #28
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	61bb      	str	r3, [r7, #24]
 800147e:	4b99      	ldr	r3, [pc, #612]	; (80016e4 <MX_GPIO_Init+0x280>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a98      	ldr	r2, [pc, #608]	; (80016e4 <MX_GPIO_Init+0x280>)
 8001484:	f043 0310 	orr.w	r3, r3, #16
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b96      	ldr	r3, [pc, #600]	; (80016e4 <MX_GPIO_Init+0x280>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0310 	and.w	r3, r3, #16
 8001492:	61bb      	str	r3, [r7, #24]
 8001494:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	4b92      	ldr	r3, [pc, #584]	; (80016e4 <MX_GPIO_Init+0x280>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a91      	ldr	r2, [pc, #580]	; (80016e4 <MX_GPIO_Init+0x280>)
 80014a0:	f043 0304 	orr.w	r3, r3, #4
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b8f      	ldr	r3, [pc, #572]	; (80016e4 <MX_GPIO_Init+0x280>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0304 	and.w	r3, r3, #4
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	4b8b      	ldr	r3, [pc, #556]	; (80016e4 <MX_GPIO_Init+0x280>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a8a      	ldr	r2, [pc, #552]	; (80016e4 <MX_GPIO_Init+0x280>)
 80014bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b88      	ldr	r3, [pc, #544]	; (80016e4 <MX_GPIO_Init+0x280>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b84      	ldr	r3, [pc, #528]	; (80016e4 <MX_GPIO_Init+0x280>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a83      	ldr	r2, [pc, #524]	; (80016e4 <MX_GPIO_Init+0x280>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b81      	ldr	r3, [pc, #516]	; (80016e4 <MX_GPIO_Init+0x280>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	4b7d      	ldr	r3, [pc, #500]	; (80016e4 <MX_GPIO_Init+0x280>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a7c      	ldr	r2, [pc, #496]	; (80016e4 <MX_GPIO_Init+0x280>)
 80014f4:	f043 0302 	orr.w	r3, r3, #2
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b7a      	ldr	r3, [pc, #488]	; (80016e4 <MX_GPIO_Init+0x280>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	4b76      	ldr	r3, [pc, #472]	; (80016e4 <MX_GPIO_Init+0x280>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a75      	ldr	r2, [pc, #468]	; (80016e4 <MX_GPIO_Init+0x280>)
 8001510:	f043 0308 	orr.w	r3, r3, #8
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b73      	ldr	r3, [pc, #460]	; (80016e4 <MX_GPIO_Init+0x280>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001522:	2200      	movs	r2, #0
 8001524:	2108      	movs	r1, #8
 8001526:	4870      	ldr	r0, [pc, #448]	; (80016e8 <MX_GPIO_Init+0x284>)
 8001528:	f000 fed6 	bl	80022d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800152c:	2201      	movs	r2, #1
 800152e:	2101      	movs	r1, #1
 8001530:	486e      	ldr	r0, [pc, #440]	; (80016ec <MX_GPIO_Init+0x288>)
 8001532:	f000 fed1 	bl	80022d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001536:	2200      	movs	r2, #0
 8001538:	f24f 0110 	movw	r1, #61456	; 0xf010
 800153c:	486c      	ldr	r0, [pc, #432]	; (80016f0 <MX_GPIO_Init+0x28c>)
 800153e:	f000 fecb 	bl	80022d8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001542:	2308      	movs	r3, #8
 8001544:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001546:	2301      	movs	r3, #1
 8001548:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154e:	2300      	movs	r3, #0
 8001550:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001552:	f107 031c 	add.w	r3, r7, #28
 8001556:	4619      	mov	r1, r3
 8001558:	4863      	ldr	r0, [pc, #396]	; (80016e8 <MX_GPIO_Init+0x284>)
 800155a:	f000 fd09 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800155e:	2301      	movs	r3, #1
 8001560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001562:	2301      	movs	r3, #1
 8001564:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	2300      	movs	r3, #0
 800156c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800156e:	f107 031c 	add.w	r3, r7, #28
 8001572:	4619      	mov	r1, r3
 8001574:	485d      	ldr	r0, [pc, #372]	; (80016ec <MX_GPIO_Init+0x288>)
 8001576:	f000 fcfb 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800157a:	2308      	movs	r3, #8
 800157c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800158a:	2305      	movs	r3, #5
 800158c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800158e:	f107 031c 	add.w	r3, r7, #28
 8001592:	4619      	mov	r1, r3
 8001594:	4855      	ldr	r0, [pc, #340]	; (80016ec <MX_GPIO_Init+0x288>)
 8001596:	f000 fceb 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_blue_Pin */
  GPIO_InitStruct.Pin = btn_blue_Pin;
 800159a:	2301      	movs	r3, #1
 800159c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159e:	2300      	movs	r3, #0
 80015a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(btn_blue_GPIO_Port, &GPIO_InitStruct);
 80015a6:	f107 031c 	add.w	r3, r7, #28
 80015aa:	4619      	mov	r1, r3
 80015ac:	4851      	ldr	r0, [pc, #324]	; (80016f4 <MX_GPIO_Init+0x290>)
 80015ae:	f000 fcdf 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80015b2:	2310      	movs	r3, #16
 80015b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015c2:	2306      	movs	r3, #6
 80015c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80015c6:	f107 031c 	add.w	r3, r7, #28
 80015ca:	4619      	mov	r1, r3
 80015cc:	4849      	ldr	r0, [pc, #292]	; (80016f4 <MX_GPIO_Init+0x290>)
 80015ce:	f000 fccf 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80015d2:	23e0      	movs	r3, #224	; 0xe0
 80015d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015e2:	2305      	movs	r3, #5
 80015e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e6:	f107 031c 	add.w	r3, r7, #28
 80015ea:	4619      	mov	r1, r3
 80015ec:	4841      	ldr	r0, [pc, #260]	; (80016f4 <MX_GPIO_Init+0x290>)
 80015ee:	f000 fcbf 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80015f2:	2304      	movs	r3, #4
 80015f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f6:	2300      	movs	r3, #0
 80015f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80015fe:	f107 031c 	add.w	r3, r7, #28
 8001602:	4619      	mov	r1, r3
 8001604:	483c      	ldr	r0, [pc, #240]	; (80016f8 <MX_GPIO_Init+0x294>)
 8001606:	f000 fcb3 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800160a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800160e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001610:	2302      	movs	r3, #2
 8001612:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001618:	2300      	movs	r3, #0
 800161a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800161c:	2305      	movs	r3, #5
 800161e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001620:	f107 031c 	add.w	r3, r7, #28
 8001624:	4619      	mov	r1, r3
 8001626:	4834      	ldr	r0, [pc, #208]	; (80016f8 <MX_GPIO_Init+0x294>)
 8001628:	f000 fca2 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800162c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001630:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001632:	2301      	movs	r3, #1
 8001634:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163a:	2300      	movs	r3, #0
 800163c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800163e:	f107 031c 	add.w	r3, r7, #28
 8001642:	4619      	mov	r1, r3
 8001644:	482a      	ldr	r0, [pc, #168]	; (80016f0 <MX_GPIO_Init+0x28c>)
 8001646:	f000 fc93 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800164a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800164e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001650:	2302      	movs	r3, #2
 8001652:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	2300      	movs	r3, #0
 800165a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800165c:	2306      	movs	r3, #6
 800165e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001660:	f107 031c 	add.w	r3, r7, #28
 8001664:	4619      	mov	r1, r3
 8001666:	4821      	ldr	r0, [pc, #132]	; (80016ec <MX_GPIO_Init+0x288>)
 8001668:	f000 fc82 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800166c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001672:	2300      	movs	r3, #0
 8001674:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800167a:	f107 031c 	add.w	r3, r7, #28
 800167e:	4619      	mov	r1, r3
 8001680:	481c      	ldr	r0, [pc, #112]	; (80016f4 <MX_GPIO_Init+0x290>)
 8001682:	f000 fc75 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001686:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800168a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168c:	2302      	movs	r3, #2
 800168e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001698:	230a      	movs	r3, #10
 800169a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169c:	f107 031c 	add.w	r3, r7, #28
 80016a0:	4619      	mov	r1, r3
 80016a2:	4814      	ldr	r0, [pc, #80]	; (80016f4 <MX_GPIO_Init+0x290>)
 80016a4:	f000 fc64 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80016a8:	2320      	movs	r3, #32
 80016aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ac:	2300      	movs	r3, #0
 80016ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	4619      	mov	r1, r3
 80016ba:	480d      	ldr	r0, [pc, #52]	; (80016f0 <MX_GPIO_Init+0x28c>)
 80016bc:	f000 fc58 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80016c0:	2302      	movs	r3, #2
 80016c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80016c4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80016c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80016ce:	f107 031c 	add.w	r3, r7, #28
 80016d2:	4619      	mov	r1, r3
 80016d4:	4804      	ldr	r0, [pc, #16]	; (80016e8 <MX_GPIO_Init+0x284>)
 80016d6:	f000 fc4b 	bl	8001f70 <HAL_GPIO_Init>

}
 80016da:	bf00      	nop
 80016dc:	3730      	adds	r7, #48	; 0x30
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40021000 	.word	0x40021000
 80016ec:	40020800 	.word	0x40020800
 80016f0:	40020c00 	.word	0x40020c00
 80016f4:	40020000 	.word	0x40020000
 80016f8:	40020400 	.word	0x40020400

080016fc <Time_show>:

/* USER CODE BEGIN 4 */
void Time_show(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af02      	add	r7, sp, #8
	while(1)
	{
		unsigned int task = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
		Get_Time();
 8001706:	f7ff fc85 	bl	8001014 <Get_Time>
		if(time.minutes == 0 && time.seconds == 0 )
 800170a:	4b35      	ldr	r3, [pc, #212]	; (80017e0 <Time_show+0xe4>)
 800170c:	785b      	ldrb	r3, [r3, #1]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d10c      	bne.n	800172c <Time_show+0x30>
 8001712:	4b33      	ldr	r3, [pc, #204]	; (80017e0 <Time_show+0xe4>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d108      	bne.n	800172c <Time_show+0x30>
		{
			  task = 1;
 800171a:	2301      	movs	r3, #1
 800171c:	607b      	str	r3, [r7, #4]
			  xQueueSend(MsgQueue,(int *) &task, 1);
 800171e:	4b31      	ldr	r3, [pc, #196]	; (80017e4 <Time_show+0xe8>)
 8001720:	6818      	ldr	r0, [r3, #0]
 8001722:	1d39      	adds	r1, r7, #4
 8001724:	2300      	movs	r3, #0
 8001726:	2201      	movs	r2, #1
 8001728:	f003 fd7a 	bl	8005220 <xQueueGenericSend>
		}
		if(time.minutes == 30 && time.seconds == 0 && time.hour == 7 )
 800172c:	4b2c      	ldr	r3, [pc, #176]	; (80017e0 <Time_show+0xe4>)
 800172e:	785b      	ldrb	r3, [r3, #1]
 8001730:	2b1e      	cmp	r3, #30
 8001732:	d110      	bne.n	8001756 <Time_show+0x5a>
 8001734:	4b2a      	ldr	r3, [pc, #168]	; (80017e0 <Time_show+0xe4>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d10c      	bne.n	8001756 <Time_show+0x5a>
 800173c:	4b28      	ldr	r3, [pc, #160]	; (80017e0 <Time_show+0xe4>)
 800173e:	789b      	ldrb	r3, [r3, #2]
 8001740:	2b07      	cmp	r3, #7
 8001742:	d108      	bne.n	8001756 <Time_show+0x5a>
		{
			  task = 2;
 8001744:	2302      	movs	r3, #2
 8001746:	607b      	str	r3, [r7, #4]
			  xQueueSend(MsgQueue,(int *) &task, 1);
 8001748:	4b26      	ldr	r3, [pc, #152]	; (80017e4 <Time_show+0xe8>)
 800174a:	6818      	ldr	r0, [r3, #0]
 800174c:	1d39      	adds	r1, r7, #4
 800174e:	2300      	movs	r3, #0
 8001750:	2201      	movs	r2, #1
 8001752:	f003 fd65 	bl	8005220 <xQueueGenericSend>
		}
		sprintf (buffer, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 8001756:	4b22      	ldr	r3, [pc, #136]	; (80017e0 <Time_show+0xe4>)
 8001758:	789b      	ldrb	r3, [r3, #2]
 800175a:	461a      	mov	r2, r3
 800175c:	4b20      	ldr	r3, [pc, #128]	; (80017e0 <Time_show+0xe4>)
 800175e:	785b      	ldrb	r3, [r3, #1]
 8001760:	4619      	mov	r1, r3
 8001762:	4b1f      	ldr	r3, [pc, #124]	; (80017e0 <Time_show+0xe4>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	460b      	mov	r3, r1
 800176a:	491f      	ldr	r1, [pc, #124]	; (80017e8 <Time_show+0xec>)
 800176c:	481f      	ldr	r0, [pc, #124]	; (80017ec <Time_show+0xf0>)
 800176e:	f005 ff05 	bl	800757c <siprintf>
		lcd_put_cur (0,0);
 8001772:	2100      	movs	r1, #0
 8001774:	2000      	movs	r0, #0
 8001776:	f7ff fb4d 	bl	8000e14 <lcd_put_cur>
		lcd_send_string(buffer);
 800177a:	481c      	ldr	r0, [pc, #112]	; (80017ec <Time_show+0xf0>)
 800177c:	f7ff fba6 	bl	8000ecc <lcd_send_string>

		sprintf (buffer, "%02d-%02d-20%02d", time.dayofmonth, time.month, time.year);
 8001780:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <Time_show+0xe4>)
 8001782:	791b      	ldrb	r3, [r3, #4]
 8001784:	461a      	mov	r2, r3
 8001786:	4b16      	ldr	r3, [pc, #88]	; (80017e0 <Time_show+0xe4>)
 8001788:	795b      	ldrb	r3, [r3, #5]
 800178a:	4619      	mov	r1, r3
 800178c:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <Time_show+0xe4>)
 800178e:	799b      	ldrb	r3, [r3, #6]
 8001790:	9300      	str	r3, [sp, #0]
 8001792:	460b      	mov	r3, r1
 8001794:	4916      	ldr	r1, [pc, #88]	; (80017f0 <Time_show+0xf4>)
 8001796:	4815      	ldr	r0, [pc, #84]	; (80017ec <Time_show+0xf0>)
 8001798:	f005 fef0 	bl	800757c <siprintf>
		lcd_put_cur(1, 0);
 800179c:	2100      	movs	r1, #0
 800179e:	2001      	movs	r0, #1
 80017a0:	f7ff fb38 	bl	8000e14 <lcd_put_cur>
		lcd_send_string(buffer);
 80017a4:	4811      	ldr	r0, [pc, #68]	; (80017ec <Time_show+0xf0>)
 80017a6:	f7ff fb91 	bl	8000ecc <lcd_send_string>

		force_temp_conv();
 80017aa:	f7ff fcb9 	bl	8001120 <force_temp_conv>

		TEMP = Get_Temp();
 80017ae:	f7ff fc81 	bl	80010b4 <Get_Temp>
 80017b2:	4603      	mov	r3, r0
 80017b4:	4a0f      	ldr	r2, [pc, #60]	; (80017f4 <Time_show+0xf8>)
 80017b6:	6013      	str	r3, [r2, #0]

		lcd_put_cur(0, 10);
 80017b8:	210a      	movs	r1, #10
 80017ba:	2000      	movs	r0, #0
 80017bc:	f7ff fb2a 	bl	8000e14 <lcd_put_cur>

		sprintf (buffer, "%d", TEMP);
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <Time_show+0xf8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	461a      	mov	r2, r3
 80017c6:	490c      	ldr	r1, [pc, #48]	; (80017f8 <Time_show+0xfc>)
 80017c8:	4808      	ldr	r0, [pc, #32]	; (80017ec <Time_show+0xf0>)
 80017ca:	f005 fed7 	bl	800757c <siprintf>

		lcd_send_string(buffer);
 80017ce:	4807      	ldr	r0, [pc, #28]	; (80017ec <Time_show+0xf0>)
 80017d0:	f7ff fb7c 	bl	8000ecc <lcd_send_string>

		HAL_Delay(500);
 80017d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017d8:	f000 fac4 	bl	8001d64 <HAL_Delay>
	{
 80017dc:	e791      	b.n	8001702 <Time_show+0x6>
 80017de:	bf00      	nop
 80017e0:	20012e68 	.word	0x20012e68
 80017e4:	20000090 	.word	0x20000090
 80017e8:	08007dfc 	.word	0x08007dfc
 80017ec:	20012e58 	.word	0x20012e58
 80017f0:	08007e0c 	.word	0x08007e0c
 80017f4:	20012e54 	.word	0x20012e54
 80017f8:	08007e20 	.word	0x08007e20

080017fc <Buzzer_ring>:
	}

}

void Buzzer_ring(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
	unsigned int rcv = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	603b      	str	r3, [r7, #0]
	for(;;)
	{
		while(rcv == 0)
 8001806:	e00a      	b.n	800181e <Buzzer_ring+0x22>
		{
			xQueueReceive(MsgQueue, &rcv, 5000);
 8001808:	4b27      	ldr	r3, [pc, #156]	; (80018a8 <Buzzer_ring+0xac>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4639      	mov	r1, r7
 800180e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001812:	4618      	mov	r0, r3
 8001814:	f003 fe9a 	bl	800554c <xQueueReceive>
			if(rcv == 1) break;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d003      	beq.n	8001826 <Buzzer_ring+0x2a>
		while(rcv == 0)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d0f1      	beq.n	8001808 <Buzzer_ring+0xc>
 8001824:	e000      	b.n	8001828 <Buzzer_ring+0x2c>
			if(rcv == 1) break;
 8001826:	bf00      	nop
		}
		if(rcv == 1)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d136      	bne.n	800189c <Buzzer_ring+0xa0>
		{
			for(int i=0;i<2;i++)
 800182e:	2300      	movs	r3, #0
 8001830:	607b      	str	r3, [r7, #4]
 8001832:	e012      	b.n	800185a <Buzzer_ring+0x5e>
			{
				htim2.Instance->CCR2 = 255;
 8001834:	4b1d      	ldr	r3, [pc, #116]	; (80018ac <Buzzer_ring+0xb0>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	22ff      	movs	r2, #255	; 0xff
 800183a:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(300);
 800183c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001840:	f000 fa90 	bl	8001d64 <HAL_Delay>
				htim2.Instance->CCR2 = 0;
 8001844:	4b19      	ldr	r3, [pc, #100]	; (80018ac <Buzzer_ring+0xb0>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2200      	movs	r2, #0
 800184a:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(300);
 800184c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001850:	f000 fa88 	bl	8001d64 <HAL_Delay>
			for(int i=0;i<2;i++)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3301      	adds	r3, #1
 8001858:	607b      	str	r3, [r7, #4]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b01      	cmp	r3, #1
 800185e:	dde9      	ble.n	8001834 <Buzzer_ring+0x38>
			}
			rcv = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	603b      	str	r3, [r7, #0]
		}
		while(rcv == 2)
 8001864:	e01a      	b.n	800189c <Buzzer_ring+0xa0>
		{
			xQueueReceive(MsgQueue, &rcv, 1000);
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <Buzzer_ring+0xac>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4639      	mov	r1, r7
 800186c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001870:	4618      	mov	r0, r3
 8001872:	f003 fe6b 	bl	800554c <xQueueReceive>
			if(rcv == 0) break;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d013      	beq.n	80018a4 <Buzzer_ring+0xa8>
			htim2.Instance->CCR2 = 255;
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <Buzzer_ring+0xb0>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	22ff      	movs	r2, #255	; 0xff
 8001882:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(500);
 8001884:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001888:	f000 fa6c 	bl	8001d64 <HAL_Delay>
			htim2.Instance->CCR2 = 0;
 800188c:	4b07      	ldr	r3, [pc, #28]	; (80018ac <Buzzer_ring+0xb0>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2200      	movs	r2, #0
 8001892:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(500);
 8001894:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001898:	f000 fa64 	bl	8001d64 <HAL_Delay>
		while(rcv == 2)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d0e1      	beq.n	8001866 <Buzzer_ring+0x6a>
 80018a2:	e7bc      	b.n	800181e <Buzzer_ring+0x22>
			if(rcv == 0) break;
 80018a4:	bf00      	nop
		while(rcv == 0)
 80018a6:	e7ba      	b.n	800181e <Buzzer_ring+0x22>
 80018a8:	20000090 	.word	0x20000090
 80018ac:	20012e70 	.word	0x20012e70

080018b0 <Button_click>:
		}
	}
}

void Button_click(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
	unsigned int task = 1;
 80018b6:	2301      	movs	r3, #1
 80018b8:	603b      	str	r3, [r7, #0]
	unsigned int count = 1;
 80018ba:	2301      	movs	r3, #1
 80018bc:	607b      	str	r3, [r7, #4]
	for(;;)
	{
		if(HAL_GPIO_ReadPin(btn_blue_GPIO_Port, GPIO_PIN_0)){
 80018be:	2101      	movs	r1, #1
 80018c0:	4816      	ldr	r0, [pc, #88]	; (800191c <Button_click+0x6c>)
 80018c2:	f000 fcf1 	bl	80022a8 <HAL_GPIO_ReadPin>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0f8      	beq.n	80018be <Button_click+0xe>
			HAL_Delay(10);
 80018cc:	200a      	movs	r0, #10
 80018ce:	f000 fa49 	bl	8001d64 <HAL_Delay>
			while(HAL_GPIO_ReadPin(btn_blue_GPIO_Port, GPIO_PIN_0))
 80018d2:	bf00      	nop
 80018d4:	2101      	movs	r1, #1
 80018d6:	4811      	ldr	r0, [pc, #68]	; (800191c <Button_click+0x6c>)
 80018d8:	f000 fce6 	bl	80022a8 <HAL_GPIO_ReadPin>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f8      	bne.n	80018d4 <Button_click+0x24>
			{;}
			++count;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	3301      	adds	r3, #1
 80018e6:	607b      	str	r3, [r7, #4]
			if(count & 0x01) task = 0;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d002      	beq.n	80018f8 <Button_click+0x48>
 80018f2:	2300      	movs	r3, #0
 80018f4:	603b      	str	r3, [r7, #0]
 80018f6:	e001      	b.n	80018fc <Button_click+0x4c>
			else task = 0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	603b      	str	r3, [r7, #0]
			xQueueSend(MsgQueue,(int *) &task, 1);
 80018fc:	4b08      	ldr	r3, [pc, #32]	; (8001920 <Button_click+0x70>)
 80018fe:	6818      	ldr	r0, [r3, #0]
 8001900:	4639      	mov	r1, r7
 8001902:	2300      	movs	r3, #0
 8001904:	2201      	movs	r2, #1
 8001906:	f003 fc8b 	bl	8005220 <xQueueGenericSend>
			taskYIELD();
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <Button_click+0x74>)
 800190c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	f3bf 8f4f 	dsb	sy
 8001916:	f3bf 8f6f 	isb	sy
		if(HAL_GPIO_ReadPin(btn_blue_GPIO_Port, GPIO_PIN_0)){
 800191a:	e7d0      	b.n	80018be <Button_click+0xe>
 800191c:	40020000 	.word	0x40020000
 8001920:	20000090 	.word	0x20000090
 8001924:	e000ed04 	.word	0xe000ed04

08001928 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a04      	ldr	r2, [pc, #16]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d101      	bne.n	800193e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800193a:	f000 f9f3 	bl	8001d24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40001400 	.word	0x40001400

0800194c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001950:	b672      	cpsid	i
}
 8001952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001954:	e7fe      	b.n	8001954 <Error_Handler+0x8>
	...

08001958 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	607b      	str	r3, [r7, #4]
 8001962:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <HAL_MspInit+0x4c>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	4a0f      	ldr	r2, [pc, #60]	; (80019a4 <HAL_MspInit+0x4c>)
 8001968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800196c:	6453      	str	r3, [r2, #68]	; 0x44
 800196e:	4b0d      	ldr	r3, [pc, #52]	; (80019a4 <HAL_MspInit+0x4c>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	603b      	str	r3, [r7, #0]
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <HAL_MspInit+0x4c>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	4a08      	ldr	r2, [pc, #32]	; (80019a4 <HAL_MspInit+0x4c>)
 8001984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001988:	6413      	str	r3, [r2, #64]	; 0x40
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_MspInit+0x4c>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001992:	603b      	str	r3, [r7, #0]
 8001994:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	40023800 	.word	0x40023800

080019a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08a      	sub	sp, #40	; 0x28
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	f107 0314 	add.w	r3, r7, #20
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a21      	ldr	r2, [pc, #132]	; (8001a4c <HAL_I2C_MspInit+0xa4>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d13b      	bne.n	8001a42 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	4b20      	ldr	r3, [pc, #128]	; (8001a50 <HAL_I2C_MspInit+0xa8>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a1f      	ldr	r2, [pc, #124]	; (8001a50 <HAL_I2C_MspInit+0xa8>)
 80019d4:	f043 0302 	orr.w	r3, r3, #2
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b1d      	ldr	r3, [pc, #116]	; (8001a50 <HAL_I2C_MspInit+0xa8>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	613b      	str	r3, [r7, #16]
 80019e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019e6:	2340      	movs	r3, #64	; 0x40
 80019e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ea:	2312      	movs	r3, #18
 80019ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f2:	2303      	movs	r3, #3
 80019f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019f6:	2304      	movs	r3, #4
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fa:	f107 0314 	add.w	r3, r7, #20
 80019fe:	4619      	mov	r1, r3
 8001a00:	4814      	ldr	r0, [pc, #80]	; (8001a54 <HAL_I2C_MspInit+0xac>)
 8001a02:	f000 fab5 	bl	8001f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Audio_SDA_Pin;
 8001a06:	2380      	movs	r3, #128	; 0x80
 8001a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a0a:	2312      	movs	r3, #18
 8001a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a12:	2300      	movs	r3, #0
 8001a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a16:	2304      	movs	r3, #4
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 8001a1a:	f107 0314 	add.w	r3, r7, #20
 8001a1e:	4619      	mov	r1, r3
 8001a20:	480c      	ldr	r0, [pc, #48]	; (8001a54 <HAL_I2C_MspInit+0xac>)
 8001a22:	f000 faa5 	bl	8001f70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <HAL_I2C_MspInit+0xa8>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	4a08      	ldr	r2, [pc, #32]	; (8001a50 <HAL_I2C_MspInit+0xa8>)
 8001a30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a34:	6413      	str	r3, [r2, #64]	; 0x40
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_I2C_MspInit+0xa8>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a42:	bf00      	nop
 8001a44:	3728      	adds	r7, #40	; 0x28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40005400 	.word	0x40005400
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40020400 	.word	0x40020400

08001a58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a68:	d10d      	bne.n	8001a86 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <HAL_TIM_Base_MspInit+0x3c>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	4a08      	ldr	r2, [pc, #32]	; (8001a94 <HAL_TIM_Base_MspInit+0x3c>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_TIM_Base_MspInit+0x3c>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a86:	bf00      	nop
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800

08001a98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b088      	sub	sp, #32
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 030c 	add.w	r3, r7, #12
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab8:	d11d      	bne.n	8001af6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <HAL_TIM_MspPostInit+0x68>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a0f      	ldr	r2, [pc, #60]	; (8001b00 <HAL_TIM_MspPostInit+0x68>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <HAL_TIM_MspPostInit+0x68>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ada:	2302      	movs	r3, #2
 8001adc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aea:	f107 030c 	add.w	r3, r7, #12
 8001aee:	4619      	mov	r1, r3
 8001af0:	4804      	ldr	r0, [pc, #16]	; (8001b04 <HAL_TIM_MspPostInit+0x6c>)
 8001af2:	f000 fa3d 	bl	8001f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001af6:	bf00      	nop
 8001af8:	3720      	adds	r7, #32
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40023800 	.word	0x40023800
 8001b04:	40020000 	.word	0x40020000

08001b08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08c      	sub	sp, #48	; 0x30
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	2037      	movs	r0, #55	; 0x37
 8001b1e:	f000 f9fd 	bl	8001f1c <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001b22:	2037      	movs	r0, #55	; 0x37
 8001b24:	f000 fa16 	bl	8001f54 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	4b1f      	ldr	r3, [pc, #124]	; (8001bac <HAL_InitTick+0xa4>)
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b30:	4a1e      	ldr	r2, [pc, #120]	; (8001bac <HAL_InitTick+0xa4>)
 8001b32:	f043 0320 	orr.w	r3, r3, #32
 8001b36:	6413      	str	r3, [r2, #64]	; 0x40
 8001b38:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <HAL_InitTick+0xa4>)
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3c:	f003 0320 	and.w	r3, r3, #32
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b44:	f107 0210 	add.w	r2, r7, #16
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	4611      	mov	r1, r2
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f002 f97c 	bl	8003e4c <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001b54:	f002 f966 	bl	8003e24 <HAL_RCC_GetPCLK1Freq>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b60:	4a13      	ldr	r2, [pc, #76]	; (8001bb0 <HAL_InitTick+0xa8>)
 8001b62:	fba2 2303 	umull	r2, r3, r2, r3
 8001b66:	0c9b      	lsrs	r3, r3, #18
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <HAL_InitTick+0xac>)
 8001b6e:	4a12      	ldr	r2, [pc, #72]	; (8001bb8 <HAL_InitTick+0xb0>)
 8001b70:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001b72:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <HAL_InitTick+0xac>)
 8001b74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b78:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001b7a:	4a0e      	ldr	r2, [pc, #56]	; (8001bb4 <HAL_InitTick+0xac>)
 8001b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b7e:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001b80:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <HAL_InitTick+0xac>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b86:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <HAL_InitTick+0xac>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001b8c:	4809      	ldr	r0, [pc, #36]	; (8001bb4 <HAL_InitTick+0xac>)
 8001b8e:	f002 f98f 	bl	8003eb0 <HAL_TIM_Base_Init>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d104      	bne.n	8001ba2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001b98:	4806      	ldr	r0, [pc, #24]	; (8001bb4 <HAL_InitTick+0xac>)
 8001b9a:	f002 f9d9 	bl	8003f50 <HAL_TIM_Base_Start_IT>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	e000      	b.n	8001ba4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3730      	adds	r7, #48	; 0x30
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	431bde83 	.word	0x431bde83
 8001bb4:	20012eb8 	.word	0x20012eb8
 8001bb8:	40001400 	.word	0x40001400

08001bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <NMI_Handler+0x4>

08001bc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bc6:	e7fe      	b.n	8001bc6 <HardFault_Handler+0x4>

08001bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <MemManage_Handler+0x4>

08001bce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bd2:	e7fe      	b.n	8001bd2 <BusFault_Handler+0x4>

08001bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <UsageFault_Handler+0x4>

08001bda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001bec:	4802      	ldr	r0, [pc, #8]	; (8001bf8 <TIM7_IRQHandler+0x10>)
 8001bee:	f002 fb41 	bl	8004274 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20012eb8 	.word	0x20012eb8

08001bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c04:	4a14      	ldr	r2, [pc, #80]	; (8001c58 <_sbrk+0x5c>)
 8001c06:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <_sbrk+0x60>)
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c10:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <_sbrk+0x64>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d102      	bne.n	8001c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c18:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <_sbrk+0x64>)
 8001c1a:	4a12      	ldr	r2, [pc, #72]	; (8001c64 <_sbrk+0x68>)
 8001c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c1e:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <_sbrk+0x64>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4413      	add	r3, r2
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d207      	bcs.n	8001c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c2c:	f005 fc66 	bl	80074fc <__errno>
 8001c30:	4603      	mov	r3, r0
 8001c32:	220c      	movs	r2, #12
 8001c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c36:	f04f 33ff 	mov.w	r3, #4294967295
 8001c3a:	e009      	b.n	8001c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c3c:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <_sbrk+0x64>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c42:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <_sbrk+0x64>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	4a05      	ldr	r2, [pc, #20]	; (8001c60 <_sbrk+0x64>)
 8001c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20020000 	.word	0x20020000
 8001c5c:	00000400 	.word	0x00000400
 8001c60:	20000094 	.word	0x20000094
 8001c64:	20012f58 	.word	0x20012f58

08001c68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c6c:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <SystemInit+0x20>)
 8001c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c72:	4a05      	ldr	r2, [pc, #20]	; (8001c88 <SystemInit+0x20>)
 8001c74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c90:	480d      	ldr	r0, [pc, #52]	; (8001cc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c92:	490e      	ldr	r1, [pc, #56]	; (8001ccc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c94:	4a0e      	ldr	r2, [pc, #56]	; (8001cd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c98:	e002      	b.n	8001ca0 <LoopCopyDataInit>

08001c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c9e:	3304      	adds	r3, #4

08001ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ca4:	d3f9      	bcc.n	8001c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ca6:	4a0b      	ldr	r2, [pc, #44]	; (8001cd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ca8:	4c0b      	ldr	r4, [pc, #44]	; (8001cd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cac:	e001      	b.n	8001cb2 <LoopFillZerobss>

08001cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cb0:	3204      	adds	r2, #4

08001cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cb4:	d3fb      	bcc.n	8001cae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001cb6:	f7ff ffd7 	bl	8001c68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cba:	f005 fc25 	bl	8007508 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cbe:	f7ff fa69 	bl	8001194 <main>
  bx  lr    
 8001cc2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001cc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ccc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001cd0:	08007e98 	.word	0x08007e98
  ldr r2, =_sbss
 8001cd4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001cd8:	20012f54 	.word	0x20012f54

08001cdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cdc:	e7fe      	b.n	8001cdc <ADC_IRQHandler>
	...

08001ce0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ce4:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <HAL_Init+0x40>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a0d      	ldr	r2, [pc, #52]	; (8001d20 <HAL_Init+0x40>)
 8001cea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <HAL_Init+0x40>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <HAL_Init+0x40>)
 8001cf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cfc:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <HAL_Init+0x40>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a07      	ldr	r2, [pc, #28]	; (8001d20 <HAL_Init+0x40>)
 8001d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d08:	2003      	movs	r0, #3
 8001d0a:	f000 f8fc 	bl	8001f06 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d0e:	200f      	movs	r0, #15
 8001d10:	f7ff fefa 	bl	8001b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d14:	f7ff fe20 	bl	8001958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40023c00 	.word	0x40023c00

08001d24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <HAL_IncTick+0x20>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <HAL_IncTick+0x24>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4413      	add	r3, r2
 8001d34:	4a04      	ldr	r2, [pc, #16]	; (8001d48 <HAL_IncTick+0x24>)
 8001d36:	6013      	str	r3, [r2, #0]
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	20000008 	.word	0x20000008
 8001d48:	20012f00 	.word	0x20012f00

08001d4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d50:	4b03      	ldr	r3, [pc, #12]	; (8001d60 <HAL_GetTick+0x14>)
 8001d52:	681b      	ldr	r3, [r3, #0]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	20012f00 	.word	0x20012f00

08001d64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d6c:	f7ff ffee 	bl	8001d4c <HAL_GetTick>
 8001d70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d7c:	d005      	beq.n	8001d8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <HAL_Delay+0x44>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	461a      	mov	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4413      	add	r3, r2
 8001d88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d8a:	bf00      	nop
 8001d8c:	f7ff ffde 	bl	8001d4c <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d8f7      	bhi.n	8001d8c <HAL_Delay+0x28>
  {
  }
}
 8001d9c:	bf00      	nop
 8001d9e:	bf00      	nop
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000008 	.word	0x20000008

08001dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dc8:	4013      	ands	r3, r2
 8001dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dde:	4a04      	ldr	r2, [pc, #16]	; (8001df0 <__NVIC_SetPriorityGrouping+0x44>)
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	60d3      	str	r3, [r2, #12]
}
 8001de4:	bf00      	nop
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df8:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <__NVIC_GetPriorityGrouping+0x18>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	0a1b      	lsrs	r3, r3, #8
 8001dfe:	f003 0307 	and.w	r3, r3, #7
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	db0b      	blt.n	8001e3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	f003 021f 	and.w	r2, r3, #31
 8001e28:	4907      	ldr	r1, [pc, #28]	; (8001e48 <__NVIC_EnableIRQ+0x38>)
 8001e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2e:	095b      	lsrs	r3, r3, #5
 8001e30:	2001      	movs	r0, #1
 8001e32:	fa00 f202 	lsl.w	r2, r0, r2
 8001e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	e000e100 	.word	0xe000e100

08001e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	6039      	str	r1, [r7, #0]
 8001e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	db0a      	blt.n	8001e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	490c      	ldr	r1, [pc, #48]	; (8001e98 <__NVIC_SetPriority+0x4c>)
 8001e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6a:	0112      	lsls	r2, r2, #4
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	440b      	add	r3, r1
 8001e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e74:	e00a      	b.n	8001e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	4908      	ldr	r1, [pc, #32]	; (8001e9c <__NVIC_SetPriority+0x50>)
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	3b04      	subs	r3, #4
 8001e84:	0112      	lsls	r2, r2, #4
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	440b      	add	r3, r1
 8001e8a:	761a      	strb	r2, [r3, #24]
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000e100 	.word	0xe000e100
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b089      	sub	sp, #36	; 0x24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	f1c3 0307 	rsb	r3, r3, #7
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	bf28      	it	cs
 8001ebe:	2304      	movcs	r3, #4
 8001ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	2b06      	cmp	r3, #6
 8001ec8:	d902      	bls.n	8001ed0 <NVIC_EncodePriority+0x30>
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	3b03      	subs	r3, #3
 8001ece:	e000      	b.n	8001ed2 <NVIC_EncodePriority+0x32>
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43da      	mvns	r2, r3
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	401a      	ands	r2, r3
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef2:	43d9      	mvns	r1, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef8:	4313      	orrs	r3, r2
         );
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3724      	adds	r7, #36	; 0x24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7ff ff4c 	bl	8001dac <__NVIC_SetPriorityGrouping>
}
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
 8001f28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f2e:	f7ff ff61 	bl	8001df4 <__NVIC_GetPriorityGrouping>
 8001f32:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	68b9      	ldr	r1, [r7, #8]
 8001f38:	6978      	ldr	r0, [r7, #20]
 8001f3a:	f7ff ffb1 	bl	8001ea0 <NVIC_EncodePriority>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f44:	4611      	mov	r1, r2
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff ff80 	bl	8001e4c <__NVIC_SetPriority>
}
 8001f4c:	bf00      	nop
 8001f4e:	3718      	adds	r7, #24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff ff54 	bl	8001e10 <__NVIC_EnableIRQ>
}
 8001f68:	bf00      	nop
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b089      	sub	sp, #36	; 0x24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f86:	2300      	movs	r3, #0
 8001f88:	61fb      	str	r3, [r7, #28]
 8001f8a:	e16b      	b.n	8002264 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	f040 815a 	bne.w	800225e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d005      	beq.n	8001fc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d130      	bne.n	8002024 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	2203      	movs	r2, #3
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4013      	ands	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	091b      	lsrs	r3, r3, #4
 800200e:	f003 0201 	and.w	r2, r3, #1
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4313      	orrs	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	2b03      	cmp	r3, #3
 800202e:	d017      	beq.n	8002060 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	2203      	movs	r2, #3
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4313      	orrs	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 0303 	and.w	r3, r3, #3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d123      	bne.n	80020b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	08da      	lsrs	r2, r3, #3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3208      	adds	r2, #8
 8002074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002078:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	220f      	movs	r2, #15
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	691a      	ldr	r2, [r3, #16]
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	08da      	lsrs	r2, r3, #3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3208      	adds	r2, #8
 80020ae:	69b9      	ldr	r1, [r7, #24]
 80020b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	2203      	movs	r2, #3
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 0203 	and.w	r2, r3, #3
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 80b4 	beq.w	800225e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	4b60      	ldr	r3, [pc, #384]	; (800227c <HAL_GPIO_Init+0x30c>)
 80020fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fe:	4a5f      	ldr	r2, [pc, #380]	; (800227c <HAL_GPIO_Init+0x30c>)
 8002100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002104:	6453      	str	r3, [r2, #68]	; 0x44
 8002106:	4b5d      	ldr	r3, [pc, #372]	; (800227c <HAL_GPIO_Init+0x30c>)
 8002108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002112:	4a5b      	ldr	r2, [pc, #364]	; (8002280 <HAL_GPIO_Init+0x310>)
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	089b      	lsrs	r3, r3, #2
 8002118:	3302      	adds	r3, #2
 800211a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800211e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	220f      	movs	r2, #15
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a52      	ldr	r2, [pc, #328]	; (8002284 <HAL_GPIO_Init+0x314>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d02b      	beq.n	8002196 <HAL_GPIO_Init+0x226>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a51      	ldr	r2, [pc, #324]	; (8002288 <HAL_GPIO_Init+0x318>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d025      	beq.n	8002192 <HAL_GPIO_Init+0x222>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a50      	ldr	r2, [pc, #320]	; (800228c <HAL_GPIO_Init+0x31c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d01f      	beq.n	800218e <HAL_GPIO_Init+0x21e>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a4f      	ldr	r2, [pc, #316]	; (8002290 <HAL_GPIO_Init+0x320>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d019      	beq.n	800218a <HAL_GPIO_Init+0x21a>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a4e      	ldr	r2, [pc, #312]	; (8002294 <HAL_GPIO_Init+0x324>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d013      	beq.n	8002186 <HAL_GPIO_Init+0x216>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a4d      	ldr	r2, [pc, #308]	; (8002298 <HAL_GPIO_Init+0x328>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d00d      	beq.n	8002182 <HAL_GPIO_Init+0x212>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a4c      	ldr	r2, [pc, #304]	; (800229c <HAL_GPIO_Init+0x32c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d007      	beq.n	800217e <HAL_GPIO_Init+0x20e>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a4b      	ldr	r2, [pc, #300]	; (80022a0 <HAL_GPIO_Init+0x330>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d101      	bne.n	800217a <HAL_GPIO_Init+0x20a>
 8002176:	2307      	movs	r3, #7
 8002178:	e00e      	b.n	8002198 <HAL_GPIO_Init+0x228>
 800217a:	2308      	movs	r3, #8
 800217c:	e00c      	b.n	8002198 <HAL_GPIO_Init+0x228>
 800217e:	2306      	movs	r3, #6
 8002180:	e00a      	b.n	8002198 <HAL_GPIO_Init+0x228>
 8002182:	2305      	movs	r3, #5
 8002184:	e008      	b.n	8002198 <HAL_GPIO_Init+0x228>
 8002186:	2304      	movs	r3, #4
 8002188:	e006      	b.n	8002198 <HAL_GPIO_Init+0x228>
 800218a:	2303      	movs	r3, #3
 800218c:	e004      	b.n	8002198 <HAL_GPIO_Init+0x228>
 800218e:	2302      	movs	r3, #2
 8002190:	e002      	b.n	8002198 <HAL_GPIO_Init+0x228>
 8002192:	2301      	movs	r3, #1
 8002194:	e000      	b.n	8002198 <HAL_GPIO_Init+0x228>
 8002196:	2300      	movs	r3, #0
 8002198:	69fa      	ldr	r2, [r7, #28]
 800219a:	f002 0203 	and.w	r2, r2, #3
 800219e:	0092      	lsls	r2, r2, #2
 80021a0:	4093      	lsls	r3, r2
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021a8:	4935      	ldr	r1, [pc, #212]	; (8002280 <HAL_GPIO_Init+0x310>)
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	089b      	lsrs	r3, r3, #2
 80021ae:	3302      	adds	r3, #2
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021b6:	4b3b      	ldr	r3, [pc, #236]	; (80022a4 <HAL_GPIO_Init+0x334>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	43db      	mvns	r3, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4013      	ands	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021da:	4a32      	ldr	r2, [pc, #200]	; (80022a4 <HAL_GPIO_Init+0x334>)
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021e0:	4b30      	ldr	r3, [pc, #192]	; (80022a4 <HAL_GPIO_Init+0x334>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	43db      	mvns	r3, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	4313      	orrs	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002204:	4a27      	ldr	r2, [pc, #156]	; (80022a4 <HAL_GPIO_Init+0x334>)
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800220a:	4b26      	ldr	r3, [pc, #152]	; (80022a4 <HAL_GPIO_Init+0x334>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	43db      	mvns	r3, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4013      	ands	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800222e:	4a1d      	ldr	r2, [pc, #116]	; (80022a4 <HAL_GPIO_Init+0x334>)
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002234:	4b1b      	ldr	r3, [pc, #108]	; (80022a4 <HAL_GPIO_Init+0x334>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	43db      	mvns	r3, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4013      	ands	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002258:	4a12      	ldr	r2, [pc, #72]	; (80022a4 <HAL_GPIO_Init+0x334>)
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	3301      	adds	r3, #1
 8002262:	61fb      	str	r3, [r7, #28]
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	2b0f      	cmp	r3, #15
 8002268:	f67f ae90 	bls.w	8001f8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800226c:	bf00      	nop
 800226e:	bf00      	nop
 8002270:	3724      	adds	r7, #36	; 0x24
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	40023800 	.word	0x40023800
 8002280:	40013800 	.word	0x40013800
 8002284:	40020000 	.word	0x40020000
 8002288:	40020400 	.word	0x40020400
 800228c:	40020800 	.word	0x40020800
 8002290:	40020c00 	.word	0x40020c00
 8002294:	40021000 	.word	0x40021000
 8002298:	40021400 	.word	0x40021400
 800229c:	40021800 	.word	0x40021800
 80022a0:	40021c00 	.word	0x40021c00
 80022a4:	40013c00 	.word	0x40013c00

080022a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691a      	ldr	r2, [r3, #16]
 80022b8:	887b      	ldrh	r3, [r7, #2]
 80022ba:	4013      	ands	r3, r2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d002      	beq.n	80022c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022c0:	2301      	movs	r3, #1
 80022c2:	73fb      	strb	r3, [r7, #15]
 80022c4:	e001      	b.n	80022ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022c6:	2300      	movs	r3, #0
 80022c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	460b      	mov	r3, r1
 80022e2:	807b      	strh	r3, [r7, #2]
 80022e4:	4613      	mov	r3, r2
 80022e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022e8:	787b      	ldrb	r3, [r7, #1]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ee:	887a      	ldrh	r2, [r7, #2]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022f4:	e003      	b.n	80022fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022f6:	887b      	ldrh	r3, [r7, #2]
 80022f8:	041a      	lsls	r2, r3, #16
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	619a      	str	r2, [r3, #24]
}
 80022fe:	bf00      	nop
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
	...

0800230c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e12b      	b.n	8002576 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d106      	bne.n	8002338 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7ff fb38 	bl	80019a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2224      	movs	r2, #36	; 0x24
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 0201 	bic.w	r2, r2, #1
 800234e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800235e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800236e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002370:	f001 fd58 	bl	8003e24 <HAL_RCC_GetPCLK1Freq>
 8002374:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	4a81      	ldr	r2, [pc, #516]	; (8002580 <HAL_I2C_Init+0x274>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d807      	bhi.n	8002390 <HAL_I2C_Init+0x84>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4a80      	ldr	r2, [pc, #512]	; (8002584 <HAL_I2C_Init+0x278>)
 8002384:	4293      	cmp	r3, r2
 8002386:	bf94      	ite	ls
 8002388:	2301      	movls	r3, #1
 800238a:	2300      	movhi	r3, #0
 800238c:	b2db      	uxtb	r3, r3
 800238e:	e006      	b.n	800239e <HAL_I2C_Init+0x92>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4a7d      	ldr	r2, [pc, #500]	; (8002588 <HAL_I2C_Init+0x27c>)
 8002394:	4293      	cmp	r3, r2
 8002396:	bf94      	ite	ls
 8002398:	2301      	movls	r3, #1
 800239a:	2300      	movhi	r3, #0
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e0e7      	b.n	8002576 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	4a78      	ldr	r2, [pc, #480]	; (800258c <HAL_I2C_Init+0x280>)
 80023aa:	fba2 2303 	umull	r2, r3, r2, r3
 80023ae:	0c9b      	lsrs	r3, r3, #18
 80023b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	4a6a      	ldr	r2, [pc, #424]	; (8002580 <HAL_I2C_Init+0x274>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d802      	bhi.n	80023e0 <HAL_I2C_Init+0xd4>
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	3301      	adds	r3, #1
 80023de:	e009      	b.n	80023f4 <HAL_I2C_Init+0xe8>
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023e6:	fb02 f303 	mul.w	r3, r2, r3
 80023ea:	4a69      	ldr	r2, [pc, #420]	; (8002590 <HAL_I2C_Init+0x284>)
 80023ec:	fba2 2303 	umull	r2, r3, r2, r3
 80023f0:	099b      	lsrs	r3, r3, #6
 80023f2:	3301      	adds	r3, #1
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6812      	ldr	r2, [r2, #0]
 80023f8:	430b      	orrs	r3, r1
 80023fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002406:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	495c      	ldr	r1, [pc, #368]	; (8002580 <HAL_I2C_Init+0x274>)
 8002410:	428b      	cmp	r3, r1
 8002412:	d819      	bhi.n	8002448 <HAL_I2C_Init+0x13c>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	1e59      	subs	r1, r3, #1
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002422:	1c59      	adds	r1, r3, #1
 8002424:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002428:	400b      	ands	r3, r1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00a      	beq.n	8002444 <HAL_I2C_Init+0x138>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	1e59      	subs	r1, r3, #1
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	fbb1 f3f3 	udiv	r3, r1, r3
 800243c:	3301      	adds	r3, #1
 800243e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002442:	e051      	b.n	80024e8 <HAL_I2C_Init+0x1dc>
 8002444:	2304      	movs	r3, #4
 8002446:	e04f      	b.n	80024e8 <HAL_I2C_Init+0x1dc>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d111      	bne.n	8002474 <HAL_I2C_Init+0x168>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	1e58      	subs	r0, r3, #1
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6859      	ldr	r1, [r3, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	440b      	add	r3, r1
 800245e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002462:	3301      	adds	r3, #1
 8002464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002468:	2b00      	cmp	r3, #0
 800246a:	bf0c      	ite	eq
 800246c:	2301      	moveq	r3, #1
 800246e:	2300      	movne	r3, #0
 8002470:	b2db      	uxtb	r3, r3
 8002472:	e012      	b.n	800249a <HAL_I2C_Init+0x18e>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	1e58      	subs	r0, r3, #1
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6859      	ldr	r1, [r3, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	0099      	lsls	r1, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	fbb0 f3f3 	udiv	r3, r0, r3
 800248a:	3301      	adds	r3, #1
 800248c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002490:	2b00      	cmp	r3, #0
 8002492:	bf0c      	ite	eq
 8002494:	2301      	moveq	r3, #1
 8002496:	2300      	movne	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_I2C_Init+0x196>
 800249e:	2301      	movs	r3, #1
 80024a0:	e022      	b.n	80024e8 <HAL_I2C_Init+0x1dc>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10e      	bne.n	80024c8 <HAL_I2C_Init+0x1bc>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	1e58      	subs	r0, r3, #1
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6859      	ldr	r1, [r3, #4]
 80024b2:	460b      	mov	r3, r1
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	440b      	add	r3, r1
 80024b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80024bc:	3301      	adds	r3, #1
 80024be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024c6:	e00f      	b.n	80024e8 <HAL_I2C_Init+0x1dc>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	1e58      	subs	r0, r3, #1
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6859      	ldr	r1, [r3, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	0099      	lsls	r1, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	fbb0 f3f3 	udiv	r3, r0, r3
 80024de:	3301      	adds	r3, #1
 80024e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	6809      	ldr	r1, [r1, #0]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69da      	ldr	r2, [r3, #28]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	430a      	orrs	r2, r1
 800250a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002516:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6911      	ldr	r1, [r2, #16]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	68d2      	ldr	r2, [r2, #12]
 8002522:	4311      	orrs	r1, r2
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6812      	ldr	r2, [r2, #0]
 8002528:	430b      	orrs	r3, r1
 800252a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	695a      	ldr	r2, [r3, #20]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f042 0201 	orr.w	r2, r2, #1
 8002556:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2220      	movs	r2, #32
 8002562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	000186a0 	.word	0x000186a0
 8002584:	001e847f 	.word	0x001e847f
 8002588:	003d08ff 	.word	0x003d08ff
 800258c:	431bde83 	.word	0x431bde83
 8002590:	10624dd3 	.word	0x10624dd3

08002594 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af02      	add	r7, sp, #8
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	607a      	str	r2, [r7, #4]
 800259e:	461a      	mov	r2, r3
 80025a0:	460b      	mov	r3, r1
 80025a2:	817b      	strh	r3, [r7, #10]
 80025a4:	4613      	mov	r3, r2
 80025a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025a8:	f7ff fbd0 	bl	8001d4c <HAL_GetTick>
 80025ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b20      	cmp	r3, #32
 80025b8:	f040 80e0 	bne.w	800277c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	2319      	movs	r3, #25
 80025c2:	2201      	movs	r2, #1
 80025c4:	4970      	ldr	r1, [pc, #448]	; (8002788 <HAL_I2C_Master_Transmit+0x1f4>)
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 fe02 	bl	80031d0 <I2C_WaitOnFlagUntilTimeout>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80025d2:	2302      	movs	r3, #2
 80025d4:	e0d3      	b.n	800277e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d101      	bne.n	80025e4 <HAL_I2C_Master_Transmit+0x50>
 80025e0:	2302      	movs	r3, #2
 80025e2:	e0cc      	b.n	800277e <HAL_I2C_Master_Transmit+0x1ea>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d007      	beq.n	800260a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f042 0201 	orr.w	r2, r2, #1
 8002608:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002618:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2221      	movs	r2, #33	; 0x21
 800261e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2210      	movs	r2, #16
 8002626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	893a      	ldrh	r2, [r7, #8]
 800263a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002640:	b29a      	uxth	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	4a50      	ldr	r2, [pc, #320]	; (800278c <HAL_I2C_Master_Transmit+0x1f8>)
 800264a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800264c:	8979      	ldrh	r1, [r7, #10]
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	6a3a      	ldr	r2, [r7, #32]
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 fbbc 	bl	8002dd0 <I2C_MasterRequestWrite>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e08d      	b.n	800277e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002678:	e066      	b.n	8002748 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	6a39      	ldr	r1, [r7, #32]
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f000 fe7c 	bl	800337c <I2C_WaitOnTXEFlagUntilTimeout>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00d      	beq.n	80026a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	2b04      	cmp	r3, #4
 8002690:	d107      	bne.n	80026a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e06b      	b.n	800277e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026aa:	781a      	ldrb	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	3b01      	subs	r3, #1
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ce:	3b01      	subs	r3, #1
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d11b      	bne.n	800271c <HAL_I2C_Master_Transmit+0x188>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d017      	beq.n	800271c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	781a      	ldrb	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002706:	b29b      	uxth	r3, r3
 8002708:	3b01      	subs	r3, #1
 800270a:	b29a      	uxth	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002714:	3b01      	subs	r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	6a39      	ldr	r1, [r7, #32]
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 fe6c 	bl	80033fe <I2C_WaitOnBTFFlagUntilTimeout>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00d      	beq.n	8002748 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002730:	2b04      	cmp	r3, #4
 8002732:	d107      	bne.n	8002744 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002742:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e01a      	b.n	800277e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274c:	2b00      	cmp	r3, #0
 800274e:	d194      	bne.n	800267a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800275e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2220      	movs	r2, #32
 8002764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	e000      	b.n	800277e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800277c:	2302      	movs	r3, #2
  }
}
 800277e:	4618      	mov	r0, r3
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	00100002 	.word	0x00100002
 800278c:	ffff0000 	.word	0xffff0000

08002790 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b088      	sub	sp, #32
 8002794:	af02      	add	r7, sp, #8
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	4608      	mov	r0, r1
 800279a:	4611      	mov	r1, r2
 800279c:	461a      	mov	r2, r3
 800279e:	4603      	mov	r3, r0
 80027a0:	817b      	strh	r3, [r7, #10]
 80027a2:	460b      	mov	r3, r1
 80027a4:	813b      	strh	r3, [r7, #8]
 80027a6:	4613      	mov	r3, r2
 80027a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027aa:	f7ff facf 	bl	8001d4c <HAL_GetTick>
 80027ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b20      	cmp	r3, #32
 80027ba:	f040 80d9 	bne.w	8002970 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	2319      	movs	r3, #25
 80027c4:	2201      	movs	r2, #1
 80027c6:	496d      	ldr	r1, [pc, #436]	; (800297c <HAL_I2C_Mem_Write+0x1ec>)
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f000 fd01 	bl	80031d0 <I2C_WaitOnFlagUntilTimeout>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80027d4:	2302      	movs	r3, #2
 80027d6:	e0cc      	b.n	8002972 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d101      	bne.n	80027e6 <HAL_I2C_Mem_Write+0x56>
 80027e2:	2302      	movs	r3, #2
 80027e4:	e0c5      	b.n	8002972 <HAL_I2C_Mem_Write+0x1e2>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d007      	beq.n	800280c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f042 0201 	orr.w	r2, r2, #1
 800280a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800281a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2221      	movs	r2, #33	; 0x21
 8002820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2240      	movs	r2, #64	; 0x40
 8002828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6a3a      	ldr	r2, [r7, #32]
 8002836:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800283c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	4a4d      	ldr	r2, [pc, #308]	; (8002980 <HAL_I2C_Mem_Write+0x1f0>)
 800284c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800284e:	88f8      	ldrh	r0, [r7, #6]
 8002850:	893a      	ldrh	r2, [r7, #8]
 8002852:	8979      	ldrh	r1, [r7, #10]
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	9301      	str	r3, [sp, #4]
 8002858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	4603      	mov	r3, r0
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f000 fb38 	bl	8002ed4 <I2C_RequestMemoryWrite>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d052      	beq.n	8002910 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e081      	b.n	8002972 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 fd82 	bl	800337c <I2C_WaitOnTXEFlagUntilTimeout>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00d      	beq.n	800289a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	2b04      	cmp	r3, #4
 8002884:	d107      	bne.n	8002896 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002894:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e06b      	b.n	8002972 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	781a      	ldrb	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	1c5a      	adds	r2, r3, #1
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	d11b      	bne.n	8002910 <HAL_I2C_Mem_Write+0x180>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d017      	beq.n	8002910 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	781a      	ldrb	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fa:	3b01      	subs	r3, #1
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002906:	b29b      	uxth	r3, r3
 8002908:	3b01      	subs	r3, #1
 800290a:	b29a      	uxth	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1aa      	bne.n	800286e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f000 fd6e 	bl	80033fe <I2C_WaitOnBTFFlagUntilTimeout>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00d      	beq.n	8002944 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	2b04      	cmp	r3, #4
 800292e:	d107      	bne.n	8002940 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800293e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e016      	b.n	8002972 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002952:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2220      	movs	r2, #32
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800296c:	2300      	movs	r3, #0
 800296e:	e000      	b.n	8002972 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002970:	2302      	movs	r3, #2
  }
}
 8002972:	4618      	mov	r0, r3
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	00100002 	.word	0x00100002
 8002980:	ffff0000 	.word	0xffff0000

08002984 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b08c      	sub	sp, #48	; 0x30
 8002988:	af02      	add	r7, sp, #8
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	4608      	mov	r0, r1
 800298e:	4611      	mov	r1, r2
 8002990:	461a      	mov	r2, r3
 8002992:	4603      	mov	r3, r0
 8002994:	817b      	strh	r3, [r7, #10]
 8002996:	460b      	mov	r3, r1
 8002998:	813b      	strh	r3, [r7, #8]
 800299a:	4613      	mov	r3, r2
 800299c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800299e:	f7ff f9d5 	bl	8001d4c <HAL_GetTick>
 80029a2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b20      	cmp	r3, #32
 80029ae:	f040 8208 	bne.w	8002dc2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	2319      	movs	r3, #25
 80029b8:	2201      	movs	r2, #1
 80029ba:	497b      	ldr	r1, [pc, #492]	; (8002ba8 <HAL_I2C_Mem_Read+0x224>)
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 fc07 	bl	80031d0 <I2C_WaitOnFlagUntilTimeout>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80029c8:	2302      	movs	r3, #2
 80029ca:	e1fb      	b.n	8002dc4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d101      	bne.n	80029da <HAL_I2C_Mem_Read+0x56>
 80029d6:	2302      	movs	r3, #2
 80029d8:	e1f4      	b.n	8002dc4 <HAL_I2C_Mem_Read+0x440>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d007      	beq.n	8002a00 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 0201 	orr.w	r2, r2, #1
 80029fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2222      	movs	r2, #34	; 0x22
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2240      	movs	r2, #64	; 0x40
 8002a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002a30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4a5b      	ldr	r2, [pc, #364]	; (8002bac <HAL_I2C_Mem_Read+0x228>)
 8002a40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a42:	88f8      	ldrh	r0, [r7, #6]
 8002a44:	893a      	ldrh	r2, [r7, #8]
 8002a46:	8979      	ldrh	r1, [r7, #10]
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	9301      	str	r3, [sp, #4]
 8002a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	4603      	mov	r3, r0
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 fad4 	bl	8003000 <I2C_RequestMemoryRead>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e1b0      	b.n	8002dc4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d113      	bne.n	8002a92 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	623b      	str	r3, [r7, #32]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	623b      	str	r3, [r7, #32]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	623b      	str	r3, [r7, #32]
 8002a7e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	e184      	b.n	8002d9c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d11b      	bne.n	8002ad2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aa8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61fb      	str	r3, [r7, #28]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	61fb      	str	r3, [r7, #28]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	61fb      	str	r3, [r7, #28]
 8002abe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	e164      	b.n	8002d9c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d11b      	bne.n	8002b12 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ae8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002af8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002afa:	2300      	movs	r3, #0
 8002afc:	61bb      	str	r3, [r7, #24]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	61bb      	str	r3, [r7, #24]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	61bb      	str	r3, [r7, #24]
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	e144      	b.n	8002d9c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	617b      	str	r3, [r7, #20]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	617b      	str	r3, [r7, #20]
 8002b26:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002b28:	e138      	b.n	8002d9c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b2e:	2b03      	cmp	r3, #3
 8002b30:	f200 80f1 	bhi.w	8002d16 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d123      	bne.n	8002b84 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f000 fc9d 	bl	8003480 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e139      	b.n	8002dc4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	691a      	ldr	r2, [r3, #16]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	1c5a      	adds	r2, r3, #1
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b82:	e10b      	b.n	8002d9c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d14e      	bne.n	8002c2a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b92:	2200      	movs	r2, #0
 8002b94:	4906      	ldr	r1, [pc, #24]	; (8002bb0 <HAL_I2C_Mem_Read+0x22c>)
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 fb1a 	bl	80031d0 <I2C_WaitOnFlagUntilTimeout>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d008      	beq.n	8002bb4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e10e      	b.n	8002dc4 <HAL_I2C_Mem_Read+0x440>
 8002ba6:	bf00      	nop
 8002ba8:	00100002 	.word	0x00100002
 8002bac:	ffff0000 	.word	0xffff0000
 8002bb0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	691a      	ldr	r2, [r3, #16]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be0:	3b01      	subs	r3, #1
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	691a      	ldr	r2, [r3, #16]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	1c5a      	adds	r2, r3, #1
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c12:	3b01      	subs	r3, #1
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	3b01      	subs	r3, #1
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c28:	e0b8      	b.n	8002d9c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c30:	2200      	movs	r2, #0
 8002c32:	4966      	ldr	r1, [pc, #408]	; (8002dcc <HAL_I2C_Mem_Read+0x448>)
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 facb 	bl	80031d0 <I2C_WaitOnFlagUntilTimeout>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e0bf      	b.n	8002dc4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	691a      	ldr	r2, [r3, #16]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	1c5a      	adds	r2, r3, #1
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c70:	3b01      	subs	r3, #1
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	494f      	ldr	r1, [pc, #316]	; (8002dcc <HAL_I2C_Mem_Read+0x448>)
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 fa9d 	bl	80031d0 <I2C_WaitOnFlagUntilTimeout>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e091      	b.n	8002dc4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	691a      	ldr	r2, [r3, #16]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	1c5a      	adds	r2, r3, #1
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	691a      	ldr	r2, [r3, #16]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	1c5a      	adds	r2, r3, #1
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d14:	e042      	b.n	8002d9c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 fbb0 	bl	8003480 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e04c      	b.n	8002dc4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	691a      	ldr	r2, [r3, #16]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	b2d2      	uxtb	r2, r2
 8002d36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	1c5a      	adds	r2, r3, #1
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d46:	3b01      	subs	r3, #1
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	3b01      	subs	r3, #1
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	f003 0304 	and.w	r3, r3, #4
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d118      	bne.n	8002d9c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d74:	b2d2      	uxtb	r2, r2
 8002d76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	1c5a      	adds	r2, r3, #1
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d86:	3b01      	subs	r3, #1
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f47f aec2 	bne.w	8002b2a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2220      	movs	r2, #32
 8002daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	e000      	b.n	8002dc4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002dc2:	2302      	movs	r3, #2
  }
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3728      	adds	r7, #40	; 0x28
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	00010004 	.word	0x00010004

08002dd0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b088      	sub	sp, #32
 8002dd4:	af02      	add	r7, sp, #8
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	607a      	str	r2, [r7, #4]
 8002dda:	603b      	str	r3, [r7, #0]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d006      	beq.n	8002dfa <I2C_MasterRequestWrite+0x2a>
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d003      	beq.n	8002dfa <I2C_MasterRequestWrite+0x2a>
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002df8:	d108      	bne.n	8002e0c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	e00b      	b.n	8002e24 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e10:	2b12      	cmp	r3, #18
 8002e12:	d107      	bne.n	8002e24 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e22:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	f000 f9cd 	bl	80031d0 <I2C_WaitOnFlagUntilTimeout>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00d      	beq.n	8002e58 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e4a:	d103      	bne.n	8002e54 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e035      	b.n	8002ec4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e60:	d108      	bne.n	8002e74 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e62:	897b      	ldrh	r3, [r7, #10]
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	461a      	mov	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e70:	611a      	str	r2, [r3, #16]
 8002e72:	e01b      	b.n	8002eac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e74:	897b      	ldrh	r3, [r7, #10]
 8002e76:	11db      	asrs	r3, r3, #7
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	f003 0306 	and.w	r3, r3, #6
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	f063 030f 	orn	r3, r3, #15
 8002e84:	b2da      	uxtb	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	490e      	ldr	r1, [pc, #56]	; (8002ecc <I2C_MasterRequestWrite+0xfc>)
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 f9f3 	bl	800327e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e010      	b.n	8002ec4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ea2:	897b      	ldrh	r3, [r7, #10]
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	4907      	ldr	r1, [pc, #28]	; (8002ed0 <I2C_MasterRequestWrite+0x100>)
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 f9e3 	bl	800327e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3718      	adds	r7, #24
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	00010008 	.word	0x00010008
 8002ed0:	00010002 	.word	0x00010002

08002ed4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b088      	sub	sp, #32
 8002ed8:	af02      	add	r7, sp, #8
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	4608      	mov	r0, r1
 8002ede:	4611      	mov	r1, r2
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	817b      	strh	r3, [r7, #10]
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	813b      	strh	r3, [r7, #8]
 8002eea:	4613      	mov	r3, r2
 8002eec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002efc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 f960 	bl	80031d0 <I2C_WaitOnFlagUntilTimeout>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00d      	beq.n	8002f32 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f24:	d103      	bne.n	8002f2e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f2c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e05f      	b.n	8002ff2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f32:	897b      	ldrh	r3, [r7, #10]
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	461a      	mov	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	6a3a      	ldr	r2, [r7, #32]
 8002f46:	492d      	ldr	r1, [pc, #180]	; (8002ffc <I2C_RequestMemoryWrite+0x128>)
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f000 f998 	bl	800327e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e04c      	b.n	8002ff2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f58:	2300      	movs	r3, #0
 8002f5a:	617b      	str	r3, [r7, #20]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	617b      	str	r3, [r7, #20]
 8002f6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f70:	6a39      	ldr	r1, [r7, #32]
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 fa02 	bl	800337c <I2C_WaitOnTXEFlagUntilTimeout>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00d      	beq.n	8002f9a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	d107      	bne.n	8002f96 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e02b      	b.n	8002ff2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f9a:	88fb      	ldrh	r3, [r7, #6]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d105      	bne.n	8002fac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fa0:	893b      	ldrh	r3, [r7, #8]
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	611a      	str	r2, [r3, #16]
 8002faa:	e021      	b.n	8002ff0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002fac:	893b      	ldrh	r3, [r7, #8]
 8002fae:	0a1b      	lsrs	r3, r3, #8
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fbc:	6a39      	ldr	r1, [r7, #32]
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 f9dc 	bl	800337c <I2C_WaitOnTXEFlagUntilTimeout>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00d      	beq.n	8002fe6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	d107      	bne.n	8002fe2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e005      	b.n	8002ff2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fe6:	893b      	ldrh	r3, [r7, #8]
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	00010002 	.word	0x00010002

08003000 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b088      	sub	sp, #32
 8003004:	af02      	add	r7, sp, #8
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	4608      	mov	r0, r1
 800300a:	4611      	mov	r1, r2
 800300c:	461a      	mov	r2, r3
 800300e:	4603      	mov	r3, r0
 8003010:	817b      	strh	r3, [r7, #10]
 8003012:	460b      	mov	r3, r1
 8003014:	813b      	strh	r3, [r7, #8]
 8003016:	4613      	mov	r3, r2
 8003018:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003028:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003038:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	6a3b      	ldr	r3, [r7, #32]
 8003040:	2200      	movs	r2, #0
 8003042:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 f8c2 	bl	80031d0 <I2C_WaitOnFlagUntilTimeout>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00d      	beq.n	800306e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003060:	d103      	bne.n	800306a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003068:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e0aa      	b.n	80031c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800306e:	897b      	ldrh	r3, [r7, #10]
 8003070:	b2db      	uxtb	r3, r3
 8003072:	461a      	mov	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800307c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	6a3a      	ldr	r2, [r7, #32]
 8003082:	4952      	ldr	r1, [pc, #328]	; (80031cc <I2C_RequestMemoryRead+0x1cc>)
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 f8fa 	bl	800327e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e097      	b.n	80031c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	617b      	str	r3, [r7, #20]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	617b      	str	r3, [r7, #20]
 80030a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ac:	6a39      	ldr	r1, [r7, #32]
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 f964 	bl	800337c <I2C_WaitOnTXEFlagUntilTimeout>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00d      	beq.n	80030d6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d107      	bne.n	80030d2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e076      	b.n	80031c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030d6:	88fb      	ldrh	r3, [r7, #6]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d105      	bne.n	80030e8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030dc:	893b      	ldrh	r3, [r7, #8]
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	611a      	str	r2, [r3, #16]
 80030e6:	e021      	b.n	800312c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030e8:	893b      	ldrh	r3, [r7, #8]
 80030ea:	0a1b      	lsrs	r3, r3, #8
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	b2da      	uxtb	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f8:	6a39      	ldr	r1, [r7, #32]
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 f93e 	bl	800337c <I2C_WaitOnTXEFlagUntilTimeout>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00d      	beq.n	8003122 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	2b04      	cmp	r3, #4
 800310c:	d107      	bne.n	800311e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800311c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e050      	b.n	80031c4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003122:	893b      	ldrh	r3, [r7, #8]
 8003124:	b2da      	uxtb	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800312c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800312e:	6a39      	ldr	r1, [r7, #32]
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 f923 	bl	800337c <I2C_WaitOnTXEFlagUntilTimeout>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00d      	beq.n	8003158 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	2b04      	cmp	r3, #4
 8003142:	d107      	bne.n	8003154 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003152:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e035      	b.n	80031c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003166:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	2200      	movs	r2, #0
 8003170:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f000 f82b 	bl	80031d0 <I2C_WaitOnFlagUntilTimeout>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00d      	beq.n	800319c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800318e:	d103      	bne.n	8003198 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003196:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e013      	b.n	80031c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800319c:	897b      	ldrh	r3, [r7, #10]
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	f043 0301 	orr.w	r3, r3, #1
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ae:	6a3a      	ldr	r2, [r7, #32]
 80031b0:	4906      	ldr	r1, [pc, #24]	; (80031cc <I2C_RequestMemoryRead+0x1cc>)
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 f863 	bl	800327e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e000      	b.n	80031c4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	00010002 	.word	0x00010002

080031d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	603b      	str	r3, [r7, #0]
 80031dc:	4613      	mov	r3, r2
 80031de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031e0:	e025      	b.n	800322e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e8:	d021      	beq.n	800322e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ea:	f7fe fdaf 	bl	8001d4c <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d302      	bcc.n	8003200 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d116      	bne.n	800322e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2220      	movs	r2, #32
 800320a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	f043 0220 	orr.w	r2, r3, #32
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e023      	b.n	8003276 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	0c1b      	lsrs	r3, r3, #16
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b01      	cmp	r3, #1
 8003236:	d10d      	bne.n	8003254 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	43da      	mvns	r2, r3
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	4013      	ands	r3, r2
 8003244:	b29b      	uxth	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	bf0c      	ite	eq
 800324a:	2301      	moveq	r3, #1
 800324c:	2300      	movne	r3, #0
 800324e:	b2db      	uxtb	r3, r3
 8003250:	461a      	mov	r2, r3
 8003252:	e00c      	b.n	800326e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	43da      	mvns	r2, r3
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	4013      	ands	r3, r2
 8003260:	b29b      	uxth	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	bf0c      	ite	eq
 8003266:	2301      	moveq	r3, #1
 8003268:	2300      	movne	r3, #0
 800326a:	b2db      	uxtb	r3, r3
 800326c:	461a      	mov	r2, r3
 800326e:	79fb      	ldrb	r3, [r7, #7]
 8003270:	429a      	cmp	r2, r3
 8003272:	d0b6      	beq.n	80031e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b084      	sub	sp, #16
 8003282:	af00      	add	r7, sp, #0
 8003284:	60f8      	str	r0, [r7, #12]
 8003286:	60b9      	str	r1, [r7, #8]
 8003288:	607a      	str	r2, [r7, #4]
 800328a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800328c:	e051      	b.n	8003332 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	695b      	ldr	r3, [r3, #20]
 8003294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800329c:	d123      	bne.n	80032e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2220      	movs	r2, #32
 80032c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	f043 0204 	orr.w	r2, r3, #4
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e046      	b.n	8003374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ec:	d021      	beq.n	8003332 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ee:	f7fe fd2d 	bl	8001d4c <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d302      	bcc.n	8003304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d116      	bne.n	8003332 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2220      	movs	r2, #32
 800330e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	f043 0220 	orr.w	r2, r3, #32
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e020      	b.n	8003374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	0c1b      	lsrs	r3, r3, #16
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b01      	cmp	r3, #1
 800333a:	d10c      	bne.n	8003356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	43da      	mvns	r2, r3
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	4013      	ands	r3, r2
 8003348:	b29b      	uxth	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	bf14      	ite	ne
 800334e:	2301      	movne	r3, #1
 8003350:	2300      	moveq	r3, #0
 8003352:	b2db      	uxtb	r3, r3
 8003354:	e00b      	b.n	800336e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	43da      	mvns	r2, r3
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	4013      	ands	r3, r2
 8003362:	b29b      	uxth	r3, r3
 8003364:	2b00      	cmp	r3, #0
 8003366:	bf14      	ite	ne
 8003368:	2301      	movne	r3, #1
 800336a:	2300      	moveq	r3, #0
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d18d      	bne.n	800328e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003388:	e02d      	b.n	80033e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 f8ce 	bl	800352c <I2C_IsAcknowledgeFailed>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e02d      	b.n	80033f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a0:	d021      	beq.n	80033e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033a2:	f7fe fcd3 	bl	8001d4c <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d302      	bcc.n	80033b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d116      	bne.n	80033e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2220      	movs	r2, #32
 80033c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	f043 0220 	orr.w	r2, r3, #32
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e007      	b.n	80033f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f0:	2b80      	cmp	r3, #128	; 0x80
 80033f2:	d1ca      	bne.n	800338a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b084      	sub	sp, #16
 8003402:	af00      	add	r7, sp, #0
 8003404:	60f8      	str	r0, [r7, #12]
 8003406:	60b9      	str	r1, [r7, #8]
 8003408:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800340a:	e02d      	b.n	8003468 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f000 f88d 	bl	800352c <I2C_IsAcknowledgeFailed>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e02d      	b.n	8003478 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003422:	d021      	beq.n	8003468 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003424:	f7fe fc92 	bl	8001d4c <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	429a      	cmp	r2, r3
 8003432:	d302      	bcc.n	800343a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d116      	bne.n	8003468 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2220      	movs	r2, #32
 8003444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003454:	f043 0220 	orr.w	r2, r3, #32
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e007      	b.n	8003478 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	f003 0304 	and.w	r3, r3, #4
 8003472:	2b04      	cmp	r3, #4
 8003474:	d1ca      	bne.n	800340c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800348c:	e042      	b.n	8003514 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	f003 0310 	and.w	r3, r3, #16
 8003498:	2b10      	cmp	r3, #16
 800349a:	d119      	bne.n	80034d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f06f 0210 	mvn.w	r2, #16
 80034a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e029      	b.n	8003524 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034d0:	f7fe fc3c 	bl	8001d4c <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d302      	bcc.n	80034e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d116      	bne.n	8003514 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2220      	movs	r2, #32
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003500:	f043 0220 	orr.w	r2, r3, #32
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e007      	b.n	8003524 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351e:	2b40      	cmp	r3, #64	; 0x40
 8003520:	d1b5      	bne.n	800348e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800353e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003542:	d11b      	bne.n	800357c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800354c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2220      	movs	r2, #32
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003568:	f043 0204 	orr.w	r2, r3, #4
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e000      	b.n	800357e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
	...

0800358c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e264      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d075      	beq.n	8003696 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035aa:	4ba3      	ldr	r3, [pc, #652]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 030c 	and.w	r3, r3, #12
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	d00c      	beq.n	80035d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035b6:	4ba0      	ldr	r3, [pc, #640]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035be:	2b08      	cmp	r3, #8
 80035c0:	d112      	bne.n	80035e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035c2:	4b9d      	ldr	r3, [pc, #628]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035ce:	d10b      	bne.n	80035e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d0:	4b99      	ldr	r3, [pc, #612]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d05b      	beq.n	8003694 <HAL_RCC_OscConfig+0x108>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d157      	bne.n	8003694 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e23f      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f0:	d106      	bne.n	8003600 <HAL_RCC_OscConfig+0x74>
 80035f2:	4b91      	ldr	r3, [pc, #580]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a90      	ldr	r2, [pc, #576]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80035f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035fc:	6013      	str	r3, [r2, #0]
 80035fe:	e01d      	b.n	800363c <HAL_RCC_OscConfig+0xb0>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003608:	d10c      	bne.n	8003624 <HAL_RCC_OscConfig+0x98>
 800360a:	4b8b      	ldr	r3, [pc, #556]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a8a      	ldr	r2, [pc, #552]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 8003610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	4b88      	ldr	r3, [pc, #544]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a87      	ldr	r2, [pc, #540]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 800361c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003620:	6013      	str	r3, [r2, #0]
 8003622:	e00b      	b.n	800363c <HAL_RCC_OscConfig+0xb0>
 8003624:	4b84      	ldr	r3, [pc, #528]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a83      	ldr	r2, [pc, #524]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 800362a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800362e:	6013      	str	r3, [r2, #0]
 8003630:	4b81      	ldr	r3, [pc, #516]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a80      	ldr	r2, [pc, #512]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 8003636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800363a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d013      	beq.n	800366c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003644:	f7fe fb82 	bl	8001d4c <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800364c:	f7fe fb7e 	bl	8001d4c <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b64      	cmp	r3, #100	; 0x64
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e204      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800365e:	4b76      	ldr	r3, [pc, #472]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0f0      	beq.n	800364c <HAL_RCC_OscConfig+0xc0>
 800366a:	e014      	b.n	8003696 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366c:	f7fe fb6e 	bl	8001d4c <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003674:	f7fe fb6a 	bl	8001d4c <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b64      	cmp	r3, #100	; 0x64
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e1f0      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003686:	4b6c      	ldr	r3, [pc, #432]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f0      	bne.n	8003674 <HAL_RCC_OscConfig+0xe8>
 8003692:	e000      	b.n	8003696 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003694:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d063      	beq.n	800376a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036a2:	4b65      	ldr	r3, [pc, #404]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 030c 	and.w	r3, r3, #12
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00b      	beq.n	80036c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ae:	4b62      	ldr	r3, [pc, #392]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036b6:	2b08      	cmp	r3, #8
 80036b8:	d11c      	bne.n	80036f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ba:	4b5f      	ldr	r3, [pc, #380]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d116      	bne.n	80036f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036c6:	4b5c      	ldr	r3, [pc, #368]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d005      	beq.n	80036de <HAL_RCC_OscConfig+0x152>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d001      	beq.n	80036de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e1c4      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036de:	4b56      	ldr	r3, [pc, #344]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	4952      	ldr	r1, [pc, #328]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036f2:	e03a      	b.n	800376a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d020      	beq.n	800373e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036fc:	4b4f      	ldr	r3, [pc, #316]	; (800383c <HAL_RCC_OscConfig+0x2b0>)
 80036fe:	2201      	movs	r2, #1
 8003700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003702:	f7fe fb23 	bl	8001d4c <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003708:	e008      	b.n	800371c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800370a:	f7fe fb1f 	bl	8001d4c <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e1a5      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800371c:	4b46      	ldr	r3, [pc, #280]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0f0      	beq.n	800370a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003728:	4b43      	ldr	r3, [pc, #268]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	4940      	ldr	r1, [pc, #256]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 8003738:	4313      	orrs	r3, r2
 800373a:	600b      	str	r3, [r1, #0]
 800373c:	e015      	b.n	800376a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800373e:	4b3f      	ldr	r3, [pc, #252]	; (800383c <HAL_RCC_OscConfig+0x2b0>)
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003744:	f7fe fb02 	bl	8001d4c <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800374c:	f7fe fafe 	bl	8001d4c <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e184      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800375e:	4b36      	ldr	r3, [pc, #216]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b00      	cmp	r3, #0
 8003774:	d030      	beq.n	80037d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d016      	beq.n	80037ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800377e:	4b30      	ldr	r3, [pc, #192]	; (8003840 <HAL_RCC_OscConfig+0x2b4>)
 8003780:	2201      	movs	r2, #1
 8003782:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003784:	f7fe fae2 	bl	8001d4c <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800378c:	f7fe fade 	bl	8001d4c <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e164      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800379e:	4b26      	ldr	r3, [pc, #152]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80037a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0f0      	beq.n	800378c <HAL_RCC_OscConfig+0x200>
 80037aa:	e015      	b.n	80037d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037ac:	4b24      	ldr	r3, [pc, #144]	; (8003840 <HAL_RCC_OscConfig+0x2b4>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037b2:	f7fe facb 	bl	8001d4c <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037b8:	e008      	b.n	80037cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037ba:	f7fe fac7 	bl	8001d4c <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e14d      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037cc:	4b1a      	ldr	r3, [pc, #104]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80037ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1f0      	bne.n	80037ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 80a0 	beq.w	8003926 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037e6:	2300      	movs	r3, #0
 80037e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ea:	4b13      	ldr	r3, [pc, #76]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10f      	bne.n	8003816 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f6:	2300      	movs	r3, #0
 80037f8:	60bb      	str	r3, [r7, #8]
 80037fa:	4b0f      	ldr	r3, [pc, #60]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	4a0e      	ldr	r2, [pc, #56]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 8003800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003804:	6413      	str	r3, [r2, #64]	; 0x40
 8003806:	4b0c      	ldr	r3, [pc, #48]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380e:	60bb      	str	r3, [r7, #8]
 8003810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003812:	2301      	movs	r3, #1
 8003814:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003816:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <HAL_RCC_OscConfig+0x2b8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381e:	2b00      	cmp	r3, #0
 8003820:	d121      	bne.n	8003866 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003822:	4b08      	ldr	r3, [pc, #32]	; (8003844 <HAL_RCC_OscConfig+0x2b8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a07      	ldr	r2, [pc, #28]	; (8003844 <HAL_RCC_OscConfig+0x2b8>)
 8003828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800382c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800382e:	f7fe fa8d 	bl	8001d4c <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003834:	e011      	b.n	800385a <HAL_RCC_OscConfig+0x2ce>
 8003836:	bf00      	nop
 8003838:	40023800 	.word	0x40023800
 800383c:	42470000 	.word	0x42470000
 8003840:	42470e80 	.word	0x42470e80
 8003844:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003848:	f7fe fa80 	bl	8001d4c <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e106      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800385a:	4b85      	ldr	r3, [pc, #532]	; (8003a70 <HAL_RCC_OscConfig+0x4e4>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0f0      	beq.n	8003848 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d106      	bne.n	800387c <HAL_RCC_OscConfig+0x2f0>
 800386e:	4b81      	ldr	r3, [pc, #516]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 8003870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003872:	4a80      	ldr	r2, [pc, #512]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 8003874:	f043 0301 	orr.w	r3, r3, #1
 8003878:	6713      	str	r3, [r2, #112]	; 0x70
 800387a:	e01c      	b.n	80038b6 <HAL_RCC_OscConfig+0x32a>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2b05      	cmp	r3, #5
 8003882:	d10c      	bne.n	800389e <HAL_RCC_OscConfig+0x312>
 8003884:	4b7b      	ldr	r3, [pc, #492]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 8003886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003888:	4a7a      	ldr	r2, [pc, #488]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 800388a:	f043 0304 	orr.w	r3, r3, #4
 800388e:	6713      	str	r3, [r2, #112]	; 0x70
 8003890:	4b78      	ldr	r3, [pc, #480]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 8003892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003894:	4a77      	ldr	r2, [pc, #476]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 8003896:	f043 0301 	orr.w	r3, r3, #1
 800389a:	6713      	str	r3, [r2, #112]	; 0x70
 800389c:	e00b      	b.n	80038b6 <HAL_RCC_OscConfig+0x32a>
 800389e:	4b75      	ldr	r3, [pc, #468]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 80038a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a2:	4a74      	ldr	r2, [pc, #464]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 80038a4:	f023 0301 	bic.w	r3, r3, #1
 80038a8:	6713      	str	r3, [r2, #112]	; 0x70
 80038aa:	4b72      	ldr	r3, [pc, #456]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 80038ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ae:	4a71      	ldr	r2, [pc, #452]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 80038b0:	f023 0304 	bic.w	r3, r3, #4
 80038b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d015      	beq.n	80038ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038be:	f7fe fa45 	bl	8001d4c <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c4:	e00a      	b.n	80038dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038c6:	f7fe fa41 	bl	8001d4c <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e0c5      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038dc:	4b65      	ldr	r3, [pc, #404]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 80038de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d0ee      	beq.n	80038c6 <HAL_RCC_OscConfig+0x33a>
 80038e8:	e014      	b.n	8003914 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ea:	f7fe fa2f 	bl	8001d4c <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f0:	e00a      	b.n	8003908 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038f2:	f7fe fa2b 	bl	8001d4c <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003900:	4293      	cmp	r3, r2
 8003902:	d901      	bls.n	8003908 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e0af      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003908:	4b5a      	ldr	r3, [pc, #360]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 800390a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1ee      	bne.n	80038f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003914:	7dfb      	ldrb	r3, [r7, #23]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d105      	bne.n	8003926 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800391a:	4b56      	ldr	r3, [pc, #344]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	4a55      	ldr	r2, [pc, #340]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 8003920:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003924:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 809b 	beq.w	8003a66 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003930:	4b50      	ldr	r3, [pc, #320]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f003 030c 	and.w	r3, r3, #12
 8003938:	2b08      	cmp	r3, #8
 800393a:	d05c      	beq.n	80039f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	2b02      	cmp	r3, #2
 8003942:	d141      	bne.n	80039c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003944:	4b4c      	ldr	r3, [pc, #304]	; (8003a78 <HAL_RCC_OscConfig+0x4ec>)
 8003946:	2200      	movs	r2, #0
 8003948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394a:	f7fe f9ff 	bl	8001d4c <HAL_GetTick>
 800394e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003950:	e008      	b.n	8003964 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003952:	f7fe f9fb 	bl	8001d4c <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e081      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003964:	4b43      	ldr	r3, [pc, #268]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1f0      	bne.n	8003952 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	69da      	ldr	r2, [r3, #28]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	431a      	orrs	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	019b      	lsls	r3, r3, #6
 8003980:	431a      	orrs	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003986:	085b      	lsrs	r3, r3, #1
 8003988:	3b01      	subs	r3, #1
 800398a:	041b      	lsls	r3, r3, #16
 800398c:	431a      	orrs	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003992:	061b      	lsls	r3, r3, #24
 8003994:	4937      	ldr	r1, [pc, #220]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 8003996:	4313      	orrs	r3, r2
 8003998:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800399a:	4b37      	ldr	r3, [pc, #220]	; (8003a78 <HAL_RCC_OscConfig+0x4ec>)
 800399c:	2201      	movs	r2, #1
 800399e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a0:	f7fe f9d4 	bl	8001d4c <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a8:	f7fe f9d0 	bl	8001d4c <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e056      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ba:	4b2e      	ldr	r3, [pc, #184]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0f0      	beq.n	80039a8 <HAL_RCC_OscConfig+0x41c>
 80039c6:	e04e      	b.n	8003a66 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c8:	4b2b      	ldr	r3, [pc, #172]	; (8003a78 <HAL_RCC_OscConfig+0x4ec>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ce:	f7fe f9bd 	bl	8001d4c <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d4:	e008      	b.n	80039e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039d6:	f7fe f9b9 	bl	8001d4c <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e03f      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e8:	4b22      	ldr	r3, [pc, #136]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1f0      	bne.n	80039d6 <HAL_RCC_OscConfig+0x44a>
 80039f4:	e037      	b.n	8003a66 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d101      	bne.n	8003a02 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e032      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a02:	4b1c      	ldr	r3, [pc, #112]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d028      	beq.n	8003a62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d121      	bne.n	8003a62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d11a      	bne.n	8003a62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a32:	4013      	ands	r3, r2
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a38:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d111      	bne.n	8003a62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a48:	085b      	lsrs	r3, r3, #1
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d107      	bne.n	8003a62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d001      	beq.n	8003a66 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e000      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3718      	adds	r7, #24
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40007000 	.word	0x40007000
 8003a74:	40023800 	.word	0x40023800
 8003a78:	42470060 	.word	0x42470060

08003a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e0cc      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a90:	4b68      	ldr	r3, [pc, #416]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d90c      	bls.n	8003ab8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a9e:	4b65      	ldr	r3, [pc, #404]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa6:	4b63      	ldr	r3, [pc, #396]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d001      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e0b8      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d020      	beq.n	8003b06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0304 	and.w	r3, r3, #4
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d005      	beq.n	8003adc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ad0:	4b59      	ldr	r3, [pc, #356]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	4a58      	ldr	r2, [pc, #352]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ada:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d005      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ae8:	4b53      	ldr	r3, [pc, #332]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	4a52      	ldr	r2, [pc, #328]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003aee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003af2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003af4:	4b50      	ldr	r3, [pc, #320]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	494d      	ldr	r1, [pc, #308]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d044      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d107      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b1a:	4b47      	ldr	r3, [pc, #284]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d119      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e07f      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d003      	beq.n	8003b3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b36:	2b03      	cmp	r3, #3
 8003b38:	d107      	bne.n	8003b4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b3a:	4b3f      	ldr	r3, [pc, #252]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d109      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e06f      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b4a:	4b3b      	ldr	r3, [pc, #236]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e067      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b5a:	4b37      	ldr	r3, [pc, #220]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f023 0203 	bic.w	r2, r3, #3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	4934      	ldr	r1, [pc, #208]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b6c:	f7fe f8ee 	bl	8001d4c <HAL_GetTick>
 8003b70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b72:	e00a      	b.n	8003b8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b74:	f7fe f8ea 	bl	8001d4c <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e04f      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b8a:	4b2b      	ldr	r3, [pc, #172]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 020c 	and.w	r2, r3, #12
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d1eb      	bne.n	8003b74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b9c:	4b25      	ldr	r3, [pc, #148]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d20c      	bcs.n	8003bc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003baa:	4b22      	ldr	r3, [pc, #136]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb2:	4b20      	ldr	r3, [pc, #128]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d001      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e032      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d008      	beq.n	8003be2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bd0:	4b19      	ldr	r3, [pc, #100]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	4916      	ldr	r1, [pc, #88]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d009      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bee:	4b12      	ldr	r3, [pc, #72]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	490e      	ldr	r1, [pc, #56]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c02:	f000 f821 	bl	8003c48 <HAL_RCC_GetSysClockFreq>
 8003c06:	4602      	mov	r2, r0
 8003c08:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	091b      	lsrs	r3, r3, #4
 8003c0e:	f003 030f 	and.w	r3, r3, #15
 8003c12:	490a      	ldr	r1, [pc, #40]	; (8003c3c <HAL_RCC_ClockConfig+0x1c0>)
 8003c14:	5ccb      	ldrb	r3, [r1, r3]
 8003c16:	fa22 f303 	lsr.w	r3, r2, r3
 8003c1a:	4a09      	ldr	r2, [pc, #36]	; (8003c40 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c1e:	4b09      	ldr	r3, [pc, #36]	; (8003c44 <HAL_RCC_ClockConfig+0x1c8>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7fd ff70 	bl	8001b08 <HAL_InitTick>

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	40023c00 	.word	0x40023c00
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	08007e3c 	.word	0x08007e3c
 8003c40:	20000000 	.word	0x20000000
 8003c44:	20000004 	.word	0x20000004

08003c48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003c4c:	b084      	sub	sp, #16
 8003c4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	607b      	str	r3, [r7, #4]
 8003c54:	2300      	movs	r3, #0
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	2300      	movs	r3, #0
 8003c5a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c60:	4b67      	ldr	r3, [pc, #412]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f003 030c 	and.w	r3, r3, #12
 8003c68:	2b08      	cmp	r3, #8
 8003c6a:	d00d      	beq.n	8003c88 <HAL_RCC_GetSysClockFreq+0x40>
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	f200 80bd 	bhi.w	8003dec <HAL_RCC_GetSysClockFreq+0x1a4>
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d002      	beq.n	8003c7c <HAL_RCC_GetSysClockFreq+0x34>
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	d003      	beq.n	8003c82 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c7a:	e0b7      	b.n	8003dec <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c7c:	4b61      	ldr	r3, [pc, #388]	; (8003e04 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c7e:	60bb      	str	r3, [r7, #8]
       break;
 8003c80:	e0b7      	b.n	8003df2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c82:	4b61      	ldr	r3, [pc, #388]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003c84:	60bb      	str	r3, [r7, #8]
      break;
 8003c86:	e0b4      	b.n	8003df2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c88:	4b5d      	ldr	r3, [pc, #372]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c90:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c92:	4b5b      	ldr	r3, [pc, #364]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d04d      	beq.n	8003d3a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c9e:	4b58      	ldr	r3, [pc, #352]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	099b      	lsrs	r3, r3, #6
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	f04f 0300 	mov.w	r3, #0
 8003caa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003cae:	f04f 0100 	mov.w	r1, #0
 8003cb2:	ea02 0800 	and.w	r8, r2, r0
 8003cb6:	ea03 0901 	and.w	r9, r3, r1
 8003cba:	4640      	mov	r0, r8
 8003cbc:	4649      	mov	r1, r9
 8003cbe:	f04f 0200 	mov.w	r2, #0
 8003cc2:	f04f 0300 	mov.w	r3, #0
 8003cc6:	014b      	lsls	r3, r1, #5
 8003cc8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ccc:	0142      	lsls	r2, r0, #5
 8003cce:	4610      	mov	r0, r2
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	ebb0 0008 	subs.w	r0, r0, r8
 8003cd6:	eb61 0109 	sbc.w	r1, r1, r9
 8003cda:	f04f 0200 	mov.w	r2, #0
 8003cde:	f04f 0300 	mov.w	r3, #0
 8003ce2:	018b      	lsls	r3, r1, #6
 8003ce4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ce8:	0182      	lsls	r2, r0, #6
 8003cea:	1a12      	subs	r2, r2, r0
 8003cec:	eb63 0301 	sbc.w	r3, r3, r1
 8003cf0:	f04f 0000 	mov.w	r0, #0
 8003cf4:	f04f 0100 	mov.w	r1, #0
 8003cf8:	00d9      	lsls	r1, r3, #3
 8003cfa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003cfe:	00d0      	lsls	r0, r2, #3
 8003d00:	4602      	mov	r2, r0
 8003d02:	460b      	mov	r3, r1
 8003d04:	eb12 0208 	adds.w	r2, r2, r8
 8003d08:	eb43 0309 	adc.w	r3, r3, r9
 8003d0c:	f04f 0000 	mov.w	r0, #0
 8003d10:	f04f 0100 	mov.w	r1, #0
 8003d14:	0259      	lsls	r1, r3, #9
 8003d16:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003d1a:	0250      	lsls	r0, r2, #9
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	460b      	mov	r3, r1
 8003d20:	4610      	mov	r0, r2
 8003d22:	4619      	mov	r1, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	461a      	mov	r2, r3
 8003d28:	f04f 0300 	mov.w	r3, #0
 8003d2c:	f7fc fe96 	bl	8000a5c <__aeabi_uldivmod>
 8003d30:	4602      	mov	r2, r0
 8003d32:	460b      	mov	r3, r1
 8003d34:	4613      	mov	r3, r2
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	e04a      	b.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d3a:	4b31      	ldr	r3, [pc, #196]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	099b      	lsrs	r3, r3, #6
 8003d40:	461a      	mov	r2, r3
 8003d42:	f04f 0300 	mov.w	r3, #0
 8003d46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003d4a:	f04f 0100 	mov.w	r1, #0
 8003d4e:	ea02 0400 	and.w	r4, r2, r0
 8003d52:	ea03 0501 	and.w	r5, r3, r1
 8003d56:	4620      	mov	r0, r4
 8003d58:	4629      	mov	r1, r5
 8003d5a:	f04f 0200 	mov.w	r2, #0
 8003d5e:	f04f 0300 	mov.w	r3, #0
 8003d62:	014b      	lsls	r3, r1, #5
 8003d64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003d68:	0142      	lsls	r2, r0, #5
 8003d6a:	4610      	mov	r0, r2
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	1b00      	subs	r0, r0, r4
 8003d70:	eb61 0105 	sbc.w	r1, r1, r5
 8003d74:	f04f 0200 	mov.w	r2, #0
 8003d78:	f04f 0300 	mov.w	r3, #0
 8003d7c:	018b      	lsls	r3, r1, #6
 8003d7e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003d82:	0182      	lsls	r2, r0, #6
 8003d84:	1a12      	subs	r2, r2, r0
 8003d86:	eb63 0301 	sbc.w	r3, r3, r1
 8003d8a:	f04f 0000 	mov.w	r0, #0
 8003d8e:	f04f 0100 	mov.w	r1, #0
 8003d92:	00d9      	lsls	r1, r3, #3
 8003d94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d98:	00d0      	lsls	r0, r2, #3
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	1912      	adds	r2, r2, r4
 8003da0:	eb45 0303 	adc.w	r3, r5, r3
 8003da4:	f04f 0000 	mov.w	r0, #0
 8003da8:	f04f 0100 	mov.w	r1, #0
 8003dac:	0299      	lsls	r1, r3, #10
 8003dae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003db2:	0290      	lsls	r0, r2, #10
 8003db4:	4602      	mov	r2, r0
 8003db6:	460b      	mov	r3, r1
 8003db8:	4610      	mov	r0, r2
 8003dba:	4619      	mov	r1, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	f04f 0300 	mov.w	r3, #0
 8003dc4:	f7fc fe4a 	bl	8000a5c <__aeabi_uldivmod>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	4613      	mov	r3, r2
 8003dce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003dd0:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	0c1b      	lsrs	r3, r3, #16
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	3301      	adds	r3, #1
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de8:	60bb      	str	r3, [r7, #8]
      break;
 8003dea:	e002      	b.n	8003df2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dec:	4b05      	ldr	r3, [pc, #20]	; (8003e04 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003dee:	60bb      	str	r3, [r7, #8]
      break;
 8003df0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003df2:	68bb      	ldr	r3, [r7, #8]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003dfe:	bf00      	nop
 8003e00:	40023800 	.word	0x40023800
 8003e04:	00f42400 	.word	0x00f42400
 8003e08:	007a1200 	.word	0x007a1200

08003e0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e10:	4b03      	ldr	r3, [pc, #12]	; (8003e20 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e12:	681b      	ldr	r3, [r3, #0]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	20000000 	.word	0x20000000

08003e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e28:	f7ff fff0 	bl	8003e0c <HAL_RCC_GetHCLKFreq>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	4b05      	ldr	r3, [pc, #20]	; (8003e44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	0a9b      	lsrs	r3, r3, #10
 8003e34:	f003 0307 	and.w	r3, r3, #7
 8003e38:	4903      	ldr	r1, [pc, #12]	; (8003e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e3a:	5ccb      	ldrb	r3, [r1, r3]
 8003e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	40023800 	.word	0x40023800
 8003e48:	08007e4c 	.word	0x08007e4c

08003e4c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	220f      	movs	r2, #15
 8003e5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e5c:	4b12      	ldr	r3, [pc, #72]	; (8003ea8 <HAL_RCC_GetClockConfig+0x5c>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f003 0203 	and.w	r2, r3, #3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e68:	4b0f      	ldr	r3, [pc, #60]	; (8003ea8 <HAL_RCC_GetClockConfig+0x5c>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e74:	4b0c      	ldr	r3, [pc, #48]	; (8003ea8 <HAL_RCC_GetClockConfig+0x5c>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003e80:	4b09      	ldr	r3, [pc, #36]	; (8003ea8 <HAL_RCC_GetClockConfig+0x5c>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	08db      	lsrs	r3, r3, #3
 8003e86:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e8e:	4b07      	ldr	r3, [pc, #28]	; (8003eac <HAL_RCC_GetClockConfig+0x60>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0207 	and.w	r2, r3, #7
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	601a      	str	r2, [r3, #0]
}
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	40023800 	.word	0x40023800
 8003eac:	40023c00 	.word	0x40023c00

08003eb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e041      	b.n	8003f46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d106      	bne.n	8003edc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7fd fdbe 	bl	8001a58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3304      	adds	r3, #4
 8003eec:	4619      	mov	r1, r3
 8003eee:	4610      	mov	r0, r2
 8003ef0:	f000 fc7a 	bl	80047e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
	...

08003f50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d001      	beq.n	8003f68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e04e      	b.n	8004006 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0201 	orr.w	r2, r2, #1
 8003f7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a23      	ldr	r2, [pc, #140]	; (8004014 <HAL_TIM_Base_Start_IT+0xc4>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d022      	beq.n	8003fd0 <HAL_TIM_Base_Start_IT+0x80>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f92:	d01d      	beq.n	8003fd0 <HAL_TIM_Base_Start_IT+0x80>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a1f      	ldr	r2, [pc, #124]	; (8004018 <HAL_TIM_Base_Start_IT+0xc8>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d018      	beq.n	8003fd0 <HAL_TIM_Base_Start_IT+0x80>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a1e      	ldr	r2, [pc, #120]	; (800401c <HAL_TIM_Base_Start_IT+0xcc>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d013      	beq.n	8003fd0 <HAL_TIM_Base_Start_IT+0x80>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a1c      	ldr	r2, [pc, #112]	; (8004020 <HAL_TIM_Base_Start_IT+0xd0>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00e      	beq.n	8003fd0 <HAL_TIM_Base_Start_IT+0x80>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a1b      	ldr	r2, [pc, #108]	; (8004024 <HAL_TIM_Base_Start_IT+0xd4>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d009      	beq.n	8003fd0 <HAL_TIM_Base_Start_IT+0x80>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a19      	ldr	r2, [pc, #100]	; (8004028 <HAL_TIM_Base_Start_IT+0xd8>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d004      	beq.n	8003fd0 <HAL_TIM_Base_Start_IT+0x80>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a18      	ldr	r2, [pc, #96]	; (800402c <HAL_TIM_Base_Start_IT+0xdc>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d111      	bne.n	8003ff4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2b06      	cmp	r3, #6
 8003fe0:	d010      	beq.n	8004004 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f042 0201 	orr.w	r2, r2, #1
 8003ff0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ff2:	e007      	b.n	8004004 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 0201 	orr.w	r2, r2, #1
 8004002:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3714      	adds	r7, #20
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	40010000 	.word	0x40010000
 8004018:	40000400 	.word	0x40000400
 800401c:	40000800 	.word	0x40000800
 8004020:	40000c00 	.word	0x40000c00
 8004024:	40010400 	.word	0x40010400
 8004028:	40014000 	.word	0x40014000
 800402c:	40001800 	.word	0x40001800

08004030 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e041      	b.n	80040c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d106      	bne.n	800405c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f839 	bl	80040ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3304      	adds	r3, #4
 800406c:	4619      	mov	r1, r3
 800406e:	4610      	mov	r0, r2
 8004070:	f000 fbba 	bl	80047e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b083      	sub	sp, #12
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
	...

080040e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d109      	bne.n	8004108 <HAL_TIM_PWM_Start+0x24>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	bf14      	ite	ne
 8004100:	2301      	movne	r3, #1
 8004102:	2300      	moveq	r3, #0
 8004104:	b2db      	uxtb	r3, r3
 8004106:	e022      	b.n	800414e <HAL_TIM_PWM_Start+0x6a>
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	2b04      	cmp	r3, #4
 800410c:	d109      	bne.n	8004122 <HAL_TIM_PWM_Start+0x3e>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b01      	cmp	r3, #1
 8004118:	bf14      	ite	ne
 800411a:	2301      	movne	r3, #1
 800411c:	2300      	moveq	r3, #0
 800411e:	b2db      	uxtb	r3, r3
 8004120:	e015      	b.n	800414e <HAL_TIM_PWM_Start+0x6a>
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	2b08      	cmp	r3, #8
 8004126:	d109      	bne.n	800413c <HAL_TIM_PWM_Start+0x58>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b01      	cmp	r3, #1
 8004132:	bf14      	ite	ne
 8004134:	2301      	movne	r3, #1
 8004136:	2300      	moveq	r3, #0
 8004138:	b2db      	uxtb	r3, r3
 800413a:	e008      	b.n	800414e <HAL_TIM_PWM_Start+0x6a>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b01      	cmp	r3, #1
 8004146:	bf14      	ite	ne
 8004148:	2301      	movne	r3, #1
 800414a:	2300      	moveq	r3, #0
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e07c      	b.n	8004250 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d104      	bne.n	8004166 <HAL_TIM_PWM_Start+0x82>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2202      	movs	r2, #2
 8004160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004164:	e013      	b.n	800418e <HAL_TIM_PWM_Start+0xaa>
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b04      	cmp	r3, #4
 800416a:	d104      	bne.n	8004176 <HAL_TIM_PWM_Start+0x92>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2202      	movs	r2, #2
 8004170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004174:	e00b      	b.n	800418e <HAL_TIM_PWM_Start+0xaa>
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	2b08      	cmp	r3, #8
 800417a:	d104      	bne.n	8004186 <HAL_TIM_PWM_Start+0xa2>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2202      	movs	r2, #2
 8004180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004184:	e003      	b.n	800418e <HAL_TIM_PWM_Start+0xaa>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2202      	movs	r2, #2
 800418a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2201      	movs	r2, #1
 8004194:	6839      	ldr	r1, [r7, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f000 fe10 	bl	8004dbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a2d      	ldr	r2, [pc, #180]	; (8004258 <HAL_TIM_PWM_Start+0x174>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d004      	beq.n	80041b0 <HAL_TIM_PWM_Start+0xcc>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a2c      	ldr	r2, [pc, #176]	; (800425c <HAL_TIM_PWM_Start+0x178>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d101      	bne.n	80041b4 <HAL_TIM_PWM_Start+0xd0>
 80041b0:	2301      	movs	r3, #1
 80041b2:	e000      	b.n	80041b6 <HAL_TIM_PWM_Start+0xd2>
 80041b4:	2300      	movs	r3, #0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d007      	beq.n	80041ca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a22      	ldr	r2, [pc, #136]	; (8004258 <HAL_TIM_PWM_Start+0x174>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d022      	beq.n	800421a <HAL_TIM_PWM_Start+0x136>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041dc:	d01d      	beq.n	800421a <HAL_TIM_PWM_Start+0x136>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a1f      	ldr	r2, [pc, #124]	; (8004260 <HAL_TIM_PWM_Start+0x17c>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d018      	beq.n	800421a <HAL_TIM_PWM_Start+0x136>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a1d      	ldr	r2, [pc, #116]	; (8004264 <HAL_TIM_PWM_Start+0x180>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d013      	beq.n	800421a <HAL_TIM_PWM_Start+0x136>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a1c      	ldr	r2, [pc, #112]	; (8004268 <HAL_TIM_PWM_Start+0x184>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d00e      	beq.n	800421a <HAL_TIM_PWM_Start+0x136>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a16      	ldr	r2, [pc, #88]	; (800425c <HAL_TIM_PWM_Start+0x178>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d009      	beq.n	800421a <HAL_TIM_PWM_Start+0x136>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a18      	ldr	r2, [pc, #96]	; (800426c <HAL_TIM_PWM_Start+0x188>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d004      	beq.n	800421a <HAL_TIM_PWM_Start+0x136>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a16      	ldr	r2, [pc, #88]	; (8004270 <HAL_TIM_PWM_Start+0x18c>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d111      	bne.n	800423e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f003 0307 	and.w	r3, r3, #7
 8004224:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2b06      	cmp	r3, #6
 800422a:	d010      	beq.n	800424e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0201 	orr.w	r2, r2, #1
 800423a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800423c:	e007      	b.n	800424e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f042 0201 	orr.w	r2, r2, #1
 800424c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40010000 	.word	0x40010000
 800425c:	40010400 	.word	0x40010400
 8004260:	40000400 	.word	0x40000400
 8004264:	40000800 	.word	0x40000800
 8004268:	40000c00 	.word	0x40000c00
 800426c:	40014000 	.word	0x40014000
 8004270:	40001800 	.word	0x40001800

08004274 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b02      	cmp	r3, #2
 8004288:	d122      	bne.n	80042d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b02      	cmp	r3, #2
 8004296:	d11b      	bne.n	80042d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f06f 0202 	mvn.w	r2, #2
 80042a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	f003 0303 	and.w	r3, r3, #3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 fa77 	bl	80047aa <HAL_TIM_IC_CaptureCallback>
 80042bc:	e005      	b.n	80042ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 fa69 	bl	8004796 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 fa7a 	bl	80047be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	f003 0304 	and.w	r3, r3, #4
 80042da:	2b04      	cmp	r3, #4
 80042dc:	d122      	bne.n	8004324 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b04      	cmp	r3, #4
 80042ea:	d11b      	bne.n	8004324 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f06f 0204 	mvn.w	r2, #4
 80042f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2202      	movs	r2, #2
 80042fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 fa4d 	bl	80047aa <HAL_TIM_IC_CaptureCallback>
 8004310:	e005      	b.n	800431e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 fa3f 	bl	8004796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 fa50 	bl	80047be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	f003 0308 	and.w	r3, r3, #8
 800432e:	2b08      	cmp	r3, #8
 8004330:	d122      	bne.n	8004378 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f003 0308 	and.w	r3, r3, #8
 800433c:	2b08      	cmp	r3, #8
 800433e:	d11b      	bne.n	8004378 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f06f 0208 	mvn.w	r2, #8
 8004348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2204      	movs	r2, #4
 800434e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	f003 0303 	and.w	r3, r3, #3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 fa23 	bl	80047aa <HAL_TIM_IC_CaptureCallback>
 8004364:	e005      	b.n	8004372 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 fa15 	bl	8004796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 fa26 	bl	80047be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	f003 0310 	and.w	r3, r3, #16
 8004382:	2b10      	cmp	r3, #16
 8004384:	d122      	bne.n	80043cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	f003 0310 	and.w	r3, r3, #16
 8004390:	2b10      	cmp	r3, #16
 8004392:	d11b      	bne.n	80043cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f06f 0210 	mvn.w	r2, #16
 800439c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2208      	movs	r2, #8
 80043a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f9f9 	bl	80047aa <HAL_TIM_IC_CaptureCallback>
 80043b8:	e005      	b.n	80043c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f9eb 	bl	8004796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 f9fc 	bl	80047be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d10e      	bne.n	80043f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d107      	bne.n	80043f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f06f 0201 	mvn.w	r2, #1
 80043f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7fd fa98 	bl	8001928 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004402:	2b80      	cmp	r3, #128	; 0x80
 8004404:	d10e      	bne.n	8004424 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004410:	2b80      	cmp	r3, #128	; 0x80
 8004412:	d107      	bne.n	8004424 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800441c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 fd78 	bl	8004f14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442e:	2b40      	cmp	r3, #64	; 0x40
 8004430:	d10e      	bne.n	8004450 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443c:	2b40      	cmp	r3, #64	; 0x40
 800443e:	d107      	bne.n	8004450 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f9c1 	bl	80047d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	f003 0320 	and.w	r3, r3, #32
 800445a:	2b20      	cmp	r3, #32
 800445c:	d10e      	bne.n	800447c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	f003 0320 	and.w	r3, r3, #32
 8004468:	2b20      	cmp	r3, #32
 800446a:	d107      	bne.n	800447c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f06f 0220 	mvn.w	r2, #32
 8004474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 fd42 	bl	8004f00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800447c:	bf00      	nop
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004490:	2300      	movs	r3, #0
 8004492:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800449a:	2b01      	cmp	r3, #1
 800449c:	d101      	bne.n	80044a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800449e:	2302      	movs	r3, #2
 80044a0:	e0ae      	b.n	8004600 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b0c      	cmp	r3, #12
 80044ae:	f200 809f 	bhi.w	80045f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80044b2:	a201      	add	r2, pc, #4	; (adr r2, 80044b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80044b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b8:	080044ed 	.word	0x080044ed
 80044bc:	080045f1 	.word	0x080045f1
 80044c0:	080045f1 	.word	0x080045f1
 80044c4:	080045f1 	.word	0x080045f1
 80044c8:	0800452d 	.word	0x0800452d
 80044cc:	080045f1 	.word	0x080045f1
 80044d0:	080045f1 	.word	0x080045f1
 80044d4:	080045f1 	.word	0x080045f1
 80044d8:	0800456f 	.word	0x0800456f
 80044dc:	080045f1 	.word	0x080045f1
 80044e0:	080045f1 	.word	0x080045f1
 80044e4:	080045f1 	.word	0x080045f1
 80044e8:	080045af 	.word	0x080045af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68b9      	ldr	r1, [r7, #8]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 fa18 	bl	8004928 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	699a      	ldr	r2, [r3, #24]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f042 0208 	orr.w	r2, r2, #8
 8004506:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	699a      	ldr	r2, [r3, #24]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 0204 	bic.w	r2, r2, #4
 8004516:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6999      	ldr	r1, [r3, #24]
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	691a      	ldr	r2, [r3, #16]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	619a      	str	r2, [r3, #24]
      break;
 800452a:	e064      	b.n	80045f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68b9      	ldr	r1, [r7, #8]
 8004532:	4618      	mov	r0, r3
 8004534:	f000 fa68 	bl	8004a08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699a      	ldr	r2, [r3, #24]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004546:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699a      	ldr	r2, [r3, #24]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6999      	ldr	r1, [r3, #24]
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	021a      	lsls	r2, r3, #8
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	430a      	orrs	r2, r1
 800456a:	619a      	str	r2, [r3, #24]
      break;
 800456c:	e043      	b.n	80045f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68b9      	ldr	r1, [r7, #8]
 8004574:	4618      	mov	r0, r3
 8004576:	f000 fabd 	bl	8004af4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	69da      	ldr	r2, [r3, #28]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f042 0208 	orr.w	r2, r2, #8
 8004588:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	69da      	ldr	r2, [r3, #28]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0204 	bic.w	r2, r2, #4
 8004598:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	69d9      	ldr	r1, [r3, #28]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	691a      	ldr	r2, [r3, #16]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	61da      	str	r2, [r3, #28]
      break;
 80045ac:	e023      	b.n	80045f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68b9      	ldr	r1, [r7, #8]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 fb11 	bl	8004bdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	69da      	ldr	r2, [r3, #28]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	69da      	ldr	r2, [r3, #28]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	69d9      	ldr	r1, [r3, #28]
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	021a      	lsls	r2, r3, #8
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	61da      	str	r2, [r3, #28]
      break;
 80045ee:	e002      	b.n	80045f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	75fb      	strb	r3, [r7, #23]
      break;
 80045f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3718      	adds	r7, #24
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004612:	2300      	movs	r3, #0
 8004614:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800461c:	2b01      	cmp	r3, #1
 800461e:	d101      	bne.n	8004624 <HAL_TIM_ConfigClockSource+0x1c>
 8004620:	2302      	movs	r3, #2
 8004622:	e0b4      	b.n	800478e <HAL_TIM_ConfigClockSource+0x186>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004642:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800464a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800465c:	d03e      	beq.n	80046dc <HAL_TIM_ConfigClockSource+0xd4>
 800465e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004662:	f200 8087 	bhi.w	8004774 <HAL_TIM_ConfigClockSource+0x16c>
 8004666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800466a:	f000 8086 	beq.w	800477a <HAL_TIM_ConfigClockSource+0x172>
 800466e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004672:	d87f      	bhi.n	8004774 <HAL_TIM_ConfigClockSource+0x16c>
 8004674:	2b70      	cmp	r3, #112	; 0x70
 8004676:	d01a      	beq.n	80046ae <HAL_TIM_ConfigClockSource+0xa6>
 8004678:	2b70      	cmp	r3, #112	; 0x70
 800467a:	d87b      	bhi.n	8004774 <HAL_TIM_ConfigClockSource+0x16c>
 800467c:	2b60      	cmp	r3, #96	; 0x60
 800467e:	d050      	beq.n	8004722 <HAL_TIM_ConfigClockSource+0x11a>
 8004680:	2b60      	cmp	r3, #96	; 0x60
 8004682:	d877      	bhi.n	8004774 <HAL_TIM_ConfigClockSource+0x16c>
 8004684:	2b50      	cmp	r3, #80	; 0x50
 8004686:	d03c      	beq.n	8004702 <HAL_TIM_ConfigClockSource+0xfa>
 8004688:	2b50      	cmp	r3, #80	; 0x50
 800468a:	d873      	bhi.n	8004774 <HAL_TIM_ConfigClockSource+0x16c>
 800468c:	2b40      	cmp	r3, #64	; 0x40
 800468e:	d058      	beq.n	8004742 <HAL_TIM_ConfigClockSource+0x13a>
 8004690:	2b40      	cmp	r3, #64	; 0x40
 8004692:	d86f      	bhi.n	8004774 <HAL_TIM_ConfigClockSource+0x16c>
 8004694:	2b30      	cmp	r3, #48	; 0x30
 8004696:	d064      	beq.n	8004762 <HAL_TIM_ConfigClockSource+0x15a>
 8004698:	2b30      	cmp	r3, #48	; 0x30
 800469a:	d86b      	bhi.n	8004774 <HAL_TIM_ConfigClockSource+0x16c>
 800469c:	2b20      	cmp	r3, #32
 800469e:	d060      	beq.n	8004762 <HAL_TIM_ConfigClockSource+0x15a>
 80046a0:	2b20      	cmp	r3, #32
 80046a2:	d867      	bhi.n	8004774 <HAL_TIM_ConfigClockSource+0x16c>
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d05c      	beq.n	8004762 <HAL_TIM_ConfigClockSource+0x15a>
 80046a8:	2b10      	cmp	r3, #16
 80046aa:	d05a      	beq.n	8004762 <HAL_TIM_ConfigClockSource+0x15a>
 80046ac:	e062      	b.n	8004774 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6818      	ldr	r0, [r3, #0]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	6899      	ldr	r1, [r3, #8]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685a      	ldr	r2, [r3, #4]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	f000 fb5d 	bl	8004d7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	609a      	str	r2, [r3, #8]
      break;
 80046da:	e04f      	b.n	800477c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6818      	ldr	r0, [r3, #0]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	6899      	ldr	r1, [r3, #8]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	f000 fb46 	bl	8004d7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689a      	ldr	r2, [r3, #8]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046fe:	609a      	str	r2, [r3, #8]
      break;
 8004700:	e03c      	b.n	800477c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6818      	ldr	r0, [r3, #0]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	6859      	ldr	r1, [r3, #4]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	461a      	mov	r2, r3
 8004710:	f000 faba 	bl	8004c88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2150      	movs	r1, #80	; 0x50
 800471a:	4618      	mov	r0, r3
 800471c:	f000 fb13 	bl	8004d46 <TIM_ITRx_SetConfig>
      break;
 8004720:	e02c      	b.n	800477c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6818      	ldr	r0, [r3, #0]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	6859      	ldr	r1, [r3, #4]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	461a      	mov	r2, r3
 8004730:	f000 fad9 	bl	8004ce6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2160      	movs	r1, #96	; 0x60
 800473a:	4618      	mov	r0, r3
 800473c:	f000 fb03 	bl	8004d46 <TIM_ITRx_SetConfig>
      break;
 8004740:	e01c      	b.n	800477c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6818      	ldr	r0, [r3, #0]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	6859      	ldr	r1, [r3, #4]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	461a      	mov	r2, r3
 8004750:	f000 fa9a 	bl	8004c88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2140      	movs	r1, #64	; 0x40
 800475a:	4618      	mov	r0, r3
 800475c:	f000 faf3 	bl	8004d46 <TIM_ITRx_SetConfig>
      break;
 8004760:	e00c      	b.n	800477c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4619      	mov	r1, r3
 800476c:	4610      	mov	r0, r2
 800476e:	f000 faea 	bl	8004d46 <TIM_ITRx_SetConfig>
      break;
 8004772:	e003      	b.n	800477c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	73fb      	strb	r3, [r7, #15]
      break;
 8004778:	e000      	b.n	800477c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800477a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800478c:	7bfb      	ldrb	r3, [r7, #15]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004796:	b480      	push	{r7}
 8004798:	b083      	sub	sp, #12
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800479e:	bf00      	nop
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b083      	sub	sp, #12
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047b2:	bf00      	nop
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047be:	b480      	push	{r7}
 80047c0:	b083      	sub	sp, #12
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047c6:	bf00      	nop
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b083      	sub	sp, #12
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047da:	bf00      	nop
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
	...

080047e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a40      	ldr	r2, [pc, #256]	; (80048fc <TIM_Base_SetConfig+0x114>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d013      	beq.n	8004828 <TIM_Base_SetConfig+0x40>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004806:	d00f      	beq.n	8004828 <TIM_Base_SetConfig+0x40>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a3d      	ldr	r2, [pc, #244]	; (8004900 <TIM_Base_SetConfig+0x118>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d00b      	beq.n	8004828 <TIM_Base_SetConfig+0x40>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a3c      	ldr	r2, [pc, #240]	; (8004904 <TIM_Base_SetConfig+0x11c>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d007      	beq.n	8004828 <TIM_Base_SetConfig+0x40>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a3b      	ldr	r2, [pc, #236]	; (8004908 <TIM_Base_SetConfig+0x120>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d003      	beq.n	8004828 <TIM_Base_SetConfig+0x40>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a3a      	ldr	r2, [pc, #232]	; (800490c <TIM_Base_SetConfig+0x124>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d108      	bne.n	800483a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800482e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	4313      	orrs	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a2f      	ldr	r2, [pc, #188]	; (80048fc <TIM_Base_SetConfig+0x114>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d02b      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004848:	d027      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a2c      	ldr	r2, [pc, #176]	; (8004900 <TIM_Base_SetConfig+0x118>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d023      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a2b      	ldr	r2, [pc, #172]	; (8004904 <TIM_Base_SetConfig+0x11c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d01f      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a2a      	ldr	r2, [pc, #168]	; (8004908 <TIM_Base_SetConfig+0x120>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d01b      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a29      	ldr	r2, [pc, #164]	; (800490c <TIM_Base_SetConfig+0x124>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d017      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a28      	ldr	r2, [pc, #160]	; (8004910 <TIM_Base_SetConfig+0x128>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d013      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a27      	ldr	r2, [pc, #156]	; (8004914 <TIM_Base_SetConfig+0x12c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d00f      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a26      	ldr	r2, [pc, #152]	; (8004918 <TIM_Base_SetConfig+0x130>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d00b      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a25      	ldr	r2, [pc, #148]	; (800491c <TIM_Base_SetConfig+0x134>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d007      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a24      	ldr	r2, [pc, #144]	; (8004920 <TIM_Base_SetConfig+0x138>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d003      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a23      	ldr	r2, [pc, #140]	; (8004924 <TIM_Base_SetConfig+0x13c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d108      	bne.n	80048ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a0a      	ldr	r2, [pc, #40]	; (80048fc <TIM_Base_SetConfig+0x114>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d003      	beq.n	80048e0 <TIM_Base_SetConfig+0xf8>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a0c      	ldr	r2, [pc, #48]	; (800490c <TIM_Base_SetConfig+0x124>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d103      	bne.n	80048e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	691a      	ldr	r2, [r3, #16]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	615a      	str	r2, [r3, #20]
}
 80048ee:	bf00      	nop
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40010000 	.word	0x40010000
 8004900:	40000400 	.word	0x40000400
 8004904:	40000800 	.word	0x40000800
 8004908:	40000c00 	.word	0x40000c00
 800490c:	40010400 	.word	0x40010400
 8004910:	40014000 	.word	0x40014000
 8004914:	40014400 	.word	0x40014400
 8004918:	40014800 	.word	0x40014800
 800491c:	40001800 	.word	0x40001800
 8004920:	40001c00 	.word	0x40001c00
 8004924:	40002000 	.word	0x40002000

08004928 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004928:	b480      	push	{r7}
 800492a:	b087      	sub	sp, #28
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	f023 0201 	bic.w	r2, r3, #1
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 0303 	bic.w	r3, r3, #3
 800495e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	4313      	orrs	r3, r2
 8004968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f023 0302 	bic.w	r3, r3, #2
 8004970:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	4313      	orrs	r3, r2
 800497a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a20      	ldr	r2, [pc, #128]	; (8004a00 <TIM_OC1_SetConfig+0xd8>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d003      	beq.n	800498c <TIM_OC1_SetConfig+0x64>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a1f      	ldr	r2, [pc, #124]	; (8004a04 <TIM_OC1_SetConfig+0xdc>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d10c      	bne.n	80049a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	f023 0308 	bic.w	r3, r3, #8
 8004992:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	697a      	ldr	r2, [r7, #20]
 800499a:	4313      	orrs	r3, r2
 800499c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f023 0304 	bic.w	r3, r3, #4
 80049a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a15      	ldr	r2, [pc, #84]	; (8004a00 <TIM_OC1_SetConfig+0xd8>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d003      	beq.n	80049b6 <TIM_OC1_SetConfig+0x8e>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a14      	ldr	r2, [pc, #80]	; (8004a04 <TIM_OC1_SetConfig+0xdc>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d111      	bne.n	80049da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	621a      	str	r2, [r3, #32]
}
 80049f4:	bf00      	nop
 80049f6:	371c      	adds	r7, #28
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	40010000 	.word	0x40010000
 8004a04:	40010400 	.word	0x40010400

08004a08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b087      	sub	sp, #28
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	f023 0210 	bic.w	r2, r3, #16
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	021b      	lsls	r3, r3, #8
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	f023 0320 	bic.w	r3, r3, #32
 8004a52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	011b      	lsls	r3, r3, #4
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a22      	ldr	r2, [pc, #136]	; (8004aec <TIM_OC2_SetConfig+0xe4>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d003      	beq.n	8004a70 <TIM_OC2_SetConfig+0x68>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a21      	ldr	r2, [pc, #132]	; (8004af0 <TIM_OC2_SetConfig+0xe8>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d10d      	bne.n	8004a8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a17      	ldr	r2, [pc, #92]	; (8004aec <TIM_OC2_SetConfig+0xe4>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d003      	beq.n	8004a9c <TIM_OC2_SetConfig+0x94>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a16      	ldr	r2, [pc, #88]	; (8004af0 <TIM_OC2_SetConfig+0xe8>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d113      	bne.n	8004ac4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004aa2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	621a      	str	r2, [r3, #32]
}
 8004ade:	bf00      	nop
 8004ae0:	371c      	adds	r7, #28
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	40010000 	.word	0x40010000
 8004af0:	40010400 	.word	0x40010400

08004af4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b087      	sub	sp, #28
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f023 0303 	bic.w	r3, r3, #3
 8004b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	021b      	lsls	r3, r3, #8
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a21      	ldr	r2, [pc, #132]	; (8004bd4 <TIM_OC3_SetConfig+0xe0>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d003      	beq.n	8004b5a <TIM_OC3_SetConfig+0x66>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a20      	ldr	r2, [pc, #128]	; (8004bd8 <TIM_OC3_SetConfig+0xe4>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d10d      	bne.n	8004b76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	021b      	lsls	r3, r3, #8
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a16      	ldr	r2, [pc, #88]	; (8004bd4 <TIM_OC3_SetConfig+0xe0>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d003      	beq.n	8004b86 <TIM_OC3_SetConfig+0x92>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a15      	ldr	r2, [pc, #84]	; (8004bd8 <TIM_OC3_SetConfig+0xe4>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d113      	bne.n	8004bae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	011b      	lsls	r3, r3, #4
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	621a      	str	r2, [r3, #32]
}
 8004bc8:	bf00      	nop
 8004bca:	371c      	adds	r7, #28
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	40010000 	.word	0x40010000
 8004bd8:	40010400 	.word	0x40010400

08004bdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b087      	sub	sp, #28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	69db      	ldr	r3, [r3, #28]
 8004c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	021b      	lsls	r3, r3, #8
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	031b      	lsls	r3, r3, #12
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a12      	ldr	r2, [pc, #72]	; (8004c80 <TIM_OC4_SetConfig+0xa4>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d003      	beq.n	8004c44 <TIM_OC4_SetConfig+0x68>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a11      	ldr	r2, [pc, #68]	; (8004c84 <TIM_OC4_SetConfig+0xa8>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d109      	bne.n	8004c58 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	019b      	lsls	r3, r3, #6
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	621a      	str	r2, [r3, #32]
}
 8004c72:	bf00      	nop
 8004c74:	371c      	adds	r7, #28
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	40010000 	.word	0x40010000
 8004c84:	40010400 	.word	0x40010400

08004c88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	f023 0201 	bic.w	r2, r3, #1
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	011b      	lsls	r3, r3, #4
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f023 030a 	bic.w	r3, r3, #10
 8004cc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	621a      	str	r2, [r3, #32]
}
 8004cda:	bf00      	nop
 8004cdc:	371c      	adds	r7, #28
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr

08004ce6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b087      	sub	sp, #28
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	60f8      	str	r0, [r7, #12]
 8004cee:	60b9      	str	r1, [r7, #8]
 8004cf0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	f023 0210 	bic.w	r2, r3, #16
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	031b      	lsls	r3, r3, #12
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	011b      	lsls	r3, r3, #4
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	621a      	str	r2, [r3, #32]
}
 8004d3a:	bf00      	nop
 8004d3c:	371c      	adds	r7, #28
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr

08004d46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d46:	b480      	push	{r7}
 8004d48:	b085      	sub	sp, #20
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
 8004d4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	f043 0307 	orr.w	r3, r3, #7
 8004d68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	609a      	str	r2, [r3, #8]
}
 8004d70:	bf00      	nop
 8004d72:	3714      	adds	r7, #20
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b087      	sub	sp, #28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
 8004d88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	021a      	lsls	r2, r3, #8
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	609a      	str	r2, [r3, #8]
}
 8004db0:	bf00      	nop
 8004db2:	371c      	adds	r7, #28
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b087      	sub	sp, #28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	f003 031f 	and.w	r3, r3, #31
 8004dce:	2201      	movs	r2, #1
 8004dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6a1a      	ldr	r2, [r3, #32]
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	43db      	mvns	r3, r3
 8004dde:	401a      	ands	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6a1a      	ldr	r2, [r3, #32]
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	f003 031f 	and.w	r3, r3, #31
 8004dee:	6879      	ldr	r1, [r7, #4]
 8004df0:	fa01 f303 	lsl.w	r3, r1, r3
 8004df4:	431a      	orrs	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	621a      	str	r2, [r3, #32]
}
 8004dfa:	bf00      	nop
 8004dfc:	371c      	adds	r7, #28
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
	...

08004e08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d101      	bne.n	8004e20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	e05a      	b.n	8004ed6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a21      	ldr	r2, [pc, #132]	; (8004ee4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d022      	beq.n	8004eaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e6c:	d01d      	beq.n	8004eaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a1d      	ldr	r2, [pc, #116]	; (8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d018      	beq.n	8004eaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a1b      	ldr	r2, [pc, #108]	; (8004eec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d013      	beq.n	8004eaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a1a      	ldr	r2, [pc, #104]	; (8004ef0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d00e      	beq.n	8004eaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a18      	ldr	r2, [pc, #96]	; (8004ef4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d009      	beq.n	8004eaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a17      	ldr	r2, [pc, #92]	; (8004ef8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d004      	beq.n	8004eaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a15      	ldr	r2, [pc, #84]	; (8004efc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d10c      	bne.n	8004ec4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004eb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	40010000 	.word	0x40010000
 8004ee8:	40000400 	.word	0x40000400
 8004eec:	40000800 	.word	0x40000800
 8004ef0:	40000c00 	.word	0x40000c00
 8004ef4:	40010400 	.word	0x40010400
 8004ef8:	40014000 	.word	0x40014000
 8004efc:	40001800 	.word	0x40001800

08004f00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f103 0208 	add.w	r2, r3, #8
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f103 0208 	add.w	r2, r3, #8
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f103 0208 	add.w	r2, r3, #8
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f76:	bf00      	nop
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f82:	b480      	push	{r7}
 8004f84:	b085      	sub	sp, #20
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
 8004f8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	1c5a      	adds	r2, r3, #1
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	601a      	str	r2, [r3, #0]
}
 8004fbe:	bf00      	nop
 8004fc0:	3714      	adds	r7, #20
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b085      	sub	sp, #20
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
 8004fd2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe0:	d103      	bne.n	8004fea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	60fb      	str	r3, [r7, #12]
 8004fe8:	e00c      	b.n	8005004 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	3308      	adds	r3, #8
 8004fee:	60fb      	str	r3, [r7, #12]
 8004ff0:	e002      	b.n	8004ff8 <vListInsert+0x2e>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	429a      	cmp	r2, r3
 8005002:	d2f6      	bcs.n	8004ff2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	685a      	ldr	r2, [r3, #4]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	683a      	ldr	r2, [r7, #0]
 800501e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	1c5a      	adds	r2, r3, #1
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	601a      	str	r2, [r3, #0]
}
 8005030:	bf00      	nop
 8005032:	3714      	adds	r7, #20
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	6892      	ldr	r2, [r2, #8]
 8005052:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	6852      	ldr	r2, [r2, #4]
 800505c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	429a      	cmp	r2, r3
 8005066:	d103      	bne.n	8005070 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689a      	ldr	r2, [r3, #8]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	1e5a      	subs	r2, r3, #1
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
}
 8005084:	4618      	mov	r0, r3
 8005086:	3714      	adds	r7, #20
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10a      	bne.n	80050ba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80050a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a8:	f383 8811 	msr	BASEPRI, r3
 80050ac:	f3bf 8f6f 	isb	sy
 80050b0:	f3bf 8f4f 	dsb	sy
 80050b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80050b6:	bf00      	nop
 80050b8:	e7fe      	b.n	80050b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80050ba:	f001 ff23 	bl	8006f04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c6:	68f9      	ldr	r1, [r7, #12]
 80050c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80050ca:	fb01 f303 	mul.w	r3, r1, r3
 80050ce:	441a      	add	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ea:	3b01      	subs	r3, #1
 80050ec:	68f9      	ldr	r1, [r7, #12]
 80050ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80050f0:	fb01 f303 	mul.w	r3, r1, r3
 80050f4:	441a      	add	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	22ff      	movs	r2, #255	; 0xff
 80050fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	22ff      	movs	r2, #255	; 0xff
 8005106:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d114      	bne.n	800513a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d01a      	beq.n	800514e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	3310      	adds	r3, #16
 800511c:	4618      	mov	r0, r3
 800511e:	f001 f80d 	bl	800613c <xTaskRemoveFromEventList>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d012      	beq.n	800514e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005128:	4b0c      	ldr	r3, [pc, #48]	; (800515c <xQueueGenericReset+0xcc>)
 800512a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800512e:	601a      	str	r2, [r3, #0]
 8005130:	f3bf 8f4f 	dsb	sy
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	e009      	b.n	800514e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	3310      	adds	r3, #16
 800513e:	4618      	mov	r0, r3
 8005140:	f7ff fef2 	bl	8004f28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	3324      	adds	r3, #36	; 0x24
 8005148:	4618      	mov	r0, r3
 800514a:	f7ff feed 	bl	8004f28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800514e:	f001 ff09 	bl	8006f64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005152:	2301      	movs	r3, #1
}
 8005154:	4618      	mov	r0, r3
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	e000ed04 	.word	0xe000ed04

08005160 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005160:	b580      	push	{r7, lr}
 8005162:	b08a      	sub	sp, #40	; 0x28
 8005164:	af02      	add	r7, sp, #8
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	4613      	mov	r3, r2
 800516c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d10a      	bne.n	800518a <xQueueGenericCreate+0x2a>
	__asm volatile
 8005174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005178:	f383 8811 	msr	BASEPRI, r3
 800517c:	f3bf 8f6f 	isb	sy
 8005180:	f3bf 8f4f 	dsb	sy
 8005184:	613b      	str	r3, [r7, #16]
}
 8005186:	bf00      	nop
 8005188:	e7fe      	b.n	8005188 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d102      	bne.n	8005196 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005190:	2300      	movs	r3, #0
 8005192:	61fb      	str	r3, [r7, #28]
 8005194:	e004      	b.n	80051a0 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	fb02 f303 	mul.w	r3, r2, r3
 800519e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	3350      	adds	r3, #80	; 0x50
 80051a4:	4618      	mov	r0, r3
 80051a6:	f001 ffcf 	bl	8007148 <pvPortMalloc>
 80051aa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00d      	beq.n	80051ce <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	3350      	adds	r3, #80	; 0x50
 80051ba:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80051bc:	79fa      	ldrb	r2, [r7, #7]
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	4613      	mov	r3, r2
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	68b9      	ldr	r1, [r7, #8]
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f000 f805 	bl	80051d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80051ce:	69bb      	ldr	r3, [r7, #24]
	}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3720      	adds	r7, #32
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
 80051e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d103      	bne.n	80051f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	69ba      	ldr	r2, [r7, #24]
 80051f0:	601a      	str	r2, [r3, #0]
 80051f2:	e002      	b.n	80051fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005206:	2101      	movs	r1, #1
 8005208:	69b8      	ldr	r0, [r7, #24]
 800520a:	f7ff ff41 	bl	8005090 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	78fa      	ldrb	r2, [r7, #3]
 8005212:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005216:	bf00      	nop
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
	...

08005220 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b08e      	sub	sp, #56	; 0x38
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
 800522c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800522e:	2300      	movs	r3, #0
 8005230:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10a      	bne.n	8005252 <xQueueGenericSend+0x32>
	__asm volatile
 800523c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005240:	f383 8811 	msr	BASEPRI, r3
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	f3bf 8f4f 	dsb	sy
 800524c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800524e:	bf00      	nop
 8005250:	e7fe      	b.n	8005250 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d103      	bne.n	8005260 <xQueueGenericSend+0x40>
 8005258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525c:	2b00      	cmp	r3, #0
 800525e:	d101      	bne.n	8005264 <xQueueGenericSend+0x44>
 8005260:	2301      	movs	r3, #1
 8005262:	e000      	b.n	8005266 <xQueueGenericSend+0x46>
 8005264:	2300      	movs	r3, #0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10a      	bne.n	8005280 <xQueueGenericSend+0x60>
	__asm volatile
 800526a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526e:	f383 8811 	msr	BASEPRI, r3
 8005272:	f3bf 8f6f 	isb	sy
 8005276:	f3bf 8f4f 	dsb	sy
 800527a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800527c:	bf00      	nop
 800527e:	e7fe      	b.n	800527e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	2b02      	cmp	r3, #2
 8005284:	d103      	bne.n	800528e <xQueueGenericSend+0x6e>
 8005286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528a:	2b01      	cmp	r3, #1
 800528c:	d101      	bne.n	8005292 <xQueueGenericSend+0x72>
 800528e:	2301      	movs	r3, #1
 8005290:	e000      	b.n	8005294 <xQueueGenericSend+0x74>
 8005292:	2300      	movs	r3, #0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10a      	bne.n	80052ae <xQueueGenericSend+0x8e>
	__asm volatile
 8005298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529c:	f383 8811 	msr	BASEPRI, r3
 80052a0:	f3bf 8f6f 	isb	sy
 80052a4:	f3bf 8f4f 	dsb	sy
 80052a8:	623b      	str	r3, [r7, #32]
}
 80052aa:	bf00      	nop
 80052ac:	e7fe      	b.n	80052ac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052ae:	f001 f8e1 	bl	8006474 <xTaskGetSchedulerState>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d102      	bne.n	80052be <xQueueGenericSend+0x9e>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <xQueueGenericSend+0xa2>
 80052be:	2301      	movs	r3, #1
 80052c0:	e000      	b.n	80052c4 <xQueueGenericSend+0xa4>
 80052c2:	2300      	movs	r3, #0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10a      	bne.n	80052de <xQueueGenericSend+0xbe>
	__asm volatile
 80052c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052cc:	f383 8811 	msr	BASEPRI, r3
 80052d0:	f3bf 8f6f 	isb	sy
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	61fb      	str	r3, [r7, #28]
}
 80052da:	bf00      	nop
 80052dc:	e7fe      	b.n	80052dc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80052de:	f001 fe11 	bl	8006f04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d302      	bcc.n	80052f4 <xQueueGenericSend+0xd4>
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d129      	bne.n	8005348 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	68b9      	ldr	r1, [r7, #8]
 80052f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052fa:	f000 fa07 	bl	800570c <prvCopyDataToQueue>
 80052fe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005304:	2b00      	cmp	r3, #0
 8005306:	d010      	beq.n	800532a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530a:	3324      	adds	r3, #36	; 0x24
 800530c:	4618      	mov	r0, r3
 800530e:	f000 ff15 	bl	800613c <xTaskRemoveFromEventList>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d013      	beq.n	8005340 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005318:	4b3f      	ldr	r3, [pc, #252]	; (8005418 <xQueueGenericSend+0x1f8>)
 800531a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800531e:	601a      	str	r2, [r3, #0]
 8005320:	f3bf 8f4f 	dsb	sy
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	e00a      	b.n	8005340 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800532a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532c:	2b00      	cmp	r3, #0
 800532e:	d007      	beq.n	8005340 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005330:	4b39      	ldr	r3, [pc, #228]	; (8005418 <xQueueGenericSend+0x1f8>)
 8005332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005336:	601a      	str	r2, [r3, #0]
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005340:	f001 fe10 	bl	8006f64 <vPortExitCritical>
				return pdPASS;
 8005344:	2301      	movs	r3, #1
 8005346:	e063      	b.n	8005410 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d103      	bne.n	8005356 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800534e:	f001 fe09 	bl	8006f64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005352:	2300      	movs	r3, #0
 8005354:	e05c      	b.n	8005410 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005358:	2b00      	cmp	r3, #0
 800535a:	d106      	bne.n	800536a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800535c:	f107 0314 	add.w	r3, r7, #20
 8005360:	4618      	mov	r0, r3
 8005362:	f000 ff4d 	bl	8006200 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005366:	2301      	movs	r3, #1
 8005368:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800536a:	f001 fdfb 	bl	8006f64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800536e:	f000 fcc7 	bl	8005d00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005372:	f001 fdc7 	bl	8006f04 <vPortEnterCritical>
 8005376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005378:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800537c:	b25b      	sxtb	r3, r3
 800537e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005382:	d103      	bne.n	800538c <xQueueGenericSend+0x16c>
 8005384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005386:	2200      	movs	r2, #0
 8005388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800538c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005392:	b25b      	sxtb	r3, r3
 8005394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005398:	d103      	bne.n	80053a2 <xQueueGenericSend+0x182>
 800539a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539c:	2200      	movs	r2, #0
 800539e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053a2:	f001 fddf 	bl	8006f64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053a6:	1d3a      	adds	r2, r7, #4
 80053a8:	f107 0314 	add.w	r3, r7, #20
 80053ac:	4611      	mov	r1, r2
 80053ae:	4618      	mov	r0, r3
 80053b0:	f000 ff3c 	bl	800622c <xTaskCheckForTimeOut>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d124      	bne.n	8005404 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80053ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053bc:	f000 fa9e 	bl	80058fc <prvIsQueueFull>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d018      	beq.n	80053f8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80053c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c8:	3310      	adds	r3, #16
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	4611      	mov	r1, r2
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 fe64 	bl	800609c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80053d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053d6:	f000 fa29 	bl	800582c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80053da:	f000 fc9f 	bl	8005d1c <xTaskResumeAll>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f47f af7c 	bne.w	80052de <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80053e6:	4b0c      	ldr	r3, [pc, #48]	; (8005418 <xQueueGenericSend+0x1f8>)
 80053e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ec:	601a      	str	r2, [r3, #0]
 80053ee:	f3bf 8f4f 	dsb	sy
 80053f2:	f3bf 8f6f 	isb	sy
 80053f6:	e772      	b.n	80052de <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80053f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053fa:	f000 fa17 	bl	800582c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053fe:	f000 fc8d 	bl	8005d1c <xTaskResumeAll>
 8005402:	e76c      	b.n	80052de <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005404:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005406:	f000 fa11 	bl	800582c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800540a:	f000 fc87 	bl	8005d1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800540e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005410:	4618      	mov	r0, r3
 8005412:	3738      	adds	r7, #56	; 0x38
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	e000ed04 	.word	0xe000ed04

0800541c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b08e      	sub	sp, #56	; 0x38
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
 8005428:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800542e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005430:	2b00      	cmp	r3, #0
 8005432:	d10a      	bne.n	800544a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005438:	f383 8811 	msr	BASEPRI, r3
 800543c:	f3bf 8f6f 	isb	sy
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005446:	bf00      	nop
 8005448:	e7fe      	b.n	8005448 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d103      	bne.n	8005458 <xQueueGenericSendFromISR+0x3c>
 8005450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <xQueueGenericSendFromISR+0x40>
 8005458:	2301      	movs	r3, #1
 800545a:	e000      	b.n	800545e <xQueueGenericSendFromISR+0x42>
 800545c:	2300      	movs	r3, #0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10a      	bne.n	8005478 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005466:	f383 8811 	msr	BASEPRI, r3
 800546a:	f3bf 8f6f 	isb	sy
 800546e:	f3bf 8f4f 	dsb	sy
 8005472:	623b      	str	r3, [r7, #32]
}
 8005474:	bf00      	nop
 8005476:	e7fe      	b.n	8005476 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	2b02      	cmp	r3, #2
 800547c:	d103      	bne.n	8005486 <xQueueGenericSendFromISR+0x6a>
 800547e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005482:	2b01      	cmp	r3, #1
 8005484:	d101      	bne.n	800548a <xQueueGenericSendFromISR+0x6e>
 8005486:	2301      	movs	r3, #1
 8005488:	e000      	b.n	800548c <xQueueGenericSendFromISR+0x70>
 800548a:	2300      	movs	r3, #0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10a      	bne.n	80054a6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005494:	f383 8811 	msr	BASEPRI, r3
 8005498:	f3bf 8f6f 	isb	sy
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	61fb      	str	r3, [r7, #28]
}
 80054a2:	bf00      	nop
 80054a4:	e7fe      	b.n	80054a4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80054a6:	f001 fe0f 	bl	80070c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80054aa:	f3ef 8211 	mrs	r2, BASEPRI
 80054ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b2:	f383 8811 	msr	BASEPRI, r3
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	61ba      	str	r2, [r7, #24]
 80054c0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80054c2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80054c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80054c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d302      	bcc.n	80054d8 <xQueueGenericSendFromISR+0xbc>
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d12c      	bne.n	8005532 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80054d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054e2:	683a      	ldr	r2, [r7, #0]
 80054e4:	68b9      	ldr	r1, [r7, #8]
 80054e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054e8:	f000 f910 	bl	800570c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80054ec:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80054f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f4:	d112      	bne.n	800551c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d016      	beq.n	800552c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005500:	3324      	adds	r3, #36	; 0x24
 8005502:	4618      	mov	r0, r3
 8005504:	f000 fe1a 	bl	800613c <xTaskRemoveFromEventList>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00e      	beq.n	800552c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00b      	beq.n	800552c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	601a      	str	r2, [r3, #0]
 800551a:	e007      	b.n	800552c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800551c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005520:	3301      	adds	r3, #1
 8005522:	b2db      	uxtb	r3, r3
 8005524:	b25a      	sxtb	r2, r3
 8005526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800552c:	2301      	movs	r3, #1
 800552e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005530:	e001      	b.n	8005536 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005532:	2300      	movs	r3, #0
 8005534:	637b      	str	r3, [r7, #52]	; 0x34
 8005536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005538:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005540:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005544:	4618      	mov	r0, r3
 8005546:	3738      	adds	r7, #56	; 0x38
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b08c      	sub	sp, #48	; 0x30
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005558:	2300      	movs	r3, #0
 800555a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10a      	bne.n	800557c <xQueueReceive+0x30>
	__asm volatile
 8005566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556a:	f383 8811 	msr	BASEPRI, r3
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	f3bf 8f4f 	dsb	sy
 8005576:	623b      	str	r3, [r7, #32]
}
 8005578:	bf00      	nop
 800557a:	e7fe      	b.n	800557a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d103      	bne.n	800558a <xQueueReceive+0x3e>
 8005582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <xQueueReceive+0x42>
 800558a:	2301      	movs	r3, #1
 800558c:	e000      	b.n	8005590 <xQueueReceive+0x44>
 800558e:	2300      	movs	r3, #0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10a      	bne.n	80055aa <xQueueReceive+0x5e>
	__asm volatile
 8005594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005598:	f383 8811 	msr	BASEPRI, r3
 800559c:	f3bf 8f6f 	isb	sy
 80055a0:	f3bf 8f4f 	dsb	sy
 80055a4:	61fb      	str	r3, [r7, #28]
}
 80055a6:	bf00      	nop
 80055a8:	e7fe      	b.n	80055a8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055aa:	f000 ff63 	bl	8006474 <xTaskGetSchedulerState>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d102      	bne.n	80055ba <xQueueReceive+0x6e>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d101      	bne.n	80055be <xQueueReceive+0x72>
 80055ba:	2301      	movs	r3, #1
 80055bc:	e000      	b.n	80055c0 <xQueueReceive+0x74>
 80055be:	2300      	movs	r3, #0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10a      	bne.n	80055da <xQueueReceive+0x8e>
	__asm volatile
 80055c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c8:	f383 8811 	msr	BASEPRI, r3
 80055cc:	f3bf 8f6f 	isb	sy
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	61bb      	str	r3, [r7, #24]
}
 80055d6:	bf00      	nop
 80055d8:	e7fe      	b.n	80055d8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80055da:	f001 fc93 	bl	8006f04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d01f      	beq.n	800562a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80055ea:	68b9      	ldr	r1, [r7, #8]
 80055ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055ee:	f000 f8f7 	bl	80057e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	1e5a      	subs	r2, r3, #1
 80055f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00f      	beq.n	8005622 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005604:	3310      	adds	r3, #16
 8005606:	4618      	mov	r0, r3
 8005608:	f000 fd98 	bl	800613c <xTaskRemoveFromEventList>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d007      	beq.n	8005622 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005612:	4b3d      	ldr	r3, [pc, #244]	; (8005708 <xQueueReceive+0x1bc>)
 8005614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005618:	601a      	str	r2, [r3, #0]
 800561a:	f3bf 8f4f 	dsb	sy
 800561e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005622:	f001 fc9f 	bl	8006f64 <vPortExitCritical>
				return pdPASS;
 8005626:	2301      	movs	r3, #1
 8005628:	e069      	b.n	80056fe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d103      	bne.n	8005638 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005630:	f001 fc98 	bl	8006f64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005634:	2300      	movs	r3, #0
 8005636:	e062      	b.n	80056fe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800563a:	2b00      	cmp	r3, #0
 800563c:	d106      	bne.n	800564c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800563e:	f107 0310 	add.w	r3, r7, #16
 8005642:	4618      	mov	r0, r3
 8005644:	f000 fddc 	bl	8006200 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005648:	2301      	movs	r3, #1
 800564a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800564c:	f001 fc8a 	bl	8006f64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005650:	f000 fb56 	bl	8005d00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005654:	f001 fc56 	bl	8006f04 <vPortEnterCritical>
 8005658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800565e:	b25b      	sxtb	r3, r3
 8005660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005664:	d103      	bne.n	800566e <xQueueReceive+0x122>
 8005666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800566e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005670:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005674:	b25b      	sxtb	r3, r3
 8005676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567a:	d103      	bne.n	8005684 <xQueueReceive+0x138>
 800567c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567e:	2200      	movs	r2, #0
 8005680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005684:	f001 fc6e 	bl	8006f64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005688:	1d3a      	adds	r2, r7, #4
 800568a:	f107 0310 	add.w	r3, r7, #16
 800568e:	4611      	mov	r1, r2
 8005690:	4618      	mov	r0, r3
 8005692:	f000 fdcb 	bl	800622c <xTaskCheckForTimeOut>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d123      	bne.n	80056e4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800569c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800569e:	f000 f917 	bl	80058d0 <prvIsQueueEmpty>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d017      	beq.n	80056d8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80056a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056aa:	3324      	adds	r3, #36	; 0x24
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	4611      	mov	r1, r2
 80056b0:	4618      	mov	r0, r3
 80056b2:	f000 fcf3 	bl	800609c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80056b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056b8:	f000 f8b8 	bl	800582c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80056bc:	f000 fb2e 	bl	8005d1c <xTaskResumeAll>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d189      	bne.n	80055da <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80056c6:	4b10      	ldr	r3, [pc, #64]	; (8005708 <xQueueReceive+0x1bc>)
 80056c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056cc:	601a      	str	r2, [r3, #0]
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	f3bf 8f6f 	isb	sy
 80056d6:	e780      	b.n	80055da <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80056d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056da:	f000 f8a7 	bl	800582c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80056de:	f000 fb1d 	bl	8005d1c <xTaskResumeAll>
 80056e2:	e77a      	b.n	80055da <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80056e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056e6:	f000 f8a1 	bl	800582c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80056ea:	f000 fb17 	bl	8005d1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056f0:	f000 f8ee 	bl	80058d0 <prvIsQueueEmpty>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f43f af6f 	beq.w	80055da <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80056fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3730      	adds	r7, #48	; 0x30
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	e000ed04 	.word	0xe000ed04

0800570c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005718:	2300      	movs	r3, #0
 800571a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005720:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10d      	bne.n	8005746 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d14d      	bne.n	80057ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	4618      	mov	r0, r3
 8005738:	f000 feba 	bl	80064b0 <xTaskPriorityDisinherit>
 800573c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	609a      	str	r2, [r3, #8]
 8005744:	e043      	b.n	80057ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d119      	bne.n	8005780 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6858      	ldr	r0, [r3, #4]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005754:	461a      	mov	r2, r3
 8005756:	68b9      	ldr	r1, [r7, #8]
 8005758:	f001 fefa 	bl	8007550 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005764:	441a      	add	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	429a      	cmp	r2, r3
 8005774:	d32b      	bcc.n	80057ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	605a      	str	r2, [r3, #4]
 800577e:	e026      	b.n	80057ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	68d8      	ldr	r0, [r3, #12]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005788:	461a      	mov	r2, r3
 800578a:	68b9      	ldr	r1, [r7, #8]
 800578c:	f001 fee0 	bl	8007550 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	68da      	ldr	r2, [r3, #12]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005798:	425b      	negs	r3, r3
 800579a:	441a      	add	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	68da      	ldr	r2, [r3, #12]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d207      	bcs.n	80057bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	689a      	ldr	r2, [r3, #8]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b4:	425b      	negs	r3, r3
 80057b6:	441a      	add	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d105      	bne.n	80057ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d002      	beq.n	80057ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	3b01      	subs	r3, #1
 80057cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	1c5a      	adds	r2, r3, #1
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80057d6:	697b      	ldr	r3, [r7, #20]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3718      	adds	r7, #24
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d018      	beq.n	8005824 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68da      	ldr	r2, [r3, #12]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fa:	441a      	add	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	68da      	ldr	r2, [r3, #12]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	429a      	cmp	r2, r3
 800580a:	d303      	bcc.n	8005814 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	68d9      	ldr	r1, [r3, #12]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581c:	461a      	mov	r2, r3
 800581e:	6838      	ldr	r0, [r7, #0]
 8005820:	f001 fe96 	bl	8007550 <memcpy>
	}
}
 8005824:	bf00      	nop
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005834:	f001 fb66 	bl	8006f04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800583e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005840:	e011      	b.n	8005866 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005846:	2b00      	cmp	r3, #0
 8005848:	d012      	beq.n	8005870 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	3324      	adds	r3, #36	; 0x24
 800584e:	4618      	mov	r0, r3
 8005850:	f000 fc74 	bl	800613c <xTaskRemoveFromEventList>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800585a:	f000 fd49 	bl	80062f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800585e:	7bfb      	ldrb	r3, [r7, #15]
 8005860:	3b01      	subs	r3, #1
 8005862:	b2db      	uxtb	r3, r3
 8005864:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800586a:	2b00      	cmp	r3, #0
 800586c:	dce9      	bgt.n	8005842 <prvUnlockQueue+0x16>
 800586e:	e000      	b.n	8005872 <prvUnlockQueue+0x46>
					break;
 8005870:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	22ff      	movs	r2, #255	; 0xff
 8005876:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800587a:	f001 fb73 	bl	8006f64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800587e:	f001 fb41 	bl	8006f04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005888:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800588a:	e011      	b.n	80058b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d012      	beq.n	80058ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	3310      	adds	r3, #16
 8005898:	4618      	mov	r0, r3
 800589a:	f000 fc4f 	bl	800613c <xTaskRemoveFromEventList>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d001      	beq.n	80058a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80058a4:	f000 fd24 	bl	80062f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80058a8:	7bbb      	ldrb	r3, [r7, #14]
 80058aa:	3b01      	subs	r3, #1
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	dce9      	bgt.n	800588c <prvUnlockQueue+0x60>
 80058b8:	e000      	b.n	80058bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80058ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	22ff      	movs	r2, #255	; 0xff
 80058c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80058c4:	f001 fb4e 	bl	8006f64 <vPortExitCritical>
}
 80058c8:	bf00      	nop
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80058d8:	f001 fb14 	bl	8006f04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d102      	bne.n	80058ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80058e4:	2301      	movs	r3, #1
 80058e6:	60fb      	str	r3, [r7, #12]
 80058e8:	e001      	b.n	80058ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80058ea:	2300      	movs	r3, #0
 80058ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80058ee:	f001 fb39 	bl	8006f64 <vPortExitCritical>

	return xReturn;
 80058f2:	68fb      	ldr	r3, [r7, #12]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005904:	f001 fafe 	bl	8006f04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005910:	429a      	cmp	r2, r3
 8005912:	d102      	bne.n	800591a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005914:	2301      	movs	r3, #1
 8005916:	60fb      	str	r3, [r7, #12]
 8005918:	e001      	b.n	800591e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800591a:	2300      	movs	r3, #0
 800591c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800591e:	f001 fb21 	bl	8006f64 <vPortExitCritical>

	return xReturn;
 8005922:	68fb      	ldr	r3, [r7, #12]
}
 8005924:	4618      	mov	r0, r3
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005936:	2300      	movs	r3, #0
 8005938:	60fb      	str	r3, [r7, #12]
 800593a:	e014      	b.n	8005966 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800593c:	4a0f      	ldr	r2, [pc, #60]	; (800597c <vQueueAddToRegistry+0x50>)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10b      	bne.n	8005960 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005948:	490c      	ldr	r1, [pc, #48]	; (800597c <vQueueAddToRegistry+0x50>)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	683a      	ldr	r2, [r7, #0]
 800594e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005952:	4a0a      	ldr	r2, [pc, #40]	; (800597c <vQueueAddToRegistry+0x50>)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	00db      	lsls	r3, r3, #3
 8005958:	4413      	add	r3, r2
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800595e:	e006      	b.n	800596e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	3301      	adds	r3, #1
 8005964:	60fb      	str	r3, [r7, #12]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2b07      	cmp	r3, #7
 800596a:	d9e7      	bls.n	800593c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800596c:	bf00      	nop
 800596e:	bf00      	nop
 8005970:	3714      	adds	r7, #20
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	20012f04 	.word	0x20012f04

08005980 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005990:	f001 fab8 	bl	8006f04 <vPortEnterCritical>
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800599a:	b25b      	sxtb	r3, r3
 800599c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a0:	d103      	bne.n	80059aa <vQueueWaitForMessageRestricted+0x2a>
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059b0:	b25b      	sxtb	r3, r3
 80059b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b6:	d103      	bne.n	80059c0 <vQueueWaitForMessageRestricted+0x40>
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059c0:	f001 fad0 	bl	8006f64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d106      	bne.n	80059da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	3324      	adds	r3, #36	; 0x24
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	68b9      	ldr	r1, [r7, #8]
 80059d4:	4618      	mov	r0, r3
 80059d6:	f000 fb85 	bl	80060e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80059da:	6978      	ldr	r0, [r7, #20]
 80059dc:	f7ff ff26 	bl	800582c <prvUnlockQueue>
	}
 80059e0:	bf00      	nop
 80059e2:	3718      	adds	r7, #24
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b08c      	sub	sp, #48	; 0x30
 80059ec:	af04      	add	r7, sp, #16
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	603b      	str	r3, [r7, #0]
 80059f4:	4613      	mov	r3, r2
 80059f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80059f8:	88fb      	ldrh	r3, [r7, #6]
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4618      	mov	r0, r3
 80059fe:	f001 fba3 	bl	8007148 <pvPortMalloc>
 8005a02:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00e      	beq.n	8005a28 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005a0a:	2058      	movs	r0, #88	; 0x58
 8005a0c:	f001 fb9c 	bl	8007148 <pvPortMalloc>
 8005a10:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d003      	beq.n	8005a20 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	631a      	str	r2, [r3, #48]	; 0x30
 8005a1e:	e005      	b.n	8005a2c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005a20:	6978      	ldr	r0, [r7, #20]
 8005a22:	f001 fc55 	bl	80072d0 <vPortFree>
 8005a26:	e001      	b.n	8005a2c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d013      	beq.n	8005a5a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005a32:	88fa      	ldrh	r2, [r7, #6]
 8005a34:	2300      	movs	r3, #0
 8005a36:	9303      	str	r3, [sp, #12]
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	9302      	str	r3, [sp, #8]
 8005a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3e:	9301      	str	r3, [sp, #4]
 8005a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	68b9      	ldr	r1, [r7, #8]
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f000 f80e 	bl	8005a6a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a4e:	69f8      	ldr	r0, [r7, #28]
 8005a50:	f000 f89a 	bl	8005b88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005a54:	2301      	movs	r3, #1
 8005a56:	61bb      	str	r3, [r7, #24]
 8005a58:	e002      	b.n	8005a60 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a5e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005a60:	69bb      	ldr	r3, [r7, #24]
	}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3720      	adds	r7, #32
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b088      	sub	sp, #32
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	60f8      	str	r0, [r7, #12]
 8005a72:	60b9      	str	r1, [r7, #8]
 8005a74:	607a      	str	r2, [r7, #4]
 8005a76:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	461a      	mov	r2, r3
 8005a82:	21a5      	movs	r1, #165	; 0xa5
 8005a84:	f001 fd72 	bl	800756c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005a92:	3b01      	subs	r3, #1
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4413      	add	r3, r2
 8005a98:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	f023 0307 	bic.w	r3, r3, #7
 8005aa0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	f003 0307 	and.w	r3, r3, #7
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00a      	beq.n	8005ac2 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab0:	f383 8811 	msr	BASEPRI, r3
 8005ab4:	f3bf 8f6f 	isb	sy
 8005ab8:	f3bf 8f4f 	dsb	sy
 8005abc:	617b      	str	r3, [r7, #20]
}
 8005abe:	bf00      	nop
 8005ac0:	e7fe      	b.n	8005ac0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d01f      	beq.n	8005b08 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ac8:	2300      	movs	r3, #0
 8005aca:	61fb      	str	r3, [r7, #28]
 8005acc:	e012      	b.n	8005af4 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	7819      	ldrb	r1, [r3, #0]
 8005ad6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	4413      	add	r3, r2
 8005adc:	3334      	adds	r3, #52	; 0x34
 8005ade:	460a      	mov	r2, r1
 8005ae0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d006      	beq.n	8005afc <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	3301      	adds	r3, #1
 8005af2:	61fb      	str	r3, [r7, #28]
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	2b09      	cmp	r3, #9
 8005af8:	d9e9      	bls.n	8005ace <prvInitialiseNewTask+0x64>
 8005afa:	e000      	b.n	8005afe <prvInitialiseNewTask+0x94>
			{
				break;
 8005afc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005b06:	e003      	b.n	8005b10 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b12:	2b04      	cmp	r3, #4
 8005b14:	d901      	bls.n	8005b1a <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b16:	2304      	movs	r3, #4
 8005b18:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b1e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b24:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8005b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b28:	2200      	movs	r2, #0
 8005b2a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2e:	3304      	adds	r3, #4
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7ff fa19 	bl	8004f68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b38:	3318      	adds	r3, #24
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7ff fa14 	bl	8004f68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b44:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b48:	f1c3 0205 	rsb	r2, r3, #5
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b54:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b58:	2200      	movs	r2, #0
 8005b5a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005b64:	683a      	ldr	r2, [r7, #0]
 8005b66:	68f9      	ldr	r1, [r7, #12]
 8005b68:	69b8      	ldr	r0, [r7, #24]
 8005b6a:	f001 f89f 	bl	8006cac <pxPortInitialiseStack>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b72:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d002      	beq.n	8005b80 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b7e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b80:	bf00      	nop
 8005b82:	3720      	adds	r7, #32
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005b90:	f001 f9b8 	bl	8006f04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005b94:	4b2c      	ldr	r3, [pc, #176]	; (8005c48 <prvAddNewTaskToReadyList+0xc0>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	4a2b      	ldr	r2, [pc, #172]	; (8005c48 <prvAddNewTaskToReadyList+0xc0>)
 8005b9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005b9e:	4b2b      	ldr	r3, [pc, #172]	; (8005c4c <prvAddNewTaskToReadyList+0xc4>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d109      	bne.n	8005bba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005ba6:	4a29      	ldr	r2, [pc, #164]	; (8005c4c <prvAddNewTaskToReadyList+0xc4>)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005bac:	4b26      	ldr	r3, [pc, #152]	; (8005c48 <prvAddNewTaskToReadyList+0xc0>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d110      	bne.n	8005bd6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005bb4:	f000 fbc0 	bl	8006338 <prvInitialiseTaskLists>
 8005bb8:	e00d      	b.n	8005bd6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005bba:	4b25      	ldr	r3, [pc, #148]	; (8005c50 <prvAddNewTaskToReadyList+0xc8>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d109      	bne.n	8005bd6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005bc2:	4b22      	ldr	r3, [pc, #136]	; (8005c4c <prvAddNewTaskToReadyList+0xc4>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d802      	bhi.n	8005bd6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005bd0:	4a1e      	ldr	r2, [pc, #120]	; (8005c4c <prvAddNewTaskToReadyList+0xc4>)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005bd6:	4b1f      	ldr	r3, [pc, #124]	; (8005c54 <prvAddNewTaskToReadyList+0xcc>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	4a1d      	ldr	r2, [pc, #116]	; (8005c54 <prvAddNewTaskToReadyList+0xcc>)
 8005bde:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005be0:	4b1c      	ldr	r3, [pc, #112]	; (8005c54 <prvAddNewTaskToReadyList+0xcc>)
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bec:	2201      	movs	r2, #1
 8005bee:	409a      	lsls	r2, r3
 8005bf0:	4b19      	ldr	r3, [pc, #100]	; (8005c58 <prvAddNewTaskToReadyList+0xd0>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	4a18      	ldr	r2, [pc, #96]	; (8005c58 <prvAddNewTaskToReadyList+0xd0>)
 8005bf8:	6013      	str	r3, [r2, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bfe:	4613      	mov	r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	4413      	add	r3, r2
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	4a15      	ldr	r2, [pc, #84]	; (8005c5c <prvAddNewTaskToReadyList+0xd4>)
 8005c08:	441a      	add	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	3304      	adds	r3, #4
 8005c0e:	4619      	mov	r1, r3
 8005c10:	4610      	mov	r0, r2
 8005c12:	f7ff f9b6 	bl	8004f82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005c16:	f001 f9a5 	bl	8006f64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005c1a:	4b0d      	ldr	r3, [pc, #52]	; (8005c50 <prvAddNewTaskToReadyList+0xc8>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00e      	beq.n	8005c40 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005c22:	4b0a      	ldr	r3, [pc, #40]	; (8005c4c <prvAddNewTaskToReadyList+0xc4>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d207      	bcs.n	8005c40 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005c30:	4b0b      	ldr	r3, [pc, #44]	; (8005c60 <prvAddNewTaskToReadyList+0xd8>)
 8005c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c36:	601a      	str	r2, [r3, #0]
 8005c38:	f3bf 8f4f 	dsb	sy
 8005c3c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c40:	bf00      	nop
 8005c42:	3708      	adds	r7, #8
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	20000170 	.word	0x20000170
 8005c4c:	20000098 	.word	0x20000098
 8005c50:	2000017c 	.word	0x2000017c
 8005c54:	2000018c 	.word	0x2000018c
 8005c58:	20000178 	.word	0x20000178
 8005c5c:	2000009c 	.word	0x2000009c
 8005c60:	e000ed04 	.word	0xe000ed04

08005c64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8005c6a:	4b1f      	ldr	r3, [pc, #124]	; (8005ce8 <vTaskStartScheduler+0x84>)
 8005c6c:	9301      	str	r3, [sp, #4]
 8005c6e:	2300      	movs	r3, #0
 8005c70:	9300      	str	r3, [sp, #0]
 8005c72:	2300      	movs	r3, #0
 8005c74:	2282      	movs	r2, #130	; 0x82
 8005c76:	491d      	ldr	r1, [pc, #116]	; (8005cec <vTaskStartScheduler+0x88>)
 8005c78:	481d      	ldr	r0, [pc, #116]	; (8005cf0 <vTaskStartScheduler+0x8c>)
 8005c7a:	f7ff feb5 	bl	80059e8 <xTaskCreate>
 8005c7e:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d102      	bne.n	8005c8c <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8005c86:	f000 fcff 	bl	8006688 <xTimerCreateTimerTask>
 8005c8a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d116      	bne.n	8005cc0 <vTaskStartScheduler+0x5c>
	__asm volatile
 8005c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c96:	f383 8811 	msr	BASEPRI, r3
 8005c9a:	f3bf 8f6f 	isb	sy
 8005c9e:	f3bf 8f4f 	dsb	sy
 8005ca2:	60bb      	str	r3, [r7, #8]
}
 8005ca4:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ca6:	4b13      	ldr	r3, [pc, #76]	; (8005cf4 <vTaskStartScheduler+0x90>)
 8005ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8005cac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005cae:	4b12      	ldr	r3, [pc, #72]	; (8005cf8 <vTaskStartScheduler+0x94>)
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005cb4:	4b11      	ldr	r3, [pc, #68]	; (8005cfc <vTaskStartScheduler+0x98>)
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005cba:	f001 f881 	bl	8006dc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005cbe:	e00e      	b.n	8005cde <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc6:	d10a      	bne.n	8005cde <vTaskStartScheduler+0x7a>
	__asm volatile
 8005cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ccc:	f383 8811 	msr	BASEPRI, r3
 8005cd0:	f3bf 8f6f 	isb	sy
 8005cd4:	f3bf 8f4f 	dsb	sy
 8005cd8:	607b      	str	r3, [r7, #4]
}
 8005cda:	bf00      	nop
 8005cdc:	e7fe      	b.n	8005cdc <vTaskStartScheduler+0x78>
}
 8005cde:	bf00      	nop
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	20000194 	.word	0x20000194
 8005cec:	08007e24 	.word	0x08007e24
 8005cf0:	08006309 	.word	0x08006309
 8005cf4:	20000190 	.word	0x20000190
 8005cf8:	2000017c 	.word	0x2000017c
 8005cfc:	20000174 	.word	0x20000174

08005d00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d00:	b480      	push	{r7}
 8005d02:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005d04:	4b04      	ldr	r3, [pc, #16]	; (8005d18 <vTaskSuspendAll+0x18>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	4a03      	ldr	r2, [pc, #12]	; (8005d18 <vTaskSuspendAll+0x18>)
 8005d0c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005d0e:	bf00      	nop
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr
 8005d18:	20000198 	.word	0x20000198

08005d1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005d22:	2300      	movs	r3, #0
 8005d24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d26:	2300      	movs	r3, #0
 8005d28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d2a:	4b41      	ldr	r3, [pc, #260]	; (8005e30 <xTaskResumeAll+0x114>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10a      	bne.n	8005d48 <xTaskResumeAll+0x2c>
	__asm volatile
 8005d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d36:	f383 8811 	msr	BASEPRI, r3
 8005d3a:	f3bf 8f6f 	isb	sy
 8005d3e:	f3bf 8f4f 	dsb	sy
 8005d42:	603b      	str	r3, [r7, #0]
}
 8005d44:	bf00      	nop
 8005d46:	e7fe      	b.n	8005d46 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d48:	f001 f8dc 	bl	8006f04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005d4c:	4b38      	ldr	r3, [pc, #224]	; (8005e30 <xTaskResumeAll+0x114>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	3b01      	subs	r3, #1
 8005d52:	4a37      	ldr	r2, [pc, #220]	; (8005e30 <xTaskResumeAll+0x114>)
 8005d54:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d56:	4b36      	ldr	r3, [pc, #216]	; (8005e30 <xTaskResumeAll+0x114>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d161      	bne.n	8005e22 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d5e:	4b35      	ldr	r3, [pc, #212]	; (8005e34 <xTaskResumeAll+0x118>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d05d      	beq.n	8005e22 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d66:	e02e      	b.n	8005dc6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d68:	4b33      	ldr	r3, [pc, #204]	; (8005e38 <xTaskResumeAll+0x11c>)
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	3318      	adds	r3, #24
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7ff f961 	bl	800503c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	3304      	adds	r3, #4
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f7ff f95c 	bl	800503c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d88:	2201      	movs	r2, #1
 8005d8a:	409a      	lsls	r2, r3
 8005d8c:	4b2b      	ldr	r3, [pc, #172]	; (8005e3c <xTaskResumeAll+0x120>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	4a2a      	ldr	r2, [pc, #168]	; (8005e3c <xTaskResumeAll+0x120>)
 8005d94:	6013      	str	r3, [r2, #0]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4413      	add	r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4a27      	ldr	r2, [pc, #156]	; (8005e40 <xTaskResumeAll+0x124>)
 8005da4:	441a      	add	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	3304      	adds	r3, #4
 8005daa:	4619      	mov	r1, r3
 8005dac:	4610      	mov	r0, r2
 8005dae:	f7ff f8e8 	bl	8004f82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db6:	4b23      	ldr	r3, [pc, #140]	; (8005e44 <xTaskResumeAll+0x128>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d302      	bcc.n	8005dc6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005dc0:	4b21      	ldr	r3, [pc, #132]	; (8005e48 <xTaskResumeAll+0x12c>)
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005dc6:	4b1c      	ldr	r3, [pc, #112]	; (8005e38 <xTaskResumeAll+0x11c>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1cc      	bne.n	8005d68 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d001      	beq.n	8005dd8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005dd4:	f000 fb2e 	bl	8006434 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005dd8:	4b1c      	ldr	r3, [pc, #112]	; (8005e4c <xTaskResumeAll+0x130>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d010      	beq.n	8005e06 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005de4:	f000 f846 	bl	8005e74 <xTaskIncrementTick>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d002      	beq.n	8005df4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005dee:	4b16      	ldr	r3, [pc, #88]	; (8005e48 <xTaskResumeAll+0x12c>)
 8005df0:	2201      	movs	r2, #1
 8005df2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	3b01      	subs	r3, #1
 8005df8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1f1      	bne.n	8005de4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005e00:	4b12      	ldr	r3, [pc, #72]	; (8005e4c <xTaskResumeAll+0x130>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005e06:	4b10      	ldr	r3, [pc, #64]	; (8005e48 <xTaskResumeAll+0x12c>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d009      	beq.n	8005e22 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005e12:	4b0f      	ldr	r3, [pc, #60]	; (8005e50 <xTaskResumeAll+0x134>)
 8005e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e18:	601a      	str	r2, [r3, #0]
 8005e1a:	f3bf 8f4f 	dsb	sy
 8005e1e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e22:	f001 f89f 	bl	8006f64 <vPortExitCritical>

	return xAlreadyYielded;
 8005e26:	68bb      	ldr	r3, [r7, #8]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	20000198 	.word	0x20000198
 8005e34:	20000170 	.word	0x20000170
 8005e38:	20000130 	.word	0x20000130
 8005e3c:	20000178 	.word	0x20000178
 8005e40:	2000009c 	.word	0x2000009c
 8005e44:	20000098 	.word	0x20000098
 8005e48:	20000184 	.word	0x20000184
 8005e4c:	20000180 	.word	0x20000180
 8005e50:	e000ed04 	.word	0xe000ed04

08005e54 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005e5a:	4b05      	ldr	r3, [pc, #20]	; (8005e70 <xTaskGetTickCount+0x1c>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005e60:	687b      	ldr	r3, [r7, #4]
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	370c      	adds	r7, #12
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	20000174 	.word	0x20000174

08005e74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b086      	sub	sp, #24
 8005e78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e7e:	4b4e      	ldr	r3, [pc, #312]	; (8005fb8 <xTaskIncrementTick+0x144>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f040 8088 	bne.w	8005f98 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e88:	4b4c      	ldr	r3, [pc, #304]	; (8005fbc <xTaskIncrementTick+0x148>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005e90:	4a4a      	ldr	r2, [pc, #296]	; (8005fbc <xTaskIncrementTick+0x148>)
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d120      	bne.n	8005ede <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e9c:	4b48      	ldr	r3, [pc, #288]	; (8005fc0 <xTaskIncrementTick+0x14c>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00a      	beq.n	8005ebc <xTaskIncrementTick+0x48>
	__asm volatile
 8005ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eaa:	f383 8811 	msr	BASEPRI, r3
 8005eae:	f3bf 8f6f 	isb	sy
 8005eb2:	f3bf 8f4f 	dsb	sy
 8005eb6:	603b      	str	r3, [r7, #0]
}
 8005eb8:	bf00      	nop
 8005eba:	e7fe      	b.n	8005eba <xTaskIncrementTick+0x46>
 8005ebc:	4b40      	ldr	r3, [pc, #256]	; (8005fc0 <xTaskIncrementTick+0x14c>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	60fb      	str	r3, [r7, #12]
 8005ec2:	4b40      	ldr	r3, [pc, #256]	; (8005fc4 <xTaskIncrementTick+0x150>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a3e      	ldr	r2, [pc, #248]	; (8005fc0 <xTaskIncrementTick+0x14c>)
 8005ec8:	6013      	str	r3, [r2, #0]
 8005eca:	4a3e      	ldr	r2, [pc, #248]	; (8005fc4 <xTaskIncrementTick+0x150>)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6013      	str	r3, [r2, #0]
 8005ed0:	4b3d      	ldr	r3, [pc, #244]	; (8005fc8 <xTaskIncrementTick+0x154>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	4a3c      	ldr	r2, [pc, #240]	; (8005fc8 <xTaskIncrementTick+0x154>)
 8005ed8:	6013      	str	r3, [r2, #0]
 8005eda:	f000 faab 	bl	8006434 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ede:	4b3b      	ldr	r3, [pc, #236]	; (8005fcc <xTaskIncrementTick+0x158>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d348      	bcc.n	8005f7a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ee8:	4b35      	ldr	r3, [pc, #212]	; (8005fc0 <xTaskIncrementTick+0x14c>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d104      	bne.n	8005efc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ef2:	4b36      	ldr	r3, [pc, #216]	; (8005fcc <xTaskIncrementTick+0x158>)
 8005ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ef8:	601a      	str	r2, [r3, #0]
					break;
 8005efa:	e03e      	b.n	8005f7a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005efc:	4b30      	ldr	r3, [pc, #192]	; (8005fc0 <xTaskIncrementTick+0x14c>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d203      	bcs.n	8005f1c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005f14:	4a2d      	ldr	r2, [pc, #180]	; (8005fcc <xTaskIncrementTick+0x158>)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005f1a:	e02e      	b.n	8005f7a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	3304      	adds	r3, #4
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7ff f88b 	bl	800503c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d004      	beq.n	8005f38 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	3318      	adds	r3, #24
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7ff f882 	bl	800503c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	409a      	lsls	r2, r3
 8005f40:	4b23      	ldr	r3, [pc, #140]	; (8005fd0 <xTaskIncrementTick+0x15c>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	4a22      	ldr	r2, [pc, #136]	; (8005fd0 <xTaskIncrementTick+0x15c>)
 8005f48:	6013      	str	r3, [r2, #0]
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f4e:	4613      	mov	r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	4413      	add	r3, r2
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	4a1f      	ldr	r2, [pc, #124]	; (8005fd4 <xTaskIncrementTick+0x160>)
 8005f58:	441a      	add	r2, r3
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	3304      	adds	r3, #4
 8005f5e:	4619      	mov	r1, r3
 8005f60:	4610      	mov	r0, r2
 8005f62:	f7ff f80e 	bl	8004f82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f6a:	4b1b      	ldr	r3, [pc, #108]	; (8005fd8 <xTaskIncrementTick+0x164>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d3b9      	bcc.n	8005ee8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005f74:	2301      	movs	r3, #1
 8005f76:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f78:	e7b6      	b.n	8005ee8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f7a:	4b17      	ldr	r3, [pc, #92]	; (8005fd8 <xTaskIncrementTick+0x164>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f80:	4914      	ldr	r1, [pc, #80]	; (8005fd4 <xTaskIncrementTick+0x160>)
 8005f82:	4613      	mov	r3, r2
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	4413      	add	r3, r2
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	440b      	add	r3, r1
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d907      	bls.n	8005fa2 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8005f92:	2301      	movs	r3, #1
 8005f94:	617b      	str	r3, [r7, #20]
 8005f96:	e004      	b.n	8005fa2 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005f98:	4b10      	ldr	r3, [pc, #64]	; (8005fdc <xTaskIncrementTick+0x168>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	4a0f      	ldr	r2, [pc, #60]	; (8005fdc <xTaskIncrementTick+0x168>)
 8005fa0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005fa2:	4b0f      	ldr	r3, [pc, #60]	; (8005fe0 <xTaskIncrementTick+0x16c>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d001      	beq.n	8005fae <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8005faa:	2301      	movs	r3, #1
 8005fac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005fae:	697b      	ldr	r3, [r7, #20]
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3718      	adds	r7, #24
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	20000198 	.word	0x20000198
 8005fbc:	20000174 	.word	0x20000174
 8005fc0:	20000128 	.word	0x20000128
 8005fc4:	2000012c 	.word	0x2000012c
 8005fc8:	20000188 	.word	0x20000188
 8005fcc:	20000190 	.word	0x20000190
 8005fd0:	20000178 	.word	0x20000178
 8005fd4:	2000009c 	.word	0x2000009c
 8005fd8:	20000098 	.word	0x20000098
 8005fdc:	20000180 	.word	0x20000180
 8005fe0:	20000184 	.word	0x20000184

08005fe4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b087      	sub	sp, #28
 8005fe8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005fea:	4b27      	ldr	r3, [pc, #156]	; (8006088 <vTaskSwitchContext+0xa4>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d003      	beq.n	8005ffa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005ff2:	4b26      	ldr	r3, [pc, #152]	; (800608c <vTaskSwitchContext+0xa8>)
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ff8:	e03f      	b.n	800607a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005ffa:	4b24      	ldr	r3, [pc, #144]	; (800608c <vTaskSwitchContext+0xa8>)
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006000:	4b23      	ldr	r3, [pc, #140]	; (8006090 <vTaskSwitchContext+0xac>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	fab3 f383 	clz	r3, r3
 800600c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800600e:	7afb      	ldrb	r3, [r7, #11]
 8006010:	f1c3 031f 	rsb	r3, r3, #31
 8006014:	617b      	str	r3, [r7, #20]
 8006016:	491f      	ldr	r1, [pc, #124]	; (8006094 <vTaskSwitchContext+0xb0>)
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	4613      	mov	r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	4413      	add	r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	440b      	add	r3, r1
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10a      	bne.n	8006040 <vTaskSwitchContext+0x5c>
	__asm volatile
 800602a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602e:	f383 8811 	msr	BASEPRI, r3
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	607b      	str	r3, [r7, #4]
}
 800603c:	bf00      	nop
 800603e:	e7fe      	b.n	800603e <vTaskSwitchContext+0x5a>
 8006040:	697a      	ldr	r2, [r7, #20]
 8006042:	4613      	mov	r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	4a12      	ldr	r2, [pc, #72]	; (8006094 <vTaskSwitchContext+0xb0>)
 800604c:	4413      	add	r3, r2
 800604e:	613b      	str	r3, [r7, #16]
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	685a      	ldr	r2, [r3, #4]
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	605a      	str	r2, [r3, #4]
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	685a      	ldr	r2, [r3, #4]
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	3308      	adds	r3, #8
 8006062:	429a      	cmp	r2, r3
 8006064:	d104      	bne.n	8006070 <vTaskSwitchContext+0x8c>
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	685a      	ldr	r2, [r3, #4]
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	605a      	str	r2, [r3, #4]
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	4a08      	ldr	r2, [pc, #32]	; (8006098 <vTaskSwitchContext+0xb4>)
 8006078:	6013      	str	r3, [r2, #0]
}
 800607a:	bf00      	nop
 800607c:	371c      	adds	r7, #28
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	20000198 	.word	0x20000198
 800608c:	20000184 	.word	0x20000184
 8006090:	20000178 	.word	0x20000178
 8006094:	2000009c 	.word	0x2000009c
 8006098:	20000098 	.word	0x20000098

0800609c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d10a      	bne.n	80060c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80060ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b0:	f383 8811 	msr	BASEPRI, r3
 80060b4:	f3bf 8f6f 	isb	sy
 80060b8:	f3bf 8f4f 	dsb	sy
 80060bc:	60fb      	str	r3, [r7, #12]
}
 80060be:	bf00      	nop
 80060c0:	e7fe      	b.n	80060c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060c2:	4b07      	ldr	r3, [pc, #28]	; (80060e0 <vTaskPlaceOnEventList+0x44>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	3318      	adds	r3, #24
 80060c8:	4619      	mov	r1, r3
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7fe ff7d 	bl	8004fca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80060d0:	2101      	movs	r1, #1
 80060d2:	6838      	ldr	r0, [r7, #0]
 80060d4:	f000 fa72 	bl	80065bc <prvAddCurrentTaskToDelayedList>
}
 80060d8:	bf00      	nop
 80060da:	3710      	adds	r7, #16
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	20000098 	.word	0x20000098

080060e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b086      	sub	sp, #24
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10a      	bne.n	800610c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80060f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fa:	f383 8811 	msr	BASEPRI, r3
 80060fe:	f3bf 8f6f 	isb	sy
 8006102:	f3bf 8f4f 	dsb	sy
 8006106:	617b      	str	r3, [r7, #20]
}
 8006108:	bf00      	nop
 800610a:	e7fe      	b.n	800610a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800610c:	4b0a      	ldr	r3, [pc, #40]	; (8006138 <vTaskPlaceOnEventListRestricted+0x54>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	3318      	adds	r3, #24
 8006112:	4619      	mov	r1, r3
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f7fe ff34 	bl	8004f82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d002      	beq.n	8006126 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006120:	f04f 33ff 	mov.w	r3, #4294967295
 8006124:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006126:	6879      	ldr	r1, [r7, #4]
 8006128:	68b8      	ldr	r0, [r7, #8]
 800612a:	f000 fa47 	bl	80065bc <prvAddCurrentTaskToDelayedList>
	}
 800612e:	bf00      	nop
 8006130:	3718      	adds	r7, #24
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	20000098 	.word	0x20000098

0800613c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b086      	sub	sp, #24
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d10a      	bne.n	8006168 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006156:	f383 8811 	msr	BASEPRI, r3
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	60fb      	str	r3, [r7, #12]
}
 8006164:	bf00      	nop
 8006166:	e7fe      	b.n	8006166 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	3318      	adds	r3, #24
 800616c:	4618      	mov	r0, r3
 800616e:	f7fe ff65 	bl	800503c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006172:	4b1d      	ldr	r3, [pc, #116]	; (80061e8 <xTaskRemoveFromEventList+0xac>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d11c      	bne.n	80061b4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	3304      	adds	r3, #4
 800617e:	4618      	mov	r0, r3
 8006180:	f7fe ff5c 	bl	800503c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006188:	2201      	movs	r2, #1
 800618a:	409a      	lsls	r2, r3
 800618c:	4b17      	ldr	r3, [pc, #92]	; (80061ec <xTaskRemoveFromEventList+0xb0>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4313      	orrs	r3, r2
 8006192:	4a16      	ldr	r2, [pc, #88]	; (80061ec <xTaskRemoveFromEventList+0xb0>)
 8006194:	6013      	str	r3, [r2, #0]
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800619a:	4613      	mov	r3, r2
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	4413      	add	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4a13      	ldr	r2, [pc, #76]	; (80061f0 <xTaskRemoveFromEventList+0xb4>)
 80061a4:	441a      	add	r2, r3
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	3304      	adds	r3, #4
 80061aa:	4619      	mov	r1, r3
 80061ac:	4610      	mov	r0, r2
 80061ae:	f7fe fee8 	bl	8004f82 <vListInsertEnd>
 80061b2:	e005      	b.n	80061c0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	3318      	adds	r3, #24
 80061b8:	4619      	mov	r1, r3
 80061ba:	480e      	ldr	r0, [pc, #56]	; (80061f4 <xTaskRemoveFromEventList+0xb8>)
 80061bc:	f7fe fee1 	bl	8004f82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c4:	4b0c      	ldr	r3, [pc, #48]	; (80061f8 <xTaskRemoveFromEventList+0xbc>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d905      	bls.n	80061da <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80061ce:	2301      	movs	r3, #1
 80061d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80061d2:	4b0a      	ldr	r3, [pc, #40]	; (80061fc <xTaskRemoveFromEventList+0xc0>)
 80061d4:	2201      	movs	r2, #1
 80061d6:	601a      	str	r2, [r3, #0]
 80061d8:	e001      	b.n	80061de <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80061da:	2300      	movs	r3, #0
 80061dc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80061de:	697b      	ldr	r3, [r7, #20]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3718      	adds	r7, #24
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	20000198 	.word	0x20000198
 80061ec:	20000178 	.word	0x20000178
 80061f0:	2000009c 	.word	0x2000009c
 80061f4:	20000130 	.word	0x20000130
 80061f8:	20000098 	.word	0x20000098
 80061fc:	20000184 	.word	0x20000184

08006200 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006208:	4b06      	ldr	r3, [pc, #24]	; (8006224 <vTaskInternalSetTimeOutState+0x24>)
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006210:	4b05      	ldr	r3, [pc, #20]	; (8006228 <vTaskInternalSetTimeOutState+0x28>)
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	605a      	str	r2, [r3, #4]
}
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr
 8006224:	20000188 	.word	0x20000188
 8006228:	20000174 	.word	0x20000174

0800622c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b088      	sub	sp, #32
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10a      	bne.n	8006252 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800623c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006240:	f383 8811 	msr	BASEPRI, r3
 8006244:	f3bf 8f6f 	isb	sy
 8006248:	f3bf 8f4f 	dsb	sy
 800624c:	613b      	str	r3, [r7, #16]
}
 800624e:	bf00      	nop
 8006250:	e7fe      	b.n	8006250 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d10a      	bne.n	800626e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625c:	f383 8811 	msr	BASEPRI, r3
 8006260:	f3bf 8f6f 	isb	sy
 8006264:	f3bf 8f4f 	dsb	sy
 8006268:	60fb      	str	r3, [r7, #12]
}
 800626a:	bf00      	nop
 800626c:	e7fe      	b.n	800626c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800626e:	f000 fe49 	bl	8006f04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006272:	4b1d      	ldr	r3, [pc, #116]	; (80062e8 <xTaskCheckForTimeOut+0xbc>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	69ba      	ldr	r2, [r7, #24]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800628a:	d102      	bne.n	8006292 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800628c:	2300      	movs	r3, #0
 800628e:	61fb      	str	r3, [r7, #28]
 8006290:	e023      	b.n	80062da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	4b15      	ldr	r3, [pc, #84]	; (80062ec <xTaskCheckForTimeOut+0xc0>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	429a      	cmp	r2, r3
 800629c:	d007      	beq.n	80062ae <xTaskCheckForTimeOut+0x82>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	69ba      	ldr	r2, [r7, #24]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d302      	bcc.n	80062ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80062a8:	2301      	movs	r3, #1
 80062aa:	61fb      	str	r3, [r7, #28]
 80062ac:	e015      	b.n	80062da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d20b      	bcs.n	80062d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	1ad2      	subs	r2, r2, r3
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f7ff ff9b 	bl	8006200 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80062ca:	2300      	movs	r3, #0
 80062cc:	61fb      	str	r3, [r7, #28]
 80062ce:	e004      	b.n	80062da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	2200      	movs	r2, #0
 80062d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80062d6:	2301      	movs	r3, #1
 80062d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80062da:	f000 fe43 	bl	8006f64 <vPortExitCritical>

	return xReturn;
 80062de:	69fb      	ldr	r3, [r7, #28]
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3720      	adds	r7, #32
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	20000174 	.word	0x20000174
 80062ec:	20000188 	.word	0x20000188

080062f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80062f0:	b480      	push	{r7}
 80062f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80062f4:	4b03      	ldr	r3, [pc, #12]	; (8006304 <vTaskMissedYield+0x14>)
 80062f6:	2201      	movs	r2, #1
 80062f8:	601a      	str	r2, [r3, #0]
}
 80062fa:	bf00      	nop
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr
 8006304:	20000184 	.word	0x20000184

08006308 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006310:	f000 f852 	bl	80063b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006314:	4b06      	ldr	r3, [pc, #24]	; (8006330 <prvIdleTask+0x28>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d9f9      	bls.n	8006310 <prvIdleTask+0x8>
			{
				taskYIELD();
 800631c:	4b05      	ldr	r3, [pc, #20]	; (8006334 <prvIdleTask+0x2c>)
 800631e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006322:	601a      	str	r2, [r3, #0]
 8006324:	f3bf 8f4f 	dsb	sy
 8006328:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800632c:	e7f0      	b.n	8006310 <prvIdleTask+0x8>
 800632e:	bf00      	nop
 8006330:	2000009c 	.word	0x2000009c
 8006334:	e000ed04 	.word	0xe000ed04

08006338 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800633e:	2300      	movs	r3, #0
 8006340:	607b      	str	r3, [r7, #4]
 8006342:	e00c      	b.n	800635e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	4613      	mov	r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4413      	add	r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	4a12      	ldr	r2, [pc, #72]	; (8006398 <prvInitialiseTaskLists+0x60>)
 8006350:	4413      	add	r3, r2
 8006352:	4618      	mov	r0, r3
 8006354:	f7fe fde8 	bl	8004f28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	3301      	adds	r3, #1
 800635c:	607b      	str	r3, [r7, #4]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2b04      	cmp	r3, #4
 8006362:	d9ef      	bls.n	8006344 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006364:	480d      	ldr	r0, [pc, #52]	; (800639c <prvInitialiseTaskLists+0x64>)
 8006366:	f7fe fddf 	bl	8004f28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800636a:	480d      	ldr	r0, [pc, #52]	; (80063a0 <prvInitialiseTaskLists+0x68>)
 800636c:	f7fe fddc 	bl	8004f28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006370:	480c      	ldr	r0, [pc, #48]	; (80063a4 <prvInitialiseTaskLists+0x6c>)
 8006372:	f7fe fdd9 	bl	8004f28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006376:	480c      	ldr	r0, [pc, #48]	; (80063a8 <prvInitialiseTaskLists+0x70>)
 8006378:	f7fe fdd6 	bl	8004f28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800637c:	480b      	ldr	r0, [pc, #44]	; (80063ac <prvInitialiseTaskLists+0x74>)
 800637e:	f7fe fdd3 	bl	8004f28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006382:	4b0b      	ldr	r3, [pc, #44]	; (80063b0 <prvInitialiseTaskLists+0x78>)
 8006384:	4a05      	ldr	r2, [pc, #20]	; (800639c <prvInitialiseTaskLists+0x64>)
 8006386:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006388:	4b0a      	ldr	r3, [pc, #40]	; (80063b4 <prvInitialiseTaskLists+0x7c>)
 800638a:	4a05      	ldr	r2, [pc, #20]	; (80063a0 <prvInitialiseTaskLists+0x68>)
 800638c:	601a      	str	r2, [r3, #0]
}
 800638e:	bf00      	nop
 8006390:	3708      	adds	r7, #8
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	2000009c 	.word	0x2000009c
 800639c:	20000100 	.word	0x20000100
 80063a0:	20000114 	.word	0x20000114
 80063a4:	20000130 	.word	0x20000130
 80063a8:	20000144 	.word	0x20000144
 80063ac:	2000015c 	.word	0x2000015c
 80063b0:	20000128 	.word	0x20000128
 80063b4:	2000012c 	.word	0x2000012c

080063b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063be:	e019      	b.n	80063f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80063c0:	f000 fda0 	bl	8006f04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063c4:	4b10      	ldr	r3, [pc, #64]	; (8006408 <prvCheckTasksWaitingTermination+0x50>)
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	3304      	adds	r3, #4
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7fe fe33 	bl	800503c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80063d6:	4b0d      	ldr	r3, [pc, #52]	; (800640c <prvCheckTasksWaitingTermination+0x54>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	3b01      	subs	r3, #1
 80063dc:	4a0b      	ldr	r2, [pc, #44]	; (800640c <prvCheckTasksWaitingTermination+0x54>)
 80063de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80063e0:	4b0b      	ldr	r3, [pc, #44]	; (8006410 <prvCheckTasksWaitingTermination+0x58>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3b01      	subs	r3, #1
 80063e6:	4a0a      	ldr	r2, [pc, #40]	; (8006410 <prvCheckTasksWaitingTermination+0x58>)
 80063e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80063ea:	f000 fdbb 	bl	8006f64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f810 	bl	8006414 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063f4:	4b06      	ldr	r3, [pc, #24]	; (8006410 <prvCheckTasksWaitingTermination+0x58>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1e1      	bne.n	80063c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80063fc:	bf00      	nop
 80063fe:	bf00      	nop
 8006400:	3708      	adds	r7, #8
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	20000144 	.word	0x20000144
 800640c:	20000170 	.word	0x20000170
 8006410:	20000158 	.word	0x20000158

08006414 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006420:	4618      	mov	r0, r3
 8006422:	f000 ff55 	bl	80072d0 <vPortFree>
			vPortFree( pxTCB );
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 ff52 	bl	80072d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800642c:	bf00      	nop
 800642e:	3708      	adds	r7, #8
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800643a:	4b0c      	ldr	r3, [pc, #48]	; (800646c <prvResetNextTaskUnblockTime+0x38>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d104      	bne.n	800644e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006444:	4b0a      	ldr	r3, [pc, #40]	; (8006470 <prvResetNextTaskUnblockTime+0x3c>)
 8006446:	f04f 32ff 	mov.w	r2, #4294967295
 800644a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800644c:	e008      	b.n	8006460 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800644e:	4b07      	ldr	r3, [pc, #28]	; (800646c <prvResetNextTaskUnblockTime+0x38>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	4a04      	ldr	r2, [pc, #16]	; (8006470 <prvResetNextTaskUnblockTime+0x3c>)
 800645e:	6013      	str	r3, [r2, #0]
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr
 800646c:	20000128 	.word	0x20000128
 8006470:	20000190 	.word	0x20000190

08006474 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800647a:	4b0b      	ldr	r3, [pc, #44]	; (80064a8 <xTaskGetSchedulerState+0x34>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d102      	bne.n	8006488 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006482:	2301      	movs	r3, #1
 8006484:	607b      	str	r3, [r7, #4]
 8006486:	e008      	b.n	800649a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006488:	4b08      	ldr	r3, [pc, #32]	; (80064ac <xTaskGetSchedulerState+0x38>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d102      	bne.n	8006496 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006490:	2302      	movs	r3, #2
 8006492:	607b      	str	r3, [r7, #4]
 8006494:	e001      	b.n	800649a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006496:	2300      	movs	r3, #0
 8006498:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800649a:	687b      	ldr	r3, [r7, #4]
	}
 800649c:	4618      	mov	r0, r3
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr
 80064a8:	2000017c 	.word	0x2000017c
 80064ac:	20000198 	.word	0x20000198

080064b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80064bc:	2300      	movs	r3, #0
 80064be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d06e      	beq.n	80065a4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80064c6:	4b3a      	ldr	r3, [pc, #232]	; (80065b0 <xTaskPriorityDisinherit+0x100>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	693a      	ldr	r2, [r7, #16]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d00a      	beq.n	80064e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80064d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d4:	f383 8811 	msr	BASEPRI, r3
 80064d8:	f3bf 8f6f 	isb	sy
 80064dc:	f3bf 8f4f 	dsb	sy
 80064e0:	60fb      	str	r3, [r7, #12]
}
 80064e2:	bf00      	nop
 80064e4:	e7fe      	b.n	80064e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10a      	bne.n	8006504 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80064ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f2:	f383 8811 	msr	BASEPRI, r3
 80064f6:	f3bf 8f6f 	isb	sy
 80064fa:	f3bf 8f4f 	dsb	sy
 80064fe:	60bb      	str	r3, [r7, #8]
}
 8006500:	bf00      	nop
 8006502:	e7fe      	b.n	8006502 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006508:	1e5a      	subs	r2, r3, #1
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006516:	429a      	cmp	r2, r3
 8006518:	d044      	beq.n	80065a4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800651e:	2b00      	cmp	r3, #0
 8006520:	d140      	bne.n	80065a4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	3304      	adds	r3, #4
 8006526:	4618      	mov	r0, r3
 8006528:	f7fe fd88 	bl	800503c <uxListRemove>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d115      	bne.n	800655e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006536:	491f      	ldr	r1, [pc, #124]	; (80065b4 <xTaskPriorityDisinherit+0x104>)
 8006538:	4613      	mov	r3, r2
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	4413      	add	r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	440b      	add	r3, r1
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10a      	bne.n	800655e <xTaskPriorityDisinherit+0xae>
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654c:	2201      	movs	r2, #1
 800654e:	fa02 f303 	lsl.w	r3, r2, r3
 8006552:	43da      	mvns	r2, r3
 8006554:	4b18      	ldr	r3, [pc, #96]	; (80065b8 <xTaskPriorityDisinherit+0x108>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4013      	ands	r3, r2
 800655a:	4a17      	ldr	r2, [pc, #92]	; (80065b8 <xTaskPriorityDisinherit+0x108>)
 800655c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656a:	f1c3 0205 	rsb	r2, r3, #5
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006576:	2201      	movs	r2, #1
 8006578:	409a      	lsls	r2, r3
 800657a:	4b0f      	ldr	r3, [pc, #60]	; (80065b8 <xTaskPriorityDisinherit+0x108>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4313      	orrs	r3, r2
 8006580:	4a0d      	ldr	r2, [pc, #52]	; (80065b8 <xTaskPriorityDisinherit+0x108>)
 8006582:	6013      	str	r3, [r2, #0]
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006588:	4613      	mov	r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	4413      	add	r3, r2
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	4a08      	ldr	r2, [pc, #32]	; (80065b4 <xTaskPriorityDisinherit+0x104>)
 8006592:	441a      	add	r2, r3
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	3304      	adds	r3, #4
 8006598:	4619      	mov	r1, r3
 800659a:	4610      	mov	r0, r2
 800659c:	f7fe fcf1 	bl	8004f82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80065a0:	2301      	movs	r3, #1
 80065a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80065a4:	697b      	ldr	r3, [r7, #20]
	}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3718      	adds	r7, #24
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	20000098 	.word	0x20000098
 80065b4:	2000009c 	.word	0x2000009c
 80065b8:	20000178 	.word	0x20000178

080065bc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80065c6:	4b29      	ldr	r3, [pc, #164]	; (800666c <prvAddCurrentTaskToDelayedList+0xb0>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065cc:	4b28      	ldr	r3, [pc, #160]	; (8006670 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	3304      	adds	r3, #4
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7fe fd32 	bl	800503c <uxListRemove>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10b      	bne.n	80065f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80065de:	4b24      	ldr	r3, [pc, #144]	; (8006670 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e4:	2201      	movs	r2, #1
 80065e6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ea:	43da      	mvns	r2, r3
 80065ec:	4b21      	ldr	r3, [pc, #132]	; (8006674 <prvAddCurrentTaskToDelayedList+0xb8>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4013      	ands	r3, r2
 80065f2:	4a20      	ldr	r2, [pc, #128]	; (8006674 <prvAddCurrentTaskToDelayedList+0xb8>)
 80065f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065fc:	d10a      	bne.n	8006614 <prvAddCurrentTaskToDelayedList+0x58>
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d007      	beq.n	8006614 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006604:	4b1a      	ldr	r3, [pc, #104]	; (8006670 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	3304      	adds	r3, #4
 800660a:	4619      	mov	r1, r3
 800660c:	481a      	ldr	r0, [pc, #104]	; (8006678 <prvAddCurrentTaskToDelayedList+0xbc>)
 800660e:	f7fe fcb8 	bl	8004f82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006612:	e026      	b.n	8006662 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4413      	add	r3, r2
 800661a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800661c:	4b14      	ldr	r3, [pc, #80]	; (8006670 <prvAddCurrentTaskToDelayedList+0xb4>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	429a      	cmp	r2, r3
 800662a:	d209      	bcs.n	8006640 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800662c:	4b13      	ldr	r3, [pc, #76]	; (800667c <prvAddCurrentTaskToDelayedList+0xc0>)
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	4b0f      	ldr	r3, [pc, #60]	; (8006670 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	3304      	adds	r3, #4
 8006636:	4619      	mov	r1, r3
 8006638:	4610      	mov	r0, r2
 800663a:	f7fe fcc6 	bl	8004fca <vListInsert>
}
 800663e:	e010      	b.n	8006662 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006640:	4b0f      	ldr	r3, [pc, #60]	; (8006680 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	4b0a      	ldr	r3, [pc, #40]	; (8006670 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	3304      	adds	r3, #4
 800664a:	4619      	mov	r1, r3
 800664c:	4610      	mov	r0, r2
 800664e:	f7fe fcbc 	bl	8004fca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006652:	4b0c      	ldr	r3, [pc, #48]	; (8006684 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68ba      	ldr	r2, [r7, #8]
 8006658:	429a      	cmp	r2, r3
 800665a:	d202      	bcs.n	8006662 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800665c:	4a09      	ldr	r2, [pc, #36]	; (8006684 <prvAddCurrentTaskToDelayedList+0xc8>)
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	6013      	str	r3, [r2, #0]
}
 8006662:	bf00      	nop
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	20000174 	.word	0x20000174
 8006670:	20000098 	.word	0x20000098
 8006674:	20000178 	.word	0x20000178
 8006678:	2000015c 	.word	0x2000015c
 800667c:	2000012c 	.word	0x2000012c
 8006680:	20000128 	.word	0x20000128
 8006684:	20000190 	.word	0x20000190

08006688 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800668e:	2300      	movs	r3, #0
 8006690:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006692:	f000 fad5 	bl	8006c40 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006696:	4b11      	ldr	r3, [pc, #68]	; (80066dc <xTimerCreateTimerTask+0x54>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00b      	beq.n	80066b6 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800669e:	4b10      	ldr	r3, [pc, #64]	; (80066e0 <xTimerCreateTimerTask+0x58>)
 80066a0:	9301      	str	r3, [sp, #4]
 80066a2:	2302      	movs	r3, #2
 80066a4:	9300      	str	r3, [sp, #0]
 80066a6:	2300      	movs	r3, #0
 80066a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80066ac:	490d      	ldr	r1, [pc, #52]	; (80066e4 <xTimerCreateTimerTask+0x5c>)
 80066ae:	480e      	ldr	r0, [pc, #56]	; (80066e8 <xTimerCreateTimerTask+0x60>)
 80066b0:	f7ff f99a 	bl	80059e8 <xTaskCreate>
 80066b4:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d10a      	bne.n	80066d2 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 80066bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c0:	f383 8811 	msr	BASEPRI, r3
 80066c4:	f3bf 8f6f 	isb	sy
 80066c8:	f3bf 8f4f 	dsb	sy
 80066cc:	603b      	str	r3, [r7, #0]
}
 80066ce:	bf00      	nop
 80066d0:	e7fe      	b.n	80066d0 <xTimerCreateTimerTask+0x48>
	return xReturn;
 80066d2:	687b      	ldr	r3, [r7, #4]
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3708      	adds	r7, #8
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	200001cc 	.word	0x200001cc
 80066e0:	200001d0 	.word	0x200001d0
 80066e4:	08007e2c 	.word	0x08007e2c
 80066e8:	08006821 	.word	0x08006821

080066ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b08a      	sub	sp, #40	; 0x28
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	607a      	str	r2, [r7, #4]
 80066f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80066fa:	2300      	movs	r3, #0
 80066fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d10a      	bne.n	800671a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006708:	f383 8811 	msr	BASEPRI, r3
 800670c:	f3bf 8f6f 	isb	sy
 8006710:	f3bf 8f4f 	dsb	sy
 8006714:	623b      	str	r3, [r7, #32]
}
 8006716:	bf00      	nop
 8006718:	e7fe      	b.n	8006718 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800671a:	4b1a      	ldr	r3, [pc, #104]	; (8006784 <xTimerGenericCommand+0x98>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d02a      	beq.n	8006778 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	2b05      	cmp	r3, #5
 8006732:	dc18      	bgt.n	8006766 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006734:	f7ff fe9e 	bl	8006474 <xTaskGetSchedulerState>
 8006738:	4603      	mov	r3, r0
 800673a:	2b02      	cmp	r3, #2
 800673c:	d109      	bne.n	8006752 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800673e:	4b11      	ldr	r3, [pc, #68]	; (8006784 <xTimerGenericCommand+0x98>)
 8006740:	6818      	ldr	r0, [r3, #0]
 8006742:	f107 0114 	add.w	r1, r7, #20
 8006746:	2300      	movs	r3, #0
 8006748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800674a:	f7fe fd69 	bl	8005220 <xQueueGenericSend>
 800674e:	6278      	str	r0, [r7, #36]	; 0x24
 8006750:	e012      	b.n	8006778 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006752:	4b0c      	ldr	r3, [pc, #48]	; (8006784 <xTimerGenericCommand+0x98>)
 8006754:	6818      	ldr	r0, [r3, #0]
 8006756:	f107 0114 	add.w	r1, r7, #20
 800675a:	2300      	movs	r3, #0
 800675c:	2200      	movs	r2, #0
 800675e:	f7fe fd5f 	bl	8005220 <xQueueGenericSend>
 8006762:	6278      	str	r0, [r7, #36]	; 0x24
 8006764:	e008      	b.n	8006778 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006766:	4b07      	ldr	r3, [pc, #28]	; (8006784 <xTimerGenericCommand+0x98>)
 8006768:	6818      	ldr	r0, [r3, #0]
 800676a:	f107 0114 	add.w	r1, r7, #20
 800676e:	2300      	movs	r3, #0
 8006770:	683a      	ldr	r2, [r7, #0]
 8006772:	f7fe fe53 	bl	800541c <xQueueGenericSendFromISR>
 8006776:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800677a:	4618      	mov	r0, r3
 800677c:	3728      	adds	r7, #40	; 0x28
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	200001cc 	.word	0x200001cc

08006788 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b088      	sub	sp, #32
 800678c:	af02      	add	r7, sp, #8
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006792:	4b22      	ldr	r3, [pc, #136]	; (800681c <prvProcessExpiredTimer+0x94>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	3304      	adds	r3, #4
 80067a0:	4618      	mov	r0, r3
 80067a2:	f7fe fc4b 	bl	800503c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067ac:	f003 0304 	and.w	r3, r3, #4
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d022      	beq.n	80067fa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	699a      	ldr	r2, [r3, #24]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	18d1      	adds	r1, r2, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	683a      	ldr	r2, [r7, #0]
 80067c0:	6978      	ldr	r0, [r7, #20]
 80067c2:	f000 f8d1 	bl	8006968 <prvInsertTimerInActiveList>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d01f      	beq.n	800680c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80067cc:	2300      	movs	r3, #0
 80067ce:	9300      	str	r3, [sp, #0]
 80067d0:	2300      	movs	r3, #0
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	2100      	movs	r1, #0
 80067d6:	6978      	ldr	r0, [r7, #20]
 80067d8:	f7ff ff88 	bl	80066ec <xTimerGenericCommand>
 80067dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d113      	bne.n	800680c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80067e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e8:	f383 8811 	msr	BASEPRI, r3
 80067ec:	f3bf 8f6f 	isb	sy
 80067f0:	f3bf 8f4f 	dsb	sy
 80067f4:	60fb      	str	r3, [r7, #12]
}
 80067f6:	bf00      	nop
 80067f8:	e7fe      	b.n	80067f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006800:	f023 0301 	bic.w	r3, r3, #1
 8006804:	b2da      	uxtb	r2, r3
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	6978      	ldr	r0, [r7, #20]
 8006812:	4798      	blx	r3
}
 8006814:	bf00      	nop
 8006816:	3718      	adds	r7, #24
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	200001c4 	.word	0x200001c4

08006820 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006828:	f107 0308 	add.w	r3, r7, #8
 800682c:	4618      	mov	r0, r3
 800682e:	f000 f857 	bl	80068e0 <prvGetNextExpireTime>
 8006832:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	4619      	mov	r1, r3
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f000 f803 	bl	8006844 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800683e:	f000 f8d5 	bl	80069ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006842:	e7f1      	b.n	8006828 <prvTimerTask+0x8>

08006844 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800684e:	f7ff fa57 	bl	8005d00 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006852:	f107 0308 	add.w	r3, r7, #8
 8006856:	4618      	mov	r0, r3
 8006858:	f000 f866 	bl	8006928 <prvSampleTimeNow>
 800685c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d130      	bne.n	80068c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10a      	bne.n	8006880 <prvProcessTimerOrBlockTask+0x3c>
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	429a      	cmp	r2, r3
 8006870:	d806      	bhi.n	8006880 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006872:	f7ff fa53 	bl	8005d1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006876:	68f9      	ldr	r1, [r7, #12]
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f7ff ff85 	bl	8006788 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800687e:	e024      	b.n	80068ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d008      	beq.n	8006898 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006886:	4b13      	ldr	r3, [pc, #76]	; (80068d4 <prvProcessTimerOrBlockTask+0x90>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d101      	bne.n	8006894 <prvProcessTimerOrBlockTask+0x50>
 8006890:	2301      	movs	r3, #1
 8006892:	e000      	b.n	8006896 <prvProcessTimerOrBlockTask+0x52>
 8006894:	2300      	movs	r3, #0
 8006896:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006898:	4b0f      	ldr	r3, [pc, #60]	; (80068d8 <prvProcessTimerOrBlockTask+0x94>)
 800689a:	6818      	ldr	r0, [r3, #0]
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	683a      	ldr	r2, [r7, #0]
 80068a4:	4619      	mov	r1, r3
 80068a6:	f7ff f86b 	bl	8005980 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80068aa:	f7ff fa37 	bl	8005d1c <xTaskResumeAll>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10a      	bne.n	80068ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80068b4:	4b09      	ldr	r3, [pc, #36]	; (80068dc <prvProcessTimerOrBlockTask+0x98>)
 80068b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068ba:	601a      	str	r2, [r3, #0]
 80068bc:	f3bf 8f4f 	dsb	sy
 80068c0:	f3bf 8f6f 	isb	sy
}
 80068c4:	e001      	b.n	80068ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80068c6:	f7ff fa29 	bl	8005d1c <xTaskResumeAll>
}
 80068ca:	bf00      	nop
 80068cc:	3710      	adds	r7, #16
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	200001c8 	.word	0x200001c8
 80068d8:	200001cc 	.word	0x200001cc
 80068dc:	e000ed04 	.word	0xe000ed04

080068e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80068e0:	b480      	push	{r7}
 80068e2:	b085      	sub	sp, #20
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80068e8:	4b0e      	ldr	r3, [pc, #56]	; (8006924 <prvGetNextExpireTime+0x44>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <prvGetNextExpireTime+0x16>
 80068f2:	2201      	movs	r2, #1
 80068f4:	e000      	b.n	80068f8 <prvGetNextExpireTime+0x18>
 80068f6:	2200      	movs	r2, #0
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d105      	bne.n	8006910 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006904:	4b07      	ldr	r3, [pc, #28]	; (8006924 <prvGetNextExpireTime+0x44>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	60fb      	str	r3, [r7, #12]
 800690e:	e001      	b.n	8006914 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006910:	2300      	movs	r3, #0
 8006912:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006914:	68fb      	ldr	r3, [r7, #12]
}
 8006916:	4618      	mov	r0, r3
 8006918:	3714      	adds	r7, #20
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	200001c4 	.word	0x200001c4

08006928 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006930:	f7ff fa90 	bl	8005e54 <xTaskGetTickCount>
 8006934:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006936:	4b0b      	ldr	r3, [pc, #44]	; (8006964 <prvSampleTimeNow+0x3c>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	429a      	cmp	r2, r3
 800693e:	d205      	bcs.n	800694c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006940:	f000 f91a 	bl	8006b78 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	601a      	str	r2, [r3, #0]
 800694a:	e002      	b.n	8006952 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006952:	4a04      	ldr	r2, [pc, #16]	; (8006964 <prvSampleTimeNow+0x3c>)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006958:	68fb      	ldr	r3, [r7, #12]
}
 800695a:	4618      	mov	r0, r3
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	200001d4 	.word	0x200001d4

08006968 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b086      	sub	sp, #24
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
 8006974:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006976:	2300      	movs	r3, #0
 8006978:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	68ba      	ldr	r2, [r7, #8]
 800697e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006986:	68ba      	ldr	r2, [r7, #8]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	429a      	cmp	r2, r3
 800698c:	d812      	bhi.n	80069b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	1ad2      	subs	r2, r2, r3
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	429a      	cmp	r2, r3
 800699a:	d302      	bcc.n	80069a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800699c:	2301      	movs	r3, #1
 800699e:	617b      	str	r3, [r7, #20]
 80069a0:	e01b      	b.n	80069da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80069a2:	4b10      	ldr	r3, [pc, #64]	; (80069e4 <prvInsertTimerInActiveList+0x7c>)
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	3304      	adds	r3, #4
 80069aa:	4619      	mov	r1, r3
 80069ac:	4610      	mov	r0, r2
 80069ae:	f7fe fb0c 	bl	8004fca <vListInsert>
 80069b2:	e012      	b.n	80069da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d206      	bcs.n	80069ca <prvInsertTimerInActiveList+0x62>
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d302      	bcc.n	80069ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80069c4:	2301      	movs	r3, #1
 80069c6:	617b      	str	r3, [r7, #20]
 80069c8:	e007      	b.n	80069da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80069ca:	4b07      	ldr	r3, [pc, #28]	; (80069e8 <prvInsertTimerInActiveList+0x80>)
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	3304      	adds	r3, #4
 80069d2:	4619      	mov	r1, r3
 80069d4:	4610      	mov	r0, r2
 80069d6:	f7fe faf8 	bl	8004fca <vListInsert>
		}
	}

	return xProcessTimerNow;
 80069da:	697b      	ldr	r3, [r7, #20]
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3718      	adds	r7, #24
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	200001c8 	.word	0x200001c8
 80069e8:	200001c4 	.word	0x200001c4

080069ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b08c      	sub	sp, #48	; 0x30
 80069f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80069f2:	e0ae      	b.n	8006b52 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	f2c0 80aa 	blt.w	8006b50 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a02:	695b      	ldr	r3, [r3, #20]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d004      	beq.n	8006a12 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0a:	3304      	adds	r3, #4
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7fe fb15 	bl	800503c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a12:	1d3b      	adds	r3, r7, #4
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7ff ff87 	bl	8006928 <prvSampleTimeNow>
 8006a1a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	2b09      	cmp	r3, #9
 8006a20:	f200 8097 	bhi.w	8006b52 <prvProcessReceivedCommands+0x166>
 8006a24:	a201      	add	r2, pc, #4	; (adr r2, 8006a2c <prvProcessReceivedCommands+0x40>)
 8006a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2a:	bf00      	nop
 8006a2c:	08006a55 	.word	0x08006a55
 8006a30:	08006a55 	.word	0x08006a55
 8006a34:	08006a55 	.word	0x08006a55
 8006a38:	08006ac9 	.word	0x08006ac9
 8006a3c:	08006add 	.word	0x08006add
 8006a40:	08006b27 	.word	0x08006b27
 8006a44:	08006a55 	.word	0x08006a55
 8006a48:	08006a55 	.word	0x08006a55
 8006a4c:	08006ac9 	.word	0x08006ac9
 8006a50:	08006add 	.word	0x08006add
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a5a:	f043 0301 	orr.w	r3, r3, #1
 8006a5e:	b2da      	uxtb	r2, r3
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	18d1      	adds	r1, r2, r3
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6a3a      	ldr	r2, [r7, #32]
 8006a72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a74:	f7ff ff78 	bl	8006968 <prvInsertTimerInActiveList>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d069      	beq.n	8006b52 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a80:	6a1b      	ldr	r3, [r3, #32]
 8006a82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a84:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a8c:	f003 0304 	and.w	r3, r3, #4
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d05e      	beq.n	8006b52 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	441a      	add	r2, r3
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	9300      	str	r3, [sp, #0]
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006aa6:	f7ff fe21 	bl	80066ec <xTimerGenericCommand>
 8006aaa:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d14f      	bne.n	8006b52 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8006ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab6:	f383 8811 	msr	BASEPRI, r3
 8006aba:	f3bf 8f6f 	isb	sy
 8006abe:	f3bf 8f4f 	dsb	sy
 8006ac2:	61bb      	str	r3, [r7, #24]
}
 8006ac4:	bf00      	nop
 8006ac6:	e7fe      	b.n	8006ac6 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ace:	f023 0301 	bic.w	r3, r3, #1
 8006ad2:	b2da      	uxtb	r2, r3
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006ada:	e03a      	b.n	8006b52 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ade:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ae2:	f043 0301 	orr.w	r3, r3, #1
 8006ae6:	b2da      	uxtb	r2, r3
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10a      	bne.n	8006b12 <prvProcessReceivedCommands+0x126>
	__asm volatile
 8006afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b00:	f383 8811 	msr	BASEPRI, r3
 8006b04:	f3bf 8f6f 	isb	sy
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	617b      	str	r3, [r7, #20]
}
 8006b0e:	bf00      	nop
 8006b10:	e7fe      	b.n	8006b10 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b14:	699a      	ldr	r2, [r3, #24]
 8006b16:	6a3b      	ldr	r3, [r7, #32]
 8006b18:	18d1      	adds	r1, r2, r3
 8006b1a:	6a3b      	ldr	r3, [r7, #32]
 8006b1c:	6a3a      	ldr	r2, [r7, #32]
 8006b1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b20:	f7ff ff22 	bl	8006968 <prvInsertTimerInActiveList>
					break;
 8006b24:	e015      	b.n	8006b52 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b2c:	f003 0302 	and.w	r3, r3, #2
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d103      	bne.n	8006b3c <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8006b34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b36:	f000 fbcb 	bl	80072d0 <vPortFree>
 8006b3a:	e00a      	b.n	8006b52 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b42:	f023 0301 	bic.w	r3, r3, #1
 8006b46:	b2da      	uxtb	r2, r3
 8006b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006b4e:	e000      	b.n	8006b52 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006b50:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b52:	4b08      	ldr	r3, [pc, #32]	; (8006b74 <prvProcessReceivedCommands+0x188>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f107 0108 	add.w	r1, r7, #8
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7fe fcf5 	bl	800554c <xQueueReceive>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f47f af45 	bne.w	80069f4 <prvProcessReceivedCommands+0x8>
	}
}
 8006b6a:	bf00      	nop
 8006b6c:	bf00      	nop
 8006b6e:	3728      	adds	r7, #40	; 0x28
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	200001cc 	.word	0x200001cc

08006b78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b088      	sub	sp, #32
 8006b7c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b7e:	e048      	b.n	8006c12 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b80:	4b2d      	ldr	r3, [pc, #180]	; (8006c38 <prvSwitchTimerLists+0xc0>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b8a:	4b2b      	ldr	r3, [pc, #172]	; (8006c38 <prvSwitchTimerLists+0xc0>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	3304      	adds	r3, #4
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f7fe fa4f 	bl	800503c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bac:	f003 0304 	and.w	r3, r3, #4
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d02e      	beq.n	8006c12 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	699b      	ldr	r3, [r3, #24]
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	4413      	add	r3, r2
 8006bbc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006bbe:	68ba      	ldr	r2, [r7, #8]
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d90e      	bls.n	8006be4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	68ba      	ldr	r2, [r7, #8]
 8006bca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006bd2:	4b19      	ldr	r3, [pc, #100]	; (8006c38 <prvSwitchTimerLists+0xc0>)
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	3304      	adds	r3, #4
 8006bda:	4619      	mov	r1, r3
 8006bdc:	4610      	mov	r0, r2
 8006bde:	f7fe f9f4 	bl	8004fca <vListInsert>
 8006be2:	e016      	b.n	8006c12 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006be4:	2300      	movs	r3, #0
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	2300      	movs	r3, #0
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	2100      	movs	r1, #0
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f7ff fd7c 	bl	80066ec <xTimerGenericCommand>
 8006bf4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10a      	bne.n	8006c12 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c00:	f383 8811 	msr	BASEPRI, r3
 8006c04:	f3bf 8f6f 	isb	sy
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	603b      	str	r3, [r7, #0]
}
 8006c0e:	bf00      	nop
 8006c10:	e7fe      	b.n	8006c10 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c12:	4b09      	ldr	r3, [pc, #36]	; (8006c38 <prvSwitchTimerLists+0xc0>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1b1      	bne.n	8006b80 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006c1c:	4b06      	ldr	r3, [pc, #24]	; (8006c38 <prvSwitchTimerLists+0xc0>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006c22:	4b06      	ldr	r3, [pc, #24]	; (8006c3c <prvSwitchTimerLists+0xc4>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a04      	ldr	r2, [pc, #16]	; (8006c38 <prvSwitchTimerLists+0xc0>)
 8006c28:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006c2a:	4a04      	ldr	r2, [pc, #16]	; (8006c3c <prvSwitchTimerLists+0xc4>)
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	6013      	str	r3, [r2, #0]
}
 8006c30:	bf00      	nop
 8006c32:	3718      	adds	r7, #24
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	200001c4 	.word	0x200001c4
 8006c3c:	200001c8 	.word	0x200001c8

08006c40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006c44:	f000 f95e 	bl	8006f04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006c48:	4b12      	ldr	r3, [pc, #72]	; (8006c94 <prvCheckForValidListAndQueue+0x54>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d11d      	bne.n	8006c8c <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8006c50:	4811      	ldr	r0, [pc, #68]	; (8006c98 <prvCheckForValidListAndQueue+0x58>)
 8006c52:	f7fe f969 	bl	8004f28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006c56:	4811      	ldr	r0, [pc, #68]	; (8006c9c <prvCheckForValidListAndQueue+0x5c>)
 8006c58:	f7fe f966 	bl	8004f28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006c5c:	4b10      	ldr	r3, [pc, #64]	; (8006ca0 <prvCheckForValidListAndQueue+0x60>)
 8006c5e:	4a0e      	ldr	r2, [pc, #56]	; (8006c98 <prvCheckForValidListAndQueue+0x58>)
 8006c60:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006c62:	4b10      	ldr	r3, [pc, #64]	; (8006ca4 <prvCheckForValidListAndQueue+0x64>)
 8006c64:	4a0d      	ldr	r2, [pc, #52]	; (8006c9c <prvCheckForValidListAndQueue+0x5c>)
 8006c66:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006c68:	2200      	movs	r2, #0
 8006c6a:	210c      	movs	r1, #12
 8006c6c:	200a      	movs	r0, #10
 8006c6e:	f7fe fa77 	bl	8005160 <xQueueGenericCreate>
 8006c72:	4603      	mov	r3, r0
 8006c74:	4a07      	ldr	r2, [pc, #28]	; (8006c94 <prvCheckForValidListAndQueue+0x54>)
 8006c76:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006c78:	4b06      	ldr	r3, [pc, #24]	; (8006c94 <prvCheckForValidListAndQueue+0x54>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d005      	beq.n	8006c8c <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006c80:	4b04      	ldr	r3, [pc, #16]	; (8006c94 <prvCheckForValidListAndQueue+0x54>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4908      	ldr	r1, [pc, #32]	; (8006ca8 <prvCheckForValidListAndQueue+0x68>)
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7fe fe50 	bl	800592c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c8c:	f000 f96a 	bl	8006f64 <vPortExitCritical>
}
 8006c90:	bf00      	nop
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	200001cc 	.word	0x200001cc
 8006c98:	2000019c 	.word	0x2000019c
 8006c9c:	200001b0 	.word	0x200001b0
 8006ca0:	200001c4 	.word	0x200001c4
 8006ca4:	200001c8 	.word	0x200001c8
 8006ca8:	08007e34 	.word	0x08007e34

08006cac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	3b04      	subs	r3, #4
 8006cbc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006cc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	3b04      	subs	r3, #4
 8006cca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	f023 0201 	bic.w	r2, r3, #1
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	3b04      	subs	r3, #4
 8006cda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006cdc:	4a0c      	ldr	r2, [pc, #48]	; (8006d10 <pxPortInitialiseStack+0x64>)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	3b14      	subs	r3, #20
 8006ce6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	3b04      	subs	r3, #4
 8006cf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f06f 0202 	mvn.w	r2, #2
 8006cfa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	3b20      	subs	r3, #32
 8006d00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006d02:	68fb      	ldr	r3, [r7, #12]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3714      	adds	r7, #20
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr
 8006d10:	08006d15 	.word	0x08006d15

08006d14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006d14:	b480      	push	{r7}
 8006d16:	b085      	sub	sp, #20
 8006d18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006d1e:	4b12      	ldr	r3, [pc, #72]	; (8006d68 <prvTaskExitError+0x54>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d26:	d00a      	beq.n	8006d3e <prvTaskExitError+0x2a>
	__asm volatile
 8006d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2c:	f383 8811 	msr	BASEPRI, r3
 8006d30:	f3bf 8f6f 	isb	sy
 8006d34:	f3bf 8f4f 	dsb	sy
 8006d38:	60fb      	str	r3, [r7, #12]
}
 8006d3a:	bf00      	nop
 8006d3c:	e7fe      	b.n	8006d3c <prvTaskExitError+0x28>
	__asm volatile
 8006d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	60bb      	str	r3, [r7, #8]
}
 8006d50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006d52:	bf00      	nop
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d0fc      	beq.n	8006d54 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006d5a:	bf00      	nop
 8006d5c:	bf00      	nop
 8006d5e:	3714      	adds	r7, #20
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr
 8006d68:	2000000c 	.word	0x2000000c
 8006d6c:	00000000 	.word	0x00000000

08006d70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006d70:	4b07      	ldr	r3, [pc, #28]	; (8006d90 <pxCurrentTCBConst2>)
 8006d72:	6819      	ldr	r1, [r3, #0]
 8006d74:	6808      	ldr	r0, [r1, #0]
 8006d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d7a:	f380 8809 	msr	PSP, r0
 8006d7e:	f3bf 8f6f 	isb	sy
 8006d82:	f04f 0000 	mov.w	r0, #0
 8006d86:	f380 8811 	msr	BASEPRI, r0
 8006d8a:	4770      	bx	lr
 8006d8c:	f3af 8000 	nop.w

08006d90 <pxCurrentTCBConst2>:
 8006d90:	20000098 	.word	0x20000098
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006d94:	bf00      	nop
 8006d96:	bf00      	nop

08006d98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006d98:	4808      	ldr	r0, [pc, #32]	; (8006dbc <prvPortStartFirstTask+0x24>)
 8006d9a:	6800      	ldr	r0, [r0, #0]
 8006d9c:	6800      	ldr	r0, [r0, #0]
 8006d9e:	f380 8808 	msr	MSP, r0
 8006da2:	f04f 0000 	mov.w	r0, #0
 8006da6:	f380 8814 	msr	CONTROL, r0
 8006daa:	b662      	cpsie	i
 8006dac:	b661      	cpsie	f
 8006dae:	f3bf 8f4f 	dsb	sy
 8006db2:	f3bf 8f6f 	isb	sy
 8006db6:	df00      	svc	0
 8006db8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006dba:	bf00      	nop
 8006dbc:	e000ed08 	.word	0xe000ed08

08006dc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b086      	sub	sp, #24
 8006dc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006dc6:	4b46      	ldr	r3, [pc, #280]	; (8006ee0 <xPortStartScheduler+0x120>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a46      	ldr	r2, [pc, #280]	; (8006ee4 <xPortStartScheduler+0x124>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d10a      	bne.n	8006de6 <xPortStartScheduler+0x26>
	__asm volatile
 8006dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd4:	f383 8811 	msr	BASEPRI, r3
 8006dd8:	f3bf 8f6f 	isb	sy
 8006ddc:	f3bf 8f4f 	dsb	sy
 8006de0:	613b      	str	r3, [r7, #16]
}
 8006de2:	bf00      	nop
 8006de4:	e7fe      	b.n	8006de4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006de6:	4b3e      	ldr	r3, [pc, #248]	; (8006ee0 <xPortStartScheduler+0x120>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a3f      	ldr	r2, [pc, #252]	; (8006ee8 <xPortStartScheduler+0x128>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d10a      	bne.n	8006e06 <xPortStartScheduler+0x46>
	__asm volatile
 8006df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df4:	f383 8811 	msr	BASEPRI, r3
 8006df8:	f3bf 8f6f 	isb	sy
 8006dfc:	f3bf 8f4f 	dsb	sy
 8006e00:	60fb      	str	r3, [r7, #12]
}
 8006e02:	bf00      	nop
 8006e04:	e7fe      	b.n	8006e04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006e06:	4b39      	ldr	r3, [pc, #228]	; (8006eec <xPortStartScheduler+0x12c>)
 8006e08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	22ff      	movs	r2, #255	; 0xff
 8006e16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e20:	78fb      	ldrb	r3, [r7, #3]
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006e28:	b2da      	uxtb	r2, r3
 8006e2a:	4b31      	ldr	r3, [pc, #196]	; (8006ef0 <xPortStartScheduler+0x130>)
 8006e2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006e2e:	4b31      	ldr	r3, [pc, #196]	; (8006ef4 <xPortStartScheduler+0x134>)
 8006e30:	2207      	movs	r2, #7
 8006e32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e34:	e009      	b.n	8006e4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006e36:	4b2f      	ldr	r3, [pc, #188]	; (8006ef4 <xPortStartScheduler+0x134>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	4a2d      	ldr	r2, [pc, #180]	; (8006ef4 <xPortStartScheduler+0x134>)
 8006e3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006e40:	78fb      	ldrb	r3, [r7, #3]
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	005b      	lsls	r3, r3, #1
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e4a:	78fb      	ldrb	r3, [r7, #3]
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e52:	2b80      	cmp	r3, #128	; 0x80
 8006e54:	d0ef      	beq.n	8006e36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006e56:	4b27      	ldr	r3, [pc, #156]	; (8006ef4 <xPortStartScheduler+0x134>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f1c3 0307 	rsb	r3, r3, #7
 8006e5e:	2b04      	cmp	r3, #4
 8006e60:	d00a      	beq.n	8006e78 <xPortStartScheduler+0xb8>
	__asm volatile
 8006e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e66:	f383 8811 	msr	BASEPRI, r3
 8006e6a:	f3bf 8f6f 	isb	sy
 8006e6e:	f3bf 8f4f 	dsb	sy
 8006e72:	60bb      	str	r3, [r7, #8]
}
 8006e74:	bf00      	nop
 8006e76:	e7fe      	b.n	8006e76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006e78:	4b1e      	ldr	r3, [pc, #120]	; (8006ef4 <xPortStartScheduler+0x134>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	021b      	lsls	r3, r3, #8
 8006e7e:	4a1d      	ldr	r2, [pc, #116]	; (8006ef4 <xPortStartScheduler+0x134>)
 8006e80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006e82:	4b1c      	ldr	r3, [pc, #112]	; (8006ef4 <xPortStartScheduler+0x134>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e8a:	4a1a      	ldr	r2, [pc, #104]	; (8006ef4 <xPortStartScheduler+0x134>)
 8006e8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	b2da      	uxtb	r2, r3
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006e96:	4b18      	ldr	r3, [pc, #96]	; (8006ef8 <xPortStartScheduler+0x138>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a17      	ldr	r2, [pc, #92]	; (8006ef8 <xPortStartScheduler+0x138>)
 8006e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006ea0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006ea2:	4b15      	ldr	r3, [pc, #84]	; (8006ef8 <xPortStartScheduler+0x138>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a14      	ldr	r2, [pc, #80]	; (8006ef8 <xPortStartScheduler+0x138>)
 8006ea8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006eac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006eae:	f000 f8dd 	bl	800706c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006eb2:	4b12      	ldr	r3, [pc, #72]	; (8006efc <xPortStartScheduler+0x13c>)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006eb8:	f000 f8fc 	bl	80070b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006ebc:	4b10      	ldr	r3, [pc, #64]	; (8006f00 <xPortStartScheduler+0x140>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a0f      	ldr	r2, [pc, #60]	; (8006f00 <xPortStartScheduler+0x140>)
 8006ec2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006ec6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006ec8:	f7ff ff66 	bl	8006d98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006ecc:	f7ff f88a 	bl	8005fe4 <vTaskSwitchContext>
	prvTaskExitError();
 8006ed0:	f7ff ff20 	bl	8006d14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3718      	adds	r7, #24
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	e000ed00 	.word	0xe000ed00
 8006ee4:	410fc271 	.word	0x410fc271
 8006ee8:	410fc270 	.word	0x410fc270
 8006eec:	e000e400 	.word	0xe000e400
 8006ef0:	200001d8 	.word	0x200001d8
 8006ef4:	200001dc 	.word	0x200001dc
 8006ef8:	e000ed20 	.word	0xe000ed20
 8006efc:	2000000c 	.word	0x2000000c
 8006f00:	e000ef34 	.word	0xe000ef34

08006f04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
	__asm volatile
 8006f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0e:	f383 8811 	msr	BASEPRI, r3
 8006f12:	f3bf 8f6f 	isb	sy
 8006f16:	f3bf 8f4f 	dsb	sy
 8006f1a:	607b      	str	r3, [r7, #4]
}
 8006f1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006f1e:	4b0f      	ldr	r3, [pc, #60]	; (8006f5c <vPortEnterCritical+0x58>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	3301      	adds	r3, #1
 8006f24:	4a0d      	ldr	r2, [pc, #52]	; (8006f5c <vPortEnterCritical+0x58>)
 8006f26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006f28:	4b0c      	ldr	r3, [pc, #48]	; (8006f5c <vPortEnterCritical+0x58>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d10f      	bne.n	8006f50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f30:	4b0b      	ldr	r3, [pc, #44]	; (8006f60 <vPortEnterCritical+0x5c>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00a      	beq.n	8006f50 <vPortEnterCritical+0x4c>
	__asm volatile
 8006f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3e:	f383 8811 	msr	BASEPRI, r3
 8006f42:	f3bf 8f6f 	isb	sy
 8006f46:	f3bf 8f4f 	dsb	sy
 8006f4a:	603b      	str	r3, [r7, #0]
}
 8006f4c:	bf00      	nop
 8006f4e:	e7fe      	b.n	8006f4e <vPortEnterCritical+0x4a>
	}
}
 8006f50:	bf00      	nop
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr
 8006f5c:	2000000c 	.word	0x2000000c
 8006f60:	e000ed04 	.word	0xe000ed04

08006f64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006f6a:	4b12      	ldr	r3, [pc, #72]	; (8006fb4 <vPortExitCritical+0x50>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d10a      	bne.n	8006f88 <vPortExitCritical+0x24>
	__asm volatile
 8006f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f76:	f383 8811 	msr	BASEPRI, r3
 8006f7a:	f3bf 8f6f 	isb	sy
 8006f7e:	f3bf 8f4f 	dsb	sy
 8006f82:	607b      	str	r3, [r7, #4]
}
 8006f84:	bf00      	nop
 8006f86:	e7fe      	b.n	8006f86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006f88:	4b0a      	ldr	r3, [pc, #40]	; (8006fb4 <vPortExitCritical+0x50>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	4a09      	ldr	r2, [pc, #36]	; (8006fb4 <vPortExitCritical+0x50>)
 8006f90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006f92:	4b08      	ldr	r3, [pc, #32]	; (8006fb4 <vPortExitCritical+0x50>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d105      	bne.n	8006fa6 <vPortExitCritical+0x42>
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	f383 8811 	msr	BASEPRI, r3
}
 8006fa4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006fa6:	bf00      	nop
 8006fa8:	370c      	adds	r7, #12
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	2000000c 	.word	0x2000000c
	...

08006fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006fc0:	f3ef 8009 	mrs	r0, PSP
 8006fc4:	f3bf 8f6f 	isb	sy
 8006fc8:	4b15      	ldr	r3, [pc, #84]	; (8007020 <pxCurrentTCBConst>)
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	f01e 0f10 	tst.w	lr, #16
 8006fd0:	bf08      	it	eq
 8006fd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006fd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fda:	6010      	str	r0, [r2, #0]
 8006fdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006fe0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006fe4:	f380 8811 	msr	BASEPRI, r0
 8006fe8:	f3bf 8f4f 	dsb	sy
 8006fec:	f3bf 8f6f 	isb	sy
 8006ff0:	f7fe fff8 	bl	8005fe4 <vTaskSwitchContext>
 8006ff4:	f04f 0000 	mov.w	r0, #0
 8006ff8:	f380 8811 	msr	BASEPRI, r0
 8006ffc:	bc09      	pop	{r0, r3}
 8006ffe:	6819      	ldr	r1, [r3, #0]
 8007000:	6808      	ldr	r0, [r1, #0]
 8007002:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007006:	f01e 0f10 	tst.w	lr, #16
 800700a:	bf08      	it	eq
 800700c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007010:	f380 8809 	msr	PSP, r0
 8007014:	f3bf 8f6f 	isb	sy
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	f3af 8000 	nop.w

08007020 <pxCurrentTCBConst>:
 8007020:	20000098 	.word	0x20000098
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007024:	bf00      	nop
 8007026:	bf00      	nop

08007028 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
	__asm volatile
 800702e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007032:	f383 8811 	msr	BASEPRI, r3
 8007036:	f3bf 8f6f 	isb	sy
 800703a:	f3bf 8f4f 	dsb	sy
 800703e:	607b      	str	r3, [r7, #4]
}
 8007040:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007042:	f7fe ff17 	bl	8005e74 <xTaskIncrementTick>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d003      	beq.n	8007054 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800704c:	4b06      	ldr	r3, [pc, #24]	; (8007068 <SysTick_Handler+0x40>)
 800704e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007052:	601a      	str	r2, [r3, #0]
 8007054:	2300      	movs	r3, #0
 8007056:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	f383 8811 	msr	BASEPRI, r3
}
 800705e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007060:	bf00      	nop
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	e000ed04 	.word	0xe000ed04

0800706c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800706c:	b480      	push	{r7}
 800706e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007070:	4b0b      	ldr	r3, [pc, #44]	; (80070a0 <vPortSetupTimerInterrupt+0x34>)
 8007072:	2200      	movs	r2, #0
 8007074:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007076:	4b0b      	ldr	r3, [pc, #44]	; (80070a4 <vPortSetupTimerInterrupt+0x38>)
 8007078:	2200      	movs	r2, #0
 800707a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800707c:	4b0a      	ldr	r3, [pc, #40]	; (80070a8 <vPortSetupTimerInterrupt+0x3c>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a0a      	ldr	r2, [pc, #40]	; (80070ac <vPortSetupTimerInterrupt+0x40>)
 8007082:	fba2 2303 	umull	r2, r3, r2, r3
 8007086:	099b      	lsrs	r3, r3, #6
 8007088:	4a09      	ldr	r2, [pc, #36]	; (80070b0 <vPortSetupTimerInterrupt+0x44>)
 800708a:	3b01      	subs	r3, #1
 800708c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800708e:	4b04      	ldr	r3, [pc, #16]	; (80070a0 <vPortSetupTimerInterrupt+0x34>)
 8007090:	2207      	movs	r2, #7
 8007092:	601a      	str	r2, [r3, #0]
}
 8007094:	bf00      	nop
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	e000e010 	.word	0xe000e010
 80070a4:	e000e018 	.word	0xe000e018
 80070a8:	20000000 	.word	0x20000000
 80070ac:	10624dd3 	.word	0x10624dd3
 80070b0:	e000e014 	.word	0xe000e014

080070b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80070b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80070c4 <vPortEnableVFP+0x10>
 80070b8:	6801      	ldr	r1, [r0, #0]
 80070ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80070be:	6001      	str	r1, [r0, #0]
 80070c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80070c2:	bf00      	nop
 80070c4:	e000ed88 	.word	0xe000ed88

080070c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80070ce:	f3ef 8305 	mrs	r3, IPSR
 80070d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2b0f      	cmp	r3, #15
 80070d8:	d914      	bls.n	8007104 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80070da:	4a17      	ldr	r2, [pc, #92]	; (8007138 <vPortValidateInterruptPriority+0x70>)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	4413      	add	r3, r2
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80070e4:	4b15      	ldr	r3, [pc, #84]	; (800713c <vPortValidateInterruptPriority+0x74>)
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	7afa      	ldrb	r2, [r7, #11]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d20a      	bcs.n	8007104 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80070ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f2:	f383 8811 	msr	BASEPRI, r3
 80070f6:	f3bf 8f6f 	isb	sy
 80070fa:	f3bf 8f4f 	dsb	sy
 80070fe:	607b      	str	r3, [r7, #4]
}
 8007100:	bf00      	nop
 8007102:	e7fe      	b.n	8007102 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007104:	4b0e      	ldr	r3, [pc, #56]	; (8007140 <vPortValidateInterruptPriority+0x78>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800710c:	4b0d      	ldr	r3, [pc, #52]	; (8007144 <vPortValidateInterruptPriority+0x7c>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	429a      	cmp	r2, r3
 8007112:	d90a      	bls.n	800712a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007118:	f383 8811 	msr	BASEPRI, r3
 800711c:	f3bf 8f6f 	isb	sy
 8007120:	f3bf 8f4f 	dsb	sy
 8007124:	603b      	str	r3, [r7, #0]
}
 8007126:	bf00      	nop
 8007128:	e7fe      	b.n	8007128 <vPortValidateInterruptPriority+0x60>
	}
 800712a:	bf00      	nop
 800712c:	3714      	adds	r7, #20
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	e000e3f0 	.word	0xe000e3f0
 800713c:	200001d8 	.word	0x200001d8
 8007140:	e000ed0c 	.word	0xe000ed0c
 8007144:	200001dc 	.word	0x200001dc

08007148 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b08a      	sub	sp, #40	; 0x28
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007150:	2300      	movs	r3, #0
 8007152:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007154:	f7fe fdd4 	bl	8005d00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007158:	4b58      	ldr	r3, [pc, #352]	; (80072bc <pvPortMalloc+0x174>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d101      	bne.n	8007164 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007160:	f000 f910 	bl	8007384 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007164:	4b56      	ldr	r3, [pc, #344]	; (80072c0 <pvPortMalloc+0x178>)
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4013      	ands	r3, r2
 800716c:	2b00      	cmp	r3, #0
 800716e:	f040 808e 	bne.w	800728e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d01d      	beq.n	80071b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007178:	2208      	movs	r2, #8
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4413      	add	r3, r2
 800717e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f003 0307 	and.w	r3, r3, #7
 8007186:	2b00      	cmp	r3, #0
 8007188:	d014      	beq.n	80071b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f023 0307 	bic.w	r3, r3, #7
 8007190:	3308      	adds	r3, #8
 8007192:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f003 0307 	and.w	r3, r3, #7
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00a      	beq.n	80071b4 <pvPortMalloc+0x6c>
	__asm volatile
 800719e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a2:	f383 8811 	msr	BASEPRI, r3
 80071a6:	f3bf 8f6f 	isb	sy
 80071aa:	f3bf 8f4f 	dsb	sy
 80071ae:	617b      	str	r3, [r7, #20]
}
 80071b0:	bf00      	nop
 80071b2:	e7fe      	b.n	80071b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d069      	beq.n	800728e <pvPortMalloc+0x146>
 80071ba:	4b42      	ldr	r3, [pc, #264]	; (80072c4 <pvPortMalloc+0x17c>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d864      	bhi.n	800728e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80071c4:	4b40      	ldr	r3, [pc, #256]	; (80072c8 <pvPortMalloc+0x180>)
 80071c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80071c8:	4b3f      	ldr	r3, [pc, #252]	; (80072c8 <pvPortMalloc+0x180>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071ce:	e004      	b.n	80071da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80071d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80071d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d903      	bls.n	80071ec <pvPortMalloc+0xa4>
 80071e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d1f1      	bne.n	80071d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80071ec:	4b33      	ldr	r3, [pc, #204]	; (80072bc <pvPortMalloc+0x174>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d04b      	beq.n	800728e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80071f6:	6a3b      	ldr	r3, [r7, #32]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2208      	movs	r2, #8
 80071fc:	4413      	add	r3, r2
 80071fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	6a3b      	ldr	r3, [r7, #32]
 8007206:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720a:	685a      	ldr	r2, [r3, #4]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	1ad2      	subs	r2, r2, r3
 8007210:	2308      	movs	r3, #8
 8007212:	005b      	lsls	r3, r3, #1
 8007214:	429a      	cmp	r2, r3
 8007216:	d91f      	bls.n	8007258 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4413      	add	r3, r2
 800721e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	f003 0307 	and.w	r3, r3, #7
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00a      	beq.n	8007240 <pvPortMalloc+0xf8>
	__asm volatile
 800722a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722e:	f383 8811 	msr	BASEPRI, r3
 8007232:	f3bf 8f6f 	isb	sy
 8007236:	f3bf 8f4f 	dsb	sy
 800723a:	613b      	str	r3, [r7, #16]
}
 800723c:	bf00      	nop
 800723e:	e7fe      	b.n	800723e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007242:	685a      	ldr	r2, [r3, #4]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	1ad2      	subs	r2, r2, r3
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800724c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007252:	69b8      	ldr	r0, [r7, #24]
 8007254:	f000 f8f8 	bl	8007448 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007258:	4b1a      	ldr	r3, [pc, #104]	; (80072c4 <pvPortMalloc+0x17c>)
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	4a18      	ldr	r2, [pc, #96]	; (80072c4 <pvPortMalloc+0x17c>)
 8007264:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007266:	4b17      	ldr	r3, [pc, #92]	; (80072c4 <pvPortMalloc+0x17c>)
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	4b18      	ldr	r3, [pc, #96]	; (80072cc <pvPortMalloc+0x184>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	429a      	cmp	r2, r3
 8007270:	d203      	bcs.n	800727a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007272:	4b14      	ldr	r3, [pc, #80]	; (80072c4 <pvPortMalloc+0x17c>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a15      	ldr	r2, [pc, #84]	; (80072cc <pvPortMalloc+0x184>)
 8007278:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800727a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727c:	685a      	ldr	r2, [r3, #4]
 800727e:	4b10      	ldr	r3, [pc, #64]	; (80072c0 <pvPortMalloc+0x178>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	431a      	orrs	r2, r3
 8007284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007286:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728a:	2200      	movs	r2, #0
 800728c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800728e:	f7fe fd45 	bl	8005d1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	f003 0307 	and.w	r3, r3, #7
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00a      	beq.n	80072b2 <pvPortMalloc+0x16a>
	__asm volatile
 800729c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a0:	f383 8811 	msr	BASEPRI, r3
 80072a4:	f3bf 8f6f 	isb	sy
 80072a8:	f3bf 8f4f 	dsb	sy
 80072ac:	60fb      	str	r3, [r7, #12]
}
 80072ae:	bf00      	nop
 80072b0:	e7fe      	b.n	80072b0 <pvPortMalloc+0x168>
	return pvReturn;
 80072b2:	69fb      	ldr	r3, [r7, #28]
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3728      	adds	r7, #40	; 0x28
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	20012de8 	.word	0x20012de8
 80072c0:	20012df4 	.word	0x20012df4
 80072c4:	20012dec 	.word	0x20012dec
 80072c8:	20012de0 	.word	0x20012de0
 80072cc:	20012df0 	.word	0x20012df0

080072d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d048      	beq.n	8007374 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80072e2:	2308      	movs	r3, #8
 80072e4:	425b      	negs	r3, r3
 80072e6:	697a      	ldr	r2, [r7, #20]
 80072e8:	4413      	add	r3, r2
 80072ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	685a      	ldr	r2, [r3, #4]
 80072f4:	4b21      	ldr	r3, [pc, #132]	; (800737c <vPortFree+0xac>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4013      	ands	r3, r2
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10a      	bne.n	8007314 <vPortFree+0x44>
	__asm volatile
 80072fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	60fb      	str	r3, [r7, #12]
}
 8007310:	bf00      	nop
 8007312:	e7fe      	b.n	8007312 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00a      	beq.n	8007332 <vPortFree+0x62>
	__asm volatile
 800731c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007320:	f383 8811 	msr	BASEPRI, r3
 8007324:	f3bf 8f6f 	isb	sy
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	60bb      	str	r3, [r7, #8]
}
 800732e:	bf00      	nop
 8007330:	e7fe      	b.n	8007330 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	685a      	ldr	r2, [r3, #4]
 8007336:	4b11      	ldr	r3, [pc, #68]	; (800737c <vPortFree+0xac>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4013      	ands	r3, r2
 800733c:	2b00      	cmp	r3, #0
 800733e:	d019      	beq.n	8007374 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d115      	bne.n	8007374 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	685a      	ldr	r2, [r3, #4]
 800734c:	4b0b      	ldr	r3, [pc, #44]	; (800737c <vPortFree+0xac>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	43db      	mvns	r3, r3
 8007352:	401a      	ands	r2, r3
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007358:	f7fe fcd2 	bl	8005d00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	685a      	ldr	r2, [r3, #4]
 8007360:	4b07      	ldr	r3, [pc, #28]	; (8007380 <vPortFree+0xb0>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4413      	add	r3, r2
 8007366:	4a06      	ldr	r2, [pc, #24]	; (8007380 <vPortFree+0xb0>)
 8007368:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800736a:	6938      	ldr	r0, [r7, #16]
 800736c:	f000 f86c 	bl	8007448 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007370:	f7fe fcd4 	bl	8005d1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007374:	bf00      	nop
 8007376:	3718      	adds	r7, #24
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	20012df4 	.word	0x20012df4
 8007380:	20012dec 	.word	0x20012dec

08007384 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800738a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800738e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007390:	4b27      	ldr	r3, [pc, #156]	; (8007430 <prvHeapInit+0xac>)
 8007392:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f003 0307 	and.w	r3, r3, #7
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00c      	beq.n	80073b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	3307      	adds	r3, #7
 80073a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f023 0307 	bic.w	r3, r3, #7
 80073aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	4a1f      	ldr	r2, [pc, #124]	; (8007430 <prvHeapInit+0xac>)
 80073b4:	4413      	add	r3, r2
 80073b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80073bc:	4a1d      	ldr	r2, [pc, #116]	; (8007434 <prvHeapInit+0xb0>)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80073c2:	4b1c      	ldr	r3, [pc, #112]	; (8007434 <prvHeapInit+0xb0>)
 80073c4:	2200      	movs	r2, #0
 80073c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	4413      	add	r3, r2
 80073ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80073d0:	2208      	movs	r2, #8
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	1a9b      	subs	r3, r3, r2
 80073d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f023 0307 	bic.w	r3, r3, #7
 80073de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	4a15      	ldr	r2, [pc, #84]	; (8007438 <prvHeapInit+0xb4>)
 80073e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80073e6:	4b14      	ldr	r3, [pc, #80]	; (8007438 <prvHeapInit+0xb4>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2200      	movs	r2, #0
 80073ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80073ee:	4b12      	ldr	r3, [pc, #72]	; (8007438 <prvHeapInit+0xb4>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2200      	movs	r2, #0
 80073f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	1ad2      	subs	r2, r2, r3
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007404:	4b0c      	ldr	r3, [pc, #48]	; (8007438 <prvHeapInit+0xb4>)
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	4a0a      	ldr	r2, [pc, #40]	; (800743c <prvHeapInit+0xb8>)
 8007412:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	4a09      	ldr	r2, [pc, #36]	; (8007440 <prvHeapInit+0xbc>)
 800741a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800741c:	4b09      	ldr	r3, [pc, #36]	; (8007444 <prvHeapInit+0xc0>)
 800741e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007422:	601a      	str	r2, [r3, #0]
}
 8007424:	bf00      	nop
 8007426:	3714      	adds	r7, #20
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr
 8007430:	200001e0 	.word	0x200001e0
 8007434:	20012de0 	.word	0x20012de0
 8007438:	20012de8 	.word	0x20012de8
 800743c:	20012df0 	.word	0x20012df0
 8007440:	20012dec 	.word	0x20012dec
 8007444:	20012df4 	.word	0x20012df4

08007448 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007450:	4b28      	ldr	r3, [pc, #160]	; (80074f4 <prvInsertBlockIntoFreeList+0xac>)
 8007452:	60fb      	str	r3, [r7, #12]
 8007454:	e002      	b.n	800745c <prvInsertBlockIntoFreeList+0x14>
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	60fb      	str	r3, [r7, #12]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	429a      	cmp	r2, r3
 8007464:	d8f7      	bhi.n	8007456 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	4413      	add	r3, r2
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	429a      	cmp	r2, r3
 8007476:	d108      	bne.n	800748a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	685a      	ldr	r2, [r3, #4]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	441a      	add	r2, r3
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	68ba      	ldr	r2, [r7, #8]
 8007494:	441a      	add	r2, r3
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	429a      	cmp	r2, r3
 800749c:	d118      	bne.n	80074d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	4b15      	ldr	r3, [pc, #84]	; (80074f8 <prvInsertBlockIntoFreeList+0xb0>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d00d      	beq.n	80074c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685a      	ldr	r2, [r3, #4]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	441a      	add	r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	601a      	str	r2, [r3, #0]
 80074c4:	e008      	b.n	80074d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80074c6:	4b0c      	ldr	r3, [pc, #48]	; (80074f8 <prvInsertBlockIntoFreeList+0xb0>)
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	601a      	str	r2, [r3, #0]
 80074ce:	e003      	b.n	80074d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d002      	beq.n	80074e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074e6:	bf00      	nop
 80074e8:	3714      	adds	r7, #20
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	20012de0 	.word	0x20012de0
 80074f8:	20012de8 	.word	0x20012de8

080074fc <__errno>:
 80074fc:	4b01      	ldr	r3, [pc, #4]	; (8007504 <__errno+0x8>)
 80074fe:	6818      	ldr	r0, [r3, #0]
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	20000010 	.word	0x20000010

08007508 <__libc_init_array>:
 8007508:	b570      	push	{r4, r5, r6, lr}
 800750a:	4d0d      	ldr	r5, [pc, #52]	; (8007540 <__libc_init_array+0x38>)
 800750c:	4c0d      	ldr	r4, [pc, #52]	; (8007544 <__libc_init_array+0x3c>)
 800750e:	1b64      	subs	r4, r4, r5
 8007510:	10a4      	asrs	r4, r4, #2
 8007512:	2600      	movs	r6, #0
 8007514:	42a6      	cmp	r6, r4
 8007516:	d109      	bne.n	800752c <__libc_init_array+0x24>
 8007518:	4d0b      	ldr	r5, [pc, #44]	; (8007548 <__libc_init_array+0x40>)
 800751a:	4c0c      	ldr	r4, [pc, #48]	; (800754c <__libc_init_array+0x44>)
 800751c:	f000 fc4e 	bl	8007dbc <_init>
 8007520:	1b64      	subs	r4, r4, r5
 8007522:	10a4      	asrs	r4, r4, #2
 8007524:	2600      	movs	r6, #0
 8007526:	42a6      	cmp	r6, r4
 8007528:	d105      	bne.n	8007536 <__libc_init_array+0x2e>
 800752a:	bd70      	pop	{r4, r5, r6, pc}
 800752c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007530:	4798      	blx	r3
 8007532:	3601      	adds	r6, #1
 8007534:	e7ee      	b.n	8007514 <__libc_init_array+0xc>
 8007536:	f855 3b04 	ldr.w	r3, [r5], #4
 800753a:	4798      	blx	r3
 800753c:	3601      	adds	r6, #1
 800753e:	e7f2      	b.n	8007526 <__libc_init_array+0x1e>
 8007540:	08007e90 	.word	0x08007e90
 8007544:	08007e90 	.word	0x08007e90
 8007548:	08007e90 	.word	0x08007e90
 800754c:	08007e94 	.word	0x08007e94

08007550 <memcpy>:
 8007550:	440a      	add	r2, r1
 8007552:	4291      	cmp	r1, r2
 8007554:	f100 33ff 	add.w	r3, r0, #4294967295
 8007558:	d100      	bne.n	800755c <memcpy+0xc>
 800755a:	4770      	bx	lr
 800755c:	b510      	push	{r4, lr}
 800755e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007562:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007566:	4291      	cmp	r1, r2
 8007568:	d1f9      	bne.n	800755e <memcpy+0xe>
 800756a:	bd10      	pop	{r4, pc}

0800756c <memset>:
 800756c:	4402      	add	r2, r0
 800756e:	4603      	mov	r3, r0
 8007570:	4293      	cmp	r3, r2
 8007572:	d100      	bne.n	8007576 <memset+0xa>
 8007574:	4770      	bx	lr
 8007576:	f803 1b01 	strb.w	r1, [r3], #1
 800757a:	e7f9      	b.n	8007570 <memset+0x4>

0800757c <siprintf>:
 800757c:	b40e      	push	{r1, r2, r3}
 800757e:	b500      	push	{lr}
 8007580:	b09c      	sub	sp, #112	; 0x70
 8007582:	ab1d      	add	r3, sp, #116	; 0x74
 8007584:	9002      	str	r0, [sp, #8]
 8007586:	9006      	str	r0, [sp, #24]
 8007588:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800758c:	4809      	ldr	r0, [pc, #36]	; (80075b4 <siprintf+0x38>)
 800758e:	9107      	str	r1, [sp, #28]
 8007590:	9104      	str	r1, [sp, #16]
 8007592:	4909      	ldr	r1, [pc, #36]	; (80075b8 <siprintf+0x3c>)
 8007594:	f853 2b04 	ldr.w	r2, [r3], #4
 8007598:	9105      	str	r1, [sp, #20]
 800759a:	6800      	ldr	r0, [r0, #0]
 800759c:	9301      	str	r3, [sp, #4]
 800759e:	a902      	add	r1, sp, #8
 80075a0:	f000 f868 	bl	8007674 <_svfiprintf_r>
 80075a4:	9b02      	ldr	r3, [sp, #8]
 80075a6:	2200      	movs	r2, #0
 80075a8:	701a      	strb	r2, [r3, #0]
 80075aa:	b01c      	add	sp, #112	; 0x70
 80075ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80075b0:	b003      	add	sp, #12
 80075b2:	4770      	bx	lr
 80075b4:	20000010 	.word	0x20000010
 80075b8:	ffff0208 	.word	0xffff0208

080075bc <__ssputs_r>:
 80075bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075c0:	688e      	ldr	r6, [r1, #8]
 80075c2:	429e      	cmp	r6, r3
 80075c4:	4682      	mov	sl, r0
 80075c6:	460c      	mov	r4, r1
 80075c8:	4690      	mov	r8, r2
 80075ca:	461f      	mov	r7, r3
 80075cc:	d838      	bhi.n	8007640 <__ssputs_r+0x84>
 80075ce:	898a      	ldrh	r2, [r1, #12]
 80075d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80075d4:	d032      	beq.n	800763c <__ssputs_r+0x80>
 80075d6:	6825      	ldr	r5, [r4, #0]
 80075d8:	6909      	ldr	r1, [r1, #16]
 80075da:	eba5 0901 	sub.w	r9, r5, r1
 80075de:	6965      	ldr	r5, [r4, #20]
 80075e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80075e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80075e8:	3301      	adds	r3, #1
 80075ea:	444b      	add	r3, r9
 80075ec:	106d      	asrs	r5, r5, #1
 80075ee:	429d      	cmp	r5, r3
 80075f0:	bf38      	it	cc
 80075f2:	461d      	movcc	r5, r3
 80075f4:	0553      	lsls	r3, r2, #21
 80075f6:	d531      	bpl.n	800765c <__ssputs_r+0xa0>
 80075f8:	4629      	mov	r1, r5
 80075fa:	f000 fb39 	bl	8007c70 <_malloc_r>
 80075fe:	4606      	mov	r6, r0
 8007600:	b950      	cbnz	r0, 8007618 <__ssputs_r+0x5c>
 8007602:	230c      	movs	r3, #12
 8007604:	f8ca 3000 	str.w	r3, [sl]
 8007608:	89a3      	ldrh	r3, [r4, #12]
 800760a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800760e:	81a3      	strh	r3, [r4, #12]
 8007610:	f04f 30ff 	mov.w	r0, #4294967295
 8007614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007618:	6921      	ldr	r1, [r4, #16]
 800761a:	464a      	mov	r2, r9
 800761c:	f7ff ff98 	bl	8007550 <memcpy>
 8007620:	89a3      	ldrh	r3, [r4, #12]
 8007622:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800762a:	81a3      	strh	r3, [r4, #12]
 800762c:	6126      	str	r6, [r4, #16]
 800762e:	6165      	str	r5, [r4, #20]
 8007630:	444e      	add	r6, r9
 8007632:	eba5 0509 	sub.w	r5, r5, r9
 8007636:	6026      	str	r6, [r4, #0]
 8007638:	60a5      	str	r5, [r4, #8]
 800763a:	463e      	mov	r6, r7
 800763c:	42be      	cmp	r6, r7
 800763e:	d900      	bls.n	8007642 <__ssputs_r+0x86>
 8007640:	463e      	mov	r6, r7
 8007642:	4632      	mov	r2, r6
 8007644:	6820      	ldr	r0, [r4, #0]
 8007646:	4641      	mov	r1, r8
 8007648:	f000 faa8 	bl	8007b9c <memmove>
 800764c:	68a3      	ldr	r3, [r4, #8]
 800764e:	6822      	ldr	r2, [r4, #0]
 8007650:	1b9b      	subs	r3, r3, r6
 8007652:	4432      	add	r2, r6
 8007654:	60a3      	str	r3, [r4, #8]
 8007656:	6022      	str	r2, [r4, #0]
 8007658:	2000      	movs	r0, #0
 800765a:	e7db      	b.n	8007614 <__ssputs_r+0x58>
 800765c:	462a      	mov	r2, r5
 800765e:	f000 fb61 	bl	8007d24 <_realloc_r>
 8007662:	4606      	mov	r6, r0
 8007664:	2800      	cmp	r0, #0
 8007666:	d1e1      	bne.n	800762c <__ssputs_r+0x70>
 8007668:	6921      	ldr	r1, [r4, #16]
 800766a:	4650      	mov	r0, sl
 800766c:	f000 fab0 	bl	8007bd0 <_free_r>
 8007670:	e7c7      	b.n	8007602 <__ssputs_r+0x46>
	...

08007674 <_svfiprintf_r>:
 8007674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007678:	4698      	mov	r8, r3
 800767a:	898b      	ldrh	r3, [r1, #12]
 800767c:	061b      	lsls	r3, r3, #24
 800767e:	b09d      	sub	sp, #116	; 0x74
 8007680:	4607      	mov	r7, r0
 8007682:	460d      	mov	r5, r1
 8007684:	4614      	mov	r4, r2
 8007686:	d50e      	bpl.n	80076a6 <_svfiprintf_r+0x32>
 8007688:	690b      	ldr	r3, [r1, #16]
 800768a:	b963      	cbnz	r3, 80076a6 <_svfiprintf_r+0x32>
 800768c:	2140      	movs	r1, #64	; 0x40
 800768e:	f000 faef 	bl	8007c70 <_malloc_r>
 8007692:	6028      	str	r0, [r5, #0]
 8007694:	6128      	str	r0, [r5, #16]
 8007696:	b920      	cbnz	r0, 80076a2 <_svfiprintf_r+0x2e>
 8007698:	230c      	movs	r3, #12
 800769a:	603b      	str	r3, [r7, #0]
 800769c:	f04f 30ff 	mov.w	r0, #4294967295
 80076a0:	e0d1      	b.n	8007846 <_svfiprintf_r+0x1d2>
 80076a2:	2340      	movs	r3, #64	; 0x40
 80076a4:	616b      	str	r3, [r5, #20]
 80076a6:	2300      	movs	r3, #0
 80076a8:	9309      	str	r3, [sp, #36]	; 0x24
 80076aa:	2320      	movs	r3, #32
 80076ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80076b4:	2330      	movs	r3, #48	; 0x30
 80076b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007860 <_svfiprintf_r+0x1ec>
 80076ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076be:	f04f 0901 	mov.w	r9, #1
 80076c2:	4623      	mov	r3, r4
 80076c4:	469a      	mov	sl, r3
 80076c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076ca:	b10a      	cbz	r2, 80076d0 <_svfiprintf_r+0x5c>
 80076cc:	2a25      	cmp	r2, #37	; 0x25
 80076ce:	d1f9      	bne.n	80076c4 <_svfiprintf_r+0x50>
 80076d0:	ebba 0b04 	subs.w	fp, sl, r4
 80076d4:	d00b      	beq.n	80076ee <_svfiprintf_r+0x7a>
 80076d6:	465b      	mov	r3, fp
 80076d8:	4622      	mov	r2, r4
 80076da:	4629      	mov	r1, r5
 80076dc:	4638      	mov	r0, r7
 80076de:	f7ff ff6d 	bl	80075bc <__ssputs_r>
 80076e2:	3001      	adds	r0, #1
 80076e4:	f000 80aa 	beq.w	800783c <_svfiprintf_r+0x1c8>
 80076e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076ea:	445a      	add	r2, fp
 80076ec:	9209      	str	r2, [sp, #36]	; 0x24
 80076ee:	f89a 3000 	ldrb.w	r3, [sl]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	f000 80a2 	beq.w	800783c <_svfiprintf_r+0x1c8>
 80076f8:	2300      	movs	r3, #0
 80076fa:	f04f 32ff 	mov.w	r2, #4294967295
 80076fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007702:	f10a 0a01 	add.w	sl, sl, #1
 8007706:	9304      	str	r3, [sp, #16]
 8007708:	9307      	str	r3, [sp, #28]
 800770a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800770e:	931a      	str	r3, [sp, #104]	; 0x68
 8007710:	4654      	mov	r4, sl
 8007712:	2205      	movs	r2, #5
 8007714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007718:	4851      	ldr	r0, [pc, #324]	; (8007860 <_svfiprintf_r+0x1ec>)
 800771a:	f7f8 fd59 	bl	80001d0 <memchr>
 800771e:	9a04      	ldr	r2, [sp, #16]
 8007720:	b9d8      	cbnz	r0, 800775a <_svfiprintf_r+0xe6>
 8007722:	06d0      	lsls	r0, r2, #27
 8007724:	bf44      	itt	mi
 8007726:	2320      	movmi	r3, #32
 8007728:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800772c:	0711      	lsls	r1, r2, #28
 800772e:	bf44      	itt	mi
 8007730:	232b      	movmi	r3, #43	; 0x2b
 8007732:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007736:	f89a 3000 	ldrb.w	r3, [sl]
 800773a:	2b2a      	cmp	r3, #42	; 0x2a
 800773c:	d015      	beq.n	800776a <_svfiprintf_r+0xf6>
 800773e:	9a07      	ldr	r2, [sp, #28]
 8007740:	4654      	mov	r4, sl
 8007742:	2000      	movs	r0, #0
 8007744:	f04f 0c0a 	mov.w	ip, #10
 8007748:	4621      	mov	r1, r4
 800774a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800774e:	3b30      	subs	r3, #48	; 0x30
 8007750:	2b09      	cmp	r3, #9
 8007752:	d94e      	bls.n	80077f2 <_svfiprintf_r+0x17e>
 8007754:	b1b0      	cbz	r0, 8007784 <_svfiprintf_r+0x110>
 8007756:	9207      	str	r2, [sp, #28]
 8007758:	e014      	b.n	8007784 <_svfiprintf_r+0x110>
 800775a:	eba0 0308 	sub.w	r3, r0, r8
 800775e:	fa09 f303 	lsl.w	r3, r9, r3
 8007762:	4313      	orrs	r3, r2
 8007764:	9304      	str	r3, [sp, #16]
 8007766:	46a2      	mov	sl, r4
 8007768:	e7d2      	b.n	8007710 <_svfiprintf_r+0x9c>
 800776a:	9b03      	ldr	r3, [sp, #12]
 800776c:	1d19      	adds	r1, r3, #4
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	9103      	str	r1, [sp, #12]
 8007772:	2b00      	cmp	r3, #0
 8007774:	bfbb      	ittet	lt
 8007776:	425b      	neglt	r3, r3
 8007778:	f042 0202 	orrlt.w	r2, r2, #2
 800777c:	9307      	strge	r3, [sp, #28]
 800777e:	9307      	strlt	r3, [sp, #28]
 8007780:	bfb8      	it	lt
 8007782:	9204      	strlt	r2, [sp, #16]
 8007784:	7823      	ldrb	r3, [r4, #0]
 8007786:	2b2e      	cmp	r3, #46	; 0x2e
 8007788:	d10c      	bne.n	80077a4 <_svfiprintf_r+0x130>
 800778a:	7863      	ldrb	r3, [r4, #1]
 800778c:	2b2a      	cmp	r3, #42	; 0x2a
 800778e:	d135      	bne.n	80077fc <_svfiprintf_r+0x188>
 8007790:	9b03      	ldr	r3, [sp, #12]
 8007792:	1d1a      	adds	r2, r3, #4
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	9203      	str	r2, [sp, #12]
 8007798:	2b00      	cmp	r3, #0
 800779a:	bfb8      	it	lt
 800779c:	f04f 33ff 	movlt.w	r3, #4294967295
 80077a0:	3402      	adds	r4, #2
 80077a2:	9305      	str	r3, [sp, #20]
 80077a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007870 <_svfiprintf_r+0x1fc>
 80077a8:	7821      	ldrb	r1, [r4, #0]
 80077aa:	2203      	movs	r2, #3
 80077ac:	4650      	mov	r0, sl
 80077ae:	f7f8 fd0f 	bl	80001d0 <memchr>
 80077b2:	b140      	cbz	r0, 80077c6 <_svfiprintf_r+0x152>
 80077b4:	2340      	movs	r3, #64	; 0x40
 80077b6:	eba0 000a 	sub.w	r0, r0, sl
 80077ba:	fa03 f000 	lsl.w	r0, r3, r0
 80077be:	9b04      	ldr	r3, [sp, #16]
 80077c0:	4303      	orrs	r3, r0
 80077c2:	3401      	adds	r4, #1
 80077c4:	9304      	str	r3, [sp, #16]
 80077c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077ca:	4826      	ldr	r0, [pc, #152]	; (8007864 <_svfiprintf_r+0x1f0>)
 80077cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077d0:	2206      	movs	r2, #6
 80077d2:	f7f8 fcfd 	bl	80001d0 <memchr>
 80077d6:	2800      	cmp	r0, #0
 80077d8:	d038      	beq.n	800784c <_svfiprintf_r+0x1d8>
 80077da:	4b23      	ldr	r3, [pc, #140]	; (8007868 <_svfiprintf_r+0x1f4>)
 80077dc:	bb1b      	cbnz	r3, 8007826 <_svfiprintf_r+0x1b2>
 80077de:	9b03      	ldr	r3, [sp, #12]
 80077e0:	3307      	adds	r3, #7
 80077e2:	f023 0307 	bic.w	r3, r3, #7
 80077e6:	3308      	adds	r3, #8
 80077e8:	9303      	str	r3, [sp, #12]
 80077ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077ec:	4433      	add	r3, r6
 80077ee:	9309      	str	r3, [sp, #36]	; 0x24
 80077f0:	e767      	b.n	80076c2 <_svfiprintf_r+0x4e>
 80077f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80077f6:	460c      	mov	r4, r1
 80077f8:	2001      	movs	r0, #1
 80077fa:	e7a5      	b.n	8007748 <_svfiprintf_r+0xd4>
 80077fc:	2300      	movs	r3, #0
 80077fe:	3401      	adds	r4, #1
 8007800:	9305      	str	r3, [sp, #20]
 8007802:	4619      	mov	r1, r3
 8007804:	f04f 0c0a 	mov.w	ip, #10
 8007808:	4620      	mov	r0, r4
 800780a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800780e:	3a30      	subs	r2, #48	; 0x30
 8007810:	2a09      	cmp	r2, #9
 8007812:	d903      	bls.n	800781c <_svfiprintf_r+0x1a8>
 8007814:	2b00      	cmp	r3, #0
 8007816:	d0c5      	beq.n	80077a4 <_svfiprintf_r+0x130>
 8007818:	9105      	str	r1, [sp, #20]
 800781a:	e7c3      	b.n	80077a4 <_svfiprintf_r+0x130>
 800781c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007820:	4604      	mov	r4, r0
 8007822:	2301      	movs	r3, #1
 8007824:	e7f0      	b.n	8007808 <_svfiprintf_r+0x194>
 8007826:	ab03      	add	r3, sp, #12
 8007828:	9300      	str	r3, [sp, #0]
 800782a:	462a      	mov	r2, r5
 800782c:	4b0f      	ldr	r3, [pc, #60]	; (800786c <_svfiprintf_r+0x1f8>)
 800782e:	a904      	add	r1, sp, #16
 8007830:	4638      	mov	r0, r7
 8007832:	f3af 8000 	nop.w
 8007836:	1c42      	adds	r2, r0, #1
 8007838:	4606      	mov	r6, r0
 800783a:	d1d6      	bne.n	80077ea <_svfiprintf_r+0x176>
 800783c:	89ab      	ldrh	r3, [r5, #12]
 800783e:	065b      	lsls	r3, r3, #25
 8007840:	f53f af2c 	bmi.w	800769c <_svfiprintf_r+0x28>
 8007844:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007846:	b01d      	add	sp, #116	; 0x74
 8007848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800784c:	ab03      	add	r3, sp, #12
 800784e:	9300      	str	r3, [sp, #0]
 8007850:	462a      	mov	r2, r5
 8007852:	4b06      	ldr	r3, [pc, #24]	; (800786c <_svfiprintf_r+0x1f8>)
 8007854:	a904      	add	r1, sp, #16
 8007856:	4638      	mov	r0, r7
 8007858:	f000 f87a 	bl	8007950 <_printf_i>
 800785c:	e7eb      	b.n	8007836 <_svfiprintf_r+0x1c2>
 800785e:	bf00      	nop
 8007860:	08007e54 	.word	0x08007e54
 8007864:	08007e5e 	.word	0x08007e5e
 8007868:	00000000 	.word	0x00000000
 800786c:	080075bd 	.word	0x080075bd
 8007870:	08007e5a 	.word	0x08007e5a

08007874 <_printf_common>:
 8007874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007878:	4616      	mov	r6, r2
 800787a:	4699      	mov	r9, r3
 800787c:	688a      	ldr	r2, [r1, #8]
 800787e:	690b      	ldr	r3, [r1, #16]
 8007880:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007884:	4293      	cmp	r3, r2
 8007886:	bfb8      	it	lt
 8007888:	4613      	movlt	r3, r2
 800788a:	6033      	str	r3, [r6, #0]
 800788c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007890:	4607      	mov	r7, r0
 8007892:	460c      	mov	r4, r1
 8007894:	b10a      	cbz	r2, 800789a <_printf_common+0x26>
 8007896:	3301      	adds	r3, #1
 8007898:	6033      	str	r3, [r6, #0]
 800789a:	6823      	ldr	r3, [r4, #0]
 800789c:	0699      	lsls	r1, r3, #26
 800789e:	bf42      	ittt	mi
 80078a0:	6833      	ldrmi	r3, [r6, #0]
 80078a2:	3302      	addmi	r3, #2
 80078a4:	6033      	strmi	r3, [r6, #0]
 80078a6:	6825      	ldr	r5, [r4, #0]
 80078a8:	f015 0506 	ands.w	r5, r5, #6
 80078ac:	d106      	bne.n	80078bc <_printf_common+0x48>
 80078ae:	f104 0a19 	add.w	sl, r4, #25
 80078b2:	68e3      	ldr	r3, [r4, #12]
 80078b4:	6832      	ldr	r2, [r6, #0]
 80078b6:	1a9b      	subs	r3, r3, r2
 80078b8:	42ab      	cmp	r3, r5
 80078ba:	dc26      	bgt.n	800790a <_printf_common+0x96>
 80078bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80078c0:	1e13      	subs	r3, r2, #0
 80078c2:	6822      	ldr	r2, [r4, #0]
 80078c4:	bf18      	it	ne
 80078c6:	2301      	movne	r3, #1
 80078c8:	0692      	lsls	r2, r2, #26
 80078ca:	d42b      	bmi.n	8007924 <_printf_common+0xb0>
 80078cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078d0:	4649      	mov	r1, r9
 80078d2:	4638      	mov	r0, r7
 80078d4:	47c0      	blx	r8
 80078d6:	3001      	adds	r0, #1
 80078d8:	d01e      	beq.n	8007918 <_printf_common+0xa4>
 80078da:	6823      	ldr	r3, [r4, #0]
 80078dc:	68e5      	ldr	r5, [r4, #12]
 80078de:	6832      	ldr	r2, [r6, #0]
 80078e0:	f003 0306 	and.w	r3, r3, #6
 80078e4:	2b04      	cmp	r3, #4
 80078e6:	bf08      	it	eq
 80078e8:	1aad      	subeq	r5, r5, r2
 80078ea:	68a3      	ldr	r3, [r4, #8]
 80078ec:	6922      	ldr	r2, [r4, #16]
 80078ee:	bf0c      	ite	eq
 80078f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078f4:	2500      	movne	r5, #0
 80078f6:	4293      	cmp	r3, r2
 80078f8:	bfc4      	itt	gt
 80078fa:	1a9b      	subgt	r3, r3, r2
 80078fc:	18ed      	addgt	r5, r5, r3
 80078fe:	2600      	movs	r6, #0
 8007900:	341a      	adds	r4, #26
 8007902:	42b5      	cmp	r5, r6
 8007904:	d11a      	bne.n	800793c <_printf_common+0xc8>
 8007906:	2000      	movs	r0, #0
 8007908:	e008      	b.n	800791c <_printf_common+0xa8>
 800790a:	2301      	movs	r3, #1
 800790c:	4652      	mov	r2, sl
 800790e:	4649      	mov	r1, r9
 8007910:	4638      	mov	r0, r7
 8007912:	47c0      	blx	r8
 8007914:	3001      	adds	r0, #1
 8007916:	d103      	bne.n	8007920 <_printf_common+0xac>
 8007918:	f04f 30ff 	mov.w	r0, #4294967295
 800791c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007920:	3501      	adds	r5, #1
 8007922:	e7c6      	b.n	80078b2 <_printf_common+0x3e>
 8007924:	18e1      	adds	r1, r4, r3
 8007926:	1c5a      	adds	r2, r3, #1
 8007928:	2030      	movs	r0, #48	; 0x30
 800792a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800792e:	4422      	add	r2, r4
 8007930:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007934:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007938:	3302      	adds	r3, #2
 800793a:	e7c7      	b.n	80078cc <_printf_common+0x58>
 800793c:	2301      	movs	r3, #1
 800793e:	4622      	mov	r2, r4
 8007940:	4649      	mov	r1, r9
 8007942:	4638      	mov	r0, r7
 8007944:	47c0      	blx	r8
 8007946:	3001      	adds	r0, #1
 8007948:	d0e6      	beq.n	8007918 <_printf_common+0xa4>
 800794a:	3601      	adds	r6, #1
 800794c:	e7d9      	b.n	8007902 <_printf_common+0x8e>
	...

08007950 <_printf_i>:
 8007950:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007954:	460c      	mov	r4, r1
 8007956:	4691      	mov	r9, r2
 8007958:	7e27      	ldrb	r7, [r4, #24]
 800795a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800795c:	2f78      	cmp	r7, #120	; 0x78
 800795e:	4680      	mov	r8, r0
 8007960:	469a      	mov	sl, r3
 8007962:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007966:	d807      	bhi.n	8007978 <_printf_i+0x28>
 8007968:	2f62      	cmp	r7, #98	; 0x62
 800796a:	d80a      	bhi.n	8007982 <_printf_i+0x32>
 800796c:	2f00      	cmp	r7, #0
 800796e:	f000 80d8 	beq.w	8007b22 <_printf_i+0x1d2>
 8007972:	2f58      	cmp	r7, #88	; 0x58
 8007974:	f000 80a3 	beq.w	8007abe <_printf_i+0x16e>
 8007978:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800797c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007980:	e03a      	b.n	80079f8 <_printf_i+0xa8>
 8007982:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007986:	2b15      	cmp	r3, #21
 8007988:	d8f6      	bhi.n	8007978 <_printf_i+0x28>
 800798a:	a001      	add	r0, pc, #4	; (adr r0, 8007990 <_printf_i+0x40>)
 800798c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007990:	080079e9 	.word	0x080079e9
 8007994:	080079fd 	.word	0x080079fd
 8007998:	08007979 	.word	0x08007979
 800799c:	08007979 	.word	0x08007979
 80079a0:	08007979 	.word	0x08007979
 80079a4:	08007979 	.word	0x08007979
 80079a8:	080079fd 	.word	0x080079fd
 80079ac:	08007979 	.word	0x08007979
 80079b0:	08007979 	.word	0x08007979
 80079b4:	08007979 	.word	0x08007979
 80079b8:	08007979 	.word	0x08007979
 80079bc:	08007b09 	.word	0x08007b09
 80079c0:	08007a2d 	.word	0x08007a2d
 80079c4:	08007aeb 	.word	0x08007aeb
 80079c8:	08007979 	.word	0x08007979
 80079cc:	08007979 	.word	0x08007979
 80079d0:	08007b2b 	.word	0x08007b2b
 80079d4:	08007979 	.word	0x08007979
 80079d8:	08007a2d 	.word	0x08007a2d
 80079dc:	08007979 	.word	0x08007979
 80079e0:	08007979 	.word	0x08007979
 80079e4:	08007af3 	.word	0x08007af3
 80079e8:	680b      	ldr	r3, [r1, #0]
 80079ea:	1d1a      	adds	r2, r3, #4
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	600a      	str	r2, [r1, #0]
 80079f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80079f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079f8:	2301      	movs	r3, #1
 80079fa:	e0a3      	b.n	8007b44 <_printf_i+0x1f4>
 80079fc:	6825      	ldr	r5, [r4, #0]
 80079fe:	6808      	ldr	r0, [r1, #0]
 8007a00:	062e      	lsls	r6, r5, #24
 8007a02:	f100 0304 	add.w	r3, r0, #4
 8007a06:	d50a      	bpl.n	8007a1e <_printf_i+0xce>
 8007a08:	6805      	ldr	r5, [r0, #0]
 8007a0a:	600b      	str	r3, [r1, #0]
 8007a0c:	2d00      	cmp	r5, #0
 8007a0e:	da03      	bge.n	8007a18 <_printf_i+0xc8>
 8007a10:	232d      	movs	r3, #45	; 0x2d
 8007a12:	426d      	negs	r5, r5
 8007a14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a18:	485e      	ldr	r0, [pc, #376]	; (8007b94 <_printf_i+0x244>)
 8007a1a:	230a      	movs	r3, #10
 8007a1c:	e019      	b.n	8007a52 <_printf_i+0x102>
 8007a1e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007a22:	6805      	ldr	r5, [r0, #0]
 8007a24:	600b      	str	r3, [r1, #0]
 8007a26:	bf18      	it	ne
 8007a28:	b22d      	sxthne	r5, r5
 8007a2a:	e7ef      	b.n	8007a0c <_printf_i+0xbc>
 8007a2c:	680b      	ldr	r3, [r1, #0]
 8007a2e:	6825      	ldr	r5, [r4, #0]
 8007a30:	1d18      	adds	r0, r3, #4
 8007a32:	6008      	str	r0, [r1, #0]
 8007a34:	0628      	lsls	r0, r5, #24
 8007a36:	d501      	bpl.n	8007a3c <_printf_i+0xec>
 8007a38:	681d      	ldr	r5, [r3, #0]
 8007a3a:	e002      	b.n	8007a42 <_printf_i+0xf2>
 8007a3c:	0669      	lsls	r1, r5, #25
 8007a3e:	d5fb      	bpl.n	8007a38 <_printf_i+0xe8>
 8007a40:	881d      	ldrh	r5, [r3, #0]
 8007a42:	4854      	ldr	r0, [pc, #336]	; (8007b94 <_printf_i+0x244>)
 8007a44:	2f6f      	cmp	r7, #111	; 0x6f
 8007a46:	bf0c      	ite	eq
 8007a48:	2308      	moveq	r3, #8
 8007a4a:	230a      	movne	r3, #10
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a52:	6866      	ldr	r6, [r4, #4]
 8007a54:	60a6      	str	r6, [r4, #8]
 8007a56:	2e00      	cmp	r6, #0
 8007a58:	bfa2      	ittt	ge
 8007a5a:	6821      	ldrge	r1, [r4, #0]
 8007a5c:	f021 0104 	bicge.w	r1, r1, #4
 8007a60:	6021      	strge	r1, [r4, #0]
 8007a62:	b90d      	cbnz	r5, 8007a68 <_printf_i+0x118>
 8007a64:	2e00      	cmp	r6, #0
 8007a66:	d04d      	beq.n	8007b04 <_printf_i+0x1b4>
 8007a68:	4616      	mov	r6, r2
 8007a6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a6e:	fb03 5711 	mls	r7, r3, r1, r5
 8007a72:	5dc7      	ldrb	r7, [r0, r7]
 8007a74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a78:	462f      	mov	r7, r5
 8007a7a:	42bb      	cmp	r3, r7
 8007a7c:	460d      	mov	r5, r1
 8007a7e:	d9f4      	bls.n	8007a6a <_printf_i+0x11a>
 8007a80:	2b08      	cmp	r3, #8
 8007a82:	d10b      	bne.n	8007a9c <_printf_i+0x14c>
 8007a84:	6823      	ldr	r3, [r4, #0]
 8007a86:	07df      	lsls	r7, r3, #31
 8007a88:	d508      	bpl.n	8007a9c <_printf_i+0x14c>
 8007a8a:	6923      	ldr	r3, [r4, #16]
 8007a8c:	6861      	ldr	r1, [r4, #4]
 8007a8e:	4299      	cmp	r1, r3
 8007a90:	bfde      	ittt	le
 8007a92:	2330      	movle	r3, #48	; 0x30
 8007a94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a9c:	1b92      	subs	r2, r2, r6
 8007a9e:	6122      	str	r2, [r4, #16]
 8007aa0:	f8cd a000 	str.w	sl, [sp]
 8007aa4:	464b      	mov	r3, r9
 8007aa6:	aa03      	add	r2, sp, #12
 8007aa8:	4621      	mov	r1, r4
 8007aaa:	4640      	mov	r0, r8
 8007aac:	f7ff fee2 	bl	8007874 <_printf_common>
 8007ab0:	3001      	adds	r0, #1
 8007ab2:	d14c      	bne.n	8007b4e <_printf_i+0x1fe>
 8007ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab8:	b004      	add	sp, #16
 8007aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007abe:	4835      	ldr	r0, [pc, #212]	; (8007b94 <_printf_i+0x244>)
 8007ac0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ac4:	6823      	ldr	r3, [r4, #0]
 8007ac6:	680e      	ldr	r6, [r1, #0]
 8007ac8:	061f      	lsls	r7, r3, #24
 8007aca:	f856 5b04 	ldr.w	r5, [r6], #4
 8007ace:	600e      	str	r6, [r1, #0]
 8007ad0:	d514      	bpl.n	8007afc <_printf_i+0x1ac>
 8007ad2:	07d9      	lsls	r1, r3, #31
 8007ad4:	bf44      	itt	mi
 8007ad6:	f043 0320 	orrmi.w	r3, r3, #32
 8007ada:	6023      	strmi	r3, [r4, #0]
 8007adc:	b91d      	cbnz	r5, 8007ae6 <_printf_i+0x196>
 8007ade:	6823      	ldr	r3, [r4, #0]
 8007ae0:	f023 0320 	bic.w	r3, r3, #32
 8007ae4:	6023      	str	r3, [r4, #0]
 8007ae6:	2310      	movs	r3, #16
 8007ae8:	e7b0      	b.n	8007a4c <_printf_i+0xfc>
 8007aea:	6823      	ldr	r3, [r4, #0]
 8007aec:	f043 0320 	orr.w	r3, r3, #32
 8007af0:	6023      	str	r3, [r4, #0]
 8007af2:	2378      	movs	r3, #120	; 0x78
 8007af4:	4828      	ldr	r0, [pc, #160]	; (8007b98 <_printf_i+0x248>)
 8007af6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007afa:	e7e3      	b.n	8007ac4 <_printf_i+0x174>
 8007afc:	065e      	lsls	r6, r3, #25
 8007afe:	bf48      	it	mi
 8007b00:	b2ad      	uxthmi	r5, r5
 8007b02:	e7e6      	b.n	8007ad2 <_printf_i+0x182>
 8007b04:	4616      	mov	r6, r2
 8007b06:	e7bb      	b.n	8007a80 <_printf_i+0x130>
 8007b08:	680b      	ldr	r3, [r1, #0]
 8007b0a:	6826      	ldr	r6, [r4, #0]
 8007b0c:	6960      	ldr	r0, [r4, #20]
 8007b0e:	1d1d      	adds	r5, r3, #4
 8007b10:	600d      	str	r5, [r1, #0]
 8007b12:	0635      	lsls	r5, r6, #24
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	d501      	bpl.n	8007b1c <_printf_i+0x1cc>
 8007b18:	6018      	str	r0, [r3, #0]
 8007b1a:	e002      	b.n	8007b22 <_printf_i+0x1d2>
 8007b1c:	0671      	lsls	r1, r6, #25
 8007b1e:	d5fb      	bpl.n	8007b18 <_printf_i+0x1c8>
 8007b20:	8018      	strh	r0, [r3, #0]
 8007b22:	2300      	movs	r3, #0
 8007b24:	6123      	str	r3, [r4, #16]
 8007b26:	4616      	mov	r6, r2
 8007b28:	e7ba      	b.n	8007aa0 <_printf_i+0x150>
 8007b2a:	680b      	ldr	r3, [r1, #0]
 8007b2c:	1d1a      	adds	r2, r3, #4
 8007b2e:	600a      	str	r2, [r1, #0]
 8007b30:	681e      	ldr	r6, [r3, #0]
 8007b32:	6862      	ldr	r2, [r4, #4]
 8007b34:	2100      	movs	r1, #0
 8007b36:	4630      	mov	r0, r6
 8007b38:	f7f8 fb4a 	bl	80001d0 <memchr>
 8007b3c:	b108      	cbz	r0, 8007b42 <_printf_i+0x1f2>
 8007b3e:	1b80      	subs	r0, r0, r6
 8007b40:	6060      	str	r0, [r4, #4]
 8007b42:	6863      	ldr	r3, [r4, #4]
 8007b44:	6123      	str	r3, [r4, #16]
 8007b46:	2300      	movs	r3, #0
 8007b48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b4c:	e7a8      	b.n	8007aa0 <_printf_i+0x150>
 8007b4e:	6923      	ldr	r3, [r4, #16]
 8007b50:	4632      	mov	r2, r6
 8007b52:	4649      	mov	r1, r9
 8007b54:	4640      	mov	r0, r8
 8007b56:	47d0      	blx	sl
 8007b58:	3001      	adds	r0, #1
 8007b5a:	d0ab      	beq.n	8007ab4 <_printf_i+0x164>
 8007b5c:	6823      	ldr	r3, [r4, #0]
 8007b5e:	079b      	lsls	r3, r3, #30
 8007b60:	d413      	bmi.n	8007b8a <_printf_i+0x23a>
 8007b62:	68e0      	ldr	r0, [r4, #12]
 8007b64:	9b03      	ldr	r3, [sp, #12]
 8007b66:	4298      	cmp	r0, r3
 8007b68:	bfb8      	it	lt
 8007b6a:	4618      	movlt	r0, r3
 8007b6c:	e7a4      	b.n	8007ab8 <_printf_i+0x168>
 8007b6e:	2301      	movs	r3, #1
 8007b70:	4632      	mov	r2, r6
 8007b72:	4649      	mov	r1, r9
 8007b74:	4640      	mov	r0, r8
 8007b76:	47d0      	blx	sl
 8007b78:	3001      	adds	r0, #1
 8007b7a:	d09b      	beq.n	8007ab4 <_printf_i+0x164>
 8007b7c:	3501      	adds	r5, #1
 8007b7e:	68e3      	ldr	r3, [r4, #12]
 8007b80:	9903      	ldr	r1, [sp, #12]
 8007b82:	1a5b      	subs	r3, r3, r1
 8007b84:	42ab      	cmp	r3, r5
 8007b86:	dcf2      	bgt.n	8007b6e <_printf_i+0x21e>
 8007b88:	e7eb      	b.n	8007b62 <_printf_i+0x212>
 8007b8a:	2500      	movs	r5, #0
 8007b8c:	f104 0619 	add.w	r6, r4, #25
 8007b90:	e7f5      	b.n	8007b7e <_printf_i+0x22e>
 8007b92:	bf00      	nop
 8007b94:	08007e65 	.word	0x08007e65
 8007b98:	08007e76 	.word	0x08007e76

08007b9c <memmove>:
 8007b9c:	4288      	cmp	r0, r1
 8007b9e:	b510      	push	{r4, lr}
 8007ba0:	eb01 0402 	add.w	r4, r1, r2
 8007ba4:	d902      	bls.n	8007bac <memmove+0x10>
 8007ba6:	4284      	cmp	r4, r0
 8007ba8:	4623      	mov	r3, r4
 8007baa:	d807      	bhi.n	8007bbc <memmove+0x20>
 8007bac:	1e43      	subs	r3, r0, #1
 8007bae:	42a1      	cmp	r1, r4
 8007bb0:	d008      	beq.n	8007bc4 <memmove+0x28>
 8007bb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007bba:	e7f8      	b.n	8007bae <memmove+0x12>
 8007bbc:	4402      	add	r2, r0
 8007bbe:	4601      	mov	r1, r0
 8007bc0:	428a      	cmp	r2, r1
 8007bc2:	d100      	bne.n	8007bc6 <memmove+0x2a>
 8007bc4:	bd10      	pop	{r4, pc}
 8007bc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007bce:	e7f7      	b.n	8007bc0 <memmove+0x24>

08007bd0 <_free_r>:
 8007bd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bd2:	2900      	cmp	r1, #0
 8007bd4:	d048      	beq.n	8007c68 <_free_r+0x98>
 8007bd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bda:	9001      	str	r0, [sp, #4]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f1a1 0404 	sub.w	r4, r1, #4
 8007be2:	bfb8      	it	lt
 8007be4:	18e4      	addlt	r4, r4, r3
 8007be6:	f000 f8d3 	bl	8007d90 <__malloc_lock>
 8007bea:	4a20      	ldr	r2, [pc, #128]	; (8007c6c <_free_r+0x9c>)
 8007bec:	9801      	ldr	r0, [sp, #4]
 8007bee:	6813      	ldr	r3, [r2, #0]
 8007bf0:	4615      	mov	r5, r2
 8007bf2:	b933      	cbnz	r3, 8007c02 <_free_r+0x32>
 8007bf4:	6063      	str	r3, [r4, #4]
 8007bf6:	6014      	str	r4, [r2, #0]
 8007bf8:	b003      	add	sp, #12
 8007bfa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007bfe:	f000 b8cd 	b.w	8007d9c <__malloc_unlock>
 8007c02:	42a3      	cmp	r3, r4
 8007c04:	d90b      	bls.n	8007c1e <_free_r+0x4e>
 8007c06:	6821      	ldr	r1, [r4, #0]
 8007c08:	1862      	adds	r2, r4, r1
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	bf04      	itt	eq
 8007c0e:	681a      	ldreq	r2, [r3, #0]
 8007c10:	685b      	ldreq	r3, [r3, #4]
 8007c12:	6063      	str	r3, [r4, #4]
 8007c14:	bf04      	itt	eq
 8007c16:	1852      	addeq	r2, r2, r1
 8007c18:	6022      	streq	r2, [r4, #0]
 8007c1a:	602c      	str	r4, [r5, #0]
 8007c1c:	e7ec      	b.n	8007bf8 <_free_r+0x28>
 8007c1e:	461a      	mov	r2, r3
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	b10b      	cbz	r3, 8007c28 <_free_r+0x58>
 8007c24:	42a3      	cmp	r3, r4
 8007c26:	d9fa      	bls.n	8007c1e <_free_r+0x4e>
 8007c28:	6811      	ldr	r1, [r2, #0]
 8007c2a:	1855      	adds	r5, r2, r1
 8007c2c:	42a5      	cmp	r5, r4
 8007c2e:	d10b      	bne.n	8007c48 <_free_r+0x78>
 8007c30:	6824      	ldr	r4, [r4, #0]
 8007c32:	4421      	add	r1, r4
 8007c34:	1854      	adds	r4, r2, r1
 8007c36:	42a3      	cmp	r3, r4
 8007c38:	6011      	str	r1, [r2, #0]
 8007c3a:	d1dd      	bne.n	8007bf8 <_free_r+0x28>
 8007c3c:	681c      	ldr	r4, [r3, #0]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	6053      	str	r3, [r2, #4]
 8007c42:	4421      	add	r1, r4
 8007c44:	6011      	str	r1, [r2, #0]
 8007c46:	e7d7      	b.n	8007bf8 <_free_r+0x28>
 8007c48:	d902      	bls.n	8007c50 <_free_r+0x80>
 8007c4a:	230c      	movs	r3, #12
 8007c4c:	6003      	str	r3, [r0, #0]
 8007c4e:	e7d3      	b.n	8007bf8 <_free_r+0x28>
 8007c50:	6825      	ldr	r5, [r4, #0]
 8007c52:	1961      	adds	r1, r4, r5
 8007c54:	428b      	cmp	r3, r1
 8007c56:	bf04      	itt	eq
 8007c58:	6819      	ldreq	r1, [r3, #0]
 8007c5a:	685b      	ldreq	r3, [r3, #4]
 8007c5c:	6063      	str	r3, [r4, #4]
 8007c5e:	bf04      	itt	eq
 8007c60:	1949      	addeq	r1, r1, r5
 8007c62:	6021      	streq	r1, [r4, #0]
 8007c64:	6054      	str	r4, [r2, #4]
 8007c66:	e7c7      	b.n	8007bf8 <_free_r+0x28>
 8007c68:	b003      	add	sp, #12
 8007c6a:	bd30      	pop	{r4, r5, pc}
 8007c6c:	20012df8 	.word	0x20012df8

08007c70 <_malloc_r>:
 8007c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c72:	1ccd      	adds	r5, r1, #3
 8007c74:	f025 0503 	bic.w	r5, r5, #3
 8007c78:	3508      	adds	r5, #8
 8007c7a:	2d0c      	cmp	r5, #12
 8007c7c:	bf38      	it	cc
 8007c7e:	250c      	movcc	r5, #12
 8007c80:	2d00      	cmp	r5, #0
 8007c82:	4606      	mov	r6, r0
 8007c84:	db01      	blt.n	8007c8a <_malloc_r+0x1a>
 8007c86:	42a9      	cmp	r1, r5
 8007c88:	d903      	bls.n	8007c92 <_malloc_r+0x22>
 8007c8a:	230c      	movs	r3, #12
 8007c8c:	6033      	str	r3, [r6, #0]
 8007c8e:	2000      	movs	r0, #0
 8007c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c92:	f000 f87d 	bl	8007d90 <__malloc_lock>
 8007c96:	4921      	ldr	r1, [pc, #132]	; (8007d1c <_malloc_r+0xac>)
 8007c98:	680a      	ldr	r2, [r1, #0]
 8007c9a:	4614      	mov	r4, r2
 8007c9c:	b99c      	cbnz	r4, 8007cc6 <_malloc_r+0x56>
 8007c9e:	4f20      	ldr	r7, [pc, #128]	; (8007d20 <_malloc_r+0xb0>)
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	b923      	cbnz	r3, 8007cae <_malloc_r+0x3e>
 8007ca4:	4621      	mov	r1, r4
 8007ca6:	4630      	mov	r0, r6
 8007ca8:	f000 f862 	bl	8007d70 <_sbrk_r>
 8007cac:	6038      	str	r0, [r7, #0]
 8007cae:	4629      	mov	r1, r5
 8007cb0:	4630      	mov	r0, r6
 8007cb2:	f000 f85d 	bl	8007d70 <_sbrk_r>
 8007cb6:	1c43      	adds	r3, r0, #1
 8007cb8:	d123      	bne.n	8007d02 <_malloc_r+0x92>
 8007cba:	230c      	movs	r3, #12
 8007cbc:	6033      	str	r3, [r6, #0]
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	f000 f86c 	bl	8007d9c <__malloc_unlock>
 8007cc4:	e7e3      	b.n	8007c8e <_malloc_r+0x1e>
 8007cc6:	6823      	ldr	r3, [r4, #0]
 8007cc8:	1b5b      	subs	r3, r3, r5
 8007cca:	d417      	bmi.n	8007cfc <_malloc_r+0x8c>
 8007ccc:	2b0b      	cmp	r3, #11
 8007cce:	d903      	bls.n	8007cd8 <_malloc_r+0x68>
 8007cd0:	6023      	str	r3, [r4, #0]
 8007cd2:	441c      	add	r4, r3
 8007cd4:	6025      	str	r5, [r4, #0]
 8007cd6:	e004      	b.n	8007ce2 <_malloc_r+0x72>
 8007cd8:	6863      	ldr	r3, [r4, #4]
 8007cda:	42a2      	cmp	r2, r4
 8007cdc:	bf0c      	ite	eq
 8007cde:	600b      	streq	r3, [r1, #0]
 8007ce0:	6053      	strne	r3, [r2, #4]
 8007ce2:	4630      	mov	r0, r6
 8007ce4:	f000 f85a 	bl	8007d9c <__malloc_unlock>
 8007ce8:	f104 000b 	add.w	r0, r4, #11
 8007cec:	1d23      	adds	r3, r4, #4
 8007cee:	f020 0007 	bic.w	r0, r0, #7
 8007cf2:	1ac2      	subs	r2, r0, r3
 8007cf4:	d0cc      	beq.n	8007c90 <_malloc_r+0x20>
 8007cf6:	1a1b      	subs	r3, r3, r0
 8007cf8:	50a3      	str	r3, [r4, r2]
 8007cfa:	e7c9      	b.n	8007c90 <_malloc_r+0x20>
 8007cfc:	4622      	mov	r2, r4
 8007cfe:	6864      	ldr	r4, [r4, #4]
 8007d00:	e7cc      	b.n	8007c9c <_malloc_r+0x2c>
 8007d02:	1cc4      	adds	r4, r0, #3
 8007d04:	f024 0403 	bic.w	r4, r4, #3
 8007d08:	42a0      	cmp	r0, r4
 8007d0a:	d0e3      	beq.n	8007cd4 <_malloc_r+0x64>
 8007d0c:	1a21      	subs	r1, r4, r0
 8007d0e:	4630      	mov	r0, r6
 8007d10:	f000 f82e 	bl	8007d70 <_sbrk_r>
 8007d14:	3001      	adds	r0, #1
 8007d16:	d1dd      	bne.n	8007cd4 <_malloc_r+0x64>
 8007d18:	e7cf      	b.n	8007cba <_malloc_r+0x4a>
 8007d1a:	bf00      	nop
 8007d1c:	20012df8 	.word	0x20012df8
 8007d20:	20012dfc 	.word	0x20012dfc

08007d24 <_realloc_r>:
 8007d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d26:	4607      	mov	r7, r0
 8007d28:	4614      	mov	r4, r2
 8007d2a:	460e      	mov	r6, r1
 8007d2c:	b921      	cbnz	r1, 8007d38 <_realloc_r+0x14>
 8007d2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007d32:	4611      	mov	r1, r2
 8007d34:	f7ff bf9c 	b.w	8007c70 <_malloc_r>
 8007d38:	b922      	cbnz	r2, 8007d44 <_realloc_r+0x20>
 8007d3a:	f7ff ff49 	bl	8007bd0 <_free_r>
 8007d3e:	4625      	mov	r5, r4
 8007d40:	4628      	mov	r0, r5
 8007d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d44:	f000 f830 	bl	8007da8 <_malloc_usable_size_r>
 8007d48:	42a0      	cmp	r0, r4
 8007d4a:	d20f      	bcs.n	8007d6c <_realloc_r+0x48>
 8007d4c:	4621      	mov	r1, r4
 8007d4e:	4638      	mov	r0, r7
 8007d50:	f7ff ff8e 	bl	8007c70 <_malloc_r>
 8007d54:	4605      	mov	r5, r0
 8007d56:	2800      	cmp	r0, #0
 8007d58:	d0f2      	beq.n	8007d40 <_realloc_r+0x1c>
 8007d5a:	4631      	mov	r1, r6
 8007d5c:	4622      	mov	r2, r4
 8007d5e:	f7ff fbf7 	bl	8007550 <memcpy>
 8007d62:	4631      	mov	r1, r6
 8007d64:	4638      	mov	r0, r7
 8007d66:	f7ff ff33 	bl	8007bd0 <_free_r>
 8007d6a:	e7e9      	b.n	8007d40 <_realloc_r+0x1c>
 8007d6c:	4635      	mov	r5, r6
 8007d6e:	e7e7      	b.n	8007d40 <_realloc_r+0x1c>

08007d70 <_sbrk_r>:
 8007d70:	b538      	push	{r3, r4, r5, lr}
 8007d72:	4d06      	ldr	r5, [pc, #24]	; (8007d8c <_sbrk_r+0x1c>)
 8007d74:	2300      	movs	r3, #0
 8007d76:	4604      	mov	r4, r0
 8007d78:	4608      	mov	r0, r1
 8007d7a:	602b      	str	r3, [r5, #0]
 8007d7c:	f7f9 ff3e 	bl	8001bfc <_sbrk>
 8007d80:	1c43      	adds	r3, r0, #1
 8007d82:	d102      	bne.n	8007d8a <_sbrk_r+0x1a>
 8007d84:	682b      	ldr	r3, [r5, #0]
 8007d86:	b103      	cbz	r3, 8007d8a <_sbrk_r+0x1a>
 8007d88:	6023      	str	r3, [r4, #0]
 8007d8a:	bd38      	pop	{r3, r4, r5, pc}
 8007d8c:	20012f44 	.word	0x20012f44

08007d90 <__malloc_lock>:
 8007d90:	4801      	ldr	r0, [pc, #4]	; (8007d98 <__malloc_lock+0x8>)
 8007d92:	f000 b811 	b.w	8007db8 <__retarget_lock_acquire_recursive>
 8007d96:	bf00      	nop
 8007d98:	20012f4c 	.word	0x20012f4c

08007d9c <__malloc_unlock>:
 8007d9c:	4801      	ldr	r0, [pc, #4]	; (8007da4 <__malloc_unlock+0x8>)
 8007d9e:	f000 b80c 	b.w	8007dba <__retarget_lock_release_recursive>
 8007da2:	bf00      	nop
 8007da4:	20012f4c 	.word	0x20012f4c

08007da8 <_malloc_usable_size_r>:
 8007da8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dac:	1f18      	subs	r0, r3, #4
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	bfbc      	itt	lt
 8007db2:	580b      	ldrlt	r3, [r1, r0]
 8007db4:	18c0      	addlt	r0, r0, r3
 8007db6:	4770      	bx	lr

08007db8 <__retarget_lock_acquire_recursive>:
 8007db8:	4770      	bx	lr

08007dba <__retarget_lock_release_recursive>:
 8007dba:	4770      	bx	lr

08007dbc <_init>:
 8007dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dbe:	bf00      	nop
 8007dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dc2:	bc08      	pop	{r3}
 8007dc4:	469e      	mov	lr, r3
 8007dc6:	4770      	bx	lr

08007dc8 <_fini>:
 8007dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dca:	bf00      	nop
 8007dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dce:	bc08      	pop	{r3}
 8007dd0:	469e      	mov	lr, r3
 8007dd2:	4770      	bx	lr
